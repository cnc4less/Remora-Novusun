
Remora-EC500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a5d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b3c  0801a764  0801a764  0002a764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e2a0  0801e2a0  000300d8  2**0
                  CONTENTS
  4 .ARM          00000008  0801e2a0  0801e2a0  0002e2a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e2a8  0801e2a8  000300d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801e2a8  0801e2a8  0002e2a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801e2b0  0801e2b0  0002e2b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0801e2b8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300d8  2**0
                  CONTENTS
 10 .bss          00006c7c  200000d8  200000d8  000300d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20006d54  20006d54  000300d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0008e990  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000d453  00000000  00000000  000bea98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000029b0  00000000  00000000  000cbef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000028a8  00000000  00000000  000ce8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000392f9  00000000  00000000  000d1148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00046ce3  00000000  00000000  0010a441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100a30  00000000  00000000  00151124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00251b54  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d1c4  00000000  00000000  00251ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a74c 	.word	0x0801a74c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	0801a74c 	.word	0x0801a74c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strcmp>:
 8000270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000278:	2a01      	cmp	r2, #1
 800027a:	bf28      	it	cs
 800027c:	429a      	cmpcs	r2, r3
 800027e:	d0f7      	beq.n	8000270 <strcmp>
 8000280:	1ad0      	subs	r0, r2, r3
 8000282:	4770      	bx	lr

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2iz>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b48:	d215      	bcs.n	8000b76 <__aeabi_d2iz+0x36>
 8000b4a:	d511      	bpl.n	8000b70 <__aeabi_d2iz+0x30>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d912      	bls.n	8000b7c <__aeabi_d2iz+0x3c>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b66:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6a:	bf18      	it	ne
 8000b6c:	4240      	negne	r0, r0
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d105      	bne.n	8000b88 <__aeabi_d2iz+0x48>
 8000b7c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	bf08      	it	eq
 8000b82:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_d2uiz>:
 8000b90:	004a      	lsls	r2, r1, #1
 8000b92:	d211      	bcs.n	8000bb8 <__aeabi_d2uiz+0x28>
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d211      	bcs.n	8000bbe <__aeabi_d2uiz+0x2e>
 8000b9a:	d50d      	bpl.n	8000bb8 <__aeabi_d2uiz+0x28>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d40e      	bmi.n	8000bc4 <__aeabi_d2uiz+0x34>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d102      	bne.n	8000bca <__aeabi_d2uiz+0x3a>
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	4770      	bx	lr
 8000bca:	f04f 0000 	mov.w	r0, #0
 8000bce:	4770      	bx	lr

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b96e 	b.w	8000ec4 <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	4604      	mov	r4, r0
 8000c08:	468c      	mov	ip, r1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f040 8083 	bne.w	8000d16 <__udivmoddi4+0x116>
 8000c10:	428a      	cmp	r2, r1
 8000c12:	4617      	mov	r7, r2
 8000c14:	d947      	bls.n	8000ca6 <__udivmoddi4+0xa6>
 8000c16:	fab2 f282 	clz	r2, r2
 8000c1a:	b142      	cbz	r2, 8000c2e <__udivmoddi4+0x2e>
 8000c1c:	f1c2 0020 	rsb	r0, r2, #32
 8000c20:	fa24 f000 	lsr.w	r0, r4, r0
 8000c24:	4091      	lsls	r1, r2
 8000c26:	4097      	lsls	r7, r2
 8000c28:	ea40 0c01 	orr.w	ip, r0, r1
 8000c2c:	4094      	lsls	r4, r2
 8000c2e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fbbc f6f8 	udiv	r6, ip, r8
 8000c38:	fa1f fe87 	uxth.w	lr, r7
 8000c3c:	fb08 c116 	mls	r1, r8, r6, ip
 8000c40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c44:	fb06 f10e 	mul.w	r1, r6, lr
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	d909      	bls.n	8000c60 <__udivmoddi4+0x60>
 8000c4c:	18fb      	adds	r3, r7, r3
 8000c4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c52:	f080 8119 	bcs.w	8000e88 <__udivmoddi4+0x288>
 8000c56:	4299      	cmp	r1, r3
 8000c58:	f240 8116 	bls.w	8000e88 <__udivmoddi4+0x288>
 8000c5c:	3e02      	subs	r6, #2
 8000c5e:	443b      	add	r3, r7
 8000c60:	1a5b      	subs	r3, r3, r1
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c68:	fb08 3310 	mls	r3, r8, r0, r3
 8000c6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c74:	45a6      	cmp	lr, r4
 8000c76:	d909      	bls.n	8000c8c <__udivmoddi4+0x8c>
 8000c78:	193c      	adds	r4, r7, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	f080 8105 	bcs.w	8000e8c <__udivmoddi4+0x28c>
 8000c82:	45a6      	cmp	lr, r4
 8000c84:	f240 8102 	bls.w	8000e8c <__udivmoddi4+0x28c>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	443c      	add	r4, r7
 8000c8c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c90:	eba4 040e 	sub.w	r4, r4, lr
 8000c94:	2600      	movs	r6, #0
 8000c96:	b11d      	cbz	r5, 8000ca0 <__udivmoddi4+0xa0>
 8000c98:	40d4      	lsrs	r4, r2
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	b902      	cbnz	r2, 8000caa <__udivmoddi4+0xaa>
 8000ca8:	deff      	udf	#255	; 0xff
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	2a00      	cmp	r2, #0
 8000cb0:	d150      	bne.n	8000d54 <__udivmoddi4+0x154>
 8000cb2:	1bcb      	subs	r3, r1, r7
 8000cb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb8:	fa1f f887 	uxth.w	r8, r7
 8000cbc:	2601      	movs	r6, #1
 8000cbe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cc2:	0c21      	lsrs	r1, r4, #16
 8000cc4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ccc:	fb08 f30c 	mul.w	r3, r8, ip
 8000cd0:	428b      	cmp	r3, r1
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0xe4>
 8000cd4:	1879      	adds	r1, r7, r1
 8000cd6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0xe2>
 8000cdc:	428b      	cmp	r3, r1
 8000cde:	f200 80e9 	bhi.w	8000eb4 <__udivmoddi4+0x2b4>
 8000ce2:	4684      	mov	ip, r0
 8000ce4:	1ac9      	subs	r1, r1, r3
 8000ce6:	b2a3      	uxth	r3, r4
 8000ce8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cec:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cf0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cf4:	fb08 f800 	mul.w	r8, r8, r0
 8000cf8:	45a0      	cmp	r8, r4
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x10c>
 8000cfc:	193c      	adds	r4, r7, r4
 8000cfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x10a>
 8000d04:	45a0      	cmp	r8, r4
 8000d06:	f200 80d9 	bhi.w	8000ebc <__udivmoddi4+0x2bc>
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	eba4 0408 	sub.w	r4, r4, r8
 8000d10:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d14:	e7bf      	b.n	8000c96 <__udivmoddi4+0x96>
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d909      	bls.n	8000d2e <__udivmoddi4+0x12e>
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	f000 80b1 	beq.w	8000e82 <__udivmoddi4+0x282>
 8000d20:	2600      	movs	r6, #0
 8000d22:	e9c5 0100 	strd	r0, r1, [r5]
 8000d26:	4630      	mov	r0, r6
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	fab3 f683 	clz	r6, r3
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d14a      	bne.n	8000dcc <__udivmoddi4+0x1cc>
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0x140>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 80b8 	bhi.w	8000eb0 <__udivmoddi4+0x2b0>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb61 0103 	sbc.w	r1, r1, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	468c      	mov	ip, r1
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0a8      	beq.n	8000ca0 <__udivmoddi4+0xa0>
 8000d4e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d52:	e7a5      	b.n	8000ca0 <__udivmoddi4+0xa0>
 8000d54:	f1c2 0320 	rsb	r3, r2, #32
 8000d58:	fa20 f603 	lsr.w	r6, r0, r3
 8000d5c:	4097      	lsls	r7, r2
 8000d5e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d62:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d66:	40d9      	lsrs	r1, r3
 8000d68:	4330      	orrs	r0, r6
 8000d6a:	0c03      	lsrs	r3, r0, #16
 8000d6c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7c:	fb06 f108 	mul.w	r1, r6, r8
 8000d80:	4299      	cmp	r1, r3
 8000d82:	fa04 f402 	lsl.w	r4, r4, r2
 8000d86:	d909      	bls.n	8000d9c <__udivmoddi4+0x19c>
 8000d88:	18fb      	adds	r3, r7, r3
 8000d8a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d8e:	f080 808d 	bcs.w	8000eac <__udivmoddi4+0x2ac>
 8000d92:	4299      	cmp	r1, r3
 8000d94:	f240 808a 	bls.w	8000eac <__udivmoddi4+0x2ac>
 8000d98:	3e02      	subs	r6, #2
 8000d9a:	443b      	add	r3, r7
 8000d9c:	1a5b      	subs	r3, r3, r1
 8000d9e:	b281      	uxth	r1, r0
 8000da0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000da4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dac:	fb00 f308 	mul.w	r3, r0, r8
 8000db0:	428b      	cmp	r3, r1
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x1c4>
 8000db4:	1879      	adds	r1, r7, r1
 8000db6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dba:	d273      	bcs.n	8000ea4 <__udivmoddi4+0x2a4>
 8000dbc:	428b      	cmp	r3, r1
 8000dbe:	d971      	bls.n	8000ea4 <__udivmoddi4+0x2a4>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	4439      	add	r1, r7
 8000dc4:	1acb      	subs	r3, r1, r3
 8000dc6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dca:	e778      	b.n	8000cbe <__udivmoddi4+0xbe>
 8000dcc:	f1c6 0c20 	rsb	ip, r6, #32
 8000dd0:	fa03 f406 	lsl.w	r4, r3, r6
 8000dd4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd8:	431c      	orrs	r4, r3
 8000dda:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dde:	fa01 f306 	lsl.w	r3, r1, r6
 8000de2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000de6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dea:	431f      	orrs	r7, r3
 8000dec:	0c3b      	lsrs	r3, r7, #16
 8000dee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000df2:	fa1f f884 	uxth.w	r8, r4
 8000df6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dfa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dfe:	fb09 fa08 	mul.w	sl, r9, r8
 8000e02:	458a      	cmp	sl, r1
 8000e04:	fa02 f206 	lsl.w	r2, r2, r6
 8000e08:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x220>
 8000e0e:	1861      	adds	r1, r4, r1
 8000e10:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e14:	d248      	bcs.n	8000ea8 <__udivmoddi4+0x2a8>
 8000e16:	458a      	cmp	sl, r1
 8000e18:	d946      	bls.n	8000ea8 <__udivmoddi4+0x2a8>
 8000e1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e1e:	4421      	add	r1, r4
 8000e20:	eba1 010a 	sub.w	r1, r1, sl
 8000e24:	b2bf      	uxth	r7, r7
 8000e26:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e2a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e2e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e32:	fb00 f808 	mul.w	r8, r0, r8
 8000e36:	45b8      	cmp	r8, r7
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x24a>
 8000e3a:	19e7      	adds	r7, r4, r7
 8000e3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e40:	d22e      	bcs.n	8000ea0 <__udivmoddi4+0x2a0>
 8000e42:	45b8      	cmp	r8, r7
 8000e44:	d92c      	bls.n	8000ea0 <__udivmoddi4+0x2a0>
 8000e46:	3802      	subs	r0, #2
 8000e48:	4427      	add	r7, r4
 8000e4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e4e:	eba7 0708 	sub.w	r7, r7, r8
 8000e52:	fba0 8902 	umull	r8, r9, r0, r2
 8000e56:	454f      	cmp	r7, r9
 8000e58:	46c6      	mov	lr, r8
 8000e5a:	4649      	mov	r1, r9
 8000e5c:	d31a      	bcc.n	8000e94 <__udivmoddi4+0x294>
 8000e5e:	d017      	beq.n	8000e90 <__udivmoddi4+0x290>
 8000e60:	b15d      	cbz	r5, 8000e7a <__udivmoddi4+0x27a>
 8000e62:	ebb3 020e 	subs.w	r2, r3, lr
 8000e66:	eb67 0701 	sbc.w	r7, r7, r1
 8000e6a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e6e:	40f2      	lsrs	r2, r6
 8000e70:	ea4c 0202 	orr.w	r2, ip, r2
 8000e74:	40f7      	lsrs	r7, r6
 8000e76:	e9c5 2700 	strd	r2, r7, [r5]
 8000e7a:	2600      	movs	r6, #0
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	462e      	mov	r6, r5
 8000e84:	4628      	mov	r0, r5
 8000e86:	e70b      	b.n	8000ca0 <__udivmoddi4+0xa0>
 8000e88:	4606      	mov	r6, r0
 8000e8a:	e6e9      	b.n	8000c60 <__udivmoddi4+0x60>
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	e6fd      	b.n	8000c8c <__udivmoddi4+0x8c>
 8000e90:	4543      	cmp	r3, r8
 8000e92:	d2e5      	bcs.n	8000e60 <__udivmoddi4+0x260>
 8000e94:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e98:	eb69 0104 	sbc.w	r1, r9, r4
 8000e9c:	3801      	subs	r0, #1
 8000e9e:	e7df      	b.n	8000e60 <__udivmoddi4+0x260>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e7d2      	b.n	8000e4a <__udivmoddi4+0x24a>
 8000ea4:	4660      	mov	r0, ip
 8000ea6:	e78d      	b.n	8000dc4 <__udivmoddi4+0x1c4>
 8000ea8:	4681      	mov	r9, r0
 8000eaa:	e7b9      	b.n	8000e20 <__udivmoddi4+0x220>
 8000eac:	4666      	mov	r6, ip
 8000eae:	e775      	b.n	8000d9c <__udivmoddi4+0x19c>
 8000eb0:	4630      	mov	r0, r6
 8000eb2:	e74a      	b.n	8000d4a <__udivmoddi4+0x14a>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	4439      	add	r1, r7
 8000eba:	e713      	b.n	8000ce4 <__udivmoddi4+0xe4>
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	443c      	add	r4, r7
 8000ec0:	e724      	b.n	8000d0c <__udivmoddi4+0x10c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>:
#include <cstdio>
#include <cerrno>
#include <string>


Pin::Pin(std::string portAndPin, int dir) :
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
    portAndPin(portAndPin),
    dir(dir)
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	68b9      	ldr	r1, [r7, #8]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f018 f92f 	bl	801913c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	761a      	strb	r2, [r3, #24]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	3330      	adds	r3, #48	; 0x30
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
 8000ef4:	611a      	str	r2, [r3, #16]
{
    // Set direction
    if (this->dir == INPUT)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	7e1b      	ldrb	r3, [r3, #24]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d106      	bne.n	8000f0c <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi+0x44>
    {
        this->mode = GPIO_MODE_INPUT;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	2200      	movs	r2, #0
 8000f02:	621a      	str	r2, [r3, #32]
        this->pull = GPIO_NOPULL;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2200      	movs	r2, #0
 8000f08:	625a      	str	r2, [r3, #36]	; 0x24
 8000f0a:	e005      	b.n	8000f18 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi+0x50>
    }
    else
    {
        this->mode = GPIO_MODE_OUTPUT_PP;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	621a      	str	r2, [r3, #32]
        this->pull = GPIO_NOPULL;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2200      	movs	r2, #0
 8000f16:	625a      	str	r2, [r3, #36]	; 0x24
    }

    this->configPin();
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f000 f863 	bl	8000fe4 <_ZN3Pin9configPinEv>
}
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>:

Pin::Pin(std::string portAndPin, int dir, int modifier) :
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	603b      	str	r3, [r7, #0]
    portAndPin(portAndPin),
    dir(dir),
    modifier(modifier)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f018 f8fe 	bl	801913c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	761a      	strb	r2, [r3, #24]
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	765a      	strb	r2, [r3, #25]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	3330      	adds	r3, #48	; 0x30
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
{
    // Set direction
    if (this->dir == INPUT)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	7e1b      	ldrb	r3, [r3, #24]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d128      	bne.n	8000fba <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0x92>
    {
        this->mode = GPIO_MODE_INPUT;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	621a      	str	r2, [r3, #32]

        // Set pin  modifier
        switch(this->modifier)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	7e5b      	ldrb	r3, [r3, #25]
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	d827      	bhi.n	8000fc6 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0x9e>
 8000f76:	a201      	add	r2, pc, #4	; (adr r2, 8000f7c <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0x54>)
 8000f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f7c:	08000fad 	.word	0x08000fad
 8000f80:	08000fc7 	.word	0x08000fc7
 8000f84:	08000f91 	.word	0x08000f91
 8000f88:	08000f9f 	.word	0x08000f9f
 8000f8c:	08000fad 	.word	0x08000fad
        {
            case PULLUP:
                printf("  Setting pin as Pull Up\n");
 8000f90:	4811      	ldr	r0, [pc, #68]	; (8000fd8 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0xb0>)
 8000f92:	f018 fae1 	bl	8019558 <puts>
                this->pull = GPIO_PULLUP;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24
                break;
 8000f9c:	e013      	b.n	8000fc6 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0x9e>
            case PULLDOWN:
                printf("  Setting pin as Pull Down\n");
 8000f9e:	480f      	ldr	r0, [pc, #60]	; (8000fdc <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0xb4>)
 8000fa0:	f018 fada 	bl	8019558 <puts>
                this->pull = GPIO_PULLDOWN;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	625a      	str	r2, [r3, #36]	; 0x24
                break;
 8000faa:	e00c      	b.n	8000fc6 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0x9e>
            case NONE:
            case PULLNONE:
                printf("  Setting pin as No Pull\n");
 8000fac:	480c      	ldr	r0, [pc, #48]	; (8000fe0 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0xb8>)
 8000fae:	f018 fad3 	bl	8019558 <puts>
                this->pull = GPIO_NOPULL;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	625a      	str	r2, [r3, #36]	; 0x24
                break;
 8000fb8:	e005      	b.n	8000fc6 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii+0x9e>
        }
    }
    else
    {
        this->mode = GPIO_MODE_OUTPUT_PP;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	621a      	str	r2, [r3, #32]
        this->pull = GPIO_NOPULL;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    this->configPin();
 8000fc6:	68f8      	ldr	r0, [r7, #12]
 8000fc8:	f000 f80c 	bl	8000fe4 <_ZN3Pin9configPinEv>
}
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	0801a764 	.word	0x0801a764
 8000fdc:	0801a780 	.word	0x0801a780
 8000fe0:	0801a79c 	.word	0x0801a79c

08000fe4 <_ZN3Pin9configPinEv>:

void Pin::configPin()
{
 8000fe4:	b5b0      	push	{r4, r5, r7, lr}
 8000fe6:	b094      	sub	sp, #80	; 0x50
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
    printf("Creating Pin @\n");
 8000fec:	4883      	ldr	r0, [pc, #524]	; (80011fc <_ZN3Pin9configPinEv+0x218>)
 8000fee:	f018 fab3 	bl	8019558 <puts>

    //x can be (A..H) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
    GPIO_TypeDef* gpios[8] ={GPIOA,GPIOB,GPIOC,GPIOD,GPIOE,GPIOF,GPIOG,GPIOH};
 8000ff2:	4b83      	ldr	r3, [pc, #524]	; (8001200 <_ZN3Pin9configPinEv+0x21c>)
 8000ff4:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000ff8:	461d      	mov	r5, r3
 8000ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ffe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001002:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    

    if (this->portAndPin[0] == 'P') // PXXX e.g.PA_2 PC_15
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f017 ffef 	bl	8018fee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001010:	4603      	mov	r3, r0
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b50      	cmp	r3, #80	; 0x50
 8001016:	bf0c      	ite	eq
 8001018:	2301      	moveq	r3, #1
 800101a:	2300      	movne	r3, #0
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	d06a      	beq.n	80010f8 <_ZN3Pin9configPinEv+0x114>
    {  
        this->portIndex     = this->portAndPin[1] - 'A';
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2101      	movs	r1, #1
 8001026:	4618      	mov	r0, r3
 8001028:	f017 ffe1 	bl	8018fee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800102c:	4603      	mov	r3, r0
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	3b41      	subs	r3, #65	; 0x41
 8001032:	b2da      	uxtb	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	769a      	strb	r2, [r3, #26]
        this->pinNumber     = this->portAndPin[3] - '0';       
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2103      	movs	r1, #3
 800103c:	4618      	mov	r0, r3
 800103e:	f017 ffd6 	bl	8018fee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001042:	4603      	mov	r3, r0
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	b29b      	uxth	r3, r3
 8001048:	3b30      	subs	r3, #48	; 0x30
 800104a:	b29a      	uxth	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	839a      	strh	r2, [r3, #28]
        uint16_t pin2       = this->portAndPin[4] - '0';       
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2104      	movs	r1, #4
 8001054:	4618      	mov	r0, r3
 8001056:	f017 ffca 	bl	8018fee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800105a:	4603      	mov	r3, r0
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	b29b      	uxth	r3, r3
 8001060:	3b30      	subs	r3, #48	; 0x30
 8001062:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

        if (pin2 <= 8) 
 8001066:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800106a:	2b08      	cmp	r3, #8
 800106c:	d80c      	bhi.n	8001088 <_ZN3Pin9configPinEv+0xa4>
        {
            this->pinNumber = this->pinNumber * 10 + pin2;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	8b9b      	ldrh	r3, [r3, #28]
 8001072:	461a      	mov	r2, r3
 8001074:	0092      	lsls	r2, r2, #2
 8001076:	4413      	add	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	b29a      	uxth	r2, r3
 800107c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001080:	4413      	add	r3, r2
 8001082:	b29a      	uxth	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	839a      	strh	r2, [r3, #28]
        }

        this->pin = 1 << this->pinNumber; // this is equivalent to GPIO_PIN_x definition
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	8b9b      	ldrh	r3, [r3, #28]
 800108c:	461a      	mov	r2, r3
 800108e:	2301      	movs	r3, #1
 8001090:	4093      	lsls	r3, r2
 8001092:	b29a      	uxth	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	83da      	strh	r2, [r3, #30]
    {
        printf("  Invalid port and pin definition\n");
        return;
    }    

    printf("  port = GPIO%c\n", char('A' + this->portIndex));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	7e9b      	ldrb	r3, [r3, #26]
 800109c:	3341      	adds	r3, #65	; 0x41
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	4619      	mov	r1, r3
 80010a2:	4858      	ldr	r0, [pc, #352]	; (8001204 <_ZN3Pin9configPinEv+0x220>)
 80010a4:	f018 f9d2 	bl	801944c <iprintf>
    printf("  pin = %d\n", this->pinNumber);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	8b9b      	ldrh	r3, [r3, #28]
 80010ac:	4619      	mov	r1, r3
 80010ae:	4856      	ldr	r0, [pc, #344]	; (8001208 <_ZN3Pin9configPinEv+0x224>)
 80010b0:	f018 f9cc 	bl	801944c <iprintf>

    // translate port index into something useful
    this->GPIOx = gpios[this->portIndex];
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7e9b      	ldrb	r3, [r3, #26]
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80010be:	4413      	add	r3, r2
 80010c0:	f853 2c24 	ldr.w	r2, [r3, #-36]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	62da      	str	r2, [r3, #44]	; 0x2c

    // enable the peripheral clock
    switch (portIndex){
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	7e9b      	ldrb	r3, [r3, #26]
 80010cc:	2b07      	cmp	r3, #7
 80010ce:	f200 808f 	bhi.w	80011f0 <_ZN3Pin9configPinEv+0x20c>
 80010d2:	a201      	add	r2, pc, #4	; (adr r2, 80010d8 <_ZN3Pin9configPinEv+0xf4>)
 80010d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d8:	08001101 	.word	0x08001101
 80010dc:	0800111f 	.word	0x0800111f
 80010e0:	0800113d 	.word	0x0800113d
 80010e4:	0800115b 	.word	0x0800115b
 80010e8:	08001179 	.word	0x08001179
 80010ec:	08001197 	.word	0x08001197
 80010f0:	080011b5 	.word	0x080011b5
 80010f4:	080011d3 	.word	0x080011d3
        printf("  Invalid port and pin definition\n");
 80010f8:	4844      	ldr	r0, [pc, #272]	; (800120c <_ZN3Pin9configPinEv+0x228>)
 80010fa:	f018 fa2d 	bl	8019558 <puts>
 80010fe:	e07a      	b.n	80011f6 <_ZN3Pin9configPinEv+0x212>
        case 0:
            __HAL_RCC_GPIOA_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28
 8001104:	4b42      	ldr	r3, [pc, #264]	; (8001210 <_ZN3Pin9configPinEv+0x22c>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001108:	4a41      	ldr	r2, [pc, #260]	; (8001210 <_ZN3Pin9configPinEv+0x22c>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6313      	str	r3, [r2, #48]	; 0x30
 8001110:	4b3f      	ldr	r3, [pc, #252]	; (8001210 <_ZN3Pin9configPinEv+0x22c>)
 8001112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
 800111a:	6abb      	ldr	r3, [r7, #40]	; 0x28
            break;
 800111c:	e068      	b.n	80011f0 <_ZN3Pin9configPinEv+0x20c>

        case 1:
            __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
 8001122:	4b3b      	ldr	r3, [pc, #236]	; (8001210 <_ZN3Pin9configPinEv+0x22c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a3a      	ldr	r2, [pc, #232]	; (8001210 <_ZN3Pin9configPinEv+0x22c>)
 8001128:	f043 0302 	orr.w	r3, r3, #2
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b38      	ldr	r3, [pc, #224]	; (8001210 <_ZN3Pin9configPinEv+0x22c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
 8001138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
            break;
 800113a:	e059      	b.n	80011f0 <_ZN3Pin9configPinEv+0x20c>

        case 2:
            __HAL_RCC_GPIOC_CLK_ENABLE();
 800113c:	2300      	movs	r3, #0
 800113e:	623b      	str	r3, [r7, #32]
 8001140:	4b33      	ldr	r3, [pc, #204]	; (8001210 <_ZN3Pin9configPinEv+0x22c>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001144:	4a32      	ldr	r2, [pc, #200]	; (8001210 <_ZN3Pin9configPinEv+0x22c>)
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	6313      	str	r3, [r2, #48]	; 0x30
 800114c:	4b30      	ldr	r3, [pc, #192]	; (8001210 <_ZN3Pin9configPinEv+0x22c>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	623b      	str	r3, [r7, #32]
 8001156:	6a3b      	ldr	r3, [r7, #32]
            break;
 8001158:	e04a      	b.n	80011f0 <_ZN3Pin9configPinEv+0x20c>
        
        case 3:
            __HAL_RCC_GPIOD_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
 800115e:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <_ZN3Pin9configPinEv+0x22c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a2b      	ldr	r2, [pc, #172]	; (8001210 <_ZN3Pin9configPinEv+0x22c>)
 8001164:	f043 0308 	orr.w	r3, r3, #8
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b29      	ldr	r3, [pc, #164]	; (8001210 <_ZN3Pin9configPinEv+0x22c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	61fb      	str	r3, [r7, #28]
 8001174:	69fb      	ldr	r3, [r7, #28]
            break;
 8001176:	e03b      	b.n	80011f0 <_ZN3Pin9configPinEv+0x20c>

        case 4:
            __HAL_RCC_GPIOE_CLK_ENABLE();
 8001178:	2300      	movs	r3, #0
 800117a:	61bb      	str	r3, [r7, #24]
 800117c:	4b24      	ldr	r3, [pc, #144]	; (8001210 <_ZN3Pin9configPinEv+0x22c>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	4a23      	ldr	r2, [pc, #140]	; (8001210 <_ZN3Pin9configPinEv+0x22c>)
 8001182:	f043 0310 	orr.w	r3, r3, #16
 8001186:	6313      	str	r3, [r2, #48]	; 0x30
 8001188:	4b21      	ldr	r3, [pc, #132]	; (8001210 <_ZN3Pin9configPinEv+0x22c>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118c:	f003 0310 	and.w	r3, r3, #16
 8001190:	61bb      	str	r3, [r7, #24]
 8001192:	69bb      	ldr	r3, [r7, #24]
            break;
 8001194:	e02c      	b.n	80011f0 <_ZN3Pin9configPinEv+0x20c>

        case 5:
            __HAL_RCC_GPIOF_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <_ZN3Pin9configPinEv+0x22c>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a1c      	ldr	r2, [pc, #112]	; (8001210 <_ZN3Pin9configPinEv+0x22c>)
 80011a0:	f043 0320 	orr.w	r3, r3, #32
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <_ZN3Pin9configPinEv+0x22c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0320 	and.w	r3, r3, #32
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	697b      	ldr	r3, [r7, #20]
            break;
 80011b2:	e01d      	b.n	80011f0 <_ZN3Pin9configPinEv+0x20c>

        case 6:
            __HAL_RCC_GPIOG_CLK_ENABLE();
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <_ZN3Pin9configPinEv+0x22c>)
 80011ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011bc:	4a14      	ldr	r2, [pc, #80]	; (8001210 <_ZN3Pin9configPinEv+0x22c>)
 80011be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c2:	6313      	str	r3, [r2, #48]	; 0x30
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <_ZN3Pin9configPinEv+0x22c>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	693b      	ldr	r3, [r7, #16]
            break;
 80011d0:	e00e      	b.n	80011f0 <_ZN3Pin9configPinEv+0x20c>

        case 7:
            __HAL_RCC_GPIOH_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <_ZN3Pin9configPinEv+0x22c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a0d      	ldr	r2, [pc, #52]	; (8001210 <_ZN3Pin9configPinEv+0x22c>)
 80011dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <_ZN3Pin9configPinEv+0x22c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
            break;
 80011ee:	bf00      	nop
    }

    this->initPin();
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f80f 	bl	8001214 <_ZN3Pin7initPinEv>
}
 80011f6:	3750      	adds	r7, #80	; 0x50
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bdb0      	pop	{r4, r5, r7, pc}
 80011fc:	0801a7b8 	.word	0x0801a7b8
 8001200:	0801a80c 	.word	0x0801a80c
 8001204:	0801a7ec 	.word	0x0801a7ec
 8001208:	0801a800 	.word	0x0801a800
 800120c:	0801a7c8 	.word	0x0801a7c8
 8001210:	40023800 	.word	0x40023800

08001214 <_ZN3Pin7initPinEv>:


void Pin::initPin()
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
    // Configure GPIO pin Output Level
    HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	8bdb      	ldrh	r3, [r3, #30]
 8001224:	2200      	movs	r2, #0
 8001226:	4619      	mov	r1, r3
 8001228:	f009 fb46 	bl	800a8b8 <HAL_GPIO_WritePin>

    // Configure the GPIO pin
    this->GPIO_InitStruct.Pin = this->pin;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	8bdb      	ldrh	r3, [r3, #30]
 8001230:	461a      	mov	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	631a      	str	r2, [r3, #48]	; 0x30
    this->GPIO_InitStruct.Mode = this->mode;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a1a      	ldr	r2, [r3, #32]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	635a      	str	r2, [r3, #52]	; 0x34
    this->GPIO_InitStruct.Pull = this->pull;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	639a      	str	r2, [r3, #56]	; 0x38
    this->GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2202      	movs	r2, #2
 800124a:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_Init(this->GPIOx, &this->GPIO_InitStruct);  
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3330      	adds	r3, #48	; 0x30
 8001254:	4619      	mov	r1, r3
 8001256:	4610      	mov	r0, r2
 8001258:	f009 f97a 	bl	800a550 <HAL_GPIO_Init>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <_ZL9GetSectorm>:
/* Private function prototypes -----------------------------------------------*/

/* Private functions ---------------------------------------------------------*/

static uint32_t GetSector(uint32_t Address)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a44      	ldr	r2, [pc, #272]	; (8001384 <_ZL9GetSectorm+0x120>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d806      	bhi.n	8001286 <_ZL9GetSectorm+0x22>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800127e:	d302      	bcc.n	8001286 <_ZL9GetSectorm+0x22>
  {
    sector = FLASH_SECTOR_0;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	e077      	b.n	8001376 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a3f      	ldr	r2, [pc, #252]	; (8001388 <_ZL9GetSectorm+0x124>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d806      	bhi.n	800129c <_ZL9GetSectorm+0x38>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a3e      	ldr	r2, [pc, #248]	; (800138c <_ZL9GetSectorm+0x128>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d302      	bcc.n	800129c <_ZL9GetSectorm+0x38>
  {
    sector = FLASH_SECTOR_1;
 8001296:	2301      	movs	r3, #1
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	e06c      	b.n	8001376 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a3c      	ldr	r2, [pc, #240]	; (8001390 <_ZL9GetSectorm+0x12c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d806      	bhi.n	80012b2 <_ZL9GetSectorm+0x4e>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a3b      	ldr	r2, [pc, #236]	; (8001394 <_ZL9GetSectorm+0x130>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d302      	bcc.n	80012b2 <_ZL9GetSectorm+0x4e>
  {
    sector = FLASH_SECTOR_2;
 80012ac:	2302      	movs	r3, #2
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	e061      	b.n	8001376 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a38      	ldr	r2, [pc, #224]	; (8001398 <_ZL9GetSectorm+0x134>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d206      	bcs.n	80012c8 <_ZL9GetSectorm+0x64>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a37      	ldr	r2, [pc, #220]	; (800139c <_ZL9GetSectorm+0x138>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d302      	bcc.n	80012c8 <_ZL9GetSectorm+0x64>
  {
    sector = FLASH_SECTOR_3;
 80012c2:	2303      	movs	r3, #3
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	e056      	b.n	8001376 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a35      	ldr	r2, [pc, #212]	; (80013a0 <_ZL9GetSectorm+0x13c>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d206      	bcs.n	80012de <_ZL9GetSectorm+0x7a>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a31      	ldr	r2, [pc, #196]	; (8001398 <_ZL9GetSectorm+0x134>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d902      	bls.n	80012de <_ZL9GetSectorm+0x7a>
  {
    sector = FLASH_SECTOR_4;
 80012d8:	2304      	movs	r3, #4
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	e04b      	b.n	8001376 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a30      	ldr	r2, [pc, #192]	; (80013a4 <_ZL9GetSectorm+0x140>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d206      	bcs.n	80012f4 <_ZL9GetSectorm+0x90>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a2d      	ldr	r2, [pc, #180]	; (80013a0 <_ZL9GetSectorm+0x13c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d902      	bls.n	80012f4 <_ZL9GetSectorm+0x90>
  {
    sector = FLASH_SECTOR_5;
 80012ee:	2305      	movs	r3, #5
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	e040      	b.n	8001376 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a2c      	ldr	r2, [pc, #176]	; (80013a8 <_ZL9GetSectorm+0x144>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d206      	bcs.n	800130a <_ZL9GetSectorm+0xa6>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a29      	ldr	r2, [pc, #164]	; (80013a4 <_ZL9GetSectorm+0x140>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d902      	bls.n	800130a <_ZL9GetSectorm+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8001304:	2306      	movs	r3, #6
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	e035      	b.n	8001376 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a27      	ldr	r2, [pc, #156]	; (80013ac <_ZL9GetSectorm+0x148>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d206      	bcs.n	8001320 <_ZL9GetSectorm+0xbc>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a24      	ldr	r2, [pc, #144]	; (80013a8 <_ZL9GetSectorm+0x144>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d902      	bls.n	8001320 <_ZL9GetSectorm+0xbc>
  {
    sector = FLASH_SECTOR_7;
 800131a:	2307      	movs	r3, #7
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	e02a      	b.n	8001376 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x0809FFFF) && (Address >= 0x08080000))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a23      	ldr	r2, [pc, #140]	; (80013b0 <_ZL9GetSectorm+0x14c>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d206      	bcs.n	8001336 <_ZL9GetSectorm+0xd2>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a20      	ldr	r2, [pc, #128]	; (80013ac <_ZL9GetSectorm+0x148>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d902      	bls.n	8001336 <_ZL9GetSectorm+0xd2>
  {
    sector = FLASH_SECTOR_8;
 8001330:	2308      	movs	r3, #8
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	e01f      	b.n	8001376 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x080BFFFF) && (Address >= 0x080A0000))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a1e      	ldr	r2, [pc, #120]	; (80013b4 <_ZL9GetSectorm+0x150>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d206      	bcs.n	800134c <_ZL9GetSectorm+0xe8>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a1b      	ldr	r2, [pc, #108]	; (80013b0 <_ZL9GetSectorm+0x14c>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d902      	bls.n	800134c <_ZL9GetSectorm+0xe8>
  {
    sector = FLASH_SECTOR_9;
 8001346:	2309      	movs	r3, #9
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	e014      	b.n	8001376 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x080DFFFF) && (Address >= 0x080C0000))
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a1a      	ldr	r2, [pc, #104]	; (80013b8 <_ZL9GetSectorm+0x154>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d806      	bhi.n	8001362 <_ZL9GetSectorm+0xfe>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a17      	ldr	r2, [pc, #92]	; (80013b4 <_ZL9GetSectorm+0x150>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d902      	bls.n	8001362 <_ZL9GetSectorm+0xfe>
  {
    sector = FLASH_SECTOR_10;
 800135c:	230a      	movs	r3, #10
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	e009      	b.n	8001376 <_ZL9GetSectorm+0x112>
  }
  else if((Address < 0x080FFFFF) && (Address >= 0x080E0000))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a15      	ldr	r2, [pc, #84]	; (80013bc <_ZL9GetSectorm+0x158>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d805      	bhi.n	8001376 <_ZL9GetSectorm+0x112>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a14      	ldr	r2, [pc, #80]	; (80013c0 <_ZL9GetSectorm+0x15c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d901      	bls.n	8001376 <_ZL9GetSectorm+0x112>
  {
    sector = FLASH_SECTOR_11;
 8001372:	230b      	movs	r3, #11
 8001374:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 8001376:	68fb      	ldr	r3, [r7, #12]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	08003ffe 	.word	0x08003ffe
 8001388:	08007ffe 	.word	0x08007ffe
 800138c:	08004000 	.word	0x08004000
 8001390:	0800bffe 	.word	0x0800bffe
 8001394:	08008000 	.word	0x08008000
 8001398:	0800ffff 	.word	0x0800ffff
 800139c:	0800c000 	.word	0x0800c000
 80013a0:	0801ffff 	.word	0x0801ffff
 80013a4:	0803ffff 	.word	0x0803ffff
 80013a8:	0805ffff 	.word	0x0805ffff
 80013ac:	0807ffff 	.word	0x0807ffff
 80013b0:	0809ffff 	.word	0x0809ffff
 80013b4:	080bffff 	.word	0x080bffff
 80013b8:	080dfffe 	.word	0x080dfffe
 80013bc:	080ffffe 	.word	0x080ffffe
 80013c0:	080dffff 	.word	0x080dffff

080013c4 <_Z13FLASH_If_Initv>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{ 
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
   HAL_FLASH_Unlock(); 
 80013c8:	f008 fe4e 	bl	800a068 <HAL_FLASH_Unlock>
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <_Z14FLASH_If_Erasem>:
  * @param  StartSector: start of user flash area
  * @retval 0: user flash area successfully erased
  *         1: error occurred
  */
int8_t FLASH_If_Erase(uint32_t StartSector)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	; 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t FlashAddress;
 
  FlashAddress = StartSector;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	627b      	str	r3, [r7, #36]	; 0x24

  /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
     be done by word */ 
 
  if (FlashAddress <= (uint32_t) USER_FLASH_LAST_PAGE_ADDRESS)
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013de:	4a14      	ldr	r2, [pc, #80]	; (8001430 <_Z14FLASH_If_Erasem+0x60>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d81e      	bhi.n	8001422 <_Z14FLASH_If_Erasem+0x52>
  {
    FLASH_EraseInitTypeDef FLASH_EraseInitStruct;
    uint32_t sectornb = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
    
    FLASH_EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80013e8:	2300      	movs	r3, #0
 80013ea:	613b      	str	r3, [r7, #16]
    FLASH_EraseInitStruct.Sector = GetSector(FlashAddress);
 80013ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013ee:	f7ff ff39 	bl	8001264 <_ZL9GetSectorm>
 80013f2:	4603      	mov	r3, r0
 80013f4:	61bb      	str	r3, [r7, #24]
    FLASH_EraseInitStruct.NbSectors = 1;
 80013f6:	2301      	movs	r3, #1
 80013f8:	61fb      	str	r3, [r7, #28]
    FLASH_EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80013fa:	2302      	movs	r3, #2
 80013fc:	623b      	str	r3, [r7, #32]
    
    if (HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &sectornb) != HAL_OK)
 80013fe:	f107 020c 	add.w	r2, r7, #12
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f008 ff7f 	bl	800a30c <HAL_FLASHEx_Erase>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	bf14      	ite	ne
 8001414:	2301      	movne	r3, #1
 8001416:	2300      	moveq	r3, #0
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <_Z14FLASH_If_Erasem+0x56>
      return (1);
 800141e:	2301      	movs	r3, #1
 8001420:	e002      	b.n	8001428 <_Z14FLASH_If_Erasem+0x58>
  }
  else
  {
    return (1);
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <_Z14FLASH_If_Erasem+0x58>
  }

  return (0);
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3728      	adds	r7, #40	; 0x28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	080e0000 	.word	0x080e0000

08001434 <_Z14FLASH_If_WritePVmPmt>:
  * @retval 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(__IO uint32_t* FlashAddress, uint32_t* Data ,uint16_t DataLength)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	4613      	mov	r3, r2
 8001440:	80fb      	strh	r3, [r7, #6]
  uint32_t i = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]

  for (i = 0; (i < DataLength) && (*FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	88fb      	ldrh	r3, [r7, #6]
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	429a      	cmp	r2, r3
 8001450:	d206      	bcs.n	8001460 <_Z14FLASH_If_WritePVmPmt+0x2c>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a1f      	ldr	r2, [pc, #124]	; (80014d4 <_Z14FLASH_If_WritePVmPmt+0xa0>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d801      	bhi.n	8001460 <_Z14FLASH_If_WritePVmPmt+0x2c>
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <_Z14FLASH_If_WritePVmPmt+0x2e>
 8001460:	2300      	movs	r3, #0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d031      	beq.n	80014ca <_Z14FLASH_If_WritePVmPmt+0x96>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */ 
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, *FlashAddress,  *(uint32_t*)(Data+i)) == HAL_OK)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6819      	ldr	r1, [r3, #0]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	4413      	add	r3, r2
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	2002      	movs	r0, #2
 800147c:	f008 fda0 	bl	8009fc0 <HAL_FLASH_Program>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	bf0c      	ite	eq
 8001486:	2301      	moveq	r3, #1
 8001488:	2300      	movne	r3, #0
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d016      	beq.n	80014be <_Z14FLASH_If_WritePVmPmt+0x8a>
    {
     /* Check the written value */
      if (*(uint32_t*)*FlashAddress != *(uint32_t*)(Data+i))
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	68b9      	ldr	r1, [r7, #8]
 800149c:	440b      	add	r3, r1
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	bf14      	ite	ne
 80014a4:	2301      	movne	r3, #1
 80014a6:	2300      	moveq	r3, #0
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <_Z14FLASH_If_WritePVmPmt+0x7e>
      {
        /* Flash content doesn't match SRAM content */
        return(2);
 80014ae:	2302      	movs	r3, #2
 80014b0:	e00c      	b.n	80014cc <_Z14FLASH_If_WritePVmPmt+0x98>
      }
      /* Increment FLASH destination address */
      *FlashAddress += 4;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	1d1a      	adds	r2, r3, #4
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	e001      	b.n	80014c2 <_Z14FLASH_If_WritePVmPmt+0x8e>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      return (1);
 80014be:	2301      	movs	r3, #1
 80014c0:	e004      	b.n	80014cc <_Z14FLASH_If_WritePVmPmt+0x98>
  for (i = 0; (i < DataLength) && (*FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	3301      	adds	r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	e7bf      	b.n	800144a <_Z14FLASH_If_WritePVmPmt+0x16>
    }
  }

  return (0);
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	080ffffb 	.word	0x080ffffb

080014d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	db0a      	blt.n	8001502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	490c      	ldr	r1, [pc, #48]	; (8001524 <__NVIC_SetPriority+0x4c>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	0112      	lsls	r2, r2, #4
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	440b      	add	r3, r1
 80014fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001500:	e00a      	b.n	8001518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4908      	ldr	r1, [pc, #32]	; (8001528 <__NVIC_SetPriority+0x50>)
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	3b04      	subs	r3, #4
 8001510:	0112      	lsls	r2, r2, #4
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	440b      	add	r3, r1
 8001516:	761a      	strb	r2, [r3, #24]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000e100 	.word	0xe000e100
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <_ZNK19ArduinoJson6101_11014CollectionData4headEv>:
  VariantData *get(size_t index) const;

  template <typename TAdaptedString>
  VariantData *get(TAdaptedString key) const;

  VariantSlot *head() const {
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
    return _head;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
  }
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>:
  // - no constructor
  // - no destructor
  // - no virtual
  // - no inheritance

  VariantData* data() {
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(&_content);
 800154c:	687b      	ldr	r3, [r7, #4]
  }
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <_ZN19ArduinoJson6101_11011VariantSlot4nextEv>:

  const VariantData* data() const {
    return reinterpret_cast<const VariantData*>(&_content);
  }

  VariantSlot* next() {
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
    return _next ? this + _next : 0;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d006      	beq.n	800157a <_ZN19ArduinoJson6101_11011VariantSlot4nextEv+0x20>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001572:	011b      	lsls	r3, r3, #4
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	4413      	add	r3, r2
 8001578:	e000      	b.n	800157c <_ZN19ArduinoJson6101_11011VariantSlot4nextEv+0x22>
 800157a:	2300      	movs	r3, #0
  }
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <_ZN19ArduinoJson6101_11011VariantSlot14setNextNotNullEPS0_>:

  void setNext(VariantSlot* slot) {
    _next = VariantSlotDiff(slot ? slot - this : 0);
  }

  void setNextNotNull(VariantSlot* slot) {
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(slot != 0);
    _next = VariantSlotDiff(slot - this);
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	111b      	asrs	r3, r3, #4
 800159a:	b21a      	sxth	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	815a      	strh	r2, [r3, #10]
  }
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_ZN19ArduinoJson6101_11011VariantSlot11setOwnedKeyENS_8not_nullIPKcEE>:

  void setOwnedKey(not_null<const char*> k) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
    _flags |= KEY_IS_OWNED;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	7a1b      	ldrb	r3, [r3, #8]
 80015ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	721a      	strb	r2, [r3, #8]
    _key = k.get();
 80015c4:	463b      	mov	r3, r7
 80015c6:	4618      	mov	r0, r3
 80015c8:	f001 fd22 	bl	8003010 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>
 80015cc:	4602      	mov	r2, r0
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	60da      	str	r2, [r3, #12]
  }
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <_ZNK19ArduinoJson6101_11011VariantSlot3keyEv>:
  void setLinkedKey(not_null<const char*> k) {
    _flags &= VALUE_MASK;
    _key = k.get();
  }

  const char* key() const {
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
    return _key;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
  }
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <_ZN19ArduinoJson6101_11011VariantSlot5clearEv>:

  bool ownsKey() const {
    return (_flags & KEY_IS_OWNED) != 0;
  }

  void clear() {
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
    _next = 0;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	815a      	strh	r2, [r3, #10]
    _flags = 0;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	721a      	strb	r2, [r3, #8]
    _key = 0;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	60da      	str	r2, [r3, #12]
  }
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <_ZN19ArduinoJson6101_11010addPaddingEj>:
  const size_t mask = sizeof(void *) - 1;
  size_t addr = reinterpret_cast<size_t>(ptr);
  return (addr & mask) == 0;
}

inline size_t addPadding(size_t bytes) {
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  const size_t mask = sizeof(void *) - 1;
 8001620:	2303      	movs	r3, #3
 8001622:	60fb      	str	r3, [r7, #12]
  return (bytes + mask) & ~mask;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3303      	adds	r3, #3
 8001628:	f023 0303 	bic.w	r3, r3, #3
}
 800162c:	4618      	mov	r0, r3
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>:
//               ^              ^
//             _left          _right

class MemoryPool {
 public:
  MemoryPool(char* buf, size_t capa)
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
      : _begin(buf),
        _left(buf),
        _right(buf ? buf + capa : 0),
        _end(buf ? buf + capa : 0) {
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	68ba      	ldr	r2, [r7, #8]
 800164e:	605a      	str	r2, [r3, #4]
        _right(buf ? buf + capa : 0),
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x26>
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4413      	add	r3, r2
 800165c:	e000      	b.n	8001660 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x28>
 800165e:	2300      	movs	r3, #0
        _end(buf ? buf + capa : 0) {
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	6093      	str	r3, [r2, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3a>
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4413      	add	r3, r2
 8001670:	e000      	b.n	8001674 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3c>
 8001672:	2300      	movs	r3, #0
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	60d3      	str	r3, [r2, #12]
    ARDUINOJSON_ASSERT(isAligned(_begin));
    ARDUINOJSON_ASSERT(isAligned(_right));
    ARDUINOJSON_ASSERT(isAligned(_end));
  }
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4618      	mov	r0, r3
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>:

  void* buffer() {
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
    return _begin;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
  }
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <_ZN19ArduinoJson6101_11010MemoryPool12allocVariantEv>:

  size_t size() const {
    return size_t(_left - _begin + _end - _right);
  }

  VariantSlot* allocVariant() {
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
    return allocRight<VariantSlot>();
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f001 fcbe 	bl	8003028 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightINS_11VariantSlotEEEPT_v>
 80016ac:	4603      	mov	r3, r0
  }
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <_ZN19ArduinoJson6101_11010MemoryPool21allocExpandableStringEv>:
    _left += n;
    checkInvariants();
    return s;
  }

  StringSlot allocExpandableString() {
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	6039      	str	r1, [r7, #0]
    StringSlot s;
    s.value = _left;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	601a      	str	r2, [r3, #0]
    s.size = size_t(_right - _left);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	461a      	mov	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	605a      	str	r2, [r3, #4]
    _left = _right;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	605a      	str	r2, [r3, #4]
    checkInvariants();
 80016e0:	6838      	ldr	r0, [r7, #0]
 80016e2:	f000 f864 	bl	80017ae <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>
    return s;
 80016e6:	bf00      	nop
  }
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <_ZN19ArduinoJson6101_11010MemoryPool12freezeStringERNS_10StringSlotEj>:

  void freezeString(StringSlot& s, size_t newSize) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
    _left -= (s.size - newSize);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	1acb      	subs	r3, r1, r3
 8001708:	441a      	add	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	605a      	str	r2, [r3, #4]
    s.size = newSize;
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	605a      	str	r2, [r3, #4]
    checkInvariants();
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f000 f84a 	bl	80017ae <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>
  }
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <_ZN19ArduinoJson6101_11010MemoryPool5clearEv>:

  void clear() {
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
    _left = _begin;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	605a      	str	r2, [r3, #4]
    _right = _end;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	609a      	str	r2, [r3, #8]
  }
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <_ZNK19ArduinoJson6101_11010MemoryPool8canAllocEj>:

  bool canAlloc(size_t bytes) const {
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	6039      	str	r1, [r7, #0]
    return _left + bytes <= _right;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	441a      	add	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	429a      	cmp	r2, r3
 800175e:	bf94      	ite	ls
 8001760:	2301      	movls	r3, #1
 8001762:	2300      	movhi	r3, #0
 8001764:	b2db      	uxtb	r3, r3
  }
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj>:
  template <typename T>
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]
    if (!canAlloc(bytes)) return 0;
 800177c:	6839      	ldr	r1, [r7, #0]
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ffe1 	bl	8001746 <_ZNK19ArduinoJson6101_11010MemoryPool8canAllocEj>
 8001784:	4603      	mov	r3, r0
 8001786:	f083 0301 	eor.w	r3, r3, #1
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj+0x22>
 8001790:	2300      	movs	r3, #0
 8001792:	e008      	b.n	80017a6 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj+0x34>
    _right -= bytes;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	425b      	negs	r3, r3
 800179c:	441a      	add	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	609a      	str	r2, [r3, #8]
    return _right;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
  }
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>:
 private:
  StringSlot* allocStringSlot() {
    return allocRight<StringSlot>();
  }

  void checkInvariants() {
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_begin <= _left);
    ARDUINOJSON_ASSERT(_left <= _right);
    ARDUINOJSON_ASSERT(_right <= _end);
    ARDUINOJSON_ASSERT(isAligned(_right));
  }
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <_ZN19ArduinoJson6101_11021ConstRamStringAdapterC1EPKc>:

namespace ARDUINOJSON_NAMESPACE {

class ConstRamStringAdapter {
 public:
  ConstRamStringAdapter(const char* str = 0) : _str(str) {}
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	6039      	str	r1, [r7, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc>:

  bool equals(const char* expected) const {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
    const char* actual = _str;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	60fb      	str	r3, [r7, #12]
    if (!actual || !expected) return actual == expected;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d002      	beq.n	80017fc <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc+0x1c>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d107      	bne.n	800180c <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc+0x2c>
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	e009      	b.n	8001820 <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc+0x40>
    return strcmp(actual, expected) == 0;
 800180c:	6839      	ldr	r1, [r7, #0]
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f7fe fd2e 	bl	8000270 <strcmp>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	bf0c      	ite	eq
 800181a:	2301      	moveq	r3, #1
 800181c:	2300      	movne	r3, #0
 800181e:	b2db      	uxtb	r3, r3
  }
 8001820:	4618      	mov	r0, r3
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <_ZN19ArduinoJson6101_11011adaptStringEPKc>:

 protected:
  const char* _str;
};

inline ConstRamStringAdapter adaptString(const char* str) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  return ConstRamStringAdapter(str);
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff ffc3 	bl	80017c2 <_ZN19ArduinoJson6101_11021ConstRamStringAdapterC1EPKc>
 800183c:	68fb      	ldr	r3, [r7, #12]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <_ZN19ArduinoJson6101_11011VariantData7asArrayEv>:

  const char *asString() const;

  bool asBoolean() const;

  CollectionData *asArray() {
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
    return isArray() ? &_content.asCollection : 0;
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 f81b 	bl	800188a <_ZNK19ArduinoJson6101_11011VariantData7isArrayEv>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <_ZN19ArduinoJson6101_11011VariantData7asArrayEv+0x18>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	e000      	b.n	8001860 <_ZN19ArduinoJson6101_11011VariantData7asArrayEv+0x1a>
 800185e:	2300      	movs	r3, #0
  }
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <_ZN19ArduinoJson6101_11011VariantData8asObjectEv>:

  const CollectionData *asArray() const {
    return const_cast<VariantData *>(this)->asArray();
  }

  CollectionData *asObject() {
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
    return isObject() ? &_content.asCollection : 0;
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 f81d 	bl	80018b0 <_ZNK19ArduinoJson6101_11011VariantData8isObjectEv>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <_ZN19ArduinoJson6101_11011VariantData8asObjectEv+0x18>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	e000      	b.n	8001882 <_ZN19ArduinoJson6101_11011VariantData8asObjectEv+0x1a>
 8001880:	2300      	movs	r3, #0
  }
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <_ZNK19ArduinoJson6101_11011VariantData7isArrayEv>:
      default:
        return true;
    }
  }

  bool isArray() const {
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
    return (_flags & VALUE_IS_ARRAY) != 0;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	7a1b      	ldrb	r3, [r3, #8]
 8001896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800189a:	2b00      	cmp	r3, #0
 800189c:	bf14      	ite	ne
 800189e:	2301      	movne	r3, #1
 80018a0:	2300      	moveq	r3, #0
 80018a2:	b2db      	uxtb	r3, r3
  }
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <_ZNK19ArduinoJson6101_11011VariantData8isObjectEv>:

  bool isString() const {
    return type() == VALUE_IS_LINKED_STRING || type() == VALUE_IS_OWNED_STRING;
  }

  bool isObject() const {
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
    return (_flags & VALUE_IS_OBJECT) != 0;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	7a1b      	ldrb	r3, [r3, #8]
 80018bc:	f003 0320 	and.w	r3, r3, #32
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	bf14      	ite	ne
 80018c4:	2301      	movne	r3, #1
 80018c6:	2300      	moveq	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
  }
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>:
  template <typename TAdaptedString>
  void remove(TAdaptedString key) {
    if (isObject()) _content.asCollection.remove(key);
  }

  void setBoolean(bool value) {
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	460b      	mov	r3, r1
 80018e0:	70fb      	strb	r3, [r7, #3]
    setType(VALUE_IS_BOOLEAN);
 80018e2:	2105      	movs	r1, #5
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 f894 	bl	8001a12 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = static_cast<UInt>(value);
 80018ea:	78fa      	ldrb	r2, [r7, #3]
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	e9c1 2300 	strd	r2, r3, [r1]
  }
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <_ZN19ArduinoJson6101_11011VariantData8setFloatEd>:

  void setFloat(Float value) {
 80018fe:	b580      	push	{r7, lr}
 8001900:	b084      	sub	sp, #16
 8001902:	af00      	add	r7, sp, #0
 8001904:	60f8      	str	r0, [r7, #12]
 8001906:	ed87 0b00 	vstr	d0, [r7]
    setType(VALUE_IS_FLOAT);
 800190a:	2108      	movs	r1, #8
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f000 f880 	bl	8001a12 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asFloat = value;
 8001912:	68f9      	ldr	r1, [r7, #12]
 8001914:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001918:	e9c1 2300 	strd	r2, r3, [r1]
  }
 800191c:	bf00      	nop
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <_ZN19ArduinoJson6101_11011VariantData18setPositiveIntegerEy>:
    } else {
      setNegativeInteger(~static_cast<UInt>(value) + 1);
    }
  }

  void setPositiveInteger(UInt value) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_POSITIVE_INTEGER);
 8001930:	2106      	movs	r1, #6
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f000 f86d 	bl	8001a12 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = value;
 8001938:	68f9      	ldr	r1, [r7, #12]
 800193a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800193e:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <_ZN19ArduinoJson6101_11011VariantData18setNegativeIntegerEy>:

  void setNegativeInteger(UInt value) {
 800194a:	b580      	push	{r7, lr}
 800194c:	b084      	sub	sp, #16
 800194e:	af00      	add	r7, sp, #0
 8001950:	60f8      	str	r0, [r7, #12]
 8001952:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_NEGATIVE_INTEGER);
 8001956:	2107      	movs	r1, #7
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f000 f85a 	bl	8001a12 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = value;
 800195e:	68f9      	ldr	r1, [r7, #12]
 8001960:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001964:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8001968:	bf00      	nop
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>:
    } else {
      setType(VALUE_IS_NULL);
    }
  }

  void setNull() {
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_NULL);
 8001978:	2100      	movs	r1, #0
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f849 	bl	8001a12 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
  }
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_ZN19ArduinoJson6101_11011VariantData14setOwnedStringENS_8not_nullIPKcEE>:

  void setOwnedString(not_null<const char *> s) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
    setType(VALUE_IS_OWNED_STRING);
 8001992:	2104      	movs	r1, #4
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 f83c 	bl	8001a12 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asString = s.get();
 800199a:	463b      	mov	r3, r7
 800199c:	4618      	mov	r0, r3
 800199e:	f001 fb37 	bl	8003010 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>
 80019a2:	4602      	mov	r2, r0
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	601a      	str	r2, [r3, #0]
  }
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_ZN19ArduinoJson6101_11011VariantData7toArrayEv>:
  void setUnsignedInteger(UInt value) {
    setType(VALUE_IS_POSITIVE_INTEGER);
    _content.asInteger = static_cast<UInt>(value);
  }

  CollectionData &toArray() {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_ARRAY);
 80019b8:	2140      	movs	r1, #64	; 0x40
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f829 	bl	8001a12 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asCollection.clear();
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 f957 	bl	8001c76 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>
    return _content.asCollection;
 80019c8:	687b      	ldr	r3, [r7, #4]
  }
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <_ZN19ArduinoJson6101_11011VariantData8toObjectEv>:

  CollectionData &toObject() {
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_OBJECT);
 80019da:	2120      	movs	r1, #32
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 f818 	bl	8001a12 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asCollection.clear();
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 f946 	bl	8001c76 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>
    return _content.asCollection;
 80019ea:	687b      	ldr	r3, [r7, #4]
  }
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <_ZNK19ArduinoJson6101_11011VariantData4typeEv>:
    if (var) return var;
    return _content.asCollection.add(key, pool);
  }

 private:
  uint8_t type() const {
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
    return _flags & VALUE_MASK;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7a1b      	ldrb	r3, [r3, #8]
 8001a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a04:	b2db      	uxtb	r3, r3
  }
 8001a06:	4618      	mov	r0, r3
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>:

  void setType(uint8_t t) {
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	70fb      	strb	r3, [r7, #3]
    _flags &= KEY_IS_OWNED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7a1b      	ldrb	r3, [r3, #8]
 8001a22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	721a      	strb	r2, [r3, #8]
    _flags |= t;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	7a1a      	ldrb	r2, [r3, #8]
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	721a      	strb	r2, [r3, #8]
  }
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <_ZN19ArduinoJson6101_1108slotDataEPNS_11VariantSlotE>:
    var = var->next();
  }
  return n;
}

inline VariantData* slotData(VariantSlot* slot) {
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<VariantData*>(slot);
 8001a4e:	687b      	ldr	r3, [r7, #4]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE>:

inline const CollectionData *variantAsObject(const VariantData *var) {
  return var != 0 ? var->asObject() : 0;
}

inline CollectionData *variantAsObject(VariantData *var) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  return var != 0 ? var->asObject() : 0;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d004      	beq.n	8001a74 <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE+0x18>
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff fefc 	bl	8001868 <_ZN19ArduinoJson6101_11011VariantData8asObjectEv>
 8001a70:	4603      	mov	r3, r0
 8001a72:	e000      	b.n	8001a76 <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE+0x1a>
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>:
  VariantRef _variant;
};

class ArrayIterator {
 public:
  ArrayIterator() : _slot(0) {}
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <_ZN19ArduinoJson6101_11013ArrayIteratorC1EPNS_10MemoryPoolEPNS_11VariantSlotE>:
  explicit ArrayIterator(MemoryPool *pool, VariantSlot *slot)
 8001a9a:	b480      	push	{r7}
 8001a9c:	b085      	sub	sp, #20
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	60f8      	str	r0, [r7, #12]
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
      : _pool(pool), _slot(slot) {}
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <_ZNK19ArduinoJson6101_11013ArrayIteratordeEv>:

  VariantRef operator*() const {
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
    return VariantRef(_pool, _slot->data());
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681c      	ldr	r4, [r3, #0]
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fd36 	bl	8001544 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	60fc      	str	r4, [r7, #12]
 8001adc:	60bb      	str	r3, [r7, #8]
  friend class VariantConstRef;

 public:
  // Intenal use only
  FORCE_INLINE VariantRef(MemoryPool *pool, VariantData *data)
      : base_type(data), _pool(pool) {}
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68b9      	ldr	r1, [r7, #8]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f001 fabc 	bl	8003060 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	bf00      	nop
  }
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd90      	pop	{r4, r7, pc}

08001af8 <_ZNK19ArduinoJson6101_11013ArrayIteratorneERKS0_>:

  bool operator==(const ArrayIterator &other) const {
    return _slot == other._slot;
  }

  bool operator!=(const ArrayIterator &other) const {
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
    return _slot != other._slot;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	bf14      	ite	ne
 8001b0e:	2301      	movne	r3, #1
 8001b10:	2300      	moveq	r3, #0
 8001b12:	b2db      	uxtb	r3, r3
  }
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <_ZN19ArduinoJson6101_11013ArrayIteratorppEv>:

  ArrayIterator &operator++() {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
    _slot = _slot->next();
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff fd14 	bl	800155a <_ZN19ArduinoJson6101_11011VariantSlot4nextEv>
 8001b32:	4602      	mov	r2, r0
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	605a      	str	r2, [r3, #4]
    return *this;
 8001b38:	687b      	ldr	r3, [r7, #4]
  }
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <_ZN19ArduinoJson6101_11012JsonDocument5clearEv>:
  template <typename T>
  typename VariantConstAs<T>::type as() const {
    return getVariant().template as<T>();
  }

  void clear() {
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
    _pool.clear();
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fde8 	bl	8001722 <_ZN19ArduinoJson6101_11010MemoryPool5clearEv>
    _data.setNull();
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3310      	adds	r3, #16
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff ff0a 	bl	8001970 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>
  }
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>:
    clear();
    return getVariant().template to<T>();
  }

  // for internal use only
  MemoryPool& memoryPool() {
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
    return _pool;
 8001b6c:	687b      	ldr	r3, [r7, #4]
  }
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <_ZN19ArduinoJson6101_11012JsonDocument4dataEv>:

  VariantData& data() {
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
    return _data;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3310      	adds	r3, #16
  }
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>:
      const TString& key) {
    _data.remove(adaptString(key));
  }

 protected:
  JsonDocument(MemoryPool pool) : _pool(pool) {
 8001b92:	b084      	sub	sp, #16
 8001b94:	b590      	push	{r4, r7, lr}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	f107 001c 	add.w	r0, r7, #28
 8001ba0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	461c      	mov	r4, r3
 8001ba8:	f107 031c 	add.w	r3, r7, #28
 8001bac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    _data.setNull();
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3310      	adds	r3, #16
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff feda 	bl	8001970 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>
  }
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001bc8:	b004      	add	sp, #16
 8001bca:	4770      	bx	lr

08001bcc <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>:
#include <stdlib.h>  // malloc, free

namespace ARDUINOJSON_NAMESPACE {

struct DefaultAllocator {
  void* allocate(size_t n) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
    return malloc(n);
 8001bd6:	6838      	ldr	r0, [r7, #0]
 8001bd8:	f017 fb40 	bl	801925c <malloc>
 8001bdc:	4603      	mov	r3, r0
  }
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>:

  void deallocate(void* p) {
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	6039      	str	r1, [r7, #0]
    free(p);
 8001bf0:	6838      	ldr	r0, [r7, #0]
 8001bf2:	f017 fb3b 	bl	801926c <free>
  }
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>:
#include "../Variant/VariantData.hpp"
#include "CollectionData.hpp"

namespace ARDUINOJSON_NAMESPACE {

inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b084      	sub	sp, #16
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = pool->allocVariant();
 8001c08:	6838      	ldr	r0, [r7, #0]
 8001c0a:	f7ff fd48 	bl	800169e <_ZN19ArduinoJson6101_11010MemoryPool12allocVariantEv>
 8001c0e:	60f8      	str	r0, [r7, #12]
  if (!slot) return 0;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x1c>
 8001c16:	2300      	movs	r3, #0
 8001c18:	e017      	b.n	8001c4a <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x4c>

  if (_tail) {
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d009      	beq.n	8001c36 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x38>
    _tail->setNextNotNull(slot);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	68f9      	ldr	r1, [r7, #12]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fcad 	bl	8001588 <_ZN19ArduinoJson6101_11011VariantSlot14setNextNotNullEPS0_>
    _tail = slot;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	e005      	b.n	8001c42 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x44>
  } else {
    _head = slot;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	601a      	str	r2, [r3, #0]
    _tail = slot;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	605a      	str	r2, [r3, #4]
  }

  slot->clear();
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f7ff fcd5 	bl	80015f2 <_ZN19ArduinoJson6101_11011VariantSlot5clearEv>
  return slot;
 8001c48:	68fb      	ldr	r3, [r7, #12]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <_ZN19ArduinoJson6101_11014CollectionData3addEPNS_10MemoryPoolE>:

inline VariantData* CollectionData::add(MemoryPool* pool) {
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]
  return slotData(addSlot(pool));
 8001c5c:	6839      	ldr	r1, [r7, #0]
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ffcd 	bl	8001bfe <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>
 8001c64:	4603      	mov	r3, r0
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff feed 	bl	8001a46 <_ZN19ArduinoJson6101_1108slotDataEPNS_11VariantSlotE>
 8001c6c:	4603      	mov	r3, r0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>:
  VariantSlot* slot = addSlot(pool);
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}

inline void CollectionData::clear() {
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  _head = 0;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
  _tail = 0;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	605a      	str	r2, [r3, #4]
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <_ZN19ArduinoJson6101_1107isdigitEc>:

#pragma once

namespace ARDUINOJSON_NAMESPACE {

inline bool isdigit(char c) {
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	2b2f      	cmp	r3, #47	; 0x2f
 8001ca4:	d904      	bls.n	8001cb0 <_ZN19ArduinoJson6101_1107isdigitEc+0x1a>
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	2b39      	cmp	r3, #57	; 0x39
 8001caa:	d801      	bhi.n	8001cb0 <_ZN19ArduinoJson6101_1107isdigitEc+0x1a>
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <_ZN19ArduinoJson6101_1107isdigitEc+0x1c>
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <_ZNK19ArduinoJson6101_11011VariantData8asStringEv>:
    default:
      return 0;
  }
}

inline const char *VariantData::asString() const {
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  switch (type()) {
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff fe94 	bl	80019f4 <_ZNK19ArduinoJson6101_11011VariantData4typeEv>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	3b03      	subs	r3, #3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d802      	bhi.n	8001cda <_ZNK19ArduinoJson6101_11011VariantData8asStringEv+0x1c>
    case VALUE_IS_LINKED_STRING:
    case VALUE_IS_OWNED_STRING:
      return _content.asString;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	e000      	b.n	8001cdc <_ZNK19ArduinoJson6101_11011VariantData8asStringEv+0x1e>
    default:
      return 0;
 8001cda:	2300      	movs	r3, #0
  }
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_ZN19ArduinoJson6101_11013StringBuilderC1EPNS_10MemoryPoolE>:

namespace ARDUINOJSON_NAMESPACE {

class StringBuilder {
 public:
  explicit StringBuilder(MemoryPool* parent) : _parent(parent), _size(0) {
 8001ce4:	b590      	push	{r4, r7, lr}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	605a      	str	r2, [r3, #4]
    _slot = _parent->allocExpandableString();
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68fc      	ldr	r4, [r7, #12]
 8001d00:	463b      	mov	r3, r7
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fcd6 	bl	80016b6 <_ZN19ArduinoJson6101_11010MemoryPool21allocExpandableStringEv>
 8001d0a:	f104 0308 	add.w	r3, r4, #8
 8001d0e:	463a      	mov	r2, r7
 8001d10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d14:	e883 0003 	stmia.w	r3, {r0, r1}
  }
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd90      	pop	{r4, r7, pc}

08001d22 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>:

  void append(const char* s, size_t n) {
    while (n-- > 0) append(*s++);
  }

  void append(char c) {
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	70fb      	strb	r3, [r7, #3]
    if (!_slot.value) return;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d014      	beq.n	8001d60 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x3e>

    if (_size >= _slot.size) {
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d303      	bcc.n	8001d4a <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x28>
      _slot.value = 0;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
      return;
 8001d48:	e00b      	b.n	8001d62 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x40>
    }

    _slot.value[_size++] = c;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	1c58      	adds	r0, r3, #1
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	6048      	str	r0, [r1, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	78fa      	ldrb	r2, [r7, #3]
 8001d5c:	701a      	strb	r2, [r3, #0]
 8001d5e:	e000      	b.n	8001d62 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x40>
    if (!_slot.value) return;
 8001d60:	bf00      	nop
  }
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>:

  char* complete() {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
    append('\0');
 8001d74:	2100      	movs	r1, #0
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff ffd3 	bl	8001d22 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
    if (_slot.value) {
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d009      	beq.n	8001d98 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv+0x2c>
      _parent->freezeString(_slot, _size);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f103 0108 	add.w	r1, r3, #8
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	461a      	mov	r2, r3
 8001d94:	f7ff fcac 	bl	80016f0 <_ZN19ArduinoJson6101_11010MemoryPool12freezeStringERNS_10StringSlotEj>
    }
    return _slot.value;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
  }
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <_ZN19ArduinoJson6101_11012StringCopierC1EPNS_10MemoryPoolE>:

class StringCopier {
 public:
  typedef ARDUINOJSON_NAMESPACE::StringBuilder StringBuilder;

  StringCopier(MemoryPool* pool) : _pool(pool) {}
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>:

  StringBuilder startString() {
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
    return StringBuilder(_pool);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff ff86 	bl	8001ce4 <_ZN19ArduinoJson6101_11013StringBuilderC1EPNS_10MemoryPoolE>
  }
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc>:

class UnsafeCharPointerReader {
  const char* _ptr;

 public:
  explicit UnsafeCharPointerReader(const char* ptr)
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
      : _ptr(ptr ? ptr : reinterpret_cast<const char*>("")) {}
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x14>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	e000      	b.n	8001df6 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x16>
 8001df4:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x28>)
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	0801a82c 	.word	0x0801a82c

08001e0c <_ZN19ArduinoJson6101_11023UnsafeCharPointerReader4readEv>:

  char read() {
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
    return static_cast<char>(*_ptr++);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	1c59      	adds	r1, r3, #1
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6011      	str	r1, [r2, #0]
 8001e1e:	781b      	ldrb	r3, [r3, #0]
  }
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <_ZNK19ArduinoJson6101_11023UnsafeCharPointerReader5endedEv>:

  bool ended() const {
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
    // we cannot know, that's why it's unsafe
    return false;
 8001e34:	2300      	movs	r3, #0
  }
 8001e36:	4618      	mov	r0, r3
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <_ZNK19ArduinoJson6101_11020DeserializationError14safeBoolHelperEv>:
namespace ARDUINOJSON_NAMESPACE {

class DeserializationError {
  // safe bool idiom
  typedef void (DeserializationError::*bool_type)() const;
  void safeBoolHelper() const {}
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>:
    NotSupported,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : _code(c) {}
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	70fb      	strb	r3, [r7, #3]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	78fa      	ldrb	r2, [r7, #3]
 8001e66:	701a      	strb	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>:
  friend bool operator!=(Code lhs, const DeserializationError& rhs) {
    return lhs != rhs._code;
  }

  // Behaves like a bool
  operator bool_type() const {
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
    return _code != Ok ? &DeserializationError::safeBoolHelper : 0;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d106      	bne.n	8001e98 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x20>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	e005      	b.n	8001ea4 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x2c>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a05      	ldr	r2, [pc, #20]	; (8001eb0 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x38>)
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	605a      	str	r2, [r3, #4]
  }
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	08001e43 	.word	0x08001e43

08001eb4 <_ZNK19ArduinoJson6101_11020DeserializationError4codeEv>:
  friend bool operator!=(const DeserializationError& err, bool value) {
    return static_cast<bool>(err) != value;
  }

  // Returns internal enum, useful for switch statement
  Code code() const {
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
    return _code;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
  }
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <_ZN19ArduinoJson6101_11012NestingLimitC1Ev>:
#include "../Configuration.hpp"

namespace ARDUINOJSON_NAMESPACE {

struct NestingLimit {
  NestingLimit() : value(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2232      	movs	r2, #50	; 0x32
 8001ed8:	701a      	strb	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc>:
    }
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
    const char *p = escapeTable(true);
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f000 f818 	bl	8001f28 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb>
 8001ef8:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0') return c;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x1e>
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	e00c      	b.n	8001f20 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c) return p[1];
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	79fa      	ldrb	r2, [r7, #7]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d103      	bne.n	8001f18 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x30>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	3301      	adds	r3, #1
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	e003      	b.n	8001f20 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	3302      	adds	r3, #2
 8001f1c:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0') return c;
 8001f1e:	e7ec      	b.n	8001efa <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x12>
    }
  }
 8001f20:	4618      	mov	r0, r3
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb>:

 private:
  static const char *escapeTable(bool excludeIdenticals) {
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71fb      	strb	r3, [r7, #7]
    return &"\"\"\\\\b\bf\fn\nr\rt\t"[excludeIdenticals ? 4 : 0];
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x14>
 8001f38:	2304      	movs	r3, #4
 8001f3a:	e000      	b.n	8001f3e <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x16>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x28>)
 8001f40:	4413      	add	r3, r2
  }
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	0801a830 	.word	0x0801a830

08001f54 <DMA1_Stream5_IRQHandler>:
	  }
	}


	void DMA1_Stream5_IRQHandler(void)
	{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
		Interrupt::DMA1_Stream5_Wrapper();
 8001f58:	f003 fb0c 	bl	8005574 <_ZN9Interrupt20DMA1_Stream5_WrapperEv>
	}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <_Z13createThreadsv>:
#include "extern.h"


void createThreads(void)
{
 8001f60:	b598      	push	{r3, r4, r7, lr}
 8001f62:	af00      	add	r7, sp, #0
    baseThread = new pruThread(TIM9, TIM1_BRK_TIM9_IRQn, base_freq);
 8001f64:	2030      	movs	r0, #48	; 0x30
 8001f66:	f016 ff70 	bl	8018e4a <_Znwj>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	461c      	mov	r4, r3
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <_Z13createThreadsv+0x50>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2218      	movs	r2, #24
 8001f74:	490f      	ldr	r1, [pc, #60]	; (8001fb4 <_Z13createThreadsv+0x54>)
 8001f76:	4620      	mov	r0, r4
 8001f78:	f005 fb00 	bl	800757c <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <_Z13createThreadsv+0x58>)
 8001f7e:	601c      	str	r4, [r3, #0]
    NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2);
 8001f80:	2102      	movs	r1, #2
 8001f82:	2018      	movs	r0, #24
 8001f84:	f7ff faa8 	bl	80014d8 <__NVIC_SetPriority>

    servoThread = new pruThread(TIM10, TIM1_UP_TIM10_IRQn, servo_freq);
 8001f88:	2030      	movs	r0, #48	; 0x30
 8001f8a:	f016 ff5e 	bl	8018e4a <_Znwj>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	461c      	mov	r4, r3
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <_Z13createThreadsv+0x5c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2219      	movs	r2, #25
 8001f98:	4909      	ldr	r1, [pc, #36]	; (8001fc0 <_Z13createThreadsv+0x60>)
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	f005 faee 	bl	800757c <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <_Z13createThreadsv+0x64>)
 8001fa2:	601c      	str	r4, [r3, #0]
    NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 3);
 8001fa4:	2103      	movs	r1, #3
 8001fa6:	2019      	movs	r0, #25
 8001fa8:	f7ff fa96 	bl	80014d8 <__NVIC_SetPriority>
}
 8001fac:	bf00      	nop
 8001fae:	bd98      	pop	{r3, r4, r7, pc}
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	40014000 	.word	0x40014000
 8001fb8:	20000178 	.word	0x20000178
 8001fbc:	20000004 	.word	0x20000004
 8001fc0:	40014400 	.word	0x40014400
 8001fc4:	20000174 	.word	0x20000174

08001fc8 <__io_putchar>:
/* USER CODE BEGIN 0 */

// re-target printf to UART2 by redeclaring week function in syscalls.c
extern "C" {
	int __io_putchar(int ch)
	{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001fd0:	1d39      	adds	r1, r7, #4
 8001fd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	4803      	ldr	r0, [pc, #12]	; (8001fe8 <__io_putchar+0x20>)
 8001fda:	f009 fdf2 	bl	800bbc2 <HAL_UART_Transmit>
	  return ch;
 8001fde:	687b      	ldr	r3, [r7, #4]
	}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	200000f4 	.word	0x200000f4

08001fec <_Z9checkJsonv>:
JsonObject module;



int8_t checkJson()
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0
	metadata_t* meta = (metadata_t*)JSON_UPLOAD_ADDRESS;
 8001ff2:	4b38      	ldr	r3, [pc, #224]	; (80020d4 <_Z9checkJsonv+0xe8>)
 8001ff4:	61bb      	str	r3, [r7, #24]
	uint32_t* json = (uint32_t*)(JSON_UPLOAD_ADDRESS + METADATA_LEN);
 8001ff6:	4b38      	ldr	r3, [pc, #224]	; (80020d8 <_Z9checkJsonv+0xec>)
 8001ff8:	617b      	str	r3, [r7, #20]

	// Check length is reasonable
	if (meta->length > (USER_FLASH_END_ADDRESS - JSON_UPLOAD_ADDRESS))
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002002:	d308      	bcc.n	8002016 <_Z9checkJsonv+0x2a>
	{
		newJson = false;
 8002004:	4b35      	ldr	r3, [pc, #212]	; (80020dc <_Z9checkJsonv+0xf0>)
 8002006:	2200      	movs	r2, #0
 8002008:	701a      	strb	r2, [r3, #0]
		printf("JSON Config length incorrect\n");
 800200a:	4835      	ldr	r0, [pc, #212]	; (80020e0 <_Z9checkJsonv+0xf4>)
 800200c:	f017 faa4 	bl	8019558 <puts>
		return -1;
 8002010:	f04f 33ff 	mov.w	r3, #4294967295
 8002014:	e059      	b.n	80020ca <_Z9checkJsonv+0xde>
	}

	// Enable & Reset CRC
	RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
 8002016:	4b33      	ldr	r3, [pc, #204]	; (80020e4 <_Z9checkJsonv+0xf8>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a32      	ldr	r2, [pc, #200]	; (80020e4 <_Z9checkJsonv+0xf8>)
 800201c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
	CRC->CR = 1;
 8002022:	4b31      	ldr	r3, [pc, #196]	; (80020e8 <_Z9checkJsonv+0xfc>)
 8002024:	2201      	movs	r2, #1
 8002026:	609a      	str	r2, [r3, #8]

	// Compute CRC
	// Note: __RBIT is used so that CRC will match standard calculation
	for (uint32_t i = 0; i < meta->length; i++) CRC->DR = __RBIT(*(json+i));
 8002028:	2300      	movs	r3, #0
 800202a:	61fb      	str	r3, [r7, #28]
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	429a      	cmp	r2, r3
 8002034:	d210      	bcs.n	8002058 <_Z9checkJsonv+0x6c>
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	4413      	add	r3, r2
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a29      	ldr	r2, [pc, #164]	; (80020e8 <_Z9checkJsonv+0xfc>)
 8002042:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	3301      	adds	r3, #1
 8002054:	61fb      	str	r3, [r7, #28]
 8002056:	e7e9      	b.n	800202c <_Z9checkJsonv+0x40>
	crc32 = __RBIT(CRC->DR) ^ 0xFFFFFFFF;
 8002058:	4b23      	ldr	r3, [pc, #140]	; (80020e8 <_Z9checkJsonv+0xfc>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	607b      	str	r3, [r7, #4]
  return result;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	43db      	mvns	r3, r3
 800206a:	4a20      	ldr	r2, [pc, #128]	; (80020ec <_Z9checkJsonv+0x100>)
 800206c:	6013      	str	r3, [r2, #0]

	printf("Length (words) = %ld\n", meta->length);
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	4619      	mov	r1, r3
 8002074:	481e      	ldr	r0, [pc, #120]	; (80020f0 <_Z9checkJsonv+0x104>)
 8002076:	f017 f9e9 	bl	801944c <iprintf>
	printf("JSON length (bytes) = %ld\n", meta->jsonLength);
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	4619      	mov	r1, r3
 8002080:	481c      	ldr	r0, [pc, #112]	; (80020f4 <_Z9checkJsonv+0x108>)
 8002082:	f017 f9e3 	bl	801944c <iprintf>
	printf("crc32 = %lx\n", crc32);
 8002086:	4b19      	ldr	r3, [pc, #100]	; (80020ec <_Z9checkJsonv+0x100>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4619      	mov	r1, r3
 800208c:	481a      	ldr	r0, [pc, #104]	; (80020f8 <_Z9checkJsonv+0x10c>)
 800208e:	f017 f9dd 	bl	801944c <iprintf>

	// Disable CRC
	RCC->AHB1ENR &= ~RCC_AHB1ENR_CRCEN;
 8002092:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <_Z9checkJsonv+0xf8>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a13      	ldr	r2, [pc, #76]	; (80020e4 <_Z9checkJsonv+0xf8>)
 8002098:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800209c:	6313      	str	r3, [r2, #48]	; 0x30

	// Check CRC
	if (crc32 != meta->crc32)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	4b12      	ldr	r3, [pc, #72]	; (80020ec <_Z9checkJsonv+0x100>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d008      	beq.n	80020bc <_Z9checkJsonv+0xd0>
	{
		newJson = false;
 80020aa:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <_Z9checkJsonv+0xf0>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]
		printf("JSON Config file CRC incorrect\n");
 80020b0:	4812      	ldr	r0, [pc, #72]	; (80020fc <_Z9checkJsonv+0x110>)
 80020b2:	f017 fa51 	bl	8019558 <puts>
		return -1;
 80020b6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ba:	e006      	b.n	80020ca <_Z9checkJsonv+0xde>
	}

	// JSON is OK, don't check it again
	newJson = false;
 80020bc:	4b07      	ldr	r3, [pc, #28]	; (80020dc <_Z9checkJsonv+0xf0>)
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
	printf("JSON Config file received Ok\n");
 80020c2:	480f      	ldr	r0, [pc, #60]	; (8002100 <_Z9checkJsonv+0x114>)
 80020c4:	f017 fa48 	bl	8019558 <puts>
	return 1;
 80020c8:	2301      	movs	r3, #1
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3720      	adds	r7, #32
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	080d0000 	.word	0x080d0000
 80020d8:	080d0200 	.word	0x080d0200
 80020dc:	200002f4 	.word	0x200002f4
 80020e0:	0801a840 	.word	0x0801a840
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40023000 	.word	0x40023000
 80020ec:	200002f8 	.word	0x200002f8
 80020f0:	0801a860 	.word	0x0801a860
 80020f4:	0801a878 	.word	0x0801a878
 80020f8:	0801a894 	.word	0x0801a894
 80020fc:	0801a8a4 	.word	0x0801a8a4
 8002100:	0801a8c4 	.word	0x0801a8c4

08002104 <_Z8moveJsonv>:


void moveJson()
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
	metadata_t* meta = (metadata_t*)JSON_UPLOAD_ADDRESS;
 800210e:	4b18      	ldr	r3, [pc, #96]	; (8002170 <_Z8moveJsonv+0x6c>)
 8002110:	607b      	str	r3, [r7, #4]

	uint16_t jsonLength = meta->jsonLength;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	807b      	strh	r3, [r7, #2]

	// erase the old JSON config file
	FLASH_If_Erase(JSON_STORAGE_ADDRESS);
 8002118:	4816      	ldr	r0, [pc, #88]	; (8002174 <_Z8moveJsonv+0x70>)
 800211a:	f7ff f959 	bl	80013d0 <_Z14FLASH_If_Erasem>

	HAL_StatusTypeDef status;

	// store the length of the file in the 0th byte
	status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, JSON_STORAGE_ADDRESS, jsonLength);
 800211e:	887a      	ldrh	r2, [r7, #2]
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	4913      	ldr	r1, [pc, #76]	; (8002174 <_Z8moveJsonv+0x70>)
 8002126:	2002      	movs	r0, #2
 8002128:	f007 ff4a 	bl	8009fc0 <HAL_FLASH_Program>
 800212c:	4603      	mov	r3, r0
 800212e:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < jsonLength; i++)
 8002130:	2300      	movs	r3, #0
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	887b      	ldrh	r3, [r7, #2]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	429a      	cmp	r2, r3
 800213a:	d215      	bcs.n	8002168 <_Z8moveJsonv+0x64>
    {
        if (status == HAL_OK)
 800213c:	7afb      	ldrb	r3, [r7, #11]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10e      	bne.n	8002160 <_Z8moveJsonv+0x5c>
        {
            status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, (JSON_STORAGE_ADDRESS + 4 + i), *((uint8_t*)(JSON_UPLOAD_ADDRESS + METADATA_LEN + i)));
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	490c      	ldr	r1, [pc, #48]	; (8002178 <_Z8moveJsonv+0x74>)
 8002146:	4419      	add	r1, r3
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	4b0c      	ldr	r3, [pc, #48]	; (800217c <_Z8moveJsonv+0x78>)
 800214c:	4413      	add	r3, r2
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	b2da      	uxtb	r2, r3
 8002152:	f04f 0300 	mov.w	r3, #0
 8002156:	2000      	movs	r0, #0
 8002158:	f007 ff32 	bl	8009fc0 <HAL_FLASH_Program>
 800215c:	4603      	mov	r3, r0
 800215e:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < jsonLength; i++)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3301      	adds	r3, #1
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	e7e5      	b.n	8002134 <_Z8moveJsonv+0x30>
        }
    }

}
 8002168:	bf00      	nop
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	080d0000 	.word	0x080d0000
 8002174:	080e0000 	.word	0x080e0000
 8002178:	080e0004 	.word	0x080e0004
 800217c:	080d0200 	.word	0x080d0200

08002180 <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:


void jsonFromFlash(std::string json)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
    int c;
    uint32_t i = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
    uint32_t jsonLength;

    printf("\n1. Loading JSON configuration file from Flash memory\n");
 800218c:	4828      	ldr	r0, [pc, #160]	; (8002230 <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb0>)
 800218e:	f017 f9e3 	bl	8019558 <puts>

    // read byte 0 to determine length to read
    jsonLength = *(uint32_t*)JSON_STORAGE_ADDRESS;
 8002192:	4b28      	ldr	r3, [pc, #160]	; (8002234 <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	613b      	str	r3, [r7, #16]

    if (jsonLength == 0xFFFFFFFF)
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219e:	d121      	bne.n	80021e4 <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x64>
    {
    	printf("Flash storage location is empty - no config file\n");
 80021a0:	4825      	ldr	r0, [pc, #148]	; (8002238 <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xb8>)
 80021a2:	f017 f9d9 	bl	8019558 <puts>
    	printf("Using basic default configuration - 3 step generators only\n");
 80021a6:	4825      	ldr	r0, [pc, #148]	; (800223c <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbc>)
 80021a8:	f017 f9d6 	bl	8019558 <puts>

    	jsonLength = sizeof(defaultConfig);
 80021ac:	f44f 7306 	mov.w	r3, #536	; 0x218
 80021b0:	613b      	str	r3, [r7, #16]

    	json.resize(jsonLength);
 80021b2:	6939      	ldr	r1, [r7, #16]
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f016 ff96 	bl	80190e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEj>

		for (i = 0; i < jsonLength; i++)
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d22f      	bcs.n	8002226 <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa6>
		{
			c = defaultConfig[i];
 80021c6:	4a1e      	ldr	r2, [pc, #120]	; (8002240 <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc0>)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	4413      	add	r3, r2
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	60fb      	str	r3, [r7, #12]
			strJson.push_back(c);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	4619      	mov	r1, r3
 80021d6:	481b      	ldr	r0, [pc, #108]	; (8002244 <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc4>)
 80021d8:	f016 ff0c 	bl	8018ff4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
		for (i = 0; i < jsonLength; i++)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	3301      	adds	r3, #1
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	e7ec      	b.n	80021be <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3e>
		}
    }
    else
    {
		json.resize(jsonLength);
 80021e4:	6939      	ldr	r1, [r7, #16]
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f016 ff7d 	bl	80190e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEj>

		for (i = 0; i < jsonLength; i++)
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d20e      	bcs.n	8002216 <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x96>
		{
			c = *(uint8_t*)(JSON_STORAGE_ADDRESS + 4 + i);
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	4b13      	ldr	r3, [pc, #76]	; (8002248 <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc8>)
 80021fc:	4413      	add	r3, r2
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	60fb      	str	r3, [r7, #12]
			strJson.push_back(c);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	b2db      	uxtb	r3, r3
 8002206:	4619      	mov	r1, r3
 8002208:	480e      	ldr	r0, [pc, #56]	; (8002244 <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc4>)
 800220a:	f016 fef3 	bl	8018ff4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
		for (i = 0; i < jsonLength; i++)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	3301      	adds	r3, #1
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	e7ec      	b.n	80021f0 <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x70>
		}
		printf("\n%s\n", json.c_str());
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f016 ff6a 	bl	80190f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800221c:	4603      	mov	r3, r0
 800221e:	4619      	mov	r1, r3
 8002220:	480a      	ldr	r0, [pc, #40]	; (800224c <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcc>)
 8002222:	f017 f913 	bl	801944c <iprintf>
    }
}
 8002226:	bf00      	nop
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	0801a8e4 	.word	0x0801a8e4
 8002234:	080e0000 	.word	0x080e0000
 8002238:	0801a91c 	.word	0x0801a91c
 800223c:	0801a950 	.word	0x0801a950
 8002240:	0801dca4 	.word	0x0801dca4
 8002244:	200002fc 	.word	0x200002fc
 8002248:	080e0004 	.word	0x080e0004
 800224c:	0801a98c 	.word	0x0801a98c

08002250 <_Z15deserialiseJSONv>:

void deserialiseJSON()
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
    printf("\n2. Parsing JSON configuration file\n");
 8002256:	4820      	ldr	r0, [pc, #128]	; (80022d8 <_Z15deserialiseJSONv+0x88>)
 8002258:	f017 f97e 	bl	8019558 <puts>

    const char *json = strJson.c_str();
 800225c:	481f      	ldr	r0, [pc, #124]	; (80022dc <_Z15deserialiseJSONv+0x8c>)
 800225e:	f016 ff47 	bl	80190f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002262:	60f8      	str	r0, [r7, #12]

    // parse the json configuration file
    DeserializationError error = deserializeJson(doc, json);
 8002264:	f107 0308 	add.w	r3, r7, #8
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fe2f 	bl	8001ecc <_ZN19ArduinoJson6101_11012NestingLimitC1Ev>
 800226e:	7a3a      	ldrb	r2, [r7, #8]
 8002270:	68f9      	ldr	r1, [r7, #12]
 8002272:	481b      	ldr	r0, [pc, #108]	; (80022e0 <_Z15deserialiseJSONv+0x90>)
 8002274:	f000 ff5a 	bl	800312c <_ZN19ArduinoJson6101_11015deserializeJsonIKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT_NS_12NestingLimitE>
 8002278:	4603      	mov	r3, r0
 800227a:	713b      	strb	r3, [r7, #4]

    printf("Config deserialisation - ");
 800227c:	4819      	ldr	r0, [pc, #100]	; (80022e4 <_Z15deserialiseJSONv+0x94>)
 800227e:	f017 f8e5 	bl	801944c <iprintf>

    switch (error.code())
 8002282:	1d3b      	adds	r3, r7, #4
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fe15 	bl	8001eb4 <_ZNK19ArduinoJson6101_11020DeserializationError4codeEv>
 800228a:	4603      	mov	r3, r0
 800228c:	2b03      	cmp	r3, #3
 800228e:	d011      	beq.n	80022b4 <_Z15deserialiseJSONv+0x64>
 8002290:	2b03      	cmp	r3, #3
 8002292:	dc16      	bgt.n	80022c2 <_Z15deserialiseJSONv+0x72>
 8002294:	2b00      	cmp	r3, #0
 8002296:	d002      	beq.n	800229e <_Z15deserialiseJSONv+0x4e>
 8002298:	2b02      	cmp	r3, #2
 800229a:	d004      	beq.n	80022a6 <_Z15deserialiseJSONv+0x56>
 800229c:	e011      	b.n	80022c2 <_Z15deserialiseJSONv+0x72>
    {
        case DeserializationError::Ok:
            printf("Deserialization succeeded\n");
 800229e:	4812      	ldr	r0, [pc, #72]	; (80022e8 <_Z15deserialiseJSONv+0x98>)
 80022a0:	f017 f95a 	bl	8019558 <puts>
            break;
 80022a4:	e014      	b.n	80022d0 <_Z15deserialiseJSONv+0x80>
        case DeserializationError::InvalidInput:
            printf("Invalid input!\n");
 80022a6:	4811      	ldr	r0, [pc, #68]	; (80022ec <_Z15deserialiseJSONv+0x9c>)
 80022a8:	f017 f956 	bl	8019558 <puts>
            configError = true;
 80022ac:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <_Z15deserialiseJSONv+0xa0>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
            break;
 80022b2:	e00d      	b.n	80022d0 <_Z15deserialiseJSONv+0x80>
        case DeserializationError::NoMemory:
            printf("Not enough memory\n");
 80022b4:	480f      	ldr	r0, [pc, #60]	; (80022f4 <_Z15deserialiseJSONv+0xa4>)
 80022b6:	f017 f94f 	bl	8019558 <puts>
            configError = true;
 80022ba:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <_Z15deserialiseJSONv+0xa0>)
 80022bc:	2201      	movs	r2, #1
 80022be:	701a      	strb	r2, [r3, #0]
            break;
 80022c0:	e006      	b.n	80022d0 <_Z15deserialiseJSONv+0x80>
        default:
            printf("Deserialization failed\n");
 80022c2:	480d      	ldr	r0, [pc, #52]	; (80022f8 <_Z15deserialiseJSONv+0xa8>)
 80022c4:	f017 f948 	bl	8019558 <puts>
            configError = true;
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <_Z15deserialiseJSONv+0xa0>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	701a      	strb	r2, [r3, #0]
            break;
 80022ce:	bf00      	nop
    }
}
 80022d0:	bf00      	nop
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	0801a994 	.word	0x0801a994
 80022dc:	200002fc 	.word	0x200002fc
 80022e0:	20000320 	.word	0x20000320
 80022e4:	0801a9b8 	.word	0x0801a9b8
 80022e8:	0801a9d4 	.word	0x0801a9d4
 80022ec:	0801a9f0 	.word	0x0801a9f0
 80022f0:	20000170 	.word	0x20000170
 80022f4:	0801aa00 	.word	0x0801aa00
 80022f8:	0801aa14 	.word	0x0801aa14

080022fc <_Z13configThreadsv>:


void configThreads()
{
 80022fc:	b5b0      	push	{r4, r5, r7, lr}
 80022fe:	b0bc      	sub	sp, #240	; 0xf0
 8002300:	af00      	add	r7, sp, #0
    if (configError) return;
 8002302:	4bca      	ldr	r3, [pc, #808]	; (800262c <_Z13configThreadsv+0x330>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	f040 818c 	bne.w	8002624 <_Z13configThreadsv+0x328>

    printf("\n3. Configuring threads\n");
 800230c:	48c8      	ldr	r0, [pc, #800]	; (8002630 <_Z13configThreadsv+0x334>)
 800230e:	f017 f923 	bl	8019558 <puts>
 8002312:	4bc8      	ldr	r3, [pc, #800]	; (8002634 <_Z13configThreadsv+0x338>)
 8002314:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002318:	4bc7      	ldr	r3, [pc, #796]	; (8002638 <_Z13configThreadsv+0x33c>)
 800231a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800231e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002322:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                    public Visitable {
  typedef MemberProxy<TObject, TStringRef> this_type;

 public:
  FORCE_INLINE MemberProxy(TObject variant, TStringRef key)
      : _object(variant), _key(key) {}
 8002326:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800232a:	623b      	str	r3, [r7, #32]
 800232c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
    return MemberProxy<JsonDocument&, TChar*>(*this, key);
 8002332:	bf00      	nop
template <typename TImpl>
class VariantCasts {
 public:
  template <typename T>
  FORCE_INLINE operator T() const {
    return impl()->template as<T>();
 8002334:	f107 0320 	add.w	r3, r7, #32
 8002338:	4618      	mov	r0, r3
 800233a:	f000 ff8f 	bl	800325c <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRNS_12JsonDocumentEPKcEEE4implEv>
 800233e:	4603      	mov	r3, r0
 8002340:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002348:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    return getOrAddUpstreamMember().getOrAddMember(key);
  }

 private:
  FORCE_INLINE VariantRef getUpstreamMember() const {
    return _object.getMember(_key);
 800234c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800235c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    return VariantRef(&_pool, _data.getMember(adaptString(key)));
 8002360:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8002364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002368:	f103 0510 	add.w	r5, r3, #16
 800236c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002370:	f7ff fa5a 	bl	8001828 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8002374:	4603      	mov	r3, r0
 8002376:	4619      	mov	r1, r3
 8002378:	4628      	mov	r0, r5
 800237a:	f001 fdd4 	bl	8003f26 <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
 800237e:	4603      	mov	r3, r0
 8002380:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 8002384:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002388:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800238c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002390:	4618      	mov	r0, r3
 8002392:	f000 fe65 	bl	8003060 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8002396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800239a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800239c:	bf00      	nop
 800239e:	bf00      	nop
}

template <typename T>
inline typename enable_if<is_same<T, ArrayRef>::value, T>::type VariantRef::as()
    const {
  return ArrayRef(_pool, _data != 0 ? _data->asArray() : 0);
 80023a0:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80023a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <_Z13configThreadsv+0xb8>
 80023a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fa4b 	bl	8001846 <_ZN19ArduinoJson6101_11011VariantData7asArrayEv>
 80023b0:	4603      	mov	r3, r0
 80023b2:	e000      	b.n	80023b6 <_Z13configThreadsv+0xba>
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
 80023ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 public:
  typedef ArrayIterator iterator;

  FORCE_INLINE ArrayRef() : base_type(0), _pool(0) {}
  FORCE_INLINE ArrayRef(MemoryPool* pool, CollectionData* data)
      : base_type(data), _pool(pool) {}
 80023be:	f107 0318 	add.w	r3, r7, #24
 80023c2:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 fe59 	bl	800307e <_ZN19ArduinoJson6101_11012ArrayRefBaseINS_14CollectionDataEEC1EPS1_>
 80023cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 80023d4:	bf00      	nop
 80023d6:	bf00      	nop
  VariantRef addElement() const {
    return VariantRef(_pool, arrayAdd(_data, _pool));
  }

  FORCE_INLINE iterator begin() const {
    if (!_data) return iterator();
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d105      	bne.n	80023ea <_Z13configThreadsv+0xee>
 80023de:	f107 0310 	add.w	r3, r7, #16
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff fb4b 	bl	8001a7e <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>
 80023e8:	e00b      	b.n	8002402 <_Z13configThreadsv+0x106>
    return iterator(_pool, _data->head());
 80023ea:	69fc      	ldr	r4, [r7, #28]
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff f89c 	bl	800152c <_ZNK19ArduinoJson6101_11014CollectionData4headEv>
 80023f4:	4602      	mov	r2, r0
 80023f6:	f107 0310 	add.w	r3, r7, #16
 80023fa:	4621      	mov	r1, r4
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fb4c 	bl	8001a9a <_ZN19ArduinoJson6101_11013ArrayIteratorC1EPNS_10MemoryPoolEPNS_11VariantSlotE>
  }

  FORCE_INLINE iterator end() const {
    return iterator();
 8002402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fb39 	bl	8001a7e <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>

    JsonArray Threads = doc["Threads"];

    // create objects from JSON data
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it)
 800240c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002410:	f107 0310 	add.w	r3, r7, #16
 8002414:	4611      	mov	r1, r2
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fb6e 	bl	8001af8 <_ZNK19ArduinoJson6101_11013ArrayIteratorneERKS0_>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 8101 	beq.w	8002626 <_Z13configThreadsv+0x32a>
    {
        thread = *it;
 8002424:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002428:	f107 0210 	add.w	r2, r7, #16
 800242c:	4611      	mov	r1, r2
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fb46 	bl	8001ac0 <_ZNK19ArduinoJson6101_11013ArrayIteratordeEv>
 8002434:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002438:	4618      	mov	r0, r3
 800243a:	f000 ff1a 	bl	8003272 <_ZNK19ArduinoJson6101_11012VariantCastsINS_10VariantRefEE4implEv>
 800243e:	4603      	mov	r3, r0
 8002440:	66bb      	str	r3, [r7, #104]	; 0x68
}

template <typename T>
inline typename enable_if<is_same<T, ObjectRef>::value, T>::type
VariantRef::as() const {
  return ObjectRef(_pool, variantAsObject(_data));
 8002442:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002444:	685c      	ldr	r4, [r3, #4]
 8002446:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fb06 	bl	8001a5c <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE>
 8002450:	4603      	mov	r3, r0
 8002452:	667c      	str	r4, [r7, #100]	; 0x64
 8002454:	663b      	str	r3, [r7, #96]	; 0x60
 public:
  typedef ObjectIterator iterator;

  FORCE_INLINE ObjectRef() : base_type(0), _pool(0) {}
  FORCE_INLINE ObjectRef(MemoryPool* buf, CollectionData* data)
      : base_type(data), _pool(buf) {}
 8002456:	f107 0308 	add.w	r3, r7, #8
 800245a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800245c:	4618      	mov	r0, r3
 800245e:	f000 fe1d 	bl	800309c <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 8002462:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	bf00      	nop
 8002468:	bf00      	nop
 800246a:	4b74      	ldr	r3, [pc, #464]	; (800263c <_Z13configThreadsv+0x340>)
 800246c:	461a      	mov	r2, r3
 800246e:	f107 0308 	add.w	r3, r7, #8
 8002472:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002476:	e882 0003 	stmia.w	r2, {r0, r1}
 800247a:	4b71      	ldr	r3, [pc, #452]	; (8002640 <_Z13configThreadsv+0x344>)
 800247c:	677b      	str	r3, [r7, #116]	; 0x74
template <typename TObject>
template <typename TString>
inline typename enable_if<IsString<TString *>::value,
                          MemberProxy<const TObject &, TString *> >::type
    ObjectShortcuts<TObject>::operator[](TString *key) const {
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 800247e:	486f      	ldr	r0, [pc, #444]	; (800263c <_Z13configThreadsv+0x340>)
 8002480:	f000 ff02 	bl	8003288 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8002484:	4603      	mov	r3, r0
 8002486:	673b      	str	r3, [r7, #112]	; 0x70
 8002488:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800248a:	66fb      	str	r3, [r7, #108]	; 0x6c
      : _object(variant), _key(key) {}
 800248c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800248e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002492:	63fb      	str	r3, [r7, #60]	; 0x3c
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8002494:	bf00      	nop
 8002496:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800249a:	4618      	mov	r0, r3
 800249c:	f000 feff 	bl	800329e <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80024a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    return _object.getMember(_key);
 80024ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80024be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  // getMember(char*) const
  // getMember(const char*) const
  // getMember(const __FlashStringHelper*) const
  template <typename TChar>
  FORCE_INLINE VariantRef getMember(TChar* key) const {
    return get_impl(adaptString(key));
 80024c2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80024c6:	f7ff f9af 	bl	8001828 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 80024ca:	4602      	mov	r2, r0
 80024cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024d4:	607a      	str	r2, [r7, #4]
  }

 private:
  template <typename TAdaptedString>
  FORCE_INLINE VariantRef get_impl(TAdaptedString key) const {
    return VariantRef(_pool, objectGet(_data, key));
 80024d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024da:	685c      	ldr	r4, [r3, #4]
 80024dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f002 f8cb 	bl	8004680 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 80024ea:	4603      	mov	r3, r0
 80024ec:	67fc      	str	r4, [r7, #124]	; 0x7c
 80024ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80024f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024f4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fdb2 	bl	8003060 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 80024fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002500:	bf00      	nop
    return get_impl(adaptString(key));
 8002502:	bf00      	nop
 8002504:	bf00      	nop
  FORCE_INLINE typename enable_if<!is_same<T, ArrayRef>::value &&
                                      !is_same<T, ObjectRef>::value &&
                                      !is_same<T, VariantRef>::value,
                                  typename VariantAs<T>::type>::type
  as() const {
    return variantAs<T>(_data);
 8002506:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002508:	4618      	mov	r0, r3
 800250a:	f001 fb9b 	bl	8003c44 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
 800250e:	4603      	mov	r3, r0
 8002510:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8002512:	bf00      	nop
 8002514:	bf00      	nop

        const char* configor = thread["Thread"];
 8002516:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800251a:	4b4a      	ldr	r3, [pc, #296]	; (8002644 <_Z13configThreadsv+0x348>)
 800251c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8002520:	4846      	ldr	r0, [pc, #280]	; (800263c <_Z13configThreadsv+0x340>)
 8002522:	f000 feb1 	bl	8003288 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8002526:	4603      	mov	r3, r0
 8002528:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800252c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002530:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      : _object(variant), _key(key) {}
 8002534:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002538:	643b      	str	r3, [r7, #64]	; 0x40
 800253a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800253e:	647b      	str	r3, [r7, #68]	; 0x44
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8002540:	bf00      	nop
 8002542:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002546:	4618      	mov	r0, r3
 8002548:	f000 fea9 	bl	800329e <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 800254c:	4603      	mov	r3, r0
 800254e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002552:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002556:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    return _object.getMember(_key);
 800255a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800256a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800256e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8002572:	f7ff f959 	bl	8001828 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8002576:	4602      	mov	r2, r0
 8002578:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800257c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002580:	603a      	str	r2, [r7, #0]
    return VariantRef(_pool, objectGet(_data, key));
 8002582:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002586:	685c      	ldr	r4, [r3, #4]
 8002588:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6839      	ldr	r1, [r7, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f002 f875 	bl	8004680 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8002596:	4603      	mov	r3, r0
 8002598:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
 800259c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      : base_type(data), _pool(pool) {}
 80025a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80025a4:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 fd59 	bl	8003060 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 80025ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80025b2:	657b      	str	r3, [r7, #84]	; 0x54
 80025b4:	bf00      	nop
    return get_impl(adaptString(key));
 80025b6:	bf00      	nop
 80025b8:	bf00      	nop
    return variantAs<T>(_data);
 80025ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025bc:	4618      	mov	r0, r3
 80025be:	f001 fb52 	bl	8003c66 <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>
 80025c2:	4603      	mov	r3, r0
 80025c4:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 80025c6:	bf00      	nop
 80025c8:	bf00      	nop
        uint32_t    freq = thread["Frequency"];
 80025ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

        if (!strcmp(configor,"Base"))
 80025ce:	491e      	ldr	r1, [pc, #120]	; (8002648 <_Z13configThreadsv+0x34c>)
 80025d0:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 80025d4:	f7fd fe4c 	bl	8000270 <strcmp>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10a      	bne.n	80025f4 <_Z13configThreadsv+0x2f8>
        {
            base_freq = freq;
 80025de:	4a1b      	ldr	r2, [pc, #108]	; (800264c <_Z13configThreadsv+0x350>)
 80025e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80025e4:	6013      	str	r3, [r2, #0]
            printf("Setting BASE thread frequency to %ld\n", base_freq);
 80025e6:	4b19      	ldr	r3, [pc, #100]	; (800264c <_Z13configThreadsv+0x350>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4619      	mov	r1, r3
 80025ec:	4818      	ldr	r0, [pc, #96]	; (8002650 <_Z13configThreadsv+0x354>)
 80025ee:	f016 ff2d 	bl	801944c <iprintf>
 80025f2:	e011      	b.n	8002618 <_Z13configThreadsv+0x31c>
        }
        else if (!strcmp(configor,"Servo"))
 80025f4:	4917      	ldr	r1, [pc, #92]	; (8002654 <_Z13configThreadsv+0x358>)
 80025f6:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 80025fa:	f7fd fe39 	bl	8000270 <strcmp>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d109      	bne.n	8002618 <_Z13configThreadsv+0x31c>
        {
            servo_freq = freq;
 8002604:	4a14      	ldr	r2, [pc, #80]	; (8002658 <_Z13configThreadsv+0x35c>)
 8002606:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800260a:	6013      	str	r3, [r2, #0]
            printf("Setting SERVO thread frequency to %ld\n", servo_freq);
 800260c:	4b12      	ldr	r3, [pc, #72]	; (8002658 <_Z13configThreadsv+0x35c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4619      	mov	r1, r3
 8002612:	4812      	ldr	r0, [pc, #72]	; (800265c <_Z13configThreadsv+0x360>)
 8002614:	f016 ff1a 	bl	801944c <iprintf>
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it)
 8002618:	f107 0310 	add.w	r3, r7, #16
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fa7f 	bl	8001b20 <_ZN19ArduinoJson6101_11013ArrayIteratorppEv>
 8002622:	e6ee      	b.n	8002402 <_Z13configThreadsv+0x106>
    if (configError) return;
 8002624:	bf00      	nop
        }
    }
}
 8002626:	37f0      	adds	r7, #240	; 0xf0
 8002628:	46bd      	mov	sp, r7
 800262a:	bdb0      	pop	{r4, r5, r7, pc}
 800262c:	20000170 	.word	0x20000170
 8002630:	0801aa2c 	.word	0x0801aa2c
 8002634:	0801aa44 	.word	0x0801aa44
 8002638:	20000320 	.word	0x20000320
 800263c:	20000340 	.word	0x20000340
 8002640:	0801aa4c 	.word	0x0801aa4c
 8002644:	0801aa54 	.word	0x0801aa54
 8002648:	0801aa60 	.word	0x0801aa60
 800264c:	20000000 	.word	0x20000000
 8002650:	0801aa68 	.word	0x0801aa68
 8002654:	0801aa90 	.word	0x0801aa90
 8002658:	20000004 	.word	0x20000004
 800265c:	0801aa98 	.word	0x0801aa98

08002660 <_Z11loadModulesv>:

void loadModules()
{
 8002660:	b5b0      	push	{r4, r5, r7, lr}
 8002662:	b0c4      	sub	sp, #272	; 0x110
 8002664:	af00      	add	r7, sp, #0
    printf("\n4. Loading modules\n");
 8002666:	485a      	ldr	r0, [pc, #360]	; (80027d0 <_Z11loadModulesv+0x170>)
 8002668:	f016 ff76 	bl	8019558 <puts>

    // TESTING
    Module* blink = new Blink("PC_3", servo_freq, 1);
 800266c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002670:	4618      	mov	r0, r3
 8002672:	f016 fbfe 	bl	8018e72 <_ZNSaIcEC1Ev>
 8002676:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800267a:	f107 0320 	add.w	r3, r7, #32
 800267e:	4955      	ldr	r1, [pc, #340]	; (80027d4 <_Z11loadModulesv+0x174>)
 8002680:	4618      	mov	r0, r3
 8002682:	f016 fd8f 	bl	80191a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002686:	f107 0520 	add.w	r5, r7, #32
 800268a:	2024      	movs	r0, #36	; 0x24
 800268c:	f016 fbdd 	bl	8018e4a <_Znwj>
 8002690:	4603      	mov	r3, r0
 8002692:	461c      	mov	r4, r3
 8002694:	4b50      	ldr	r3, [pc, #320]	; (80027d8 <_Z11loadModulesv+0x178>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	2301      	movs	r3, #1
 800269a:	4629      	mov	r1, r5
 800269c:	4620      	mov	r0, r4
 800269e:	f002 ff95 	bl	80055cc <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm>
 80026a2:	f8c7 410c 	str.w	r4, [r7, #268]	; 0x10c
 80026a6:	f107 0320 	add.w	r3, r7, #32
 80026aa:	4618      	mov	r0, r3
 80026ac:	f016 fc99 	bl	8018fe2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80026b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80026b4:	4618      	mov	r0, r3
 80026b6:	f016 fbdd 	bl	8018e74 <_ZNSaIcED1Ev>
    servoThread->registerModule(blink);
 80026ba:	4b48      	ldr	r3, [pc, #288]	; (80027dc <_Z11loadModulesv+0x17c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80026c2:	4618      	mov	r0, r3
 80026c4:	f004 ffa4 	bl	8007610 <_ZN9pruThread14registerModuleEP6Module>

	// Ethernet communication monitoring
	comms = new RemoraComms();
 80026c8:	2018      	movs	r0, #24
 80026ca:	f016 fbbe 	bl	8018e4a <_Znwj>
 80026ce:	4603      	mov	r3, r0
 80026d0:	461c      	mov	r4, r3
 80026d2:	4620      	mov	r0, r4
 80026d4:	f003 f80e 	bl	80056f4 <_ZN11RemoraCommsC1Ev>
 80026d8:	4b41      	ldr	r3, [pc, #260]	; (80027e0 <_Z11loadModulesv+0x180>)
 80026da:	601c      	str	r4, [r3, #0]
	servoThread->registerModule(comms);
 80026dc:	4b3f      	ldr	r3, [pc, #252]	; (80027dc <_Z11loadModulesv+0x17c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a3f      	ldr	r2, [pc, #252]	; (80027e0 <_Z11loadModulesv+0x180>)
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	4611      	mov	r1, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f004 ff92 	bl	8007610 <_ZN9pruThread14registerModuleEP6Module>

    if (configError) return;
 80026ec:	4b3d      	ldr	r3, [pc, #244]	; (80027e4 <_Z11loadModulesv+0x184>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f040 81c7 	bne.w	8002a84 <_Z11loadModulesv+0x424>
 80026f6:	4b3c      	ldr	r3, [pc, #240]	; (80027e8 <_Z11loadModulesv+0x188>)
 80026f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80026fc:	4b3b      	ldr	r3, [pc, #236]	; (80027ec <_Z11loadModulesv+0x18c>)
 80026fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002706:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      : _object(variant), _key(key) {}
 800270a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800270e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002710:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002714:	643b      	str	r3, [r7, #64]	; 0x40
    return MemberProxy<JsonDocument&, TChar*>(*this, key);
 8002716:	bf00      	nop
 8002718:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800271c:	4618      	mov	r0, r3
 800271e:	f000 fd9d 	bl	800325c <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRNS_12JsonDocumentEPKcEEE4implEv>
 8002722:	4603      	mov	r3, r0
 8002724:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002728:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800272c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    return _object.getMember(_key);
 8002730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8002740:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    return VariantRef(&_pool, _data.getMember(adaptString(key)));
 8002744:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 8002748:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800274c:	f103 0510 	add.w	r5, r3, #16
 8002750:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8002754:	f7ff f868 	bl	8001828 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8002758:	4603      	mov	r3, r0
 800275a:	4619      	mov	r1, r3
 800275c:	4628      	mov	r0, r5
 800275e:	f001 fbe2 	bl	8003f26 <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
 8002762:	4603      	mov	r3, r0
 8002764:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002768:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      : base_type(data), _pool(pool) {}
 800276c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002770:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8002774:	4618      	mov	r0, r3
 8002776:	f000 fc73 	bl	8003060 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 800277a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800277e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002780:	bf00      	nop
 8002782:	bf00      	nop
  return ArrayRef(_pool, _data != 0 ? _data->asArray() : 0);
 8002784:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8002786:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <_Z11loadModulesv+0x138>
 800278c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff f859 	bl	8001846 <_ZN19ArduinoJson6101_11011VariantData7asArrayEv>
 8002794:	4603      	mov	r3, r0
 8002796:	e000      	b.n	800279a <_Z11loadModulesv+0x13a>
 8002798:	2300      	movs	r3, #0
 800279a:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 800279e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      : base_type(data), _pool(pool) {}
 80027a2:	f107 0318 	add.w	r3, r7, #24
 80027a6:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 fc67 	bl	800307e <_ZN19ArduinoJson6101_11012ArrayRefBaseINS_14CollectionDataEEC1EPS1_>
 80027b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80027b4:	61fb      	str	r3, [r7, #28]
 80027b6:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 80027b8:	bf00      	nop
 80027ba:	bf00      	nop
    if (!_data) return iterator();
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d116      	bne.n	80027f0 <_Z11loadModulesv+0x190>
 80027c2:	f107 0310 	add.w	r3, r7, #16
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff f959 	bl	8001a7e <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>
 80027cc:	e01c      	b.n	8002808 <_Z11loadModulesv+0x1a8>
 80027ce:	bf00      	nop
 80027d0:	0801aac0 	.word	0x0801aac0
 80027d4:	0801aad4 	.word	0x0801aad4
 80027d8:	20000004 	.word	0x20000004
 80027dc:	20000174 	.word	0x20000174
 80027e0:	2000017c 	.word	0x2000017c
 80027e4:	20000170 	.word	0x20000170
 80027e8:	0801aadc 	.word	0x0801aadc
 80027ec:	20000320 	.word	0x20000320
    return iterator(_pool, _data->head());
 80027f0:	69fc      	ldr	r4, [r7, #28]
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fe fe99 	bl	800152c <_ZNK19ArduinoJson6101_11014CollectionData4headEv>
 80027fa:	4602      	mov	r2, r0
 80027fc:	f107 0310 	add.w	r3, r7, #16
 8002800:	4621      	mov	r1, r4
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff f949 	bl	8001a9a <_ZN19ArduinoJson6101_11013ArrayIteratorC1EPNS_10MemoryPoolEPNS_11VariantSlotE>
    return iterator();
 8002808:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff f936 	bl	8001a7e <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>

    JsonArray Modules = doc["Modules"];

    // create objects from JSON data
    for (JsonArray::iterator it=Modules.begin(); it!=Modules.end(); ++it)
 8002812:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002816:	f107 0310 	add.w	r3, r7, #16
 800281a:	4611      	mov	r1, r2
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff f96b 	bl	8001af8 <_ZNK19ArduinoJson6101_11013ArrayIteratorneERKS0_>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 812e 	beq.w	8002a86 <_Z11loadModulesv+0x426>
    {
        module = *it;
 800282a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800282e:	f107 0210 	add.w	r2, r7, #16
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff f943 	bl	8001ac0 <_ZNK19ArduinoJson6101_11013ArrayIteratordeEv>
 800283a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fd17 	bl	8003272 <_ZNK19ArduinoJson6101_11012VariantCastsINS_10VariantRefEE4implEv>
 8002844:	4603      	mov	r3, r0
 8002846:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return ObjectRef(_pool, variantAsObject(_data));
 800284a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800284e:	685c      	ldr	r4, [r3, #4]
 8002850:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff f900 	bl	8001a5c <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE>
 800285c:	4603      	mov	r3, r0
 800285e:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8002862:	67fb      	str	r3, [r7, #124]	; 0x7c
      : base_type(data), _pool(buf) {}
 8002864:	f107 0308 	add.w	r3, r7, #8
 8002868:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800286a:	4618      	mov	r0, r3
 800286c:	f000 fc16 	bl	800309c <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 8002870:	f107 0308 	add.w	r3, r7, #8
 8002874:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	bf00      	nop
 800287c:	bf00      	nop
 800287e:	4b84      	ldr	r3, [pc, #528]	; (8002a90 <_Z11loadModulesv+0x430>)
 8002880:	f107 0208 	add.w	r2, r7, #8
 8002884:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002888:	e883 0003 	stmia.w	r3, {r0, r1}
 800288c:	4b81      	ldr	r3, [pc, #516]	; (8002a94 <_Z11loadModulesv+0x434>)
 800288e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8002892:	487f      	ldr	r0, [pc, #508]	; (8002a90 <_Z11loadModulesv+0x430>)
 8002894:	f000 fcf8 	bl	8003288 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8002898:	4603      	mov	r3, r0
 800289a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800289e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      : _object(variant), _key(key) {}
 80028a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028aa:	657b      	str	r3, [r7, #84]	; 0x54
 80028ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028b0:	65bb      	str	r3, [r7, #88]	; 0x58
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 80028b2:	bf00      	nop
 80028b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fcf0 	bl	800329e <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 80028be:	4603      	mov	r3, r0
 80028c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80028c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    return _object.getMember(_key);
 80028cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80028dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    return get_impl(adaptString(key));
 80028e0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80028e4:	f7fe ffa0 	bl	8001828 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 80028e8:	4602      	mov	r2, r0
 80028ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80028f2:	1d3b      	adds	r3, r7, #4
 80028f4:	601a      	str	r2, [r3, #0]
    return VariantRef(_pool, objectGet(_data, key));
 80028f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028fa:	685c      	ldr	r4, [r3, #4]
 80028fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	1d3b      	adds	r3, r7, #4
 8002904:	6819      	ldr	r1, [r3, #0]
 8002906:	4610      	mov	r0, r2
 8002908:	f001 feba 	bl	8004680 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 800290c:	4603      	mov	r3, r0
 800290e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002912:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002916:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800291a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800291e:	4618      	mov	r0, r3
 8002920:	f000 fb9e 	bl	8003060 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8002924:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002928:	67bb      	str	r3, [r7, #120]	; 0x78
 800292a:	bf00      	nop
    return get_impl(adaptString(key));
 800292c:	bf00      	nop
 800292e:	bf00      	nop
    return variantAs<T>(_data);
 8002930:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002932:	4618      	mov	r0, r3
 8002934:	f001 f986 	bl	8003c44 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
 8002938:	4603      	mov	r3, r0
 800293a:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 800293c:	bf00      	nop
 800293e:	bf00      	nop

        const char* thread = module["Thread"];
 8002940:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002944:	4b54      	ldr	r3, [pc, #336]	; (8002a98 <_Z11loadModulesv+0x438>)
 8002946:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 800294a:	4851      	ldr	r0, [pc, #324]	; (8002a90 <_Z11loadModulesv+0x430>)
 800294c:	f000 fc9c 	bl	8003288 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8002950:	4603      	mov	r3, r0
 8002952:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002956:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800295a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      : _object(variant), _key(key) {}
 800295e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002962:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002964:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002968:	663b      	str	r3, [r7, #96]	; 0x60
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 800296a:	bf00      	nop
 800296c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002970:	4618      	mov	r0, r3
 8002972:	f000 fc94 	bl	800329e <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8002976:	4603      	mov	r3, r0
 8002978:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800297c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002980:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    return _object.getMember(_key);
 8002984:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8002994:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002998:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800299c:	f7fe ff44 	bl	8001828 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 80029a0:	4602      	mov	r2, r0
 80029a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80029a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80029aa:	463b      	mov	r3, r7
 80029ac:	601a      	str	r2, [r3, #0]
    return VariantRef(_pool, objectGet(_data, key));
 80029ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029b2:	685c      	ldr	r4, [r3, #4]
 80029b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	463b      	mov	r3, r7
 80029bc:	6819      	ldr	r1, [r3, #0]
 80029be:	4610      	mov	r0, r2
 80029c0:	f001 fe5e 	bl	8004680 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 80029ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      : base_type(data), _pool(pool) {}
 80029ce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029d2:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 fb42 	bl	8003060 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 80029dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029e0:	673b      	str	r3, [r7, #112]	; 0x70
 80029e2:	bf00      	nop
    return get_impl(adaptString(key));
 80029e4:	bf00      	nop
 80029e6:	bf00      	nop
    return variantAs<T>(_data);
 80029e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ea:	4618      	mov	r0, r3
 80029ec:	f001 f92a 	bl	8003c44 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
 80029f0:	4603      	mov	r3, r0
 80029f2:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 80029f4:	bf00      	nop
 80029f6:	bf00      	nop
        const char* type = module["Type"];
 80029f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

        if (!strcmp(thread,"Base"))
 80029fc:	4927      	ldr	r1, [pc, #156]	; (8002a9c <_Z11loadModulesv+0x43c>)
 80029fe:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8002a02:	f7fd fc35 	bl	8000270 <strcmp>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10d      	bne.n	8002a28 <_Z11loadModulesv+0x3c8>
        {
            printf("\nBase thread object\n");
 8002a0c:	4824      	ldr	r0, [pc, #144]	; (8002aa0 <_Z11loadModulesv+0x440>)
 8002a0e:	f016 fda3 	bl	8019558 <puts>

            if (!strcmp(type,"Stepgen"))
 8002a12:	4924      	ldr	r1, [pc, #144]	; (8002aa4 <_Z11loadModulesv+0x444>)
 8002a14:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8002a18:	f7fd fc2a 	bl	8000270 <strcmp>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d12a      	bne.n	8002a78 <_Z11loadModulesv+0x418>
            {
                createStepgen();
 8002a22:	f004 f9e7 	bl	8006df4 <_Z13createStepgenv>
 8002a26:	e027      	b.n	8002a78 <_Z11loadModulesv+0x418>
            }
         }
        else if (!strcmp(thread,"Servo"))
 8002a28:	491f      	ldr	r1, [pc, #124]	; (8002aa8 <_Z11loadModulesv+0x448>)
 8002a2a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8002a2e:	f7fd fc1f 	bl	8000270 <strcmp>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d11f      	bne.n	8002a78 <_Z11loadModulesv+0x418>
        {
        	if (!strcmp(type,"Digital Pin"))
 8002a38:	491c      	ldr	r1, [pc, #112]	; (8002aac <_Z11loadModulesv+0x44c>)
 8002a3a:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8002a3e:	f7fd fc17 	bl	8000270 <strcmp>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d102      	bne.n	8002a4e <_Z11loadModulesv+0x3ee>
			{
				createDigitalPin();
 8002a48:	f002 fee6 	bl	8005818 <_Z16createDigitalPinv>
 8002a4c:	e014      	b.n	8002a78 <_Z11loadModulesv+0x418>
			}
        	else if (!strcmp(type,"Spindle PWM"))
 8002a4e:	4918      	ldr	r1, [pc, #96]	; (8002ab0 <_Z11loadModulesv+0x450>)
 8002a50:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8002a54:	f7fd fc0c 	bl	8000270 <strcmp>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d102      	bne.n	8002a64 <_Z11loadModulesv+0x404>
			{
				createSpindlePWM();
 8002a5e:	f003 ffc3 	bl	80069e8 <_Z16createSpindlePWMv>
 8002a62:	e009      	b.n	8002a78 <_Z11loadModulesv+0x418>
			}
        	else if (!strcmp(type,"NVMPG"))
 8002a64:	4913      	ldr	r1, [pc, #76]	; (8002ab4 <_Z11loadModulesv+0x454>)
 8002a66:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8002a6a:	f7fd fc01 	bl	8000270 <strcmp>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <_Z11loadModulesv+0x418>
			{
				createNVMPG();
 8002a74:	f003 fd1e 	bl	80064b4 <_Z11createNVMPGv>
    for (JsonArray::iterator it=Modules.begin(); it!=Modules.end(); ++it)
 8002a78:	f107 0310 	add.w	r3, r7, #16
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff f84f 	bl	8001b20 <_ZN19ArduinoJson6101_11013ArrayIteratorppEv>
 8002a82:	e6c1      	b.n	8002808 <_Z11loadModulesv+0x1a8>
    if (configError) return;
 8002a84:	bf00      	nop
			}
        }
    }

}
 8002a86:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000348 	.word	0x20000348
 8002a94:	0801aa4c 	.word	0x0801aa4c
 8002a98:	0801aae4 	.word	0x0801aae4
 8002a9c:	0801aa60 	.word	0x0801aa60
 8002aa0:	0801aaec 	.word	0x0801aaec
 8002aa4:	0801ab00 	.word	0x0801ab00
 8002aa8:	0801aa90 	.word	0x0801aa90
 8002aac:	0801ab08 	.word	0x0801ab08
 8002ab0:	0801ab14 	.word	0x0801ab14
 8002ab4:	0801ab20 	.word	0x0801ab20

08002ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002abe:	f005 fc27 	bl	8008310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ac2:	f000 f915 	bl	8002cf0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LWIP_Init();
 8002ac6:	f009 feab 	bl	800c820 <MX_LWIP_Init>
  MX_USART1_UART_Init();
 8002aca:	f000 f985 	bl	8002dd8 <_ZL19MX_USART1_UART_Initv>

  /* USER CODE BEGIN 2 */
  enum State currentState;
  enum State prevState;

  currentState = ST_SETUP;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	77fb      	strb	r3, [r7, #31]
  prevState = ST_RESET;
 8002ad2:	2305      	movs	r3, #5
 8002ad4:	77bb      	strb	r3, [r7, #30]

  printf("\nRemora-NVEM starting\n");
 8002ad6:	4872      	ldr	r0, [pc, #456]	; (8002ca0 <main+0x1e8>)
 8002ad8:	f016 fd3e 	bl	8019558 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(currentState){
 8002adc:	7ffb      	ldrb	r3, [r7, #31]
 8002ade:	2b06      	cmp	r3, #6
 8002ae0:	f200 80bd 	bhi.w	8002c5e <main+0x1a6>
 8002ae4:	a201      	add	r2, pc, #4	; (adr r2, 8002aec <main+0x34>)
 8002ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aea:	bf00      	nop
 8002aec:	08002b09 	.word	0x08002b09
 8002af0:	08002b53 	.word	0x08002b53
 8002af4:	08002b9f 	.word	0x08002b9f
 8002af8:	08002bc7 	.word	0x08002bc7
 8002afc:	08002bf9 	.word	0x08002bf9
 8002b00:	08002c11 	.word	0x08002c11
 8002b04:	08002c53 	.word	0x08002c53
	          case ST_SETUP:
	              // do setup tasks
	              if (currentState != prevState)
 8002b08:	7ffa      	ldrb	r2, [r7, #31]
 8002b0a:	7fbb      	ldrb	r3, [r7, #30]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d002      	beq.n	8002b16 <main+0x5e>
	              {
	                  printf("\n## Entering SETUP state\n\n");
 8002b10:	4864      	ldr	r0, [pc, #400]	; (8002ca4 <main+0x1ec>)
 8002b12:	f016 fd21 	bl	8019558 <puts>
	              }
	              prevState = currentState;
 8002b16:	7ffb      	ldrb	r3, [r7, #31]
 8002b18:	77bb      	strb	r3, [r7, #30]

	              jsonFromFlash(strJson);
 8002b1a:	463b      	mov	r3, r7
 8002b1c:	4962      	ldr	r1, [pc, #392]	; (8002ca8 <main+0x1f0>)
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f016 fb0c 	bl	801913c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002b24:	463b      	mov	r3, r7
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff fb2a 	bl	8002180 <_Z13jsonFromFlashNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002b2c:	463b      	mov	r3, r7
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f016 fa57 	bl	8018fe2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	              deserialiseJSON();
 8002b34:	f7ff fb8c 	bl	8002250 <_Z15deserialiseJSONv>
	              configThreads();
 8002b38:	f7ff fbe0 	bl	80022fc <_Z13configThreadsv>
	              createThreads();
 8002b3c:	f7ff fa10 	bl	8001f60 <_Z13createThreadsv>
	              //debugThreadHigh();
	              loadModules();
 8002b40:	f7ff fd8e 	bl	8002660 <_Z11loadModulesv>
	              //debugThreadLow();
	              udpServer_init();
 8002b44:	f000 f97c 	bl	8002e40 <_Z14udpServer_initv>
	              IAP_tftpd_init();
 8002b48:	f002 fcc0 	bl	80054cc <_Z14IAP_tftpd_initv>

	              currentState = ST_START;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	77fb      	strb	r3, [r7, #31]
	              break;
 8002b50:	e085      	b.n	8002c5e <main+0x1a6>

	          case ST_START:
	              // do start tasks
	              if (currentState != prevState)
 8002b52:	7ffa      	ldrb	r2, [r7, #31]
 8002b54:	7fbb      	ldrb	r3, [r7, #30]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d002      	beq.n	8002b60 <main+0xa8>
	              {
	                  printf("\n## Entering START state\n");
 8002b5a:	4854      	ldr	r0, [pc, #336]	; (8002cac <main+0x1f4>)
 8002b5c:	f016 fcfc 	bl	8019558 <puts>
	              }
	              prevState = currentState;
 8002b60:	7ffb      	ldrb	r3, [r7, #31]
 8002b62:	77bb      	strb	r3, [r7, #30]

	              if (!threadsRunning)
 8002b64:	4b52      	ldr	r3, [pc, #328]	; (8002cb0 <main+0x1f8>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	f083 0301 	eor.w	r3, r3, #1
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d012      	beq.n	8002b98 <main+0xe0>
	              {
	                  // Start the threads
	                  printf("\nStarting the BASE thread\n");
 8002b72:	4850      	ldr	r0, [pc, #320]	; (8002cb4 <main+0x1fc>)
 8002b74:	f016 fcf0 	bl	8019558 <puts>
	                  baseThread->startThread();
 8002b78:	4b4f      	ldr	r3, [pc, #316]	; (8002cb8 <main+0x200>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f004 fd2b 	bl	80075d8 <_ZN9pruThread11startThreadEv>

	                  printf("\nStarting the SERVO thread\n");
 8002b82:	484e      	ldr	r0, [pc, #312]	; (8002cbc <main+0x204>)
 8002b84:	f016 fce8 	bl	8019558 <puts>
	                  servoThread->startThread();
 8002b88:	4b4d      	ldr	r3, [pc, #308]	; (8002cc0 <main+0x208>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f004 fd23 	bl	80075d8 <_ZN9pruThread11startThreadEv>

	                  threadsRunning = true;
 8002b92:	4b47      	ldr	r3, [pc, #284]	; (8002cb0 <main+0x1f8>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	701a      	strb	r2, [r3, #0]
	              }

	              currentState = ST_IDLE;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	77fb      	strb	r3, [r7, #31]

	              break;
 8002b9c:	e05f      	b.n	8002c5e <main+0x1a6>


	          case ST_IDLE:
	              // do something when idle
	              if (currentState != prevState)
 8002b9e:	7ffa      	ldrb	r2, [r7, #31]
 8002ba0:	7fbb      	ldrb	r3, [r7, #30]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d002      	beq.n	8002bac <main+0xf4>
	              {
	                  printf("\n## Entering IDLE state\n");
 8002ba6:	4847      	ldr	r0, [pc, #284]	; (8002cc4 <main+0x20c>)
 8002ba8:	f016 fcd6 	bl	8019558 <puts>
	              }
	              prevState = currentState;
 8002bac:	7ffb      	ldrb	r3, [r7, #31]
 8002bae:	77bb      	strb	r3, [r7, #30]

	              //wait for data before changing to running state
	              if (comms->getStatus())
 8002bb0:	4b45      	ldr	r3, [pc, #276]	; (8002cc8 <main+0x210>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f002 fdea 	bl	800578e <_ZN11RemoraComms9getStatusEv>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d04b      	beq.n	8002c58 <main+0x1a0>
	              {
	                  currentState = ST_RUNNING;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	77fb      	strb	r3, [r7, #31]
	              }

	              break;
 8002bc4:	e048      	b.n	8002c58 <main+0x1a0>

	          case ST_RUNNING:
	              // do running tasks
	              if (currentState != prevState)
 8002bc6:	7ffa      	ldrb	r2, [r7, #31]
 8002bc8:	7fbb      	ldrb	r3, [r7, #30]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d002      	beq.n	8002bd4 <main+0x11c>
	              {
	                  printf("\n## Entering RUNNING state\n");
 8002bce:	483f      	ldr	r0, [pc, #252]	; (8002ccc <main+0x214>)
 8002bd0:	f016 fcc2 	bl	8019558 <puts>
	              }
	              prevState = currentState;
 8002bd4:	7ffb      	ldrb	r3, [r7, #31]
 8002bd6:	77bb      	strb	r3, [r7, #30]

	              if (comms->getStatus() == false)
 8002bd8:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <main+0x210>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f002 fdd6 	bl	800578e <_ZN11RemoraComms9getStatusEv>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf0c      	ite	eq
 8002be8:	2301      	moveq	r3, #1
 8002bea:	2300      	movne	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d034      	beq.n	8002c5c <main+0x1a4>
	              {
	            	  currentState = ST_RESET;
 8002bf2:	2305      	movs	r3, #5
 8002bf4:	77fb      	strb	r3, [r7, #31]
	              }

	              break;
 8002bf6:	e031      	b.n	8002c5c <main+0x1a4>

	          case ST_STOP:
	              // do stop tasks
	              if (currentState != prevState)
 8002bf8:	7ffa      	ldrb	r2, [r7, #31]
 8002bfa:	7fbb      	ldrb	r3, [r7, #30]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d002      	beq.n	8002c06 <main+0x14e>
	              {
	                  printf("\n## Entering STOP state\n");
 8002c00:	4833      	ldr	r0, [pc, #204]	; (8002cd0 <main+0x218>)
 8002c02:	f016 fca9 	bl	8019558 <puts>
	              }
	              prevState = currentState;
 8002c06:	7ffb      	ldrb	r3, [r7, #31]
 8002c08:	77bb      	strb	r3, [r7, #30]


	              currentState = ST_STOP;
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	77fb      	strb	r3, [r7, #31]
	              break;
 8002c0e:	e026      	b.n	8002c5e <main+0x1a6>

	          case ST_RESET:
	              // do reset tasks
	              if (currentState != prevState)
 8002c10:	7ffa      	ldrb	r2, [r7, #31]
 8002c12:	7fbb      	ldrb	r3, [r7, #30]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d002      	beq.n	8002c1e <main+0x166>
	              {
	                  printf("\n## Entering RESET state\n");
 8002c18:	482e      	ldr	r0, [pc, #184]	; (8002cd4 <main+0x21c>)
 8002c1a:	f016 fc9d 	bl	8019558 <puts>
	              }
	              prevState = currentState;
 8002c1e:	7ffb      	ldrb	r3, [r7, #31]
 8002c20:	77bb      	strb	r3, [r7, #30]

	              // set all of the rxData buffer to 0
	              // rxData.rxBuffer is volatile so need to do this the long way. memset cannot be used for volatile
	              printf("   Resetting rxBuffer\n");
 8002c22:	482d      	ldr	r0, [pc, #180]	; (8002cd8 <main+0x220>)
 8002c24:	f016 fc98 	bl	8019558 <puts>
	              {
	                  int n = sizeof(rxData.rxBuffer);
 8002c28:	2344      	movs	r3, #68	; 0x44
 8002c2a:	61bb      	str	r3, [r7, #24]
	                  while(n-- > 0)
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	1e5a      	subs	r2, r3, #1
 8002c30:	61ba      	str	r2, [r7, #24]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	bfcc      	ite	gt
 8002c36:	2301      	movgt	r3, #1
 8002c38:	2300      	movle	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <main+0x194>
	                  {
	                      rxData.rxBuffer[n] = 0;
 8002c40:	4a26      	ldr	r2, [pc, #152]	; (8002cdc <main+0x224>)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	4413      	add	r3, r2
 8002c46:	2200      	movs	r2, #0
 8002c48:	701a      	strb	r2, [r3, #0]
	                  while(n-- > 0)
 8002c4a:	e7ef      	b.n	8002c2c <main+0x174>
	                  }
	              }

	              currentState = ST_IDLE;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	77fb      	strb	r3, [r7, #31]
	              break;
 8002c50:	e005      	b.n	8002c5e <main+0x1a6>

	          case ST_WDRESET:
	        	  // force a reset
	        	  HAL_NVIC_SystemReset();
 8002c52:	f005 fd0e 	bl	8008672 <HAL_NVIC_SystemReset>
	              break;
 8002c56:	e002      	b.n	8002c5e <main+0x1a6>
	              break;
 8002c58:	bf00      	nop
 8002c5a:	e000      	b.n	8002c5e <main+0x1a6>
	              break;
 8002c5c:	bf00      	nop
	  }

	  // do Ethernet tasks
	  ethernetif_input(&gnetif);
 8002c5e:	4820      	ldr	r0, [pc, #128]	; (8002ce0 <main+0x228>)
 8002c60:	f00a f8ca 	bl	800cdf8 <ethernetif_input>
	  sys_check_timeouts();
 8002c64:	f011 f9f0 	bl	8014048 <sys_check_timeouts>

	  if (newJson)
 8002c68:	4b1e      	ldr	r3, [pc, #120]	; (8002ce4 <main+0x22c>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f43f af34 	beq.w	8002adc <main+0x24>
	  {
		  printf("\n\nChecking new configuration file\n");
 8002c74:	481c      	ldr	r0, [pc, #112]	; (8002ce8 <main+0x230>)
 8002c76:	f016 fc6f 	bl	8019558 <puts>
		  if (checkJson() > 0)
 8002c7a:	f7ff f9b7 	bl	8001fec <_Z9checkJsonv>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	bfcc      	ite	gt
 8002c84:	2301      	movgt	r3, #1
 8002c86:	2300      	movle	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f43f af26 	beq.w	8002adc <main+0x24>
		  {
			  printf("Moving new config file to Flash storage\n");
 8002c90:	4816      	ldr	r0, [pc, #88]	; (8002cec <main+0x234>)
 8002c92:	f016 fc61 	bl	8019558 <puts>
			  moveJson();
 8002c96:	f7ff fa35 	bl	8002104 <_Z8moveJsonv>

			  // force a reset to load new JSON configuration
			  HAL_NVIC_SystemReset();
 8002c9a:	f005 fcea 	bl	8008672 <HAL_NVIC_SystemReset>
		  }
	  }
  }
 8002c9e:	e71d      	b.n	8002adc <main+0x24>
 8002ca0:	0801ab38 	.word	0x0801ab38
 8002ca4:	0801ab50 	.word	0x0801ab50
 8002ca8:	200002fc 	.word	0x200002fc
 8002cac:	0801ab6c 	.word	0x0801ab6c
 8002cb0:	20000171 	.word	0x20000171
 8002cb4:	0801ab88 	.word	0x0801ab88
 8002cb8:	20000178 	.word	0x20000178
 8002cbc:	0801aba4 	.word	0x0801aba4
 8002cc0:	20000174 	.word	0x20000174
 8002cc4:	0801abc0 	.word	0x0801abc0
 8002cc8:	2000017c 	.word	0x2000017c
 8002ccc:	0801abd8 	.word	0x0801abd8
 8002cd0:	0801abf4 	.word	0x0801abf4
 8002cd4:	0801ac0c 	.word	0x0801ac0c
 8002cd8:	0801ac28 	.word	0x0801ac28
 8002cdc:	200001c8 	.word	0x200001c8
 8002ce0:	20000138 	.word	0x20000138
 8002ce4:	200002f4 	.word	0x200002f4
 8002ce8:	0801ac40 	.word	0x0801ac40
 8002cec:	0801ac64 	.word	0x0801ac64

08002cf0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b094      	sub	sp, #80	; 0x50
 8002cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cf6:	f107 0320 	add.w	r3, r7, #32
 8002cfa:	2230      	movs	r2, #48	; 0x30
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f016 faf2 	bl	80192e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d04:	f107 030c 	add.w	r3, r7, #12
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	60da      	str	r2, [r3, #12]
 8002d12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d14:	2300      	movs	r3, #0
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	4b2d      	ldr	r3, [pc, #180]	; (8002dd0 <_Z18SystemClock_Configv+0xe0>)
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	4a2c      	ldr	r2, [pc, #176]	; (8002dd0 <_Z18SystemClock_Configv+0xe0>)
 8002d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d22:	6413      	str	r3, [r2, #64]	; 0x40
 8002d24:	4b2a      	ldr	r3, [pc, #168]	; (8002dd0 <_Z18SystemClock_Configv+0xe0>)
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d30:	2300      	movs	r3, #0
 8002d32:	607b      	str	r3, [r7, #4]
 8002d34:	4b27      	ldr	r3, [pc, #156]	; (8002dd4 <_Z18SystemClock_Configv+0xe4>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a26      	ldr	r2, [pc, #152]	; (8002dd4 <_Z18SystemClock_Configv+0xe4>)
 8002d3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	4b24      	ldr	r3, [pc, #144]	; (8002dd4 <_Z18SystemClock_Configv+0xe4>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d48:	607b      	str	r3, [r7, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d50:	2301      	movs	r3, #1
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d54:	2310      	movs	r3, #16
 8002d56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d60:	2308      	movs	r3, #8
 8002d62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002d64:	23a8      	movs	r3, #168	; 0xa8
 8002d66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d70:	f107 0320 	add.w	r3, r7, #32
 8002d74:	4618      	mov	r0, r3
 8002d76:	f007 fdb9 	bl	800a8ec <HAL_RCC_OscConfig>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	bf14      	ite	ne
 8002d80:	2301      	movne	r3, #1
 8002d82:	2300      	moveq	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8002d8a:	f000 f853 	bl	8002e34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d8e:	230f      	movs	r3, #15
 8002d90:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d92:	2302      	movs	r3, #2
 8002d94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d9a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002da4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002da6:	f107 030c 	add.w	r3, r7, #12
 8002daa:	2105      	movs	r1, #5
 8002dac:	4618      	mov	r0, r3
 8002dae:	f008 f815 	bl	800addc <HAL_RCC_ClockConfig>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf14      	ite	ne
 8002db8:	2301      	movne	r3, #1
 8002dba:	2300      	moveq	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8002dc2:	f000 f837 	bl	8002e34 <Error_Handler>
  }
}
 8002dc6:	bf00      	nop
 8002dc8:	3750      	adds	r7, #80	; 0x50
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40007000 	.word	0x40007000

08002dd8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ddc:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002dde:	4a14      	ldr	r2, [pc, #80]	; (8002e30 <_ZL19MX_USART1_UART_Initv+0x58>)
 8002de0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002de2:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002de4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002de8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002dea:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002df0:	4b0e      	ldr	r3, [pc, #56]	; (8002e2c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002df6:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002dfe:	220c      	movs	r2, #12
 8002e00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e02:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e08:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e0e:	4807      	ldr	r0, [pc, #28]	; (8002e2c <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e10:	f008 fe8a 	bl	800bb28 <HAL_UART_Init>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	bf14      	ite	ne
 8002e1a:	2301      	movne	r3, #1
 8002e1c:	2300      	moveq	r3, #0
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8002e24:	f000 f806 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e28:	bf00      	nop
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	200000f4 	.word	0x200000f4
 8002e30:	40011000 	.word	0x40011000

08002e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002e38:	b672      	cpsid	i
}
 8002e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e3c:	e7fe      	b.n	8002e3c <Error_Handler+0x8>
	...

08002e40 <_Z14udpServer_initv>:
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

void udpServer_init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   struct udp_pcb *upcb, *upcb2;
   err_t err;

   /* 1. Create a new UDP control block  */
   upcb = udp_new();
 8002e46:	f011 fe6d 	bl	8014b24 <udp_new>
 8002e4a:	60f8      	str	r0, [r7, #12]

   /* 2. Bind the upcb to the local port */
   ip_addr_t myIPADDR;
   IP_ADDR4(&myIPADDR, 10, 10, 10, 10);
 8002e4c:	f04f 330a 	mov.w	r3, #168430090	; 0xa0a0a0a
 8002e50:	603b      	str	r3, [r7, #0]

   err = udp_bind(upcb, &myIPADDR, 27181);  // 27181 is the server UDP port
 8002e52:	463b      	mov	r3, r7
 8002e54:	f646 222d 	movw	r2, #27181	; 0x6a2d
 8002e58:	4619      	mov	r1, r3
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f011 fce2 	bl	8014824 <udp_bind>
 8002e60:	4603      	mov	r3, r0
 8002e62:	72fb      	strb	r3, [r7, #11]


   /* 3. Set a receive callback for the upcb */
   if(err == ERR_OK)
 8002e64:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d105      	bne.n	8002e78 <_Z14udpServer_initv+0x38>
   {
	   udp_recv(upcb, udp_data_callback, NULL);
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	4912      	ldr	r1, [pc, #72]	; (8002eb8 <_Z14udpServer_initv+0x78>)
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f011 fdf5 	bl	8014a60 <udp_recv>
 8002e76:	e002      	b.n	8002e7e <_Z14udpServer_initv+0x3e>
   }
   else
   {
	   udp_remove(upcb);
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f011 fe11 	bl	8014aa0 <udp_remove>
   }


   // Try making a second UDP control block...?

   upcb2 = udp_new();
 8002e7e:	f011 fe51 	bl	8014b24 <udp_new>
 8002e82:	6078      	str	r0, [r7, #4]
   err = udp_bind(upcb2, &myIPADDR, 27182);  // 27182 is the server UDP port for NVMPG
 8002e84:	463b      	mov	r3, r7
 8002e86:	f646 222e 	movw	r2, #27182	; 0x6a2e
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f011 fcc9 	bl	8014824 <udp_bind>
 8002e92:	4603      	mov	r3, r0
 8002e94:	72fb      	strb	r3, [r7, #11]

   if(err == ERR_OK)
 8002e96:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d105      	bne.n	8002eaa <_Z14udpServer_initv+0x6a>
   {
	   udp_recv(upcb2, udp_mpg_callback, NULL);
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	4906      	ldr	r1, [pc, #24]	; (8002ebc <_Z14udpServer_initv+0x7c>)
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f011 fddc 	bl	8014a60 <udp_recv>
   }
   else
   {
	   udp_remove(upcb2);
   }
}
 8002ea8:	e002      	b.n	8002eb0 <_Z14udpServer_initv+0x70>
	   udp_remove(upcb2);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f011 fdf8 	bl	8014aa0 <udp_remove>
}
 8002eb0:	bf00      	nop
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	08002ec1 	.word	0x08002ec1
 8002ebc:	08002fbd 	.word	0x08002fbd

08002ec0 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt>:

void udp_data_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	603b      	str	r3, [r7, #0]
	int txlen = 0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61fb      	str	r3, [r7, #28]
	struct pbuf *txBuf;

	// copy the UDP payload into the rxData structure
	memcpy(&rxBuffer.rxBuffer, p->payload, p->len);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6859      	ldr	r1, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	895b      	ldrh	r3, [r3, #10]
 8002eda:	461a      	mov	r2, r3
 8002edc:	482f      	ldr	r0, [pc, #188]	; (8002f9c <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xdc>)
 8002ede:	f016 f9db 	bl	8019298 <memcpy>

	if (rxBuffer.header == PRU_READ)
 8002ee2:	4b2e      	ldr	r3, [pc, #184]	; (8002f9c <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xdc>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a2e      	ldr	r2, [pc, #184]	; (8002fa0 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xe0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d10a      	bne.n	8002f02 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x42>
	{
		txData.header = PRU_DATA;
 8002eec:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xe4>)
 8002eee:	4a2e      	ldr	r2, [pc, #184]	; (8002fa8 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xe8>)
 8002ef0:	601a      	str	r2, [r3, #0]
		txlen = BUFFER_SIZE;
 8002ef2:	2344      	movs	r3, #68	; 0x44
 8002ef4:	61fb      	str	r3, [r7, #28]
		comms->dataReceived();
 8002ef6:	4b2d      	ldr	r3, [pc, #180]	; (8002fac <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xec>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f002 fc3a 	bl	8005774 <_ZN11RemoraComms12dataReceivedEv>
 8002f00:	e024      	b.n	8002f4c <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x8c>
	}
	else if (rxBuffer.header == PRU_WRITE)
 8002f02:	4b26      	ldr	r3, [pc, #152]	; (8002f9c <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xdc>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a2a      	ldr	r2, [pc, #168]	; (8002fb0 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xf0>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d11f      	bne.n	8002f4c <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x8c>
	{
		txData.header = PRU_ACKNOWLEDGE;
 8002f0c:	4b25      	ldr	r3, [pc, #148]	; (8002fa4 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xe4>)
 8002f0e:	4a29      	ldr	r2, [pc, #164]	; (8002fb4 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xf4>)
 8002f10:	601a      	str	r2, [r3, #0]
		txlen = sizeof(txData.header);
 8002f12:	2304      	movs	r3, #4
 8002f14:	61fb      	str	r3, [r7, #28]
		comms->dataReceived();
 8002f16:	4b25      	ldr	r3, [pc, #148]	; (8002fac <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xec>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f002 fc2a 	bl	8005774 <_ZN11RemoraComms12dataReceivedEv>
  __ASM volatile ("cpsid i" : : : "memory");
 8002f20:	b672      	cpsid	i
}
 8002f22:	bf00      	nop
		// ensure an atomic access to the rxBuffer
		// disable thread interrupts
		__disable_irq();

		// then move the data
		for (int i = 0; i < BUFFER_SIZE; i++)
 8002f24:	2300      	movs	r3, #0
 8002f26:	61bb      	str	r3, [r7, #24]
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	2b43      	cmp	r3, #67	; 0x43
 8002f2c:	dc0c      	bgt.n	8002f48 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x88>
		{
			rxData.rxBuffer[i] = rxBuffer.rxBuffer[i];
 8002f2e:	4a1b      	ldr	r2, [pc, #108]	; (8002f9c <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xdc>)
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	4413      	add	r3, r2
 8002f34:	7819      	ldrb	r1, [r3, #0]
 8002f36:	4a20      	ldr	r2, [pc, #128]	; (8002fb8 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xf8>)
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	460a      	mov	r2, r1
 8002f3e:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < BUFFER_SIZE; i++)
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	3301      	adds	r3, #1
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	e7ef      	b.n	8002f28 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x68>
  __ASM volatile ("cpsie i" : : : "memory");
 8002f48:	b662      	cpsie	i
}
 8002f4a:	bf00      	nop
		__enable_irq();
	}


	// allocate pbuf from RAM
	txBuf = pbuf_alloc(PBUF_TRANSPORT, txlen, PBUF_RAM);
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	f44f 7220 	mov.w	r2, #640	; 0x280
 8002f54:	4619      	mov	r1, r3
 8002f56:	2036      	movs	r0, #54	; 0x36
 8002f58:	f00b f802 	bl	800df60 <pbuf_alloc>
 8002f5c:	6178      	str	r0, [r7, #20]

	// copy the data into the buffer
	pbuf_take(txBuf, (char*)&txData.txBuffer, txlen);
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	461a      	mov	r2, r3
 8002f64:	490f      	ldr	r1, [pc, #60]	; (8002fa4 <_Z17udp_data_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xe4>)
 8002f66:	6978      	ldr	r0, [r7, #20]
 8002f68:	f00b fd4a 	bl	800ea00 <pbuf_take>

	// Connect to the remote client
	udp_connect(upcb, addr, port);
 8002f6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f6e:	461a      	mov	r2, r3
 8002f70:	6839      	ldr	r1, [r7, #0]
 8002f72:	68b8      	ldr	r0, [r7, #8]
 8002f74:	f011 fcde 	bl	8014934 <udp_connect>

	// Send a Reply to the Client
	udp_send(upcb, txBuf);
 8002f78:	6979      	ldr	r1, [r7, #20]
 8002f7a:	68b8      	ldr	r0, [r7, #8]
 8002f7c:	f011 fa68 	bl	8014450 <udp_send>

	// free the UDP connection, so we can accept new clients
	udp_disconnect(upcb);
 8002f80:	68b8      	ldr	r0, [r7, #8]
 8002f82:	f011 fd45 	bl	8014a10 <udp_disconnect>

	// Free the p_tx buffer
	pbuf_free(txBuf);
 8002f86:	6978      	ldr	r0, [r7, #20]
 8002f88:	f00b face 	bl	800e528 <pbuf_free>

	// Free the p buffer
	pbuf_free(p);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f00b facb 	bl	800e528 <pbuf_free>
}
 8002f92:	bf00      	nop
 8002f94:	3720      	adds	r7, #32
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	20000184 	.word	0x20000184
 8002fa0:	72656164 	.word	0x72656164
 8002fa4:	2000020c 	.word	0x2000020c
 8002fa8:	64617461 	.word	0x64617461
 8002fac:	2000017c 	.word	0x2000017c
 8002fb0:	77726974 	.word	0x77726974
 8002fb4:	61636b6e 	.word	0x61636b6e
 8002fb8:	200001c8 	.word	0x200001c8

08002fbc <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt>:


void udp_mpg_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	603b      	str	r3, [r7, #0]
	// copy the UDP payload into the nvmpg structure
	memcpy(&mpgData.payload, p->payload, p->len);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6859      	ldr	r1, [r3, #4]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	895b      	ldrh	r3, [r3, #10]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	480b      	ldr	r0, [pc, #44]	; (8003004 <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x48>)
 8002fd6:	f016 f95f 	bl	8019298 <memcpy>

	// Free the p buffer
	pbuf_free(p);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f00b faa4 	bl	800e528 <pbuf_free>

	if (mpgData.header == PRU_NVMPG)
 8002fe0:	4b08      	ldr	r3, [pc, #32]	; (8003004 <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x48>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a08      	ldr	r2, [pc, #32]	; (8003008 <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x4c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d108      	bne.n	8002ffc <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x40>
	{
		// use a standard module interface to trigger the update of the MPG
		MPG->configure();
 8002fea:	4b08      	ldr	r3, [pc, #32]	; (800300c <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x50>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	4b07      	ldr	r3, [pc, #28]	; (800300c <_Z16udp_mpg_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x50>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3314      	adds	r3, #20
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	4798      	blx	r3
	}
}
 8002ffc:	bf00      	nop
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	20000250 	.word	0x20000250
 8003008:	6d706764 	.word	0x6d706764
 800300c:	20000180 	.word	0x20000180

08003010 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>:
 public:
  explicit not_null(T ptr) : _ptr(ptr) {
    ARDUINOJSON_ASSERT(ptr != NULL);
  }

  T get() const {
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_ptr != NULL);
    return _ptr;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
  }
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightINS_11VariantSlotEEEPT_v>:
  T* allocRight() {
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
 8003030:	2110      	movs	r1, #16
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fe fb9d 	bl	8001772 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj>
 8003038:	4603      	mov	r3, r0
  }
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>:
 private:
  T _ptr;
};

template <typename T>
not_null<T> make_not_null(T ptr) {
 8003042:	b580      	push	{r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  ARDUINOJSON_ASSERT(ptr != NULL);
  return not_null<T>(ptr);
 800304a:	f107 030c 	add.w	r3, r7, #12
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4618      	mov	r0, r3
 8003052:	f000 f87b 	bl	800314c <_ZN19ArduinoJson6101_1108not_nullIPKcEC1ES2_>
 8003056:	68fb      	ldr	r3, [r7, #12]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>:
  VariantRefBase(TData *data) : _data(data) {}
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4618      	mov	r0, r3
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <_ZN19ArduinoJson6101_11012ArrayRefBaseINS_14CollectionDataEEC1EPS1_>:
  ArrayRefBase(TData* data) : _data(data) {}
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
 8003086:	6039      	str	r1, [r7, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4618      	mov	r0, r3
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>:
  ObjectRefBase(TData* data) : _data(data) {}
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4618      	mov	r0, r3
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_>:
  }
  return 0;
}

template <typename TAdaptedString>
inline VariantData* CollectionData::get(TAdaptedString key) const {
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b084      	sub	sp, #16
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
 80030c2:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = getSlot(key);
 80030c4:	6839      	ldr	r1, [r7, #0]
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f84f 	bl	800316a <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_>
 80030cc:	60f8      	str	r0, [r7, #12]
  return slot ? slot->data() : 0;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d004      	beq.n	80030de <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_+0x24>
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f7fe fa35 	bl	8001544 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 80030da:	4603      	mov	r3, r0
 80030dc:	e000      	b.n	80030e0 <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_+0x26>
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>:
};

template <typename TAllocator>
class BasicJsonDocument : AllocatorOwner<TAllocator>, public JsonDocument {
 public:
  explicit BasicJsonDocument(size_t capa, TAllocator allocator = TAllocator())
 80030e8:	b590      	push	{r4, r7, lr}
 80030ea:	b08b      	sub	sp, #44	; 0x2c
 80030ec:	af02      	add	r7, sp, #8
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	713a      	strb	r2, [r7, #4]
      : AllocatorOwner<TAllocator>(allocator), JsonDocument(allocPool(capa)) {}
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4621      	mov	r1, r4
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 f871 	bl	80031e0 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f103 0408 	add.w	r4, r3, #8
 8003104:	f107 0310 	add.w	r3, r7, #16
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	68f9      	ldr	r1, [r7, #12]
 800310c:	4618      	mov	r0, r3
 800310e:	f000 f84e 	bl	80031ae <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	f107 0310 	add.w	r3, r7, #16
 800311a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800311c:	4620      	mov	r0, r4
 800311e:	f7fe fd38 	bl	8001b92 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4618      	mov	r0, r3
 8003126:	3724      	adds	r7, #36	; 0x24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd90      	pop	{r4, r7, pc}

0800312c <_ZN19ArduinoJson6101_11015deserializeJsonIKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT_NS_12NestingLimitE>:
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
}

template <typename TInput>
DeserializationError deserializeJson(
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	713a      	strb	r2, [r7, #4]
    JsonDocument &doc, TInput *input,
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
 8003138:	793a      	ldrb	r2, [r7, #4]
 800313a:	68b9      	ldr	r1, [r7, #8]
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 f85b 	bl	80031f8 <_ZN19ArduinoJson6101_11011deserializeINS_16JsonDeserializerEKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT0_NS_12NestingLimitE>
 8003142:	4603      	mov	r3, r0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <_ZN19ArduinoJson6101_1108not_nullIPKcEC1ES2_>:
  explicit not_null(T ptr) : _ptr(ptr) {
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	601a      	str	r2, [r3, #0]
  }
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4618      	mov	r0, r3
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_>:
inline VariantSlot* CollectionData::getSlot(TAdaptedString key) const {
 800316a:	b580      	push	{r7, lr}
 800316c:	b084      	sub	sp, #16
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
 8003172:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = _head;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	60fb      	str	r3, [r7, #12]
  while (slot) {
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d011      	beq.n	80031a4 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x3a>
    if (key.equals(slot->key())) break;
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f7fe fa2a 	bl	80015da <_ZNK19ArduinoJson6101_11011VariantSlot3keyEv>
 8003186:	4602      	mov	r2, r0
 8003188:	463b      	mov	r3, r7
 800318a:	4611      	mov	r1, r2
 800318c:	4618      	mov	r0, r3
 800318e:	f7fe fb27 	bl	80017e0 <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d104      	bne.n	80031a2 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x38>
    slot = slot->next();
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f7fe f9de 	bl	800155a <_ZN19ArduinoJson6101_11011VariantSlot4nextEv>
 800319e:	60f8      	str	r0, [r7, #12]
  while (slot) {
 80031a0:	e7eb      	b.n	800317a <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x10>
    if (key.equals(slot->key())) break;
 80031a2:	bf00      	nop
  return slot;
 80031a4:	68fb      	ldr	r3, [r7, #12]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>:
    set(src);
    return *this;
  }

 private:
  MemoryPool allocPool(size_t requiredSize) {
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b086      	sub	sp, #24
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
    size_t capa = addPadding(requiredSize);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fe fa2c 	bl	8001618 <_ZN19ArduinoJson6101_11010addPaddingEj>
 80031c0:	6178      	str	r0, [r7, #20]
    return MemoryPool(reinterpret_cast<char*>(this->allocate(capa)), capa);
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	6979      	ldr	r1, [r7, #20]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 f874 	bl	80032b4 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>
 80031cc:	4603      	mov	r3, r0
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	4619      	mov	r1, r3
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f7fe fa30 	bl	8001638 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>
  }
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>:
  AllocatorOwner(TAllocator allocator) : _allocator(allocator) {}
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	7039      	strb	r1, [r7, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4618      	mov	r0, r3
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <_ZN19ArduinoJson6101_11011deserializeINS_16JsonDeserializerEKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT0_NS_12NestingLimitE>:
//
// deserialize(JsonDocument&, char*);
// deserialize(JsonDocument&, const char*);
// deserialize(JsonDocument&, const __FlashStringHelper*);
template <template <typename, typename> class TDeserializer, typename TChar>
DeserializationError deserialize(JsonDocument &doc, TChar *input,
 80031f8:	b5b0      	push	{r4, r5, r7, lr}
 80031fa:	b08a      	sub	sp, #40	; 0x28
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	713a      	strb	r2, [r7, #4]
                                 NestingLimit nestingLimit) {
  doc.clear();
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f7fe fc9c 	bl	8001b42 <_ZN19ArduinoJson6101_11012JsonDocument5clearEv>
  return makeDeserializer<TDeserializer>(
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f7fe fcaa 	bl	8001b64 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8003210:	4604      	mov	r4, r0
 8003212:	68b8      	ldr	r0, [r7, #8]
 8003214:	f000 f85d 	bl	80032d2 <_ZN19ArduinoJson6101_11010makeReaderIKcEENS_23UnsafeCharPointerReaderEPT_>
 8003218:	4605      	mov	r5, r0
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f7fe fca2 	bl	8001b64 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8003220:	4603      	mov	r3, r0
 8003222:	68b9      	ldr	r1, [r7, #8]
 8003224:	4618      	mov	r0, r3
 8003226:	f000 f863 	bl	80032f0 <_ZN19ArduinoJson6101_11017makeStringStorageIKcEENS_13StringStorageIPT_vE4typeERNS_10MemoryPoolES4_>
 800322a:	4602      	mov	r2, r0
 800322c:	793b      	ldrb	r3, [r7, #4]
 800322e:	f107 0010 	add.w	r0, r7, #16
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	4613      	mov	r3, r2
 8003236:	462a      	mov	r2, r5
 8003238:	4621      	mov	r1, r4
 800323a:	f000 f868 	bl	800330e <_ZN19ArduinoJson6101_11016makeDeserializerINS_16JsonDeserializerENS_23UnsafeCharPointerReaderENS_12StringCopierEEET_IT0_T1_ERNS_10MemoryPoolES5_S6_h>
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), nestingLimit.value)
      .parse(doc.data());
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f7fe fc9b 	bl	8001b7a <_ZN19ArduinoJson6101_11012JsonDocument4dataEv>
 8003244:	4602      	mov	r2, r0
 8003246:	f107 0310 	add.w	r3, r7, #16
 800324a:	4611      	mov	r1, r2
 800324c:	4618      	mov	r0, r3
 800324e:	f000 f871 	bl	8003334 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8003252:	4603      	mov	r3, r0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3720      	adds	r7, #32
 8003258:	46bd      	mov	sp, r7
 800325a:	bdb0      	pop	{r4, r5, r7, pc}

0800325c <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRNS_12JsonDocumentEPKcEEE4implEv>:
  }

 private:
  const TImpl *impl() const {
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
    return static_cast<const TImpl *>(this);
 8003264:	687b      	ldr	r3, [r7, #4]
  }
 8003266:	4618      	mov	r0, r3
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <_ZNK19ArduinoJson6101_11012VariantCastsINS_10VariantRefEE4implEv>:
  const TImpl *impl() const {
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
    return static_cast<const TImpl *>(this);
 800327a:	687b      	ldr	r3, [r7, #4]
  }
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>:
  // createNestedObject(const __FlashStringHelper*) const
  template <typename TChar>
  ObjectRef createNestedObject(TChar *key) const;

 private:
  const TObject *impl() const {
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
    return static_cast<const TObject *>(this);
 8003290:	687b      	ldr	r3, [r7, #4]
  }
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>:
  const TImpl *impl() const {
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
    return static_cast<const TImpl *>(this);
 80032a6:	687b      	ldr	r3, [r7, #4]
  }
 80032a8:	4618      	mov	r0, r3
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>:
  void* allocate(size_t n) {
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
    return _allocator.allocate(n);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6839      	ldr	r1, [r7, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe fc82 	bl	8001bcc <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>
 80032c8:	4603      	mov	r3, r0
  }
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <_ZN19ArduinoJson6101_11010makeReaderIKcEENS_23UnsafeCharPointerReaderEPT_>:
    return _ptr == _end;
  }
};

template <typename TChar>
inline UnsafeCharPointerReader makeReader(TChar* input) {
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  return UnsafeCharPointerReader(reinterpret_cast<const char*>(input));
 80032da:	f107 030c 	add.w	r3, r7, #12
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fe fd7d 	bl	8001de0 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc>
 80032e6:	68fb      	ldr	r3, [r7, #12]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <_ZN19ArduinoJson6101_11017makeStringStorageIKcEENS_13StringStorageIPT_vE4typeERNS_10MemoryPoolES4_>:
                                                       TInput& input) {
  return StringStorage<TInput>::create(pool, input);
}

template <typename TChar>
typename StringStorage<TChar*>::type makeStringStorage(MemoryPool& pool,
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
                                                       TChar* input) {
  return StringStorage<TChar*>::create(pool, input);
 80032fa:	463b      	mov	r3, r7
 80032fc:	4619      	mov	r1, r3
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f862 	bl	80033c8 <_ZN19ArduinoJson6101_11013StringStorageIPKcvE6createERNS_10MemoryPoolERS2_>
 8003304:	4603      	mov	r3, r0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <_ZN19ArduinoJson6101_11016makeDeserializerINS_16JsonDeserializerENS_23UnsafeCharPointerReaderENS_12StringCopierEEET_IT0_T1_ERNS_10MemoryPoolES5_S6_h>:
TDeserializer<TReader, TWriter> makeDeserializer(MemoryPool &pool,
 800330e:	b580      	push	{r7, lr}
 8003310:	b086      	sub	sp, #24
 8003312:	af02      	add	r7, sp, #8
 8003314:	60f8      	str	r0, [r7, #12]
 8003316:	60b9      	str	r1, [r7, #8]
 8003318:	607a      	str	r2, [r7, #4]
 800331a:	603b      	str	r3, [r7, #0]
  return TDeserializer<TReader, TWriter>(pool, reader, writer, nestingLimit);
 800331c:	7e3b      	ldrb	r3, [r7, #24]
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	68b9      	ldr	r1, [r7, #8]
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f85e 	bl	80033e8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEEC1ERNS_10MemoryPoolES1_S2_h>
}
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>:
  DeserializationError parse(VariantData &variant) {
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
    DeserializationError err = skipSpacesAndComments();
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f870 	bl	8003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8003344:	4603      	mov	r3, r0
 8003346:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8003348:	f107 0310 	add.w	r3, r7, #16
 800334c:	f107 020c 	add.w	r2, r7, #12
 8003350:	4611      	mov	r1, r2
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe fd90 	bl	8001e78 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d106      	bne.n	800336c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x38>
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x38>
 8003368:	2301      	movs	r3, #1
 800336a:	e000      	b.n	800336e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x3a>
 800336c:	2300      	movs	r3, #0
 800336e:	f083 0301 	eor.w	r3, r3, #1
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x48>
 8003378:	7b3b      	ldrb	r3, [r7, #12]
 800337a:	e021      	b.n	80033c0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8c>
    switch (current()) {
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f931 	bl	80035e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003382:	4603      	mov	r3, r0
 8003384:	2b5b      	cmp	r3, #91	; 0x5b
 8003386:	d002      	beq.n	800338e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x5a>
 8003388:	2b7b      	cmp	r3, #123	; 0x7b
 800338a:	d00a      	beq.n	80033a2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x6e>
 800338c:	e013      	b.n	80033b6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x82>
        return parseArray(variant.toArray());
 800338e:	6838      	ldr	r0, [r7, #0]
 8003390:	f7fe fb0e 	bl	80019b0 <_ZN19ArduinoJson6101_11011VariantData7toArrayEv>
 8003394:	4603      	mov	r3, r0
 8003396:	4619      	mov	r1, r3
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f94c 	bl	8003636 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>
 800339e:	4603      	mov	r3, r0
 80033a0:	e00e      	b.n	80033c0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8c>
        return parseObject(variant.toObject());
 80033a2:	6838      	ldr	r0, [r7, #0]
 80033a4:	f7fe fb15 	bl	80019d2 <_ZN19ArduinoJson6101_11011VariantData8toObjectEv>
 80033a8:	4603      	mov	r3, r0
 80033aa:	4619      	mov	r1, r3
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 fa69 	bl	8003884 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>
 80033b2:	4603      	mov	r3, r0
 80033b4:	e004      	b.n	80033c0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8c>
        return parseValue(variant);
 80033b6:	6839      	ldr	r1, [r7, #0]
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 fc25 	bl	8003c08 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE>
 80033be:	4603      	mov	r3, r0
  }
 80033c0:	4618      	mov	r0, r3
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <_ZN19ArduinoJson6101_11013StringStorageIPKcvE6createERNS_10MemoryPoolERS2_>:
  static type create(MemoryPool& pool, TInput&) {
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
    return type(&pool);
 80033d2:	f107 030c 	add.w	r3, r7, #12
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fe fce3 	bl	8001da4 <_ZN19ArduinoJson6101_11012StringCopierC1EPNS_10MemoryPoolE>
 80033de:	68fb      	ldr	r3, [r7, #12]
  }
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEEC1ERNS_10MemoryPoolES1_S2_h>:
  JsonDeserializer(MemoryPool &pool, TReader reader,
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	603b      	str	r3, [r7, #0]
        _loaded(false) {}
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	7e3a      	ldrb	r2, [r7, #24]
 800340c:	731a      	strb	r2, [r3, #12]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	739a      	strb	r2, [r3, #14]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4618      	mov	r0, r3
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
	...

08003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>:
  DeserializationError skipSpacesAndComments() {
 8003424:	b580      	push	{r7, lr}
 8003426:	b088      	sub	sp, #32
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
      switch (current()) {
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f8d9 	bl	80035e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003432:	4603      	mov	r3, r0
 8003434:	2b2f      	cmp	r3, #47	; 0x2f
 8003436:	f200 80c7 	bhi.w	80035c8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a4>
 800343a:	a201      	add	r2, pc, #4	; (adr r2, 8003440 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1c>)
 800343c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003440:	08003501 	.word	0x08003501
 8003444:	080035c9 	.word	0x080035c9
 8003448:	080035c9 	.word	0x080035c9
 800344c:	080035c9 	.word	0x080035c9
 8003450:	080035c9 	.word	0x080035c9
 8003454:	080035c9 	.word	0x080035c9
 8003458:	080035c9 	.word	0x080035c9
 800345c:	080035c9 	.word	0x080035c9
 8003460:	080035c9 	.word	0x080035c9
 8003464:	08003511 	.word	0x08003511
 8003468:	08003511 	.word	0x08003511
 800346c:	080035c9 	.word	0x080035c9
 8003470:	080035c9 	.word	0x080035c9
 8003474:	08003511 	.word	0x08003511
 8003478:	080035c9 	.word	0x080035c9
 800347c:	080035c9 	.word	0x080035c9
 8003480:	080035c9 	.word	0x080035c9
 8003484:	080035c9 	.word	0x080035c9
 8003488:	080035c9 	.word	0x080035c9
 800348c:	080035c9 	.word	0x080035c9
 8003490:	080035c9 	.word	0x080035c9
 8003494:	080035c9 	.word	0x080035c9
 8003498:	080035c9 	.word	0x080035c9
 800349c:	080035c9 	.word	0x080035c9
 80034a0:	080035c9 	.word	0x080035c9
 80034a4:	080035c9 	.word	0x080035c9
 80034a8:	080035c9 	.word	0x080035c9
 80034ac:	080035c9 	.word	0x080035c9
 80034b0:	080035c9 	.word	0x080035c9
 80034b4:	080035c9 	.word	0x080035c9
 80034b8:	080035c9 	.word	0x080035c9
 80034bc:	080035c9 	.word	0x080035c9
 80034c0:	08003511 	.word	0x08003511
 80034c4:	080035c9 	.word	0x080035c9
 80034c8:	080035c9 	.word	0x080035c9
 80034cc:	080035c9 	.word	0x080035c9
 80034d0:	080035c9 	.word	0x080035c9
 80034d4:	080035c9 	.word	0x080035c9
 80034d8:	080035c9 	.word	0x080035c9
 80034dc:	080035c9 	.word	0x080035c9
 80034e0:	080035c9 	.word	0x080035c9
 80034e4:	080035c9 	.word	0x080035c9
 80034e8:	080035c9 	.word	0x080035c9
 80034ec:	080035c9 	.word	0x080035c9
 80034f0:	080035c9 	.word	0x080035c9
 80034f4:	080035c9 	.word	0x080035c9
 80034f8:	080035c9 	.word	0x080035c9
 80034fc:	08003519 	.word	0x08003519
          return DeserializationError::IncompleteInput;
 8003500:	f107 030c 	add.w	r3, r7, #12
 8003504:	2101      	movs	r1, #1
 8003506:	4618      	mov	r0, r3
 8003508:	f7fe fca5 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800350c:	7b3b      	ldrb	r3, [r7, #12]
 800350e:	e064      	b.n	80035da <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
          move();
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 fbb9 	bl	8003c88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
          continue;
 8003516:	e05f      	b.n	80035d8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b4>
          move();  // skip '/'
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 fbb5 	bl	8003c88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
          switch (current()) {
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f860 	bl	80035e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003524:	4603      	mov	r3, r0
 8003526:	2b2a      	cmp	r3, #42	; 0x2a
 8003528:	d002      	beq.n	8003530 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x10c>
 800352a:	2b2f      	cmp	r3, #47	; 0x2f
 800352c:	d02a      	beq.n	8003584 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x160>
 800352e:	e042      	b.n	80035b6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x192>
              move();  // skip '*'
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 fba9 	bl	8003c88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
              bool wasStar = false;
 8003536:	2300      	movs	r3, #0
 8003538:	77fb      	strb	r3, [r7, #31]
                char c = current();
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f852 	bl	80035e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003540:	4603      	mov	r3, r0
 8003542:	777b      	strb	r3, [r7, #29]
                if (c == '\0') return DeserializationError::IncompleteInput;
 8003544:	7f7b      	ldrb	r3, [r7, #29]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d107      	bne.n	800355a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x136>
 800354a:	f107 0310 	add.w	r3, r7, #16
 800354e:	2101      	movs	r1, #1
 8003550:	4618      	mov	r0, r3
 8003552:	f7fe fc80 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003556:	7c3b      	ldrb	r3, [r7, #16]
 8003558:	e03f      	b.n	80035da <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
                if (c == '/' && wasStar) {
 800355a:	7f7b      	ldrb	r3, [r7, #29]
 800355c:	2b2f      	cmp	r3, #47	; 0x2f
 800355e:	d107      	bne.n	8003570 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x14c>
 8003560:	7ffb      	ldrb	r3, [r7, #31]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d004      	beq.n	8003570 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x14c>
                  move();
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fb8e 	bl	8003c88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
                  break;
 800356c:	bf00      	nop
              break;
 800356e:	e02a      	b.n	80035c6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a2>
                wasStar = c == '*';
 8003570:	7f7b      	ldrb	r3, [r7, #29]
 8003572:	2b2a      	cmp	r3, #42	; 0x2a
 8003574:	bf0c      	ite	eq
 8003576:	2301      	moveq	r3, #1
 8003578:	2300      	movne	r3, #0
 800357a:	77fb      	strb	r3, [r7, #31]
                move();
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 fb83 	bl	8003c88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
              for (;;) {
 8003582:	e7da      	b.n	800353a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x116>
                move();
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 fb7f 	bl	8003c88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
                char c = current();
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f82a 	bl	80035e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003590:	4603      	mov	r3, r0
 8003592:	77bb      	strb	r3, [r7, #30]
                if (c == '\0') return DeserializationError::IncompleteInput;
 8003594:	7fbb      	ldrb	r3, [r7, #30]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d107      	bne.n	80035aa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x186>
 800359a:	f107 0314 	add.w	r3, r7, #20
 800359e:	2101      	movs	r1, #1
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fe fc58 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80035a6:	7d3b      	ldrb	r3, [r7, #20]
 80035a8:	e017      	b.n	80035da <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
                if (c == '\n') break;
 80035aa:	7fbb      	ldrb	r3, [r7, #30]
 80035ac:	2b0a      	cmp	r3, #10
 80035ae:	d000      	beq.n	80035b2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x18e>
              for (;;) {
 80035b0:	e7e8      	b.n	8003584 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x160>
                if (c == '\n') break;
 80035b2:	bf00      	nop
              break;
 80035b4:	e007      	b.n	80035c6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a2>
              return DeserializationError::InvalidInput;
 80035b6:	f107 0318 	add.w	r3, r7, #24
 80035ba:	2102      	movs	r1, #2
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fe fc4a 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80035c2:	7e3b      	ldrb	r3, [r7, #24]
 80035c4:	e009      	b.n	80035da <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
          break;
 80035c6:	e007      	b.n	80035d8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b4>
          return DeserializationError::Ok;
 80035c8:	f107 031c 	add.w	r3, r7, #28
 80035cc:	2100      	movs	r1, #0
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fe fc41 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80035d4:	7f3b      	ldrb	r3, [r7, #28]
 80035d6:	e000      	b.n	80035da <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
    for (;;) {
 80035d8:	e728      	b.n	800342c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x8>
  }
 80035da:	4618      	mov	r0, r3
 80035dc:	3720      	adds	r7, #32
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop

080035e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>:
  char current() {
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
    if (!_loaded) {
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	7b9b      	ldrb	r3, [r3, #14]
 80035f0:	f083 0301 	eor.w	r3, r3, #1
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d017      	beq.n	800362a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x46>
      if (_reader.ended())
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3304      	adds	r3, #4
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fe fc14 	bl	8001e2c <_ZNK19ArduinoJson6101_11023UnsafeCharPointerReader5endedEv>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x2e>
        _current = 0;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	735a      	strb	r2, [r3, #13]
 8003610:	e008      	b.n	8003624 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x40>
        _current = _reader.read();
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3304      	adds	r3, #4
 8003616:	4618      	mov	r0, r3
 8003618:	f7fe fbf8 	bl	8001e0c <_ZN19ArduinoJson6101_11023UnsafeCharPointerReader4readEv>
 800361c:	4603      	mov	r3, r0
 800361e:	461a      	mov	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	735a      	strb	r2, [r3, #13]
      _loaded = true;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	739a      	strb	r2, [r3, #14]
    return _current;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	7b5b      	ldrb	r3, [r3, #13]
  }
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>:
  DeserializationError parseArray(CollectionData &array) {
 8003636:	b580      	push	{r7, lr}
 8003638:	b098      	sub	sp, #96	; 0x60
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	6039      	str	r1, [r7, #0]
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	7b1b      	ldrb	r3, [r3, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d107      	bne.n	8003658 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x22>
 8003648:	f107 0310 	add.w	r3, r7, #16
 800364c:	2105      	movs	r1, #5
 800364e:	4618      	mov	r0, r3
 8003650:	f7fe fc01 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003654:	7c3b      	ldrb	r3, [r7, #16]
 8003656:	e111      	b.n	800387c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	65bb      	str	r3, [r7, #88]	; 0x58
 800365c:	235b      	movs	r3, #91	; 0x5b
 800365e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (current() != charToSkip) return false;
 8003662:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003664:	f7ff ffbe 	bl	80035e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003668:	4603      	mov	r3, r0
 800366a:	461a      	mov	r2, r3
 800366c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003670:	4293      	cmp	r3, r2
 8003672:	bf14      	ite	ne
 8003674:	2301      	movne	r3, #1
 8003676:	2300      	moveq	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x4c>
 800367e:	2300      	movs	r3, #0
 8003680:	e003      	b.n	800368a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x54>
    move();
 8003682:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003684:	f000 fb00 	bl	8003c88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003688:	2301      	movs	r3, #1
    if (!eat('[')) return DeserializationError::InvalidInput;
 800368a:	f083 0301 	eor.w	r3, r3, #1
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d007      	beq.n	80036a4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x6e>
 8003694:	f107 0314 	add.w	r3, r7, #20
 8003698:	2102      	movs	r1, #2
 800369a:	4618      	mov	r0, r3
 800369c:	f7fe fbdb 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80036a0:	7d3b      	ldrb	r3, [r7, #20]
 80036a2:	e0eb      	b.n	800387c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
    DeserializationError err = skipSpacesAndComments();
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff febd 	bl	8003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 80036aa:	4603      	mov	r3, r0
 80036ac:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 80036ae:	f107 0318 	add.w	r3, r7, #24
 80036b2:	f107 020c 	add.w	r2, r7, #12
 80036b6:	4611      	mov	r1, r2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fe fbdd 	bl	8001e78 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d106      	bne.n	80036d2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9c>
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9c>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9e>
 80036d2:	2300      	movs	r3, #0
 80036d4:	f083 0301 	eor.w	r3, r3, #1
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xac>
 80036de:	7b3b      	ldrb	r3, [r7, #12]
 80036e0:	e0cc      	b.n	800387c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	653b      	str	r3, [r7, #80]	; 0x50
 80036e6:	235d      	movs	r3, #93	; 0x5d
 80036e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (current() != charToSkip) return false;
 80036ec:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80036ee:	f7ff ff79 	bl	80035e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80036f2:	4603      	mov	r3, r0
 80036f4:	461a      	mov	r2, r3
 80036f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80036fa:	4293      	cmp	r3, r2
 80036fc:	bf14      	ite	ne
 80036fe:	2301      	movne	r3, #1
 8003700:	2300      	moveq	r3, #0
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xd6>
 8003708:	2300      	movs	r3, #0
 800370a:	e003      	b.n	8003714 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xde>
    move();
 800370c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800370e:	f000 fabb 	bl	8003c88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003712:	2301      	movs	r3, #1
    if (eat(']')) return DeserializationError::Ok;
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xf4>
 8003718:	f107 0320 	add.w	r3, r7, #32
 800371c:	2100      	movs	r1, #0
 800371e:	4618      	mov	r0, r3
 8003720:	f7fe fb99 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003724:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003728:	e0a8      	b.n	800387c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      VariantData *value = array.add(_pool);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4619      	mov	r1, r3
 8003730:	6838      	ldr	r0, [r7, #0]
 8003732:	f7fe fa8e 	bl	8001c52 <_ZN19ArduinoJson6101_11014CollectionData3addEPNS_10MemoryPoolE>
 8003736:	65f8      	str	r0, [r7, #92]	; 0x5c
      if (!value) return DeserializationError::NoMemory;
 8003738:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800373a:	2b00      	cmp	r3, #0
 800373c:	d108      	bne.n	8003750 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x11a>
 800373e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003742:	2103      	movs	r1, #3
 8003744:	4618      	mov	r0, r3
 8003746:	f7fe fb86 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800374a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800374e:	e095      	b.n	800387c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      _nestingLimit--;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	7b1b      	ldrb	r3, [r3, #12]
 8003754:	3b01      	subs	r3, #1
 8003756:	b2da      	uxtb	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	731a      	strb	r2, [r3, #12]
      err = parse(*value);
 800375c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff fde8 	bl	8003334 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8003764:	4603      	mov	r3, r0
 8003766:	733b      	strb	r3, [r7, #12]
      _nestingLimit++;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	7b1b      	ldrb	r3, [r3, #12]
 800376c:	3301      	adds	r3, #1
 800376e:	b2da      	uxtb	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	731a      	strb	r2, [r3, #12]
      if (err) return err;
 8003774:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003778:	f107 020c 	add.w	r2, r7, #12
 800377c:	4611      	mov	r1, r2
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe fb7a 	bl	8001e78 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x162>
 800378a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x162>
 8003794:	2301      	movs	r3, #1
 8003796:	e000      	b.n	800379a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x164>
 8003798:	2300      	movs	r3, #0
 800379a:	f083 0301 	eor.w	r3, r3, #1
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x172>
 80037a4:	7b3b      	ldrb	r3, [r7, #12]
 80037a6:	e069      	b.n	800387c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      err = skipSpacesAndComments();
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7ff fe3b 	bl	8003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 80037ae:	4603      	mov	r3, r0
 80037b0:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 80037b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037b6:	f107 020c 	add.w	r2, r7, #12
 80037ba:	4611      	mov	r1, r2
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fe fb5b 	bl	8001e78 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80037c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d106      	bne.n	80037d6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a0>
 80037c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a0>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a2>
 80037d6:	2300      	movs	r3, #0
 80037d8:	f083 0301 	eor.w	r3, r3, #1
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1b0>
 80037e2:	7b3b      	ldrb	r3, [r7, #12]
 80037e4:	e04a      	b.n	800387c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80037ea:	235d      	movs	r3, #93	; 0x5d
 80037ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (current() != charToSkip) return false;
 80037f0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80037f2:	f7ff fef7 	bl	80035e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80037f6:	4603      	mov	r3, r0
 80037f8:	461a      	mov	r2, r3
 80037fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037fe:	4293      	cmp	r3, r2
 8003800:	bf14      	ite	ne
 8003802:	2301      	movne	r3, #1
 8003804:	2300      	moveq	r3, #0
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1da>
 800380c:	2300      	movs	r3, #0
 800380e:	e003      	b.n	8003818 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1e2>
    move();
 8003810:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003812:	f000 fa39 	bl	8003c88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003816:	2301      	movs	r3, #1
      if (eat(']')) return DeserializationError::Ok;
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1f8>
 800381c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003820:	2100      	movs	r1, #0
 8003822:	4618      	mov	r0, r3
 8003824:	f7fe fb17 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003828:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800382c:	e026      	b.n	800387c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	643b      	str	r3, [r7, #64]	; 0x40
 8003832:	232c      	movs	r3, #44	; 0x2c
 8003834:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (current() != charToSkip) return false;
 8003838:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800383a:	f7ff fed3 	bl	80035e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800383e:	4603      	mov	r3, r0
 8003840:	461a      	mov	r2, r3
 8003842:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003846:	4293      	cmp	r3, r2
 8003848:	bf14      	ite	ne
 800384a:	2301      	movne	r3, #1
 800384c:	2300      	moveq	r3, #0
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x222>
 8003854:	2300      	movs	r3, #0
 8003856:	e003      	b.n	8003860 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x22a>
    move();
 8003858:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800385a:	f000 fa15 	bl	8003c88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 800385e:	2301      	movs	r3, #1
      if (!eat(',')) return DeserializationError::InvalidInput;
 8003860:	f083 0301 	eor.w	r3, r3, #1
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	f43f af5f 	beq.w	800372a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xf4>
 800386c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003870:	2102      	movs	r1, #2
 8003872:	4618      	mov	r0, r3
 8003874:	f7fe faef 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003878:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
  }
 800387c:	4618      	mov	r0, r3
 800387e:	3760      	adds	r7, #96	; 0x60
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>:
  DeserializationError parseObject(CollectionData &object) {
 8003884:	b580      	push	{r7, lr}
 8003886:	b0a2      	sub	sp, #136	; 0x88
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	7b1b      	ldrb	r3, [r3, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d107      	bne.n	80038a6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x22>
 8003896:	f107 0310 	add.w	r3, r7, #16
 800389a:	2105      	movs	r1, #5
 800389c:	4618      	mov	r0, r3
 800389e:	f7fe fada 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80038a2:	7c3b      	ldrb	r3, [r7, #16]
 80038a4:	e1ac      	b.n	8003c00 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37c>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038ac:	237b      	movs	r3, #123	; 0x7b
 80038ae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    if (current() != charToSkip) return false;
 80038b2:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80038b6:	f7ff fe95 	bl	80035e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80038ba:	4603      	mov	r3, r0
 80038bc:	461a      	mov	r2, r3
 80038be:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80038c2:	4293      	cmp	r3, r2
 80038c4:	bf14      	ite	ne
 80038c6:	2301      	movne	r3, #1
 80038c8:	2300      	moveq	r3, #0
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x50>
 80038d0:	2300      	movs	r3, #0
 80038d2:	e004      	b.n	80038de <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x5a>
    move();
 80038d4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80038d8:	f000 f9d6 	bl	8003c88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80038dc:	2301      	movs	r3, #1
    if (!eat('{')) return DeserializationError::InvalidInput;
 80038de:	f083 0301 	eor.w	r3, r3, #1
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d007      	beq.n	80038f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x74>
 80038e8:	f107 0314 	add.w	r3, r7, #20
 80038ec:	2102      	movs	r1, #2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fe fab1 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80038f4:	7d3b      	ldrb	r3, [r7, #20]
 80038f6:	e183      	b.n	8003c00 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37c>
    DeserializationError err = skipSpacesAndComments();
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff fd93 	bl	8003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 80038fe:	4603      	mov	r3, r0
 8003900:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8003902:	f107 0318 	add.w	r3, r7, #24
 8003906:	f107 020c 	add.w	r2, r7, #12
 800390a:	4611      	mov	r1, r2
 800390c:	4618      	mov	r0, r3
 800390e:	f7fe fab3 	bl	8001e78 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d106      	bne.n	8003926 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa2>
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa2>
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa4>
 8003926:	2300      	movs	r3, #0
 8003928:	f083 0301 	eor.w	r3, r3, #1
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xb2>
 8003932:	7b3b      	ldrb	r3, [r7, #12]
 8003934:	e164      	b.n	8003c00 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37c>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	67bb      	str	r3, [r7, #120]	; 0x78
 800393a:	237d      	movs	r3, #125	; 0x7d
 800393c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    if (current() != charToSkip) return false;
 8003940:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003942:	f7ff fe4f 	bl	80035e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003946:	4603      	mov	r3, r0
 8003948:	461a      	mov	r2, r3
 800394a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800394e:	4293      	cmp	r3, r2
 8003950:	bf14      	ite	ne
 8003952:	2301      	movne	r3, #1
 8003954:	2300      	moveq	r3, #0
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xdc>
 800395c:	2300      	movs	r3, #0
 800395e:	e003      	b.n	8003968 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xe4>
    move();
 8003960:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003962:	f000 f991 	bl	8003c88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003966:	2301      	movs	r3, #1
    if (eat('}')) return DeserializationError::Ok;
 8003968:	2b00      	cmp	r3, #0
 800396a:	d008      	beq.n	800397e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xfa>
 800396c:	f107 0320 	add.w	r3, r7, #32
 8003970:	2100      	movs	r1, #0
 8003972:	4618      	mov	r0, r3
 8003974:	f7fe fa6f 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003978:	f897 3020 	ldrb.w	r3, [r7, #32]
 800397c:	e140      	b.n	8003c00 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37c>
      VariantSlot *slot = object.addSlot(_pool);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4619      	mov	r1, r3
 8003984:	6838      	ldr	r0, [r7, #0]
 8003986:	f7fe f93a 	bl	8001bfe <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>
 800398a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
      if (!slot) return DeserializationError::NoMemory;
 800398e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003992:	2b00      	cmp	r3, #0
 8003994:	d108      	bne.n	80039a8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x124>
 8003996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800399a:	2103      	movs	r1, #3
 800399c:	4618      	mov	r0, r3
 800399e:	f7fe fa5a 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80039a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80039a6:	e12b      	b.n	8003c00 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37c>
      err = parseKey(key);
 80039a8:	f107 0308 	add.w	r3, r7, #8
 80039ac:	4619      	mov	r1, r3
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f977 	bl	8003ca2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>
 80039b4:	4603      	mov	r3, r0
 80039b6:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 80039b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039bc:	f107 020c 	add.w	r2, r7, #12
 80039c0:	4611      	mov	r1, r2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe fa58 	bl	8001e78 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80039c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x158>
 80039ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x158>
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x15a>
 80039dc:	2300      	movs	r3, #0
 80039de:	f083 0301 	eor.w	r3, r3, #1
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x168>
 80039e8:	7b3b      	ldrb	r3, [r7, #12]
 80039ea:	e109      	b.n	8003c00 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37c>
      slot->setOwnedKey(make_not_null(key));
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff fb27 	bl	8003042 <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>
 80039f4:	4603      	mov	r3, r0
 80039f6:	4619      	mov	r1, r3
 80039f8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80039fc:	f7fd fdd6 	bl	80015ac <_ZN19ArduinoJson6101_11011VariantSlot11setOwnedKeyENS_8not_nullIPKcEE>
      err = skipSpacesAndComments();
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff fd0f 	bl	8003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8003a06:	4603      	mov	r3, r0
 8003a08:	733b      	strb	r3, [r7, #12]
      if (err) return err;  // Colon
 8003a0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a0e:	f107 020c 	add.w	r2, r7, #12
 8003a12:	4611      	mov	r1, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fe fa2f 	bl	8001e78 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d106      	bne.n	8003a2e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1aa>
 8003a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1aa>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ac>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f083 0301 	eor.w	r3, r3, #1
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ba>
 8003a3a:	7b3b      	ldrb	r3, [r7, #12]
 8003a3c:	e0e0      	b.n	8003c00 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37c>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	673b      	str	r3, [r7, #112]	; 0x70
 8003a42:	233a      	movs	r3, #58	; 0x3a
 8003a44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (current() != charToSkip) return false;
 8003a48:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003a4a:	f7ff fdcb 	bl	80035e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	461a      	mov	r2, r3
 8003a52:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003a56:	4293      	cmp	r3, r2
 8003a58:	bf14      	ite	ne
 8003a5a:	2301      	movne	r3, #1
 8003a5c:	2300      	moveq	r3, #0
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1e4>
 8003a64:	2300      	movs	r3, #0
 8003a66:	e003      	b.n	8003a70 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ec>
    move();
 8003a68:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003a6a:	f000 f90d 	bl	8003c88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003a6e:	2301      	movs	r3, #1
      if (!eat(':')) return DeserializationError::InvalidInput;
 8003a70:	f083 0301 	eor.w	r3, r3, #1
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d008      	beq.n	8003a8c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x208>
 8003a7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003a7e:	2102      	movs	r1, #2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fe f9e8 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003a86:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003a8a:	e0b9      	b.n	8003c00 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37c>
      _nestingLimit--;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	7b1b      	ldrb	r3, [r3, #12]
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	731a      	strb	r2, [r3, #12]
      err = parse(*slot->data());
 8003a98:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8003a9c:	f7fd fd52 	bl	8001544 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7ff fc45 	bl	8003334 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	733b      	strb	r3, [r7, #12]
      _nestingLimit++;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	7b1b      	ldrb	r3, [r3, #12]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	731a      	strb	r2, [r3, #12]
      if (err) return err;
 8003aba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003abe:	f107 020c 	add.w	r2, r7, #12
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fe f9d7 	bl	8001e78 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d106      	bne.n	8003ade <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25a>
 8003ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25a>
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25c>
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f083 0301 	eor.w	r3, r3, #1
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x26a>
 8003aea:	7b3b      	ldrb	r3, [r7, #12]
 8003aec:	e088      	b.n	8003c00 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37c>
      err = skipSpacesAndComments();
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7ff fc98 	bl	8003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8003af4:	4603      	mov	r3, r0
 8003af6:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 8003af8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003afc:	f107 020c 	add.w	r2, r7, #12
 8003b00:	4611      	mov	r1, r2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe f9b8 	bl	8001e78 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d106      	bne.n	8003b1c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x298>
 8003b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x298>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e000      	b.n	8003b1e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29a>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f083 0301 	eor.w	r3, r3, #1
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2a8>
 8003b28:	7b3b      	ldrb	r3, [r7, #12]
 8003b2a:	e069      	b.n	8003c00 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37c>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b30:	237d      	movs	r3, #125	; 0x7d
 8003b32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (current() != charToSkip) return false;
 8003b36:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003b38:	f7ff fd54 	bl	80035e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	461a      	mov	r2, r3
 8003b40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003b44:	4293      	cmp	r3, r2
 8003b46:	bf14      	ite	ne
 8003b48:	2301      	movne	r3, #1
 8003b4a:	2300      	moveq	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2d2>
 8003b52:	2300      	movs	r3, #0
 8003b54:	e003      	b.n	8003b5e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2da>
    move();
 8003b56:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003b58:	f000 f896 	bl	8003c88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003b5c:	2301      	movs	r3, #1
      if (eat('}')) return DeserializationError::Ok;
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d008      	beq.n	8003b74 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2f0>
 8003b62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003b66:	2100      	movs	r1, #0
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fe f974 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003b6e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003b72:	e045      	b.n	8003c00 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37c>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	663b      	str	r3, [r7, #96]	; 0x60
 8003b78:	232c      	movs	r3, #44	; 0x2c
 8003b7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (current() != charToSkip) return false;
 8003b7e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003b80:	f7ff fd30 	bl	80035e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003b84:	4603      	mov	r3, r0
 8003b86:	461a      	mov	r2, r3
 8003b88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	bf14      	ite	ne
 8003b90:	2301      	movne	r3, #1
 8003b92:	2300      	moveq	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x31a>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e003      	b.n	8003ba6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x322>
    move();
 8003b9e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003ba0:	f000 f872 	bl	8003c88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003ba4:	2301      	movs	r3, #1
      if (!eat(',')) return DeserializationError::InvalidInput;
 8003ba6:	f083 0301 	eor.w	r3, r3, #1
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x33e>
 8003bb0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003bb4:	2102      	movs	r1, #2
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fe f94d 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003bbc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003bc0:	e01e      	b.n	8003c00 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37c>
      err = skipSpacesAndComments();
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff fc2e 	bl	8003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 8003bcc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003bd0:	f107 020c 	add.w	r2, r7, #12
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fe f94e 	bl	8001e78 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d106      	bne.n	8003bf0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36c>
 8003be2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36c>
 8003bec:	2301      	movs	r3, #1
 8003bee:	e000      	b.n	8003bf2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36e>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f083 0301 	eor.w	r3, r3, #1
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f43f aec0 	beq.w	800397e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xfa>
 8003bfe:	7b3b      	ldrb	r3, [r7, #12]
  }
 8003c00:	4618      	mov	r0, r3
 8003c02:	3788      	adds	r7, #136	; 0x88
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE>:
  DeserializationError parseValue(VariantData &variant) {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
    if (isQuote(current())) {
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7ff fce6 	bl	80035e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 f85f 	bl	8003cde <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d005      	beq.n	8003c32 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE+0x2a>
      return parseStringValue(variant);
 8003c26:	6839      	ldr	r1, [r7, #0]
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f86c 	bl	8003d06 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	e004      	b.n	8003c3c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE+0x34>
      return parseNumericValue(variant);
 8003c32:	6839      	ldr	r1, [r7, #0]
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f8a1 	bl	8003d7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>
 8003c3a:	4603      	mov	r3, r0
  }
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>:

template <typename T>
inline typename enable_if<is_same<T, const char*>::value ||
                              is_same<T, char*>::value,
                          const char*>::type
variantAs(const VariantData* _data) {
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  return _data != 0 ? _data->asString() : 0;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d004      	beq.n	8003c5c <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE+0x18>
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7fe f833 	bl	8001cbe <_ZNK19ArduinoJson6101_11011VariantData8asStringEv>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	e000      	b.n	8003c5e <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE+0x1a>
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>:
inline typename enable_if<is_integral<T>::value, T>::type variantAs(
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b082      	sub	sp, #8
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  return _data != 0 ? _data->asIntegral<T>() : T(0);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d004      	beq.n	8003c7e <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x18>
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f96d 	bl	8003f54 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	e000      	b.n	8003c80 <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x1a>
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>:
  void move() {
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
    _loaded = false;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	739a      	strb	r2, [r3, #14]
  }
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>:
  DeserializationError parseKey(const char *&key) {
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b082      	sub	sp, #8
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	6039      	str	r1, [r7, #0]
    if (isQuote(current())) {
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff fc99 	bl	80035e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 f812 	bl	8003cde <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d005      	beq.n	8003ccc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x2a>
      return parseQuotedString(key);
 8003cc0:	6839      	ldr	r1, [r7, #0]
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f98a 	bl	8003fdc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	e004      	b.n	8003cd6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x34>
      return parseNonQuotedString(key);
 8003ccc:	6839      	ldr	r1, [r7, #0]
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fa1c 	bl	800410c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc>
 8003cd4:	4603      	mov	r3, r0
  }
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 8003ce8:	79fb      	ldrb	r3, [r7, #7]
 8003cea:	2b27      	cmp	r3, #39	; 0x27
 8003cec:	d002      	beq.n	8003cf4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x16>
 8003cee:	79fb      	ldrb	r3, [r7, #7]
 8003cf0:	2b22      	cmp	r3, #34	; 0x22
 8003cf2:	d101      	bne.n	8003cf8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x1a>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x1c>
 8003cf8:	2300      	movs	r3, #0
  }
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE>:
  DeserializationError parseStringValue(VariantData &variant) {
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b088      	sub	sp, #32
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
 8003d0e:	6039      	str	r1, [r7, #0]
    DeserializationError err = parseQuotedString(value);
 8003d10:	f107 0310 	add.w	r3, r7, #16
 8003d14:	4619      	mov	r1, r3
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f960 	bl	8003fdc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8003d20:	f107 0314 	add.w	r3, r7, #20
 8003d24:	f107 020c 	add.w	r2, r7, #12
 8003d28:	4611      	mov	r1, r2
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fe f8a4 	bl	8001e78 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d106      	bne.n	8003d44 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x3e>
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x3e>
 8003d40:	2301      	movs	r3, #1
 8003d42:	e000      	b.n	8003d46 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x40>
 8003d44:	2300      	movs	r3, #0
 8003d46:	f083 0301 	eor.w	r3, r3, #1
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x4e>
 8003d50:	7b3b      	ldrb	r3, [r7, #12]
 8003d52:	e00f      	b.n	8003d74 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x6e>
    variant.setOwnedString(make_not_null(value));
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff f973 	bl	8003042 <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	4619      	mov	r1, r3
 8003d60:	6838      	ldr	r0, [r7, #0]
 8003d62:	f7fd fe11 	bl	8001988 <_ZN19ArduinoJson6101_11011VariantData14setOwnedStringENS_8not_nullIPKcEE>
    return DeserializationError::Ok;
 8003d66:	f107 031c 	add.w	r3, r7, #28
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fe f872 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003d72:	7f3b      	ldrb	r3, [r7, #28]
  }
 8003d74:	4618      	mov	r0, r3
 8003d76:	3720      	adds	r7, #32
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>:
  DeserializationError parseNumericValue(VariantData &result) {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b0a0      	sub	sp, #128	; 0x80
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    char c = current();
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff fc29 	bl	80035e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    while (canBeInNonQuotedString(c) && n < 63) {
 8003d98:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 fa20 	bl	80041e2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x38>
 8003da8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003dac:	2b3e      	cmp	r3, #62	; 0x3e
 8003dae:	d801      	bhi.n	8003db4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x38>
 8003db0:	2301      	movs	r3, #1
 8003db2:	e000      	b.n	8003db6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x3a>
 8003db4:	2300      	movs	r3, #0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d015      	beq.n	8003de6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x6a>
      move();
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7ff ff64 	bl	8003c88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      buffer[n++] = c;
 8003dc0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	f887 207f 	strb.w	r2, [r7, #127]	; 0x7f
 8003dca:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003dce:	4413      	add	r3, r2
 8003dd0:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8003dd4:	f803 2c5c 	strb.w	r2, [r3, #-92]
      c = current();
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff fc03 	bl	80035e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003dde:	4603      	mov	r3, r0
 8003de0:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    while (canBeInNonQuotedString(c) && n < 63) {
 8003de4:	e7d8      	b.n	8003d98 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1c>
    buffer[n] = 0;
 8003de6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003dea:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8003dee:	4413      	add	r3, r2
 8003df0:	2200      	movs	r2, #0
 8003df2:	f803 2c5c 	strb.w	r2, [r3, #-92]
    c = buffer[0];
 8003df6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003dfa:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    if (c == 't') {  // true
 8003dfe:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003e02:	2b74      	cmp	r3, #116	; 0x74
 8003e04:	d113      	bne.n	8003e2e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xb2>
      result.setBoolean(true);
 8003e06:	2101      	movs	r1, #1
 8003e08:	6838      	ldr	r0, [r7, #0]
 8003e0a:	f7fd fd64 	bl	80018d6 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>
                    : DeserializationError::IncompleteInput;
 8003e0e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d101      	bne.n	8003e1a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x9e>
 8003e16:	2200      	movs	r2, #0
 8003e18:	e000      	b.n	8003e1c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xa0>
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003e20:	4611      	mov	r1, r2
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fe f817 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003e28:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8003e2c:	e077      	b.n	8003f1e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a2>
    if (c == 'f') {  // false
 8003e2e:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003e32:	2b66      	cmp	r3, #102	; 0x66
 8003e34:	d113      	bne.n	8003e5e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xe2>
      result.setBoolean(false);
 8003e36:	2100      	movs	r1, #0
 8003e38:	6838      	ldr	r0, [r7, #0]
 8003e3a:	f7fd fd4c 	bl	80018d6 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>
                    : DeserializationError::IncompleteInput;
 8003e3e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003e42:	2b05      	cmp	r3, #5
 8003e44:	d101      	bne.n	8003e4a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xce>
 8003e46:	2200      	movs	r2, #0
 8003e48:	e000      	b.n	8003e4c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xd0>
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003e50:	4611      	mov	r1, r2
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fd ffff 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003e58:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8003e5c:	e05f      	b.n	8003f1e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a2>
    if (c == 'n') {  // null
 8003e5e:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003e62:	2b6e      	cmp	r3, #110	; 0x6e
 8003e64:	d10f      	bne.n	8003e86 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x10a>
                    : DeserializationError::IncompleteInput;
 8003e66:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d101      	bne.n	8003e72 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xf6>
 8003e6e:	2200      	movs	r2, #0
 8003e70:	e000      	b.n	8003e74 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xf8>
 8003e72:	2201      	movs	r2, #1
 8003e74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003e78:	4611      	mov	r1, r2
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fd ffeb 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003e80:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8003e84:	e04b      	b.n	8003f1e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a2>
    ParsedNumber<Float, UInt> num = parseNumber<Float, UInt>(buffer);
 8003e86:	f107 0308 	add.w	r3, r7, #8
 8003e8a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003e8e:	4611      	mov	r1, r2
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 f9d9 	bl	8004248 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>
    switch (num.type()) {
 8003e96:	f107 0308 	add.w	r3, r7, #8
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fbe4 	bl	8004668 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE4typeEv>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b08      	cmp	r3, #8
 8003ea4:	d021      	beq.n	8003eea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x16e>
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	dc31      	bgt.n	8003f0e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x192>
 8003eaa:	2b06      	cmp	r3, #6
 8003eac:	d00f      	beq.n	8003ece <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x152>
 8003eae:	2b07      	cmp	r3, #7
 8003eb0:	d12d      	bne.n	8003f0e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x192>
        result.setNegativeInteger(num.uintValue);
 8003eb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eb6:	6838      	ldr	r0, [r7, #0]
 8003eb8:	f7fd fd47 	bl	800194a <_ZN19ArduinoJson6101_11011VariantData18setNegativeIntegerEy>
        return DeserializationError::Ok;
 8003ebc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fd ffc7 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003ec8:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8003ecc:	e027      	b.n	8003f1e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a2>
        result.setPositiveInteger(num.uintValue);
 8003ece:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ed2:	6838      	ldr	r0, [r7, #0]
 8003ed4:	f7fd fd26 	bl	8001924 <_ZN19ArduinoJson6101_11011VariantData18setPositiveIntegerEy>
        return DeserializationError::Ok;
 8003ed8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003edc:	2100      	movs	r1, #0
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fd ffb9 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003ee4:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8003ee8:	e019      	b.n	8003f1e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a2>
        result.setFloat(num.floatValue);
 8003eea:	ed97 7b04 	vldr	d7, [r7, #16]
 8003eee:	eeb0 0a47 	vmov.f32	s0, s14
 8003ef2:	eef0 0a67 	vmov.f32	s1, s15
 8003ef6:	6838      	ldr	r0, [r7, #0]
 8003ef8:	f7fd fd01 	bl	80018fe <_ZN19ArduinoJson6101_11011VariantData8setFloatEd>
        return DeserializationError::Ok;
 8003efc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003f00:	2100      	movs	r1, #0
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fd ffa7 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003f08:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8003f0c:	e007      	b.n	8003f1e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a2>
    return DeserializationError::InvalidInput;
 8003f0e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003f12:	2102      	movs	r1, #2
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fd ff9e 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003f1a:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
  }
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3780      	adds	r7, #128	; 0x80
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>:
  VariantData *getMember(TAdaptedString key) const {
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b082      	sub	sp, #8
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
 8003f2e:	6039      	str	r1, [r7, #0]
    return isObject() ? _content.asCollection.get(key) : 0;
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7fd fcbd 	bl	80018b0 <_ZNK19ArduinoJson6101_11011VariantData8isObjectEv>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d006      	beq.n	8003f4a <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_+0x24>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6839      	ldr	r1, [r7, #0]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff f8ba 	bl	80030ba <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_>
 8003f46:	4603      	mov	r3, r0
 8003f48:	e000      	b.n	8003f4c <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_+0x26>
 8003f4a:	2300      	movs	r3, #0
  }
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v>:
inline T VariantData::asIntegral() const {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  switch (type()) {
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7fd fd49 	bl	80019f4 <_ZNK19ArduinoJson6101_11011VariantData4typeEv>
 8003f62:	4603      	mov	r3, r0
 8003f64:	3b03      	subs	r3, #3
 8003f66:	2b05      	cmp	r3, #5
 8003f68:	d832      	bhi.n	8003fd0 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7c>
 8003f6a:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x1c>)
 8003f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f70:	08003fad 	.word	0x08003fad
 8003f74:	08003fad 	.word	0x08003fad
 8003f78:	08003f89 	.word	0x08003f89
 8003f7c:	08003f89 	.word	0x08003f89
 8003f80:	08003f9b 	.word	0x08003f9b
 8003f84:	08003fbb 	.word	0x08003fbb
      return convertPositiveInteger<T>(_content.asInteger);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8e:	4610      	mov	r0, r2
 8003f90:	4619      	mov	r1, r3
 8003f92:	f000 fb88 	bl	80046a6 <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_>
 8003f96:	4603      	mov	r3, r0
 8003f98:	e01b      	b.n	8003fd2 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7e>
      return convertNegativeInteger<T>(_content.asInteger);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	f000 fb92 	bl	80046cc <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	e012      	b.n	8003fd2 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7e>
      return parseInteger<T>(_content.asString);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 fb9f 	bl	80046f4 <_ZN19ArduinoJson6101_11012parseIntegerImEET_PKc>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	e00b      	b.n	8003fd2 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7e>
      return convertFloat<T>(_content.asFloat);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	ed93 7b00 	vldr	d7, [r3]
 8003fc0:	eeb0 0a47 	vmov.f32	s0, s14
 8003fc4:	eef0 0a67 	vmov.f32	s1, s15
 8003fc8:	f000 fba8 	bl	800471c <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	e000      	b.n	8003fd2 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7e>
      return 0;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop

08003fdc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>:
  DeserializationError parseQuotedString(const char *&result) {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08c      	sub	sp, #48	; 0x30
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
    StringBuilder builder = _stringStorage.startString();
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f103 0208 	add.w	r2, r3, #8
 8003fec:	f107 0308 	add.w	r3, r7, #8
 8003ff0:	4611      	mov	r1, r2
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fd fee5 	bl	8001dc2 <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>
    const char stopChar = current();
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7ff faf3 	bl	80035e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003ffe:	4603      	mov	r3, r0
 8004000:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    move();
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff fe3f 	bl	8003c88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      char c = current();
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff faea 	bl	80035e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8004010:	4603      	mov	r3, r0
 8004012:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      move();
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7ff fe36 	bl	8003c88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      if (c == stopChar) break;
 800401c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004020:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004024:	429a      	cmp	r2, r3
 8004026:	d04f      	beq.n	80040c8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xec>
      if (c == '\0') return DeserializationError::IncompleteInput;
 8004028:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800402c:	2b00      	cmp	r3, #0
 800402e:	d107      	bne.n	8004040 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x64>
 8004030:	f107 0318 	add.w	r3, r7, #24
 8004034:	2101      	movs	r1, #1
 8004036:	4618      	mov	r0, r3
 8004038:	f7fd ff0d 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800403c:	7e3b      	ldrb	r3, [r7, #24]
 800403e:	e061      	b.n	8004104 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
      if (c == '\\') {
 8004040:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004044:	2b5c      	cmp	r3, #92	; 0x5c
 8004046:	d136      	bne.n	80040b6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xda>
        c = current();
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7ff facb 	bl	80035e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800404e:	4603      	mov	r3, r0
 8004050:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (c == '\0') return DeserializationError::IncompleteInput;
 8004054:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004058:	2b00      	cmp	r3, #0
 800405a:	d107      	bne.n	800406c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x90>
 800405c:	f107 031c 	add.w	r3, r7, #28
 8004060:	2101      	movs	r1, #1
 8004062:	4618      	mov	r0, r3
 8004064:	f7fd fef7 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8004068:	7f3b      	ldrb	r3, [r7, #28]
 800406a:	e04b      	b.n	8004104 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        if (c == 'u') {
 800406c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004070:	2b75      	cmp	r3, #117	; 0x75
 8004072:	d108      	bne.n	8004086 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xaa>
          return DeserializationError::NotSupported;
 8004074:	f107 0320 	add.w	r3, r7, #32
 8004078:	2104      	movs	r1, #4
 800407a:	4618      	mov	r0, r3
 800407c:	f7fd feeb 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8004080:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004084:	e03e      	b.n	8004104 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        c = EscapeSequence::unescapeChar(c);
 8004086:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800408a:	4618      	mov	r0, r3
 800408c:	f7fd ff2c 	bl	8001ee8 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc>
 8004090:	4603      	mov	r3, r0
 8004092:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (c == '\0') return DeserializationError::InvalidInput;
 8004096:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800409a:	2b00      	cmp	r3, #0
 800409c:	d108      	bne.n	80040b0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xd4>
 800409e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040a2:	2102      	movs	r1, #2
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fd fed6 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80040aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80040ae:	e029      	b.n	8004104 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        move();
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff fde9 	bl	8003c88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      builder.append(c);
 80040b6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80040ba:	f107 0308 	add.w	r3, r7, #8
 80040be:	4611      	mov	r1, r2
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fd fe2e 	bl	8001d22 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
    for (;;) {
 80040c6:	e7a0      	b.n	800400a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x2e>
      if (c == stopChar) break;
 80040c8:	bf00      	nop
    result = builder.complete();
 80040ca:	f107 0308 	add.w	r3, r7, #8
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fd fe4c 	bl	8001d6c <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>
 80040d4:	4602      	mov	r2, r0
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	601a      	str	r2, [r3, #0]
    if (!result) return DeserializationError::NoMemory;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d108      	bne.n	80040f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x118>
 80040e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040e6:	2103      	movs	r1, #3
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fd feb4 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80040ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80040f2:	e007      	b.n	8004104 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
    return DeserializationError::Ok;
 80040f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040f8:	2100      	movs	r1, #0
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fd feab 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8004100:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
  }
 8004104:	4618      	mov	r0, r3
 8004106:	3730      	adds	r7, #48	; 0x30
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc>:
  DeserializationError parseNonQuotedString(const char *&result) {
 800410c:	b580      	push	{r7, lr}
 800410e:	b08a      	sub	sp, #40	; 0x28
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
    StringBuilder builder = _stringStorage.startString();
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f103 0208 	add.w	r2, r3, #8
 800411c:	f107 0308 	add.w	r3, r7, #8
 8004120:	4611      	mov	r1, r2
 8004122:	4618      	mov	r0, r3
 8004124:	f7fd fe4d 	bl	8001dc2 <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>
    char c = current();
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f7ff fa5b 	bl	80035e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800412e:	4603      	mov	r3, r0
 8004130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (c == '\0') return DeserializationError::IncompleteInput;
 8004134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004138:	2b00      	cmp	r3, #0
 800413a:	d107      	bne.n	800414c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x40>
 800413c:	f107 0318 	add.w	r3, r7, #24
 8004140:	2101      	movs	r1, #1
 8004142:	4618      	mov	r0, r3
 8004144:	f7fd fe87 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8004148:	7e3b      	ldrb	r3, [r7, #24]
 800414a:	e046      	b.n	80041da <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    if (canBeInNonQuotedString(c)) {  // no quotes
 800414c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004150:	4618      	mov	r0, r3
 8004152:	f000 f846 	bl	80041e2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d019      	beq.n	8004190 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x84>
        move();
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7ff fd93 	bl	8003c88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
        builder.append(c);
 8004162:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004166:	f107 0308 	add.w	r3, r7, #8
 800416a:	4611      	mov	r1, r2
 800416c:	4618      	mov	r0, r3
 800416e:	f7fd fdd8 	bl	8001d22 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
        c = current();
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7ff fa36 	bl	80035e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8004178:	4603      	mov	r3, r0
 800417a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      } while (canBeInNonQuotedString(c));
 800417e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004182:	4618      	mov	r0, r3
 8004184:	f000 f82d 	bl	80041e2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d008      	beq.n	80041a0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x94>
      do {
 800418e:	e7e5      	b.n	800415c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x50>
      return DeserializationError::InvalidInput;
 8004190:	f107 031c 	add.w	r3, r7, #28
 8004194:	2102      	movs	r1, #2
 8004196:	4618      	mov	r0, r3
 8004198:	f7fd fe5d 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800419c:	7f3b      	ldrb	r3, [r7, #28]
 800419e:	e01c      	b.n	80041da <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    result = builder.complete();
 80041a0:	f107 0308 	add.w	r3, r7, #8
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fd fde1 	bl	8001d6c <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>
 80041aa:	4602      	mov	r2, r0
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	601a      	str	r2, [r3, #0]
    if (!result) return DeserializationError::NoMemory;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d108      	bne.n	80041ca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xbe>
 80041b8:	f107 0320 	add.w	r3, r7, #32
 80041bc:	2103      	movs	r1, #3
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fd fe49 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80041c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80041c8:	e007      	b.n	80041da <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    return DeserializationError::Ok;
 80041ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041ce:	2100      	movs	r1, #0
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fd fe40 	bl	8001e56 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80041d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
  }
 80041da:	4618      	mov	r0, r3
 80041dc:	3728      	adds	r7, #40	; 0x28
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b082      	sub	sp, #8
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	4603      	mov	r3, r0
 80041ea:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	2239      	movs	r2, #57	; 0x39
 80041f0:	2130      	movs	r1, #48	; 0x30
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fac0 	bl	8004778 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 80041f8:	4603      	mov	r3, r0
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d11a      	bne.n	8004234 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 80041fe:	79fb      	ldrb	r3, [r7, #7]
 8004200:	227a      	movs	r2, #122	; 0x7a
 8004202:	215f      	movs	r1, #95	; 0x5f
 8004204:	4618      	mov	r0, r3
 8004206:	f000 fab7 	bl	8004778 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d111      	bne.n	8004234 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8004210:	79fb      	ldrb	r3, [r7, #7]
 8004212:	225a      	movs	r2, #90	; 0x5a
 8004214:	2141      	movs	r1, #65	; 0x41
 8004216:	4618      	mov	r0, r3
 8004218:	f000 faae 	bl	8004778 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 800421c:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 800421e:	2b00      	cmp	r3, #0
 8004220:	d108      	bne.n	8004234 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	2b2b      	cmp	r3, #43	; 0x2b
 8004226:	d005      	beq.n	8004234 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
 8004228:	79fb      	ldrb	r3, [r7, #7]
 800422a:	2b2d      	cmp	r3, #45	; 0x2d
 800422c:	d002      	beq.n	8004234 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
 800422e:	79fb      	ldrb	r3, [r7, #7]
 8004230:	2b2e      	cmp	r3, #46	; 0x2e
 8004232:	d101      	bne.n	8004238 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x56>
 8004234:	2301      	movs	r3, #1
 8004236:	e000      	b.n	800423a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x58>
 8004238:	2300      	movs	r3, #0
  }
 800423a:	4618      	mov	r0, r3
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	0000      	movs	r0, r0
 8004244:	0000      	movs	r0, r0
	...

08004248 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>:

template <typename A, typename B>
struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};

template <typename TFloat, typename TUInt>
inline ParsedNumber<TFloat, TUInt> parseNumber(const char *s) {
 8004248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800424c:	ed2d 8b04 	vpush	{d8-d9}
 8004250:	b09a      	sub	sp, #104	; 0x68
 8004252:	af02      	add	r7, sp, #8
 8004254:	6278      	str	r0, [r7, #36]	; 0x24
 8004256:	6239      	str	r1, [r7, #32]
  typedef typename traits::exponent_type exponent_t;
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 8004258:	2300      	movs	r3, #0
 800425a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  switch (*s) {
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b2b      	cmp	r3, #43	; 0x2b
 8004264:	d008      	beq.n	8004278 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x30>
 8004266:	2b2d      	cmp	r3, #45	; 0x2d
 8004268:	d10a      	bne.n	8004280 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x38>
    case '-':
      is_negative = true;
 800426a:	2301      	movs	r3, #1
 800426c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      s++;
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	3301      	adds	r3, #1
 8004274:	623b      	str	r3, [r7, #32]
      break;
 8004276:	e003      	b.n	8004280 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x38>
    case '+':
      s++;
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	3301      	adds	r3, #1
 800427c:	623b      	str	r3, [r7, #32]
      break;
 800427e:	bf00      	nop
  }

  if (*s == 'n' || *s == 'N') return traits::nan();
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b6e      	cmp	r3, #110	; 0x6e
 8004286:	d003      	beq.n	8004290 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x48>
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	2b4e      	cmp	r3, #78	; 0x4e
 800428e:	d10d      	bne.n	80042ac <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x64>
 8004290:	f000 fa8c 	bl	80047ac <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv>
 8004294:	eeb0 7a40 	vmov.f32	s14, s0
 8004298:	eef0 7a60 	vmov.f32	s15, s1
 800429c:	eeb0 0a47 	vmov.f32	s0, s14
 80042a0:	eef0 0a67 	vmov.f32	s1, s15
 80042a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042a6:	f000 fa93 	bl	80047d0 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 80042aa:	e1c8      	b.n	800463e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f6>
  if (*s == 'i' || *s == 'I')
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b69      	cmp	r3, #105	; 0x69
 80042b2:	d003      	beq.n	80042bc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x74>
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b49      	cmp	r3, #73	; 0x49
 80042ba:	d11c      	bne.n	80042f6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xae>
    return is_negative ? -traits::inf() : traits::inf();
 80042bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x92>
 80042c4:	f000 fa9a 	bl	80047fc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 80042c8:	ec53 2b10 	vmov	r2, r3, d0
 80042cc:	ee09 2a10 	vmov	s18, r2
 80042d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80042d4:	ee09 3a90 	vmov	s19, r3
 80042d8:	e005      	b.n	80042e6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x9e>
 80042da:	f000 fa8f 	bl	80047fc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 80042de:	eeb0 9a40 	vmov.f32	s18, s0
 80042e2:	eef0 9a60 	vmov.f32	s19, s1
 80042e6:	eeb0 0a49 	vmov.f32	s0, s18
 80042ea:	eef0 0a69 	vmov.f32	s1, s19
 80042ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042f0:	f000 fa6e 	bl	80047d0 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 80042f4:	e1a3      	b.n	800463e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f6>
  if (!isdigit(*s) && *s != '.') return return_type();
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fd fccb 	bl	8001c96 <_ZN19ArduinoJson6101_1107isdigitEc>
 8004300:	4603      	mov	r3, r0
 8004302:	f083 0301 	eor.w	r3, r3, #1
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xd0>
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b2e      	cmp	r3, #46	; 0x2e
 8004312:	d001      	beq.n	8004318 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xd0>
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xd2>
 8004318:	2300      	movs	r3, #0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xde>
 800431e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004320:	f000 fa7e 	bl	8004820 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>
 8004324:	e18b      	b.n	800463e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f6>

  mantissa_t mantissa = 0;
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  exponent_t exponent_offset = 0;
 8004332:	2300      	movs	r3, #0
 8004334:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  const mantissa_t maxUint = TUInt(-1);
 8004338:	f04f 32ff 	mov.w	r2, #4294967295
 800433c:	f04f 33ff 	mov.w	r3, #4294967295
 8004340:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  while (isdigit(*s)) {
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f7fd fca4 	bl	8001c96 <_ZN19ArduinoJson6101_1107isdigitEc>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d049      	beq.n	80043e8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a0>
    uint8_t digit = uint8_t(*s - '0');
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	3b30      	subs	r3, #48	; 0x30
 800435a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (mantissa > maxUint / 10) break;
 800435e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004362:	f04f 3299 	mov.w	r2, #2576980377	; 0x99999999
 8004366:	4bbe      	ldr	r3, [pc, #760]	; (8004660 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x418>)
 8004368:	428b      	cmp	r3, r1
 800436a:	bf08      	it	eq
 800436c:	4282      	cmpeq	r2, r0
 800436e:	d338      	bcc.n	80043e2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x19a>
    mantissa *= 10;
 8004370:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8004374:	4622      	mov	r2, r4
 8004376:	462b      	mov	r3, r5
 8004378:	f04f 0000 	mov.w	r0, #0
 800437c:	f04f 0100 	mov.w	r1, #0
 8004380:	0099      	lsls	r1, r3, #2
 8004382:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8004386:	0090      	lsls	r0, r2, #2
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	1912      	adds	r2, r2, r4
 800438e:	eb45 0303 	adc.w	r3, r5, r3
 8004392:	1891      	adds	r1, r2, r2
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	415b      	adcs	r3, r3
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800439e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    if (mantissa > maxUint - digit) break;
 80043a2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	43d1      	mvns	r1, r2
 80043ac:	6139      	str	r1, [r7, #16]
 80043ae:	43db      	mvns	r3, r3
 80043b0:	617b      	str	r3, [r7, #20]
 80043b2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80043ba:	4299      	cmp	r1, r3
 80043bc:	bf08      	it	eq
 80043be:	4290      	cmpeq	r0, r2
 80043c0:	d311      	bcc.n	80043e6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x19e>
    mantissa += digit;
 80043c2:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 80043c6:	f04f 0100 	mov.w	r1, #0
 80043ca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043ce:	eb12 0a00 	adds.w	sl, r2, r0
 80043d2:	eb43 0b01 	adc.w	fp, r3, r1
 80043d6:	e9c7 ab14 	strd	sl, fp, [r7, #80]	; 0x50
    s++;
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	3301      	adds	r3, #1
 80043de:	623b      	str	r3, [r7, #32]
  while (isdigit(*s)) {
 80043e0:	e7b0      	b.n	8004344 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xfc>
    if (mantissa > maxUint / 10) break;
 80043e2:	bf00      	nop
 80043e4:	e000      	b.n	80043e8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a0>
    if (mantissa > maxUint - digit) break;
 80043e6:	bf00      	nop
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d108      	bne.n	8004402 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1ba>
 80043f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043fc:	f000 fa2c 	bl	8004858 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb>
 8004400:	e11d      	b.n	800463e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f6>

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
 8004402:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800440a:	bf08      	it	eq
 800440c:	2a00      	cmpeq	r2, #0
 800440e:	d313      	bcc.n	8004438 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1f0>
    mantissa /= 10;
 8004410:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004414:	f04f 020a 	mov.w	r2, #10
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	f7fc fbd8 	bl	8000bd0 <__aeabi_uldivmod>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    exponent_offset++;
 8004428:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800442c:	b29b      	uxth	r3, r3
 800442e:	3301      	adds	r3, #1
 8004430:	b29b      	uxth	r3, r3
 8004432:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  while (mantissa > traits::mantissa_max) {
 8004436:	e7e4      	b.n	8004402 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1ba>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f7fd fc2a 	bl	8001c96 <_ZN19ArduinoJson6101_1107isdigitEc>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00a      	beq.n	800445e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x216>
    exponent_offset++;
 8004448:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800444c:	b29b      	uxth	r3, r3
 800444e:	3301      	adds	r3, #1
 8004450:	b29b      	uxth	r3, r3
 8004452:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    s++;
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	3301      	adds	r3, #1
 800445a:	623b      	str	r3, [r7, #32]
  while (isdigit(*s)) {
 800445c:	e7ec      	b.n	8004438 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1f0>
  }

  if (*s == '.') {
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	2b2e      	cmp	r3, #46	; 0x2e
 8004464:	d144      	bne.n	80044f0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a8>
    s++;
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	3301      	adds	r3, #1
 800446a:	623b      	str	r3, [r7, #32]
    while (isdigit(*s)) {
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	4618      	mov	r0, r3
 8004472:	f7fd fc10 	bl	8001c96 <_ZN19ArduinoJson6101_1107isdigitEc>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d039      	beq.n	80044f0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a8>
      if (mantissa < traits::mantissa_max / 10) {
 800447c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004480:	f04f 3099 	mov.w	r0, #2576980377	; 0x99999999
 8004484:	4977      	ldr	r1, [pc, #476]	; (8004664 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x41c>)
 8004486:	428b      	cmp	r3, r1
 8004488:	bf08      	it	eq
 800448a:	4282      	cmpeq	r2, r0
 800448c:	d22c      	bcs.n	80044e8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a0>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 800448e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8004492:	4622      	mov	r2, r4
 8004494:	462b      	mov	r3, r5
 8004496:	f04f 0000 	mov.w	r0, #0
 800449a:	f04f 0100 	mov.w	r1, #0
 800449e:	0099      	lsls	r1, r3, #2
 80044a0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80044a4:	0090      	lsls	r0, r2, #2
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	1912      	adds	r2, r2, r4
 80044ac:	eb45 0303 	adc.w	r3, r5, r3
 80044b0:	1891      	adds	r1, r2, r2
 80044b2:	6039      	str	r1, [r7, #0]
 80044b4:	415b      	adcs	r3, r3
 80044b6:	607b      	str	r3, [r7, #4]
 80044b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044bc:	4610      	mov	r0, r2
 80044be:	4619      	mov	r1, r3
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	3b30      	subs	r3, #48	; 0x30
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	f04f 0300 	mov.w	r3, #0
 80044ce:	eb10 0802 	adds.w	r8, r0, r2
 80044d2:	eb41 0903 	adc.w	r9, r1, r3
 80044d6:	e9c7 8914 	strd	r8, r9, [r7, #80]	; 0x50
        exponent_offset--;
 80044da:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      s++;
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	3301      	adds	r3, #1
 80044ec:	623b      	str	r3, [r7, #32]
    while (isdigit(*s)) {
 80044ee:	e7bd      	b.n	800446c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x224>
    }
  }

  int exponent = 0;
 80044f0:	2300      	movs	r3, #0
 80044f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (*s == 'e' || *s == 'E') {
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b65      	cmp	r3, #101	; 0x65
 80044fa:	d003      	beq.n	8004504 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2bc>
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b45      	cmp	r3, #69	; 0x45
 8004502:	d16e      	bne.n	80045e2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x39a>
    s++;
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	3301      	adds	r3, #1
 8004508:	623b      	str	r3, [r7, #32]
    bool negative_exponent = false;
 800450a:	2300      	movs	r3, #0
 800450c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (*s == '-') {
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b2d      	cmp	r3, #45	; 0x2d
 8004516:	d106      	bne.n	8004526 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2de>
      negative_exponent = true;
 8004518:	2301      	movs	r3, #1
 800451a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      s++;
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	3301      	adds	r3, #1
 8004522:	623b      	str	r3, [r7, #32]
 8004524:	e006      	b.n	8004534 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2ec>
    } else if (*s == '+') {
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b2b      	cmp	r3, #43	; 0x2b
 800452c:	d102      	bne.n	8004534 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2ec>
      s++;
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	3301      	adds	r3, #1
 8004532:	623b      	str	r3, [r7, #32]
    }

    while (isdigit(*s)) {
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	4618      	mov	r0, r3
 800453a:	f7fd fbac 	bl	8001c96 <_ZN19ArduinoJson6101_1107isdigitEc>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d047      	beq.n	80045d4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x38c>
      exponent = exponent * 10 + (*s - '0');
 8004544:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004546:	4613      	mov	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	461a      	mov	r2, r3
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	3b30      	subs	r3, #48	; 0x30
 8004556:	4413      	add	r3, r2
 8004558:	64bb      	str	r3, [r7, #72]	; 0x48
      if (exponent + exponent_offset > traits::exponent_max) {
 800455a:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 800455e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004560:	4413      	add	r3, r2
 8004562:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8004566:	dd31      	ble.n	80045cc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x384>
        if (negative_exponent)
 8004568:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800456c:	2b00      	cmp	r3, #0
 800456e:	d010      	beq.n	8004592 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x34a>
          return is_negative ? -0.0f : 0.0f;
 8004570:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x336>
 8004578:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8004650 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x408>
 800457c:	e001      	b.n	8004582 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x33a>
 800457e:	ed9f 7b36 	vldr	d7, [pc, #216]	; 8004658 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x410>
 8004582:	eeb0 0a47 	vmov.f32	s0, s14
 8004586:	eef0 0a67 	vmov.f32	s1, s15
 800458a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800458c:	f000 f920 	bl	80047d0 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8004590:	e055      	b.n	800463e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f6>
        else
          return is_negative ? -traits::inf() : traits::inf();
 8004592:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x368>
 800459a:	f000 f92f 	bl	80047fc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 800459e:	ec53 2b10 	vmov	r2, r3, d0
 80045a2:	ee08 2a10 	vmov	s16, r2
 80045a6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80045aa:	ee08 3a90 	vmov	s17, r3
 80045ae:	e005      	b.n	80045bc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x374>
 80045b0:	f000 f924 	bl	80047fc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 80045b4:	eeb0 8a40 	vmov.f32	s16, s0
 80045b8:	eef0 8a60 	vmov.f32	s17, s1
 80045bc:	eeb0 0a48 	vmov.f32	s0, s16
 80045c0:	eef0 0a68 	vmov.f32	s1, s17
 80045c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045c6:	f000 f903 	bl	80047d0 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 80045ca:	e038      	b.n	800463e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f6>
      }
      s++;
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	3301      	adds	r3, #1
 80045d0:	623b      	str	r3, [r7, #32]
    while (isdigit(*s)) {
 80045d2:	e7af      	b.n	8004534 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2ec>
    }
    if (negative_exponent) exponent = -exponent;
 80045d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d002      	beq.n	80045e2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x39a>
 80045dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045de:	425b      	negs	r3, r3
 80045e0:	64bb      	str	r3, [r7, #72]	; 0x48
  }
  exponent += exponent_offset;
 80045e2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80045e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045e8:	4413      	add	r3, r2
 80045ea:	64bb      	str	r3, [r7, #72]	; 0x48

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0') return return_type();
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3b4>
 80045f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045f6:	f000 f913 	bl	8004820 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>
 80045fa:	e020      	b.n	800463e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f6>

  TFloat result = traits::make_float(static_cast<TFloat>(mantissa), exponent);
 80045fc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004600:	f7fb ffce 	bl	80005a0 <__aeabi_ul2d>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800460a:	ec43 2b10 	vmov	d0, r2, r3
 800460e:	f000 f944 	bl	800489a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>
 8004612:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28

  return is_negative ? -result : result;
 8004616:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800461a:	2b00      	cmp	r3, #0
 800461c:	d006      	beq.n	800462c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3e4>
 800461e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004620:	61bb      	str	r3, [r7, #24]
 8004622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004624:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004628:	61fb      	str	r3, [r7, #28]
 800462a:	e003      	b.n	8004634 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3ec>
 800462c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004630:	ed87 7b06 	vstr	d7, [r7, #24]
 8004634:	ed97 0b06 	vldr	d0, [r7, #24]
 8004638:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800463a:	f000 f8c9 	bl	80047d0 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
}
 800463e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004640:	3760      	adds	r7, #96	; 0x60
 8004642:	46bd      	mov	sp, r7
 8004644:	ecbd 8b04 	vpop	{d8-d9}
 8004648:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800464c:	f3af 8000 	nop.w
 8004650:	00000000 	.word	0x00000000
 8004654:	80000000 	.word	0x80000000
	...
 8004660:	19999999 	.word	0x19999999
 8004664:	00019999 	.word	0x00019999

08004668 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE4typeEv>:
  uint8_t type() const {
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
    return _type;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	7c1b      	ldrb	r3, [r3, #16]
  }
 8004674:	4618      	mov	r0, r3
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>:
  if (!lhs || !rhs) return false;
  return lhs->equalsObject(*rhs);
}

template <typename TAdaptedString>
inline VariantData *objectGet(const CollectionData *obj, TAdaptedString key) {
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  if (!obj) return 0;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_+0x14>
 8004690:	2300      	movs	r3, #0
 8004692:	e004      	b.n	800469e <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_+0x1e>
  return obj->get(key);
 8004694:	6839      	ldr	r1, [r7, #0]
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fe fd0f 	bl	80030ba <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_>
 800469c:	4603      	mov	r3, r0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_>:
canStoreNegativeInteger(TIn) {
  return false;
}

template <typename TOut, typename TIn>
TOut convertPositiveInteger(TIn value) {
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	e9c7 0100 	strd	r0, r1, [r7]
  return canStorePositiveInteger<TOut>(value) ? TOut(value) : 0;
 80046b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046b4:	f000 f946 	bl	8004944 <_ZN19ArduinoJson6101_11023canStorePositiveIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuelestS3_stT0_EbE4typeES5_>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_+0x1c>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	e000      	b.n	80046c4 <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_+0x1e>
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_>:

template <typename TOut, typename TIn>
TOut convertNegativeInteger(TIn value) {
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	e9c7 0100 	strd	r0, r1, [r7]
  return canStoreNegativeInteger<TOut>(value) ? TOut(~value + 1) : 0;
 80046d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046da:	f000 f94b 	bl	8004974 <_ZN19ArduinoJson6101_11023canStoreNegativeIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueEbE4typeET0_>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_+0x1e>
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	425b      	negs	r3, r3
 80046e8:	e000      	b.n	80046ec <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_+0x20>
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <_ZN19ArduinoJson6101_11012parseIntegerImEET_PKc>:
#include "convertNumber.hpp"
#include "parseNumber.hpp"

namespace ARDUINOJSON_NAMESPACE {
template <typename T>
T parseInteger(const char *s) {
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  // try to reuse the same parameters as JsonDeserializer
  typedef typename choose_largest<UInt, typename make_unsigned<T>::type>::type
      TUInt;
  return parseNumber<Float, TUInt>(s).template as<T>();
 80046fc:	f107 0308 	add.w	r3, r7, #8
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff fda0 	bl	8004248 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>
 8004708:	f107 0308 	add.w	r3, r7, #8
 800470c:	4618      	mov	r0, r3
 800470e:	f000 f93d 	bl	800498c <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v>
 8004712:	4603      	mov	r3, r0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3720      	adds	r7, #32
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>:
    TIn value) {
  return TOut(value);
}

template <typename TOut, typename TIn>
typename enable_if<!is_floating_point<TOut>::value, TOut>::type convertFloat(
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	ed87 0b00 	vstr	d0, [r7]
    TIn value) {
  return value >= numeric_limits<TOut>::lowest() &&
 8004726:	f000 f961 	bl	80049ec <_ZN19ArduinoJson6101_11014numeric_limitsImvE6lowestEv>
 800472a:	4603      	mov	r3, r0
 800472c:	4618      	mov	r0, r3
 800472e:	f7fb fef3 	bl	8000518 <__aeabi_ui2d>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
                 value <= numeric_limits<TOut>::highest()
             ? TOut(value)
 8004736:	e9d7 0100 	ldrd	r0, r1, [r7]
 800473a:	f7fc f9ed 	bl	8000b18 <__aeabi_dcmpge>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d014      	beq.n	800476e <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x52>
                 value <= numeric_limits<TOut>::highest()
 8004744:	f000 f95a 	bl	80049fc <_ZN19ArduinoJson6101_11014numeric_limitsImvE7highestEv>
 8004748:	4603      	mov	r3, r0
 800474a:	4618      	mov	r0, r3
 800474c:	f7fb fee4 	bl	8000518 <__aeabi_ui2d>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
  return value >= numeric_limits<TOut>::lowest() &&
 8004754:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004758:	f7fc f9d4 	bl	8000b04 <__aeabi_dcmple>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d005      	beq.n	800476e <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x52>
             ? TOut(value)
 8004762:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004766:	f7fc fa13 	bl	8000b90 <__aeabi_d2uiz>
 800476a:	4603      	mov	r3, r0
 800476c:	e000      	b.n	8004770 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x54>
 800476e:	2300      	movs	r3, #0
             : 0;
}
 8004770:	4618      	mov	r0, r3
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	4603      	mov	r3, r0
 8004780:	71fb      	strb	r3, [r7, #7]
 8004782:	460b      	mov	r3, r1
 8004784:	71bb      	strb	r3, [r7, #6]
 8004786:	4613      	mov	r3, r2
 8004788:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 800478a:	79ba      	ldrb	r2, [r7, #6]
 800478c:	79fb      	ldrb	r3, [r7, #7]
 800478e:	429a      	cmp	r2, r3
 8004790:	d805      	bhi.n	800479e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x26>
 8004792:	79fa      	ldrb	r2, [r7, #7]
 8004794:	797b      	ldrb	r3, [r7, #5]
 8004796:	429a      	cmp	r2, r3
 8004798:	d801      	bhi.n	800479e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x26>
 800479a:	2301      	movs	r3, #1
 800479c:	e000      	b.n	80047a0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x28>
 800479e:	2300      	movs	r3, #0
  }
 80047a0:	4618      	mov	r0, r3
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv>:
        forge(0x0AFE07B2, 0x7DD78B14)   // 1e-255
    };
    return factors[index];
  }

  static T nan() {
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
    return forge(0x7ff80000, 0x00000000);
 80047b0:	2100      	movs	r1, #0
 80047b2:	4806      	ldr	r0, [pc, #24]	; (80047cc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv+0x20>)
 80047b4:	f000 f92b 	bl	8004a0e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80047b8:	eeb0 7a40 	vmov.f32	s14, s0
 80047bc:	eef0 7a60 	vmov.f32	s15, s1
  }
 80047c0:	eeb0 0a47 	vmov.f32	s0, s14
 80047c4:	eef0 0a67 	vmov.f32	s1, s15
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	7ff80000 	.word	0x7ff80000

080047d0 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>:
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	ed87 0b00 	vstr	d0, [r7]
 80047dc:	68f9      	ldr	r1, [r7, #12]
 80047de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047e2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2208      	movs	r2, #8
 80047ea:	741a      	strb	r2, [r3, #16]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4618      	mov	r0, r3
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
	...

080047fc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>:

  static T inf() {
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
    return forge(0x7ff00000, 0x00000000);
 8004800:	2100      	movs	r1, #0
 8004802:	4806      	ldr	r0, [pc, #24]	; (800481c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv+0x20>)
 8004804:	f000 f903 	bl	8004a0e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004808:	eeb0 7a40 	vmov.f32	s14, s0
 800480c:	eef0 7a60 	vmov.f32	s15, s1
  }
 8004810:	eeb0 0a47 	vmov.f32	s0, s14
 8004814:	eef0 0a67 	vmov.f32	s1, s15
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	7ff00000 	.word	0x7ff00000

08004820 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>:
  ParsedNumber() : uintValue(0), floatValue(0), _type(VALUE_IS_NULL) {}
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	f04f 0200 	mov.w	r2, #0
 800482e:	f04f 0300 	mov.w	r3, #0
 8004832:	e9c1 2300 	strd	r2, r3, [r1]
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	741a      	strb	r2, [r3, #16]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4618      	mov	r0, r3
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb>:
  ParsedNumber(TUInt value, bool is_negative)
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	e9c7 2300 	strd	r2, r3, [r7]
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
 8004864:	68f9      	ldr	r1, [r7, #12]
 8004866:	e9d7 2300 	ldrd	r2, r3, [r7]
 800486a:	e9c1 2300 	strd	r2, r3, [r1]
 800486e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004872:	f7fb fe95 	bl	80005a0 <__aeabi_ul2d>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	68f9      	ldr	r1, [r7, #12]
 800487c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004880:	7e3b      	ldrb	r3, [r7, #24]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb+0x32>
 8004886:	2207      	movs	r2, #7
 8004888:	e000      	b.n	800488c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb+0x34>
 800488a:	2206      	movs	r2, #6
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	741a      	strb	r2, [r3, #16]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>:
  static T make_float(T m, TExponent e) {
 800489a:	b580      	push	{r7, lr}
 800489c:	b086      	sub	sp, #24
 800489e:	af00      	add	r7, sp, #0
 80048a0:	ed87 0b02 	vstr	d0, [r7, #8]
 80048a4:	6078      	str	r0, [r7, #4]
    if (e > 0) {
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	dd1e      	ble.n	80048ea <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x50>
      for (uint8_t index = 0; e != 0; index++) {
 80048ac:	2300      	movs	r3, #0
 80048ae:	75fb      	strb	r3, [r7, #23]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d03b      	beq.n	800492e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x94>
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00d      	beq.n	80048dc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x42>
 80048c0:	7dfb      	ldrb	r3, [r7, #23]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 f8ca 	bl	8004a5c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>
 80048c8:	ec53 2b10 	vmov	r2, r3, d0
 80048cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048d0:	f7fb fe9c 	bl	800060c <__aeabi_dmul>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
        e >>= 1;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	105b      	asrs	r3, r3, #1
 80048e0:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 80048e2:	7dfb      	ldrb	r3, [r7, #23]
 80048e4:	3301      	adds	r3, #1
 80048e6:	75fb      	strb	r3, [r7, #23]
 80048e8:	e7e2      	b.n	80048b0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x16>
      e = TExponent(-e);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	425b      	negs	r3, r3
 80048ee:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 80048f0:	2300      	movs	r3, #0
 80048f2:	75bb      	strb	r3, [r7, #22]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d019      	beq.n	800492e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x94>
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00d      	beq.n	8004920 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x86>
 8004904:	7dbb      	ldrb	r3, [r7, #22]
 8004906:	4618      	mov	r0, r3
 8004908:	f000 f918 	bl	8004b3c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>
 800490c:	ec53 2b10 	vmov	r2, r3, d0
 8004910:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004914:	f7fb fe7a 	bl	800060c <__aeabi_dmul>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	e9c7 2302 	strd	r2, r3, [r7, #8]
        e >>= 1;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	105b      	asrs	r3, r3, #1
 8004924:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 8004926:	7dbb      	ldrb	r3, [r7, #22]
 8004928:	3301      	adds	r3, #1
 800492a:	75bb      	strb	r3, [r7, #22]
 800492c:	e7e2      	b.n	80048f4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x5a>
    return m;
 800492e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004932:	ec43 2b17 	vmov	d7, r2, r3
  }
 8004936:	eeb0 0a47 	vmov.f32	s0, s14
 800493a:	eef0 0a67 	vmov.f32	s1, s15
 800493e:	3718      	adds	r7, #24
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <_ZN19ArduinoJson6101_11023canStorePositiveIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuelestS3_stT0_EbE4typeES5_>:
canStorePositiveInteger(TIn value) {
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 800494e:	f000 f855 	bl	80049fc <_ZN19ArduinoJson6101_11014numeric_limitsImvE7highestEv>
 8004952:	4603      	mov	r3, r0
 8004954:	4618      	mov	r0, r3
 8004956:	f04f 0100 	mov.w	r1, #0
 800495a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800495e:	4299      	cmp	r1, r3
 8004960:	bf08      	it	eq
 8004962:	4290      	cmpeq	r0, r2
 8004964:	bf2c      	ite	cs
 8004966:	2301      	movcs	r3, #1
 8004968:	2300      	movcc	r3, #0
 800496a:	b2db      	uxtb	r3, r3
}
 800496c:	4618      	mov	r0, r3
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <_ZN19ArduinoJson6101_11023canStoreNegativeIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueEbE4typeET0_>:
canStoreNegativeInteger(TIn) {
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	e9c7 0100 	strd	r0, r1, [r7]
  return false;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v>:
  T as() const {
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
    switch (_type) {
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	7c1b      	ldrb	r3, [r3, #16]
 8004998:	2b08      	cmp	r3, #8
 800499a:	d017      	beq.n	80049cc <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x40>
 800499c:	2b08      	cmp	r3, #8
 800499e:	dc20      	bgt.n	80049e2 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x56>
 80049a0:	2b06      	cmp	r3, #6
 80049a2:	d00a      	beq.n	80049ba <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x2e>
 80049a4:	2b07      	cmp	r3, #7
 80049a6:	d11c      	bne.n	80049e2 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x56>
        return convertNegativeInteger<T>(uintValue);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ae:	4610      	mov	r0, r2
 80049b0:	4619      	mov	r1, r3
 80049b2:	f7ff fe8b 	bl	80046cc <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_>
 80049b6:	4603      	mov	r3, r0
 80049b8:	e014      	b.n	80049e4 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x58>
        return convertPositiveInteger<T>(uintValue);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c0:	4610      	mov	r0, r2
 80049c2:	4619      	mov	r1, r3
 80049c4:	f7ff fe6f 	bl	80046a6 <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_>
 80049c8:	4603      	mov	r3, r0
 80049ca:	e00b      	b.n	80049e4 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x58>
        return convertFloat<T>(floatValue);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	ed93 7b02 	vldr	d7, [r3, #8]
 80049d2:	eeb0 0a47 	vmov.f32	s0, s14
 80049d6:	eef0 0a67 	vmov.f32	s1, s15
 80049da:	f7ff fe9f 	bl	800471c <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>
 80049de:	4603      	mov	r3, r0
 80049e0:	e000      	b.n	80049e4 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x58>
        return 0;
 80049e2:	2300      	movs	r3, #0
  }
 80049e4:	4618      	mov	r0, r3
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <_ZN19ArduinoJson6101_11014numeric_limitsImvE6lowestEv>:
template <typename T, typename Enable = void>
struct numeric_limits;

template <typename T>
struct numeric_limits<T, typename enable_if<is_unsigned<T>::value>::type> {
  static T lowest() {
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
    return 0;
 80049f0:	2300      	movs	r3, #0
  }
 80049f2:	4618      	mov	r0, r3
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <_ZN19ArduinoJson6101_11014numeric_limitsImvE7highestEv>:
  static T highest() {
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
    return T(-1);
 8004a00:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8004a04:	4618      	mov	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>:
  }

  // constructs a double floating point values from its binary representation
  // we use this function to workaround platforms with single precision literals
  // (for example, when -fsingle-precision-constant is passed to GCC)
  static T forge(uint32_t msb, uint32_t lsb) {
 8004a0e:	b5b0      	push	{r4, r5, r7, lr}
 8004a10:	b082      	sub	sp, #8
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	6039      	str	r1, [r7, #0]
    return alias_cast<T>((uint64_t(msb) << 32) | lsb);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f04f 0100 	mov.w	r1, #0
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	0003      	movs	r3, r0
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	6839      	ldr	r1, [r7, #0]
 8004a2e:	4608      	mov	r0, r1
 8004a30:	f04f 0100 	mov.w	r1, #0
 8004a34:	ea42 0400 	orr.w	r4, r2, r0
 8004a38:	ea43 0501 	orr.w	r5, r3, r1
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	4629      	mov	r1, r5
 8004a40:	f000 f936 	bl	8004cb0 <_ZN19ArduinoJson6101_11010alias_castIdyEET_T0_>
 8004a44:	eeb0 7a40 	vmov.f32	s14, s0
 8004a48:	eef0 7a60 	vmov.f32	s15, s1
  }
 8004a4c:	eeb0 0a47 	vmov.f32	s0, s14
 8004a50:	eef0 0a67 	vmov.f32	s1, s15
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004a5c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>:
  static T positiveBinaryPowerOfTen(int index) {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
    static T factors[] = {
 8004a64:	4b2b      	ldr	r3, [pc, #172]	; (8004b14 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb8>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	f3bf 8f5b 	dmb	ish
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	bf0c      	ite	eq
 8004a76:	2301      	moveq	r3, #1
 8004a78:	2300      	movne	r3, #0
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d039      	beq.n	8004af4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x98>
 8004a80:	4824      	ldr	r0, [pc, #144]	; (8004b14 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb8>)
 8004a82:	f014 f9d3 	bl	8018e2c <__cxa_guard_acquire>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	bf14      	ite	ne
 8004a8c:	2301      	movne	r3, #1
 8004a8e:	2300      	moveq	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d02e      	beq.n	8004af4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x98>
        forge(0x4693B8B5, 0xB5056E17),  // 1e32
 8004a96:	4920      	ldr	r1, [pc, #128]	; (8004b18 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xbc>)
 8004a98:	4820      	ldr	r0, [pc, #128]	; (8004b1c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc0>)
 8004a9a:	f7ff ffb8 	bl	8004a0e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004a9e:	eeb0 7a40 	vmov.f32	s14, s0
 8004aa2:	eef0 7a60 	vmov.f32	s15, s1
    static T factors[] = {
 8004aa6:	4b1e      	ldr	r3, [pc, #120]	; (8004b20 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc4>)
 8004aa8:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
        forge(0x4D384F03, 0xE93FF9F5),  // 1e64
 8004aac:	491d      	ldr	r1, [pc, #116]	; (8004b24 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc8>)
 8004aae:	481e      	ldr	r0, [pc, #120]	; (8004b28 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xcc>)
 8004ab0:	f7ff ffad 	bl	8004a0e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004ab4:	eeb0 7a40 	vmov.f32	s14, s0
 8004ab8:	eef0 7a60 	vmov.f32	s15, s1
    static T factors[] = {
 8004abc:	4b18      	ldr	r3, [pc, #96]	; (8004b20 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc4>)
 8004abe:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
        forge(0x5A827748, 0xF9301D32),  // 1e128
 8004ac2:	491a      	ldr	r1, [pc, #104]	; (8004b2c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xd0>)
 8004ac4:	481a      	ldr	r0, [pc, #104]	; (8004b30 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xd4>)
 8004ac6:	f7ff ffa2 	bl	8004a0e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004aca:	eeb0 7a40 	vmov.f32	s14, s0
 8004ace:	eef0 7a60 	vmov.f32	s15, s1
    static T factors[] = {
 8004ad2:	4b13      	ldr	r3, [pc, #76]	; (8004b20 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc4>)
 8004ad4:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
        forge(0x75154FDD, 0x7F73BF3C)   // 1e256
 8004ad8:	4916      	ldr	r1, [pc, #88]	; (8004b34 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xd8>)
 8004ada:	4817      	ldr	r0, [pc, #92]	; (8004b38 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xdc>)
 8004adc:	f7ff ff97 	bl	8004a0e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004ae0:	eeb0 7a40 	vmov.f32	s14, s0
 8004ae4:	eef0 7a60 	vmov.f32	s15, s1
    static T factors[] = {
 8004ae8:	4b0d      	ldr	r3, [pc, #52]	; (8004b20 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc4>)
 8004aea:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
 8004aee:	4809      	ldr	r0, [pc, #36]	; (8004b14 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb8>)
 8004af0:	f014 f9a8 	bl	8018e44 <__cxa_guard_release>
    return factors[index];
 8004af4:	4a0a      	ldr	r2, [pc, #40]	; (8004b20 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc4>)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	4413      	add	r3, r2
 8004afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b00:	ec43 2b17 	vmov	d7, r2, r3
  }
 8004b04:	eeb0 0a47 	vmov.f32	s0, s14
 8004b08:	eef0 0a67 	vmov.f32	s1, s15
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	20000350 	.word	0x20000350
 8004b18:	b5056e17 	.word	0xb5056e17
 8004b1c:	4693b8b5 	.word	0x4693b8b5
 8004b20:	20000010 	.word	0x20000010
 8004b24:	e93ff9f5 	.word	0xe93ff9f5
 8004b28:	4d384f03 	.word	0x4d384f03
 8004b2c:	f9301d32 	.word	0xf9301d32
 8004b30:	5a827748 	.word	0x5a827748
 8004b34:	7f73bf3c 	.word	0x7f73bf3c
 8004b38:	75154fdd 	.word	0x75154fdd

08004b3c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>:
  static T negativeBinaryPowerOfTen(int index) {
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
    static T factors[] = {
 8004b44:	4b46      	ldr	r3, [pc, #280]	; (8004c60 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x124>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	f3bf 8f5b 	dmb	ish
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	bf0c      	ite	eq
 8004b56:	2301      	moveq	r3, #1
 8004b58:	2300      	movne	r3, #0
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d070      	beq.n	8004c42 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x106>
 8004b60:	483f      	ldr	r0, [pc, #252]	; (8004c60 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x124>)
 8004b62:	f014 f963 	bl	8018e2c <__cxa_guard_acquire>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	bf14      	ite	ne
 8004b6c:	2301      	movne	r3, #1
 8004b6e:	2300      	moveq	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d065      	beq.n	8004c42 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x106>
        forge(0x3FB99999, 0x9999999A),  // 1e-1
 8004b76:	493b      	ldr	r1, [pc, #236]	; (8004c64 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x128>)
 8004b78:	483b      	ldr	r0, [pc, #236]	; (8004c68 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x12c>)
 8004b7a:	f7ff ff48 	bl	8004a0e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004b7e:	eeb0 7a40 	vmov.f32	s14, s0
 8004b82:	eef0 7a60 	vmov.f32	s15, s1
    static T factors[] = {
 8004b86:	4b39      	ldr	r3, [pc, #228]	; (8004c6c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x130>)
 8004b88:	ed83 7b00 	vstr	d7, [r3]
        forge(0x3F847AE1, 0x47AE147B),  // 1e-2
 8004b8c:	4938      	ldr	r1, [pc, #224]	; (8004c70 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x134>)
 8004b8e:	4839      	ldr	r0, [pc, #228]	; (8004c74 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x138>)
 8004b90:	f7ff ff3d 	bl	8004a0e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004b94:	eeb0 7a40 	vmov.f32	s14, s0
 8004b98:	eef0 7a60 	vmov.f32	s15, s1
    static T factors[] = {
 8004b9c:	4b33      	ldr	r3, [pc, #204]	; (8004c6c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x130>)
 8004b9e:	ed83 7b02 	vstr	d7, [r3, #8]
        forge(0x3F1A36E2, 0xEB1C432D),  // 1e-4
 8004ba2:	4935      	ldr	r1, [pc, #212]	; (8004c78 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x13c>)
 8004ba4:	4835      	ldr	r0, [pc, #212]	; (8004c7c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x140>)
 8004ba6:	f7ff ff32 	bl	8004a0e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004baa:	eeb0 7a40 	vmov.f32	s14, s0
 8004bae:	eef0 7a60 	vmov.f32	s15, s1
    static T factors[] = {
 8004bb2:	4b2e      	ldr	r3, [pc, #184]	; (8004c6c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x130>)
 8004bb4:	ed83 7b04 	vstr	d7, [r3, #16]
        forge(0x3E45798E, 0xE2308C3A),  // 1e-8
 8004bb8:	4931      	ldr	r1, [pc, #196]	; (8004c80 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x144>)
 8004bba:	4832      	ldr	r0, [pc, #200]	; (8004c84 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x148>)
 8004bbc:	f7ff ff27 	bl	8004a0e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004bc0:	eeb0 7a40 	vmov.f32	s14, s0
 8004bc4:	eef0 7a60 	vmov.f32	s15, s1
    static T factors[] = {
 8004bc8:	4b28      	ldr	r3, [pc, #160]	; (8004c6c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x130>)
 8004bca:	ed83 7b06 	vstr	d7, [r3, #24]
        forge(0x3C9CD2B2, 0x97D889BC),  // 1e-16
 8004bce:	492e      	ldr	r1, [pc, #184]	; (8004c88 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x14c>)
 8004bd0:	482e      	ldr	r0, [pc, #184]	; (8004c8c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x150>)
 8004bd2:	f7ff ff1c 	bl	8004a0e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004bd6:	eeb0 7a40 	vmov.f32	s14, s0
 8004bda:	eef0 7a60 	vmov.f32	s15, s1
    static T factors[] = {
 8004bde:	4b23      	ldr	r3, [pc, #140]	; (8004c6c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x130>)
 8004be0:	ed83 7b08 	vstr	d7, [r3, #32]
        forge(0x3949F623, 0xD5A8A733),  // 1e-32
 8004be4:	492a      	ldr	r1, [pc, #168]	; (8004c90 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x154>)
 8004be6:	482b      	ldr	r0, [pc, #172]	; (8004c94 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x158>)
 8004be8:	f7ff ff11 	bl	8004a0e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004bec:	eeb0 7a40 	vmov.f32	s14, s0
 8004bf0:	eef0 7a60 	vmov.f32	s15, s1
    static T factors[] = {
 8004bf4:	4b1d      	ldr	r3, [pc, #116]	; (8004c6c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x130>)
 8004bf6:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
        forge(0x32A50FFD, 0x44F4A73D),  // 1e-64
 8004bfa:	4927      	ldr	r1, [pc, #156]	; (8004c98 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x15c>)
 8004bfc:	4827      	ldr	r0, [pc, #156]	; (8004c9c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x160>)
 8004bfe:	f7ff ff06 	bl	8004a0e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004c02:	eeb0 7a40 	vmov.f32	s14, s0
 8004c06:	eef0 7a60 	vmov.f32	s15, s1
    static T factors[] = {
 8004c0a:	4b18      	ldr	r3, [pc, #96]	; (8004c6c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x130>)
 8004c0c:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
        forge(0x255BBA08, 0xCF8C979D),  // 1e-128
 8004c10:	4923      	ldr	r1, [pc, #140]	; (8004ca0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x164>)
 8004c12:	4824      	ldr	r0, [pc, #144]	; (8004ca4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x168>)
 8004c14:	f7ff fefb 	bl	8004a0e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004c18:	eeb0 7a40 	vmov.f32	s14, s0
 8004c1c:	eef0 7a60 	vmov.f32	s15, s1
    static T factors[] = {
 8004c20:	4b12      	ldr	r3, [pc, #72]	; (8004c6c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x130>)
 8004c22:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
        forge(0x0AC80628, 0x64AC6F43)   // 1e-256
 8004c26:	4920      	ldr	r1, [pc, #128]	; (8004ca8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x16c>)
 8004c28:	4820      	ldr	r0, [pc, #128]	; (8004cac <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x170>)
 8004c2a:	f7ff fef0 	bl	8004a0e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004c2e:	eeb0 7a40 	vmov.f32	s14, s0
 8004c32:	eef0 7a60 	vmov.f32	s15, s1
    static T factors[] = {
 8004c36:	4b0d      	ldr	r3, [pc, #52]	; (8004c6c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x130>)
 8004c38:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
 8004c3c:	4808      	ldr	r0, [pc, #32]	; (8004c60 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x124>)
 8004c3e:	f014 f901 	bl	8018e44 <__cxa_guard_release>
    return factors[index];
 8004c42:	4a0a      	ldr	r2, [pc, #40]	; (8004c6c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x130>)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	4413      	add	r3, r2
 8004c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4e:	ec43 2b17 	vmov	d7, r2, r3
  }
 8004c52:	eeb0 0a47 	vmov.f32	s0, s14
 8004c56:	eef0 0a67 	vmov.f32	s1, s15
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	200003a0 	.word	0x200003a0
 8004c64:	9999999a 	.word	0x9999999a
 8004c68:	3fb99999 	.word	0x3fb99999
 8004c6c:	20000358 	.word	0x20000358
 8004c70:	47ae147b 	.word	0x47ae147b
 8004c74:	3f847ae1 	.word	0x3f847ae1
 8004c78:	eb1c432d 	.word	0xeb1c432d
 8004c7c:	3f1a36e2 	.word	0x3f1a36e2
 8004c80:	e2308c3a 	.word	0xe2308c3a
 8004c84:	3e45798e 	.word	0x3e45798e
 8004c88:	97d889bc 	.word	0x97d889bc
 8004c8c:	3c9cd2b2 	.word	0x3c9cd2b2
 8004c90:	d5a8a733 	.word	0xd5a8a733
 8004c94:	3949f623 	.word	0x3949f623
 8004c98:	44f4a73d 	.word	0x44f4a73d
 8004c9c:	32a50ffd 	.word	0x32a50ffd
 8004ca0:	cf8c979d 	.word	0xcf8c979d
 8004ca4:	255bba08 	.word	0x255bba08
 8004ca8:	64ac6f43 	.word	0x64ac6f43
 8004cac:	0ac80628 	.word	0x0ac80628

08004cb0 <_ZN19ArduinoJson6101_11010alias_castIdyEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	e9c7 0100 	strd	r0, r1, [r7]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 8004cba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cbe:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 8004cc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cc6:	ec43 2b17 	vmov	d7, r2, r3
}
 8004cca:	eeb0 0a47 	vmov.f32	s0, s14
 8004cce:	eef0 0a67 	vmov.f32	s1, s15
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <_Z41__static_initialization_and_destruction_0ii>:
 8004cdc:	b590      	push	{r4, r7, lr}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d11e      	bne.n	8004d2a <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d119      	bne.n	8004d2a <_Z41__static_initialization_and_destruction_0ii+0x4e>
string strJson;
 8004cf6:	4816      	ldr	r0, [pc, #88]	; (8004d50 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004cf8:	f014 f96c 	bl	8018fd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 8004cfc:	4622      	mov	r2, r4
 8004cfe:	f242 7110 	movw	r1, #10000	; 0x2710
 8004d02:	4814      	ldr	r0, [pc, #80]	; (8004d54 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004d04:	f7fe f9f0 	bl	80030e8 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>
  FORCE_INLINE ObjectRef() : base_type(0), _pool(0) {}
 8004d08:	4b13      	ldr	r3, [pc, #76]	; (8004d58 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fe f9c5 	bl	800309c <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 8004d12:	4b11      	ldr	r3, [pc, #68]	; (8004d58 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	605a      	str	r2, [r3, #4]
 8004d18:	4b10      	ldr	r3, [pc, #64]	; (8004d5c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7fe f9bd 	bl	800309c <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 8004d22:	4b0e      	ldr	r3, [pc, #56]	; (8004d5c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	605a      	str	r2, [r3, #4]
 8004d28:	bf00      	nop
JsonObject module;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10a      	bne.n	8004d46 <_Z41__static_initialization_and_destruction_0ii+0x6a>
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d105      	bne.n	8004d46 <_Z41__static_initialization_and_destruction_0ii+0x6a>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 8004d3a:	4806      	ldr	r0, [pc, #24]	; (8004d54 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004d3c:	f000 f810 	bl	8004d60 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>
string strJson;
 8004d40:	4803      	ldr	r0, [pc, #12]	; (8004d50 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004d42:	f014 f94e 	bl	8018fe2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8004d46:	bf00      	nop
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd90      	pop	{r4, r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	200002fc 	.word	0x200002fc
 8004d54:	20000318 	.word	0x20000318
 8004d58:	20000340 	.word	0x20000340
 8004d5c:	20000348 	.word	0x20000348

08004d60 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>:
  ~BasicJsonDocument() {
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
    freePool();
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f805 	bl	8004d78 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>
  }
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4618      	mov	r0, r3
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>:
    if (requiredSize <= capacity()) return;
    freePool();
    replacePool(allocPool(addPadding(requiredSize)));
  }

  void freePool() {
 8004d78:	b590      	push	{r4, r7, lr}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
    this->deallocate(memoryPool().buffer());
 8004d80:	687c      	ldr	r4, [r7, #4]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	3308      	adds	r3, #8
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fc feec 	bl	8001b64 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fc fc79 	bl	8001686 <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>
 8004d94:	4603      	mov	r3, r0
 8004d96:	4619      	mov	r1, r3
 8004d98:	4620      	mov	r0, r4
 8004d9a:	f000 f804 	bl	8004da6 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>
  }
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd90      	pop	{r4, r7, pc}

08004da6 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>:
  void deallocate(void* p) {
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b082      	sub	sp, #8
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
 8004dae:	6039      	str	r1, [r7, #0]
    _allocator.deallocate(p);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6839      	ldr	r1, [r7, #0]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7fc ff16 	bl	8001be6 <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>
  }
 8004dba:	bf00      	nop
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <_GLOBAL__sub_I_TIM9_IRQHandler>:
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004dca:	2001      	movs	r0, #1
 8004dcc:	f7ff ff86 	bl	8004cdc <_Z41__static_initialization_and_destruction_0ii>
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <_GLOBAL__sub_D_TIM9_IRQHandler>:
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004dda:	2000      	movs	r0, #0
 8004ddc:	f7ff ff7e 	bl	8004cdc <_Z41__static_initialization_and_destruction_0ii>
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dea:	2300      	movs	r3, #0
 8004dec:	607b      	str	r3, [r7, #4]
 8004dee:	4b10      	ldr	r3, [pc, #64]	; (8004e30 <HAL_MspInit+0x4c>)
 8004df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df2:	4a0f      	ldr	r2, [pc, #60]	; (8004e30 <HAL_MspInit+0x4c>)
 8004df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004df8:	6453      	str	r3, [r2, #68]	; 0x44
 8004dfa:	4b0d      	ldr	r3, [pc, #52]	; (8004e30 <HAL_MspInit+0x4c>)
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e02:	607b      	str	r3, [r7, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e06:	2300      	movs	r3, #0
 8004e08:	603b      	str	r3, [r7, #0]
 8004e0a:	4b09      	ldr	r3, [pc, #36]	; (8004e30 <HAL_MspInit+0x4c>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	4a08      	ldr	r2, [pc, #32]	; (8004e30 <HAL_MspInit+0x4c>)
 8004e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e14:	6413      	str	r3, [r2, #64]	; 0x40
 8004e16:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <HAL_MspInit+0x4c>)
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e1e:	603b      	str	r3, [r7, #0]
 8004e20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40023800 	.word	0x40023800

08004e34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b08a      	sub	sp, #40	; 0x28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e3c:	f107 0314 	add.w	r3, r7, #20
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	605a      	str	r2, [r3, #4]
 8004e46:	609a      	str	r2, [r3, #8]
 8004e48:	60da      	str	r2, [r3, #12]
 8004e4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a19      	ldr	r2, [pc, #100]	; (8004eb8 <HAL_UART_MspInit+0x84>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d12c      	bne.n	8004eb0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004e56:	2300      	movs	r3, #0
 8004e58:	613b      	str	r3, [r7, #16]
 8004e5a:	4b18      	ldr	r3, [pc, #96]	; (8004ebc <HAL_UART_MspInit+0x88>)
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5e:	4a17      	ldr	r2, [pc, #92]	; (8004ebc <HAL_UART_MspInit+0x88>)
 8004e60:	f043 0310 	orr.w	r3, r3, #16
 8004e64:	6453      	str	r3, [r2, #68]	; 0x44
 8004e66:	4b15      	ldr	r3, [pc, #84]	; (8004ebc <HAL_UART_MspInit+0x88>)
 8004e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6a:	f003 0310 	and.w	r3, r3, #16
 8004e6e:	613b      	str	r3, [r7, #16]
 8004e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e72:	2300      	movs	r3, #0
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	4b11      	ldr	r3, [pc, #68]	; (8004ebc <HAL_UART_MspInit+0x88>)
 8004e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7a:	4a10      	ldr	r2, [pc, #64]	; (8004ebc <HAL_UART_MspInit+0x88>)
 8004e7c:	f043 0301 	orr.w	r3, r3, #1
 8004e80:	6313      	str	r3, [r2, #48]	; 0x30
 8004e82:	4b0e      	ldr	r3, [pc, #56]	; (8004ebc <HAL_UART_MspInit+0x88>)
 8004e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004e8e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e94:	2302      	movs	r3, #2
 8004e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004ea0:	2307      	movs	r3, #7
 8004ea2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ea4:	f107 0314 	add.w	r3, r7, #20
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4805      	ldr	r0, [pc, #20]	; (8004ec0 <HAL_UART_MspInit+0x8c>)
 8004eac:	f005 fb50 	bl	800a550 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004eb0:	bf00      	nop
 8004eb2:	3728      	adds	r7, #40	; 0x28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	40011000 	.word	0x40011000
 8004ebc:	40023800 	.word	0x40023800
 8004ec0:	40020000 	.word	0x40020000

08004ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ec8:	e7fe      	b.n	8004ec8 <NMI_Handler+0x4>

08004eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ece:	e7fe      	b.n	8004ece <HardFault_Handler+0x4>

08004ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ed4:	e7fe      	b.n	8004ed4 <MemManage_Handler+0x4>

08004ed6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004eda:	e7fe      	b.n	8004eda <BusFault_Handler+0x4>

08004edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ee0:	e7fe      	b.n	8004ee0 <UsageFault_Handler+0x4>

08004ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004ee6:	bf00      	nop
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ef4:	bf00      	nop
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004efe:	b480      	push	{r7}
 8004f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f02:	bf00      	nop
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f10:	f003 fa50 	bl	80083b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f14:	bf00      	nop
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	af00      	add	r7, sp, #0
	return 1;
 8004f1c:	2301      	movs	r3, #1
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <_kill>:

int _kill(int pid, int sig)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004f32:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <_kill+0x20>)
 8004f34:	2216      	movs	r2, #22
 8004f36:	601a      	str	r2, [r3, #0]
	return -1;
 8004f38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	20006d44 	.word	0x20006d44

08004f4c <_exit>:

void _exit (int status)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004f54:	f04f 31ff 	mov.w	r1, #4294967295
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7ff ffe5 	bl	8004f28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004f5e:	e7fe      	b.n	8004f5e <_exit+0x12>

08004f60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	e00a      	b.n	8004f88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004f72:	f3af 8000 	nop.w
 8004f76:	4601      	mov	r1, r0
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	60ba      	str	r2, [r7, #8]
 8004f7e:	b2ca      	uxtb	r2, r1
 8004f80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	3301      	adds	r3, #1
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	dbf0      	blt.n	8004f72 <_read+0x12>
	}

return len;
 8004f90:	687b      	ldr	r3, [r7, #4]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b086      	sub	sp, #24
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	60f8      	str	r0, [r7, #12]
 8004fa2:	60b9      	str	r1, [r7, #8]
 8004fa4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	617b      	str	r3, [r7, #20]
 8004faa:	e009      	b.n	8004fc0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	60ba      	str	r2, [r7, #8]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7fd f807 	bl	8001fc8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	dbf1      	blt.n	8004fac <_write+0x12>
	}
	return len;
 8004fc8:	687b      	ldr	r3, [r7, #4]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <_close>:

int _close(int file)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
	return -1;
 8004fda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ffa:	605a      	str	r2, [r3, #4]
	return 0;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <_isatty>:

int _isatty(int file)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
	return 1;
 8005012:	2301      	movs	r3, #1
}
 8005014:	4618      	mov	r0, r3
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
	return 0;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
	...

0800503c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005044:	4a14      	ldr	r2, [pc, #80]	; (8005098 <_sbrk+0x5c>)
 8005046:	4b15      	ldr	r3, [pc, #84]	; (800509c <_sbrk+0x60>)
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005050:	4b13      	ldr	r3, [pc, #76]	; (80050a0 <_sbrk+0x64>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d102      	bne.n	800505e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005058:	4b11      	ldr	r3, [pc, #68]	; (80050a0 <_sbrk+0x64>)
 800505a:	4a12      	ldr	r2, [pc, #72]	; (80050a4 <_sbrk+0x68>)
 800505c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800505e:	4b10      	ldr	r3, [pc, #64]	; (80050a0 <_sbrk+0x64>)
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4413      	add	r3, r2
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	429a      	cmp	r2, r3
 800506a:	d205      	bcs.n	8005078 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800506c:	4b0e      	ldr	r3, [pc, #56]	; (80050a8 <_sbrk+0x6c>)
 800506e:	220c      	movs	r2, #12
 8005070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005072:	f04f 33ff 	mov.w	r3, #4294967295
 8005076:	e009      	b.n	800508c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8005078:	4b09      	ldr	r3, [pc, #36]	; (80050a0 <_sbrk+0x64>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800507e:	4b08      	ldr	r3, [pc, #32]	; (80050a0 <_sbrk+0x64>)
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4413      	add	r3, r2
 8005086:	4a06      	ldr	r2, [pc, #24]	; (80050a0 <_sbrk+0x64>)
 8005088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800508a:	68fb      	ldr	r3, [r7, #12]
}
 800508c:	4618      	mov	r0, r3
 800508e:	371c      	adds	r7, #28
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	20020000 	.word	0x20020000
 800509c:	00000400 	.word	0x00000400
 80050a0:	200003a4 	.word	0x200003a4
 80050a4:	20006d58 	.word	0x20006d58
 80050a8:	20006d44 	.word	0x20006d44

080050ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80050b0:	4b06      	ldr	r3, [pc, #24]	; (80050cc <SystemInit+0x20>)
 80050b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b6:	4a05      	ldr	r2, [pc, #20]	; (80050cc <SystemInit+0x20>)
 80050b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050c0:	bf00      	nop
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	e000ed00 	.word	0xe000ed00

080050d0 <_ZL18IAP_tftp_decode_opPc>:
  * @brief Returns the TFTP opcode
  * @param buf: pointer on the TFTP packet
  * @retval None
  */
static tftp_opcode IAP_tftp_decode_op(char *buf)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  return (tftp_opcode)(buf[1]);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3301      	adds	r3, #1
 80050dc:	781b      	ldrb	r3, [r3, #0]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <_ZL22IAP_tftp_extract_blockPc>:
  * @brief  Extracts the block number
  * @param  buf: pointer on the TFTP packet
  * @retval block number
  */
static u16_t IAP_tftp_extract_block(char *buf)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b084      	sub	sp, #16
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  u16_t *b = (u16_t*)buf;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	60fb      	str	r3, [r7, #12]
  return ntohs(b[1]);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	3302      	adds	r3, #2
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f007 ff57 	bl	800cfb0 <lwip_htons>
 8005102:	4603      	mov	r3, r0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <_ZL19IAP_tftp_set_opcodePc11tftp_opcode>:
  * @param  buffer: pointer on the TFTP packet
  * @param  opcode: TFTP opcode
  * @retval None
  */
static void IAP_tftp_set_opcode(char *buffer, tftp_opcode opcode)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	460b      	mov	r3, r1
 8005116:	70fb      	strb	r3, [r7, #3]
  buffer[0] = 0;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	701a      	strb	r2, [r3, #0]
  buffer[1] = (u8_t)opcode;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	3301      	adds	r3, #1
 8005122:	78fa      	ldrb	r2, [r7, #3]
 8005124:	701a      	strb	r2, [r3, #0]
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <_ZL18IAP_tftp_set_blockPct>:
  * @param packet: pointer on the TFTP packet
  * @param  block: block number
  * @retval None
  */
static void IAP_tftp_set_block(char* packet, u16_t block)
{
 8005132:	b590      	push	{r4, r7, lr}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	460b      	mov	r3, r1
 800513c:	807b      	strh	r3, [r7, #2]
  u16_t *p = (u16_t *)packet;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	60fb      	str	r3, [r7, #12]
  p[1] = htons(block);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	1c9c      	adds	r4, r3, #2
 8005146:	887b      	ldrh	r3, [r7, #2]
 8005148:	4618      	mov	r0, r3
 800514a:	f007 ff31 	bl	800cfb0 <lwip_htons>
 800514e:	4603      	mov	r3, r0
 8005150:	8023      	strh	r3, [r4, #0]
}
 8005152:	bf00      	nop
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	bd90      	pop	{r4, r7, pc}

0800515a <_ZL24IAP_tftp_send_ack_packetP7udp_pcbPK8ip4_addrii>:
  * @param to_port: receive port number
  * @param block: block number
  * @retval: err_t: error code
  */
static err_t IAP_tftp_send_ack_packet(struct udp_pcb *upcb, const ip_addr_t *to, int to_port, int block)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b088      	sub	sp, #32
 800515e:	af00      	add	r7, sp, #0
 8005160:	60f8      	str	r0, [r7, #12]
 8005162:	60b9      	str	r1, [r7, #8]
 8005164:	607a      	str	r2, [r7, #4]
 8005166:	603b      	str	r3, [r7, #0]
  struct pbuf *pkt_buf; /* Chain of pbuf's to be sent */

  /* create the maximum possible size packet that a TFTP ACK packet can be */
  char packet[TFTP_ACK_PKT_LEN];

	memset(packet, 0, TFTP_ACK_PKT_LEN *sizeof(char));
 8005168:	f107 0314 	add.w	r3, r7, #20
 800516c:	2204      	movs	r2, #4
 800516e:	2100      	movs	r1, #0
 8005170:	4618      	mov	r0, r3
 8005172:	f014 f8b9 	bl	80192e8 <memset>

  /* define the first two bytes of the packet */
  IAP_tftp_set_opcode(packet, TFTP_ACK);
 8005176:	f107 0314 	add.w	r3, r7, #20
 800517a:	2104      	movs	r1, #4
 800517c:	4618      	mov	r0, r3
 800517e:	f7ff ffc5 	bl	800510c <_ZL19IAP_tftp_set_opcodePc11tftp_opcode>
   * If we are ACK'ing a DATA pkt then the block number echoes that of the DATA pkt being ACK'd (duh)
   * If we are ACK'ing a WRQ pkt then the block number is always 0
   * RRQ packets are never sent ACK pkts by the server, instead the server sends DATA pkts to the
   * host which are, obviously, used as the "acknowledgement".  This saves from having to sEndTransferboth
   * an ACK packet and a DATA packet for RRQs - see RFC1350 for more info.  */
  IAP_tftp_set_block(packet, block);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	b29a      	uxth	r2, r3
 8005186:	f107 0314 	add.w	r3, r7, #20
 800518a:	4611      	mov	r1, r2
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff ffd0 	bl	8005132 <_ZL18IAP_tftp_set_blockPct>

  /* PBUF_TRANSPORT - specifies the transport layer */
  pkt_buf = pbuf_alloc(PBUF_TRANSPORT, TFTP_ACK_PKT_LEN, PBUF_POOL);
 8005192:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005196:	2104      	movs	r1, #4
 8005198:	2036      	movs	r0, #54	; 0x36
 800519a:	f008 fee1 	bl	800df60 <pbuf_alloc>
 800519e:	61f8      	str	r0, [r7, #28]

  if (!pkt_buf)      /*if the packet pbuf == NULL exit and EndTransfertransmission */
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d102      	bne.n	80051ac <_ZL24IAP_tftp_send_ack_packetP7udp_pcbPK8ip4_addrii+0x52>
  {
    return ERR_MEM;
 80051a6:	f04f 33ff 	mov.w	r3, #4294967295
 80051aa:	e011      	b.n	80051d0 <_ZL24IAP_tftp_send_ack_packetP7udp_pcbPK8ip4_addrii+0x76>
  }

  /* Copy the original data buffer over to the packet buffer's payload */
  memcpy(pkt_buf->payload, packet, TFTP_ACK_PKT_LEN);
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	601a      	str	r2, [r3, #0]

  /* Sending packet by UDP protocol */
  err = udp_sendto(upcb, pkt_buf, to, to_port);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	69f9      	ldr	r1, [r7, #28]
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f00f f97b 	bl	80144b8 <udp_sendto>
 80051c2:	4603      	mov	r3, r0
 80051c4:	76fb      	strb	r3, [r7, #27]

  /* free the buffer pbuf */
  pbuf_free(pkt_buf);
 80051c6:	69f8      	ldr	r0, [r7, #28]
 80051c8:	f009 f9ae 	bl	800e528 <pbuf_free>

  return err;
 80051cc:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3720      	adds	r7, #32
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt>:
  * @param ip_addr: pointer on the receive IP_address structure
  * @param port: receive port address
  * @retval None
  */
static void IAP_wrq_recv_callback(void *_args, struct udp_pcb *upcb, struct pbuf *pkt_buf, const ip_addr_t *addr, u16_t port)
{
 80051d8:	b590      	push	{r4, r7, lr}
 80051da:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80051de:	af00      	add	r7, sp, #0
 80051e0:	f107 040c 	add.w	r4, r7, #12
 80051e4:	6020      	str	r0, [r4, #0]
 80051e6:	f107 0008 	add.w	r0, r7, #8
 80051ea:	6001      	str	r1, [r0, #0]
 80051ec:	1d39      	adds	r1, r7, #4
 80051ee:	600a      	str	r2, [r1, #0]
 80051f0:	463a      	mov	r2, r7
 80051f2:	6013      	str	r3, [r2, #0]
  tftp_connection_args *args = (tftp_connection_args *)_args;
 80051f4:	f107 030c 	add.w	r3, r7, #12
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
  uint32_t data_buffer[128];
  uint16_t count=0;
 80051fe:	2300      	movs	r3, #0
 8005200:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216

  if (pkt_buf->len != pkt_buf->tot_len)
 8005204:	1d3b      	adds	r3, r7, #4
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	895a      	ldrh	r2, [r3, #10]
 800520a:	1d3b      	adds	r3, r7, #4
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	891b      	ldrh	r3, [r3, #8]
 8005210:	429a      	cmp	r2, r3
 8005212:	f040 80a9 	bne.w	8005368 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x190>
  {
    return;
  }

  /* Does this packet have any valid data to write? */
  if ((pkt_buf->len > TFTP_DATA_PKT_HDR_LEN) &&
 8005216:	1d3b      	adds	r3, r7, #4
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	895b      	ldrh	r3, [r3, #10]
 800521c:	2b04      	cmp	r3, #4
 800521e:	d910      	bls.n	8005242 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x6a>
      (IAP_tftp_extract_block((char*)pkt_buf->payload) == (args->block + 1)))
 8005220:	1d3b      	adds	r3, r7, #4
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	4618      	mov	r0, r3
 8005228:	f7ff ff5f 	bl	80050ea <_ZL22IAP_tftp_extract_blockPc>
 800522c:	4603      	mov	r3, r0
 800522e:	461a      	mov	r2, r3
 8005230:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005234:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005238:	3301      	adds	r3, #1
  if ((pkt_buf->len > TFTP_DATA_PKT_HDR_LEN) &&
 800523a:	429a      	cmp	r2, r3
 800523c:	d101      	bne.n	8005242 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x6a>
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x6c>
 8005242:	2300      	movs	r3, #0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d04b      	beq.n	80052e0 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x108>
  {
    /* copy packet payload to data_buffer */
    pbuf_copy_partial(pkt_buf, data_buffer, pkt_buf->len - TFTP_DATA_PKT_HDR_LEN,
 8005248:	1d3b      	adds	r3, r7, #4
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	895b      	ldrh	r3, [r3, #10]
 800524e:	3b04      	subs	r3, #4
 8005250:	b29a      	uxth	r2, r3
 8005252:	f107 0110 	add.w	r1, r7, #16
 8005256:	1d38      	adds	r0, r7, #4
 8005258:	2304      	movs	r3, #4
 800525a:	6800      	ldr	r0, [r0, #0]
 800525c:	f009 fb5e 	bl	800e91c <pbuf_copy_partial>
                      TFTP_DATA_PKT_HDR_LEN);

    total_count += pkt_buf->len - TFTP_DATA_PKT_HDR_LEN;
 8005260:	1d3b      	adds	r3, r7, #4
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	895b      	ldrh	r3, [r3, #10]
 8005266:	461a      	mov	r2, r3
 8005268:	4b42      	ldr	r3, [pc, #264]	; (8005374 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x19c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4413      	add	r3, r2
 800526e:	3b04      	subs	r3, #4
 8005270:	4a40      	ldr	r2, [pc, #256]	; (8005374 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x19c>)
 8005272:	6013      	str	r3, [r2, #0]

    count = (pkt_buf->len - TFTP_DATA_PKT_HDR_LEN)/4;
 8005274:	1d3b      	adds	r3, r7, #4
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	895b      	ldrh	r3, [r3, #10]
 800527a:	3b04      	subs	r3, #4
 800527c:	2b00      	cmp	r3, #0
 800527e:	da00      	bge.n	8005282 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xaa>
 8005280:	3303      	adds	r3, #3
 8005282:	109b      	asrs	r3, r3, #2
 8005284:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
    if (((pkt_buf->len - TFTP_DATA_PKT_HDR_LEN)%4)!=0)
 8005288:	1d3b      	adds	r3, r7, #4
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	895b      	ldrh	r3, [r3, #10]
 800528e:	3b04      	subs	r3, #4
 8005290:	f003 0303 	and.w	r3, r3, #3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d004      	beq.n	80052a2 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0xca>
    count++;
 8005298:	f8b7 3216 	ldrh.w	r3, [r7, #534]	; 0x216
 800529c:	3301      	adds	r3, #1
 800529e:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216

    /* Write received data in Flash */
    FLASH_If_Write(&Flash_Write_Address, data_buffer ,count);
 80052a2:	f8b7 2216 	ldrh.w	r2, [r7, #534]	; 0x216
 80052a6:	f107 0310 	add.w	r3, r7, #16
 80052aa:	4619      	mov	r1, r3
 80052ac:	4832      	ldr	r0, [pc, #200]	; (8005378 <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x1a0>)
 80052ae:	f7fc f8c1 	bl	8001434 <_Z14FLASH_If_WritePVmPmt>

    /* update our block number to match the block number just received */
    args->block++;
 80052b2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80052b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80052c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    /* update total bytes  */
    (args->tot_bytes) += (pkt_buf->len - TFTP_DATA_PKT_HDR_LEN);
 80052c4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80052c8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80052cc:	1d3b      	adds	r3, r7, #4
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	895b      	ldrh	r3, [r3, #10]
 80052d2:	3b04      	subs	r3, #4
 80052d4:	441a      	add	r2, r3
 80052d6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80052da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 80052de:	e01c      	b.n	800531a <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x142>

    /* This is a valid pkt but it has no data.  This would occur if the file being
       written is an exact multiple of 512 bytes.  In this case, the args->block
       value must still be updated, but we can skip everything else.    */
  }
  else if (IAP_tftp_extract_block((char*)pkt_buf->payload) == (args->block + 1))
 80052e0:	1d3b      	adds	r3, r7, #4
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff feff 	bl	80050ea <_ZL22IAP_tftp_extract_blockPc>
 80052ec:	4603      	mov	r3, r0
 80052ee:	461a      	mov	r2, r3
 80052f0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80052f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80052f8:	3301      	adds	r3, #1
 80052fa:	429a      	cmp	r2, r3
 80052fc:	bf0c      	ite	eq
 80052fe:	2301      	moveq	r3, #1
 8005300:	2300      	movne	r3, #0
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d008      	beq.n	800531a <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x142>
  {
    /* update our block number to match the block number just received  */
    args->block++;
 8005308:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800530c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005310:	1c5a      	adds	r2, r3, #1
 8005312:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005316:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  /* Send the appropriate ACK pkt*/
  IAP_tftp_send_ack_packet(upcb, addr, port, args->block);
 800531a:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 800531e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005322:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005326:	4639      	mov	r1, r7
 8005328:	f107 0008 	add.w	r0, r7, #8
 800532c:	6809      	ldr	r1, [r1, #0]
 800532e:	6800      	ldr	r0, [r0, #0]
 8005330:	f7ff ff13 	bl	800515a <_ZL24IAP_tftp_send_ack_packetP7udp_pcbPK8ip4_addrii>

  /* If the last write returned less than the maximum TFTP data pkt length,
   * then we've received the whole file and so we can quit (this is how TFTP
   * signals the EndTransferof a transfer!)
   */
  if (pkt_buf->len < TFTP_DATA_PKT_LEN_MAX)
 8005334:	1d3b      	adds	r3, r7, #4
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	895b      	ldrh	r3, [r3, #10]
 800533a:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800533e:	d20e      	bcs.n	800535e <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x186>
  {
    IAP_tftp_cleanup_wr(upcb, args);
 8005340:	f107 0308 	add.w	r3, r7, #8
 8005344:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8005348:	6818      	ldr	r0, [r3, #0]
 800534a:	f000 f8a1 	bl	8005490 <_ZL19IAP_tftp_cleanup_wrP7udp_pcbP20tftp_connection_args>
    pbuf_free(pkt_buf);
 800534e:	1d3b      	adds	r3, r7, #4
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	f009 f8e9 	bl	800e528 <pbuf_free>
    newJson = true;
 8005356:	4b09      	ldr	r3, [pc, #36]	; (800537c <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x1a4>)
 8005358:	2201      	movs	r2, #1
 800535a:	701a      	strb	r2, [r3, #0]
 800535c:	e005      	b.n	800536a <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x192>
  }
  else
  {
    pbuf_free(pkt_buf);
 800535e:	1d3b      	adds	r3, r7, #4
 8005360:	6818      	ldr	r0, [r3, #0]
 8005362:	f009 f8e1 	bl	800e528 <pbuf_free>
    return;
 8005366:	e000      	b.n	800536a <_ZL21IAP_wrq_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x192>
    return;
 8005368:	bf00      	nop
  }
}
 800536a:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 800536e:	46bd      	mov	sp, r7
 8005370:	bd90      	pop	{r4, r7, pc}
 8005372:	bf00      	nop
 8005374:	200003b0 	.word	0x200003b0
 8005378:	200003a8 	.word	0x200003a8
 800537c:	200002f4 	.word	0x200002f4

08005380 <_ZL22IAP_tftp_process_writeP7udp_pcbPK8ip4_addri>:
  * @param  to: pointer on the receive IP address
  * @param  to_port: receive port number
  * @retval None
  */
static int IAP_tftp_process_write(struct udp_pcb *upcb, const ip_addr_t *to, int to_port)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  tftp_connection_args *args = NULL;
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]
  /* This function is called from a callback,
  * therefore interrupts are disabled,
  * therefore we can use regular malloc   */
  args = (tftp_connection_args*)mem_malloc(sizeof *args);
 8005390:	f44f 700a 	mov.w	r0, #552	; 0x228
 8005394:	f008 f8f4 	bl	800d580 <mem_malloc>
 8005398:	6178      	str	r0, [r7, #20]
  if (!args)
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d105      	bne.n	80053ac <_ZL22IAP_tftp_process_writeP7udp_pcbPK8ip4_addri+0x2c>
  {
    IAP_tftp_cleanup_wr(upcb, args);
 80053a0:	6979      	ldr	r1, [r7, #20]
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f000 f874 	bl	8005490 <_ZL19IAP_tftp_cleanup_wrP7udp_pcbP20tftp_connection_args>
    return 0;
 80053a8:	2300      	movs	r3, #0
 80053aa:	e02c      	b.n	8005406 <_ZL22IAP_tftp_process_writeP7udp_pcbPK8ip4_addri+0x86>
  }

  args->op = TFTP_WRQ;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	2202      	movs	r2, #2
 80053b0:	601a      	str	r2, [r3, #0]
  args->to_ip.addr = to->addr;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  args->to_port = to_port;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  /* the block # used as a positive response to a WRQ is _always_ 0!!! (see RFC1350)  */
  args->block = 0;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  args->tot_bytes = 0;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  /* set callback for receives on this UDP PCB (Protocol Control Block) */
  udp_recv(upcb, IAP_wrq_recv_callback, args);
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	490e      	ldr	r1, [pc, #56]	; (8005410 <_ZL22IAP_tftp_process_writeP7udp_pcbPK8ip4_addri+0x90>)
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f00f fb41 	bl	8014a60 <udp_recv>

  total_count =0;
 80053de:	4b0d      	ldr	r3, [pc, #52]	; (8005414 <_ZL22IAP_tftp_process_writeP7udp_pcbPK8ip4_addri+0x94>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]

  /* init flash */
  FLASH_If_Init();
 80053e4:	f7fb ffee 	bl	80013c4 <_Z13FLASH_If_Initv>

  /* erase user flash area */
  FLASH_If_Erase(JSON_UPLOAD_ADDRESS);
 80053e8:	480b      	ldr	r0, [pc, #44]	; (8005418 <_ZL22IAP_tftp_process_writeP7udp_pcbPK8ip4_addri+0x98>)
 80053ea:	f7fb fff1 	bl	80013d0 <_Z14FLASH_If_Erasem>

  Flash_Write_Address = JSON_UPLOAD_ADDRESS;
 80053ee:	4b0b      	ldr	r3, [pc, #44]	; (800541c <_ZL22IAP_tftp_process_writeP7udp_pcbPK8ip4_addri+0x9c>)
 80053f0:	4a09      	ldr	r2, [pc, #36]	; (8005418 <_ZL22IAP_tftp_process_writeP7udp_pcbPK8ip4_addri+0x98>)
 80053f2:	601a      	str	r2, [r3, #0]
  /* initiate the write transaction by sending the first ack */
  IAP_tftp_send_ack_packet(upcb, to, to_port, args->block);
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	68b9      	ldr	r1, [r7, #8]
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f7ff feab 	bl	800515a <_ZL24IAP_tftp_send_ack_packetP7udp_pcbPK8ip4_addrii>

  return 0;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	080051d9 	.word	0x080051d9
 8005414:	200003b0 	.word	0x200003b0
 8005418:	080d0000 	.word	0x080d0000
 800541c:	200003a8 	.word	0x200003a8

08005420 <_ZL22IAP_tftp_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt>:
  * @param  port: receive port number
  * @retval None
  */
static void IAP_tftp_recv_callback(void *arg, struct udp_pcb *upcb, struct pbuf *pkt_buf,
                        const ip_addr_t *addr, u16_t port)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
 800542c:	603b      	str	r3, [r7, #0]
  tftp_opcode op;
  struct udp_pcb *upcb_tftp_data;
  err_t err;

  /* create new UDP PCB structure */
  upcb_tftp_data = udp_new();
 800542e:	f00f fb79 	bl	8014b24 <udp_new>
 8005432:	6178      	str	r0, [r7, #20]
  if (!upcb_tftp_data)
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d022      	beq.n	8005480 <_ZL22IAP_tftp_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x60>

  /* bind to port 0 to receive next available free port */
  /* NOTE:  This is how TFTP works.  There is a UDP PCB for the standard port
  * 69 which al transactions begin communication on, however, _all_ subsequent
  * transactions for a given "stream" occur on another port  */
  err = udp_bind(upcb_tftp_data, IP_ADDR_ANY, 0);
 800543a:	2200      	movs	r2, #0
 800543c:	4913      	ldr	r1, [pc, #76]	; (800548c <_ZL22IAP_tftp_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x6c>)
 800543e:	6978      	ldr	r0, [r7, #20]
 8005440:	f00f f9f0 	bl	8014824 <udp_bind>
 8005444:	4603      	mov	r3, r0
 8005446:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK)
 8005448:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d119      	bne.n	8005484 <_ZL22IAP_tftp_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x64>
  {
    /* Unable to bind to port */
    return;
  }

  op = IAP_tftp_decode_op((char*)pkt_buf->payload);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	4618      	mov	r0, r3
 8005456:	f7ff fe3b 	bl	80050d0 <_ZL18IAP_tftp_decode_opPc>
 800545a:	4603      	mov	r3, r0
 800545c:	74bb      	strb	r3, [r7, #18]
  if (op != TFTP_WRQ)
 800545e:	7cbb      	ldrb	r3, [r7, #18]
 8005460:	2b02      	cmp	r3, #2
 8005462:	d003      	beq.n	800546c <_ZL22IAP_tftp_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x4c>
  {
    /* remove PCB */
    udp_remove(upcb_tftp_data);
 8005464:	6978      	ldr	r0, [r7, #20]
 8005466:	f00f fb1b 	bl	8014aa0 <udp_remove>
 800546a:	e005      	b.n	8005478 <_ZL22IAP_tftp_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x58>
  }
  else
  {
    /* Start the TFTP write mode*/
    IAP_tftp_process_write(upcb_tftp_data, addr, port);
 800546c:	8c3b      	ldrh	r3, [r7, #32]
 800546e:	461a      	mov	r2, r3
 8005470:	6839      	ldr	r1, [r7, #0]
 8005472:	6978      	ldr	r0, [r7, #20]
 8005474:	f7ff ff84 	bl	8005380 <_ZL22IAP_tftp_process_writeP7udp_pcbPK8ip4_addri>
  }
  pbuf_free(pkt_buf);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f009 f855 	bl	800e528 <pbuf_free>
 800547e:	e002      	b.n	8005486 <_ZL22IAP_tftp_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x66>
    return;
 8005480:	bf00      	nop
 8005482:	e000      	b.n	8005486 <_ZL22IAP_tftp_recv_callbackPvP7udp_pcbP4pbufPK8ip4_addrt+0x66>
    return;
 8005484:	bf00      	nop
}
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	0801e0dc 	.word	0x0801e0dc

08005490 <_ZL19IAP_tftp_cleanup_wrP7udp_pcbP20tftp_connection_args>:
  * @param  upcb: pointer on udp_pcb structure
  * @param  args: pointer on tftp_connection arguments
  * @retval None
  */
static void IAP_tftp_cleanup_wr(struct udp_pcb *upcb, tftp_connection_args *args)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  /* Free the tftp_connection_args structure */
  mem_free(args);
 800549a:	6838      	ldr	r0, [r7, #0]
 800549c:	f007 ff0a 	bl	800d2b4 <mem_free>

  /* Disconnect the udp_pcb */
  udp_disconnect(upcb);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f00f fab5 	bl	8014a10 <udp_disconnect>

  /* close the connection */
  udp_remove(upcb);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f00f fafa 	bl	8014aa0 <udp_remove>

  /* reset the callback function */
  udp_recv(UDPpcb, IAP_tftp_recv_callback, NULL);
 80054ac:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <_ZL19IAP_tftp_cleanup_wrP7udp_pcbP20tftp_connection_args+0x34>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2200      	movs	r2, #0
 80054b2:	4905      	ldr	r1, [pc, #20]	; (80054c8 <_ZL19IAP_tftp_cleanup_wrP7udp_pcbP20tftp_connection_args+0x38>)
 80054b4:	4618      	mov	r0, r3
 80054b6:	f00f fad3 	bl	8014a60 <udp_recv>

}
 80054ba:	bf00      	nop
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	200003ac 	.word	0x200003ac
 80054c8:	08005421 	.word	0x08005421

080054cc <_Z14IAP_tftpd_initv>:
  * @brief  Creates and initializes a UDP PCB for TFTP receive operation
  * @param  None
  * @retval None
  */
void IAP_tftpd_init(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
  err_t err;
  unsigned port = 69; /* 69 is the port used for TFTP protocol initial transaction */
 80054d2:	2345      	movs	r3, #69	; 0x45
 80054d4:	607b      	str	r3, [r7, #4]

  /* create a new UDP PCB structure  */
  UDPpcb = udp_new();
 80054d6:	f00f fb25 	bl	8014b24 <udp_new>
 80054da:	4603      	mov	r3, r0
 80054dc:	4a0f      	ldr	r2, [pc, #60]	; (800551c <_Z14IAP_tftpd_initv+0x50>)
 80054de:	6013      	str	r3, [r2, #0]
  if (!UDPpcb)
 80054e0:	4b0e      	ldr	r3, [pc, #56]	; (800551c <_Z14IAP_tftpd_initv+0x50>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d015      	beq.n	8005514 <_Z14IAP_tftpd_initv+0x48>
    /* Error creating PCB. Out of Memory  */
    return;
  }

  /* Bind this PCB to port 69  */
  err = udp_bind(UDPpcb, IP_ADDR_ANY, port);
 80054e8:	4b0c      	ldr	r3, [pc, #48]	; (800551c <_Z14IAP_tftpd_initv+0x50>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	b292      	uxth	r2, r2
 80054f0:	490b      	ldr	r1, [pc, #44]	; (8005520 <_Z14IAP_tftpd_initv+0x54>)
 80054f2:	4618      	mov	r0, r3
 80054f4:	f00f f996 	bl	8014824 <udp_bind>
 80054f8:	4603      	mov	r3, r0
 80054fa:	70fb      	strb	r3, [r7, #3]
  if (err == ERR_OK)
 80054fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d108      	bne.n	8005516 <_Z14IAP_tftpd_initv+0x4a>
  {
    /* Initialize receive callback function  */
    udp_recv(UDPpcb, IAP_tftp_recv_callback, NULL);
 8005504:	4b05      	ldr	r3, [pc, #20]	; (800551c <_Z14IAP_tftpd_initv+0x50>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2200      	movs	r2, #0
 800550a:	4906      	ldr	r1, [pc, #24]	; (8005524 <_Z14IAP_tftpd_initv+0x58>)
 800550c:	4618      	mov	r0, r3
 800550e:	f00f faa7 	bl	8014a60 <udp_recv>
 8005512:	e000      	b.n	8005516 <_Z14IAP_tftpd_initv+0x4a>
    return;
 8005514:	bf00      	nop
  }
}
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	200003ac 	.word	0x200003ac
 8005520:	0801e0dc 	.word	0x0801e0dc
 8005524:	08005421 	.word	0x08005421

08005528 <_ZN9InterruptC1Ev>:

// Define the vector table, it is only declared in the class declaration
Interrupt* Interrupt::ISRVectorTable[] = {0};

// Constructor
Interrupt::Interrupt(void){}
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	4a04      	ldr	r2, [pc, #16]	; (8005544 <_ZN9InterruptC1Ev+0x1c>)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4618      	mov	r0, r3
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	0801dedc 	.word	0x0801dedc

08005548 <_ZN9Interrupt8RegisterEiPS_>:


// Methods

void Interrupt::Register(int interruptNumber, Interrupt* intThisPtr)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
	printf("Registering interrupt for interrupt number = %d\n", interruptNumber);
 8005552:	6879      	ldr	r1, [r7, #4]
 8005554:	4805      	ldr	r0, [pc, #20]	; (800556c <_ZN9Interrupt8RegisterEiPS_+0x24>)
 8005556:	f013 ff79 	bl	801944c <iprintf>
	ISRVectorTable[interruptNumber] = intThisPtr;
 800555a:	4905      	ldr	r1, [pc, #20]	; (8005570 <_ZN9Interrupt8RegisterEiPS_+0x28>)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005564:	bf00      	nop
 8005566:	3708      	adds	r7, #8
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	0801ac8c 	.word	0x0801ac8c
 8005570:	200003b4 	.word	0x200003b4

08005574 <_ZN9Interrupt20DMA1_Stream5_WrapperEv>:
{
	ISRVectorTable[TIM1_UP_TIM10_IRQn]->ISR_Handler();
}

void Interrupt::DMA1_Stream5_Wrapper(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream5_IRQn]->ISR_Handler();
 8005578:	4b04      	ldr	r3, [pc, #16]	; (800558c <_ZN9Interrupt20DMA1_Stream5_WrapperEv+0x18>)
 800557a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800557c:	4b03      	ldr	r3, [pc, #12]	; (800558c <_ZN9Interrupt20DMA1_Stream5_WrapperEv+0x18>)
 800557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4610      	mov	r0, r2
 8005586:	4798      	blx	r3
}
 8005588:	bf00      	nop
 800558a:	bd80      	pop	{r7, pc}
 800558c:	200003b4 	.word	0x200003b4

08005590 <_ZN3Pin3setEb>:
        inline bool get()
        {
            return HAL_GPIO_ReadPin(this->GPIOx, this->pin);
        }

        inline void set(bool value)
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	460b      	mov	r3, r1
 800559a:	70fb      	strb	r3, [r7, #3]
        {
            if (value)
 800559c:	78fb      	ldrb	r3, [r7, #3]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d008      	beq.n	80055b4 <_ZN3Pin3setEb+0x24>
            {
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_SET);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	8bdb      	ldrh	r3, [r3, #30]
 80055aa:	2201      	movs	r2, #1
 80055ac:	4619      	mov	r1, r3
 80055ae:	f005 f983 	bl	800a8b8 <HAL_GPIO_WritePin>
            }
            else
            {
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
            }
        }
 80055b2:	e007      	b.n	80055c4 <_ZN3Pin3setEb+0x34>
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	8bdb      	ldrh	r3, [r3, #30]
 80055bc:	2200      	movs	r2, #0
 80055be:	4619      	mov	r1, r3
 80055c0:	f005 f97a 	bl	800a8b8 <HAL_GPIO_WritePin>
        }
 80055c4:	bf00      	nop
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm>:

/***********************************************************************
                METHOD DEFINITIONS
************************************************************************/

Blink::Blink(std::string portAndPin, uint32_t threadFreq, uint32_t freq)
 80055cc:	b5b0      	push	{r4, r5, r7, lr}
 80055ce:	b08a      	sub	sp, #40	; 0x28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
 80055d8:	603b      	str	r3, [r7, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fe9f 	bl	8006320 <_ZN6ModuleC1Ev>
 80055e2:	4a1a      	ldr	r2, [pc, #104]	; (800564c <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm+0x80>)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	601a      	str	r2, [r3, #0]
{

	this->periodCount = threadFreq / freq;
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	619a      	str	r2, [r3, #24]
	this->blinkCount = 0;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	61da      	str	r2, [r3, #28]
	this->bState = false;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	751a      	strb	r2, [r3, #20]

	this->blinkPin = new Pin(portAndPin, OUTPUT);
 8005600:	f107 0310 	add.w	r3, r7, #16
 8005604:	68b9      	ldr	r1, [r7, #8]
 8005606:	4618      	mov	r0, r3
 8005608:	f013 fd98 	bl	801913c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800560c:	f107 0510 	add.w	r5, r7, #16
 8005610:	2044      	movs	r0, #68	; 0x44
 8005612:	f013 fc1a 	bl	8018e4a <_Znwj>
 8005616:	4603      	mov	r3, r0
 8005618:	461c      	mov	r4, r3
 800561a:	2201      	movs	r2, #1
 800561c:	4629      	mov	r1, r5
 800561e:	4620      	mov	r0, r4
 8005620:	f7fb fc52 	bl	8000ec8 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	621c      	str	r4, [r3, #32]
 8005628:	f107 0310 	add.w	r3, r7, #16
 800562c:	4618      	mov	r0, r3
 800562e:	f013 fcd8 	bl	8018fe2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	this->blinkPin->set(bState);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6a1a      	ldr	r2, [r3, #32]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	7d1b      	ldrb	r3, [r3, #20]
 800563a:	4619      	mov	r1, r3
 800563c:	4610      	mov	r0, r2
 800563e:	f7ff ffa7 	bl	8005590 <_ZN3Pin3setEb>
}
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	4618      	mov	r0, r3
 8005646:	3728      	adds	r7, #40	; 0x28
 8005648:	46bd      	mov	sp, r7
 800564a:	bdb0      	pop	{r4, r5, r7, pc}
 800564c:	0801dee8 	.word	0x0801dee8

08005650 <_ZN5Blink6updateEv>:

void Blink::update(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
	++this->blinkCount;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	61da      	str	r2, [r3, #28]
	if (this->blinkCount >= this->periodCount / 2)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69da      	ldr	r2, [r3, #28]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	085b      	lsrs	r3, r3, #1
 800566c:	429a      	cmp	r2, r3
 800566e:	d311      	bcc.n	8005694 <_ZN5Blink6updateEv+0x44>
	{
		this->blinkPin->set(this->bState=!this->bState);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a1a      	ldr	r2, [r3, #32]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	7d1b      	ldrb	r3, [r3, #20]
 8005678:	f083 0301 	eor.w	r3, r3, #1
 800567c:	b2d9      	uxtb	r1, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	7519      	strb	r1, [r3, #20]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	7d1b      	ldrb	r3, [r3, #20]
 8005686:	4619      	mov	r1, r3
 8005688:	4610      	mov	r0, r2
 800568a:	f7ff ff81 	bl	8005590 <_ZN3Pin3setEb>
		this->blinkCount = 0;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	61da      	str	r2, [r3, #28]
	}
}
 8005694:	bf00      	nop
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <_ZN5Blink10slowUpdateEv>:

void Blink::slowUpdate(void)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
	return;
 80056a4:	bf00      	nop
}
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <_ZN5BlinkD1Ev>:
#include "../module.h"
#include "../../drivers/pin/pin.h"

void createBlink(void);

class Blink : public Module
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	4a05      	ldr	r2, [pc, #20]	; (80056d0 <_ZN5BlinkD1Ev+0x20>)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 fe47 	bl	8006354 <_ZN6ModuleD1Ev>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4618      	mov	r0, r3
 80056ca:	3708      	adds	r7, #8
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	0801dee8 	.word	0x0801dee8

080056d4 <_ZN5BlinkD0Ev>:
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7ff ffe7 	bl	80056b0 <_ZN5BlinkD1Ev>
 80056e2:	2124      	movs	r1, #36	; 0x24
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f013 fb9f 	bl	8018e28 <_ZdlPvj>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4618      	mov	r0, r3
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <_ZN11RemoraCommsC1Ev>:
#include "RemoraComms.h"


RemoraComms::RemoraComms()
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 fe0e 	bl	8006320 <_ZN6ModuleC1Ev>
 8005704:	4a05      	ldr	r2, [pc, #20]	; (800571c <_ZN11RemoraCommsC1Ev+0x28>)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	601a      	str	r2, [r3, #0]
{
	printf("Creating an Ethernet communication monitoring module\n");
 800570a:	4805      	ldr	r0, [pc, #20]	; (8005720 <_ZN11RemoraCommsC1Ev+0x2c>)
 800570c:	f013 ff24 	bl	8019558 <puts>

}
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	0801df0c 	.word	0x0801df0c
 8005720:	0801acc0 	.word	0x0801acc0

08005724 <_ZN11RemoraComms6updateEv>:


void RemoraComms::update()
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
	if (data)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	7d1b      	ldrb	r3, [r3, #20]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d006      	beq.n	8005742 <_ZN11RemoraComms6updateEv+0x1e>
	{
		this->noDataCount = 0;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	759a      	strb	r2, [r3, #22]
		this->status = true;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	755a      	strb	r2, [r3, #21]
 8005740:	e005      	b.n	800574e <_ZN11RemoraComms6updateEv+0x2a>
	}
	else
	{
		this->noDataCount++;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	7d9b      	ldrb	r3, [r3, #22]
 8005746:	3301      	adds	r3, #1
 8005748:	b2da      	uxtb	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	759a      	strb	r2, [r3, #22]
	}

	if (this->noDataCount > DATA_ERR_MAX)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	7d9b      	ldrb	r3, [r3, #22]
 8005752:	2b05      	cmp	r3, #5
 8005754:	d905      	bls.n	8005762 <_ZN11RemoraComms6updateEv+0x3e>
	{
		this->noDataCount = 0;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	759a      	strb	r2, [r3, #22]
		this->status = false;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	755a      	strb	r2, [r3, #21]
	}

	this->data = false;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	751a      	strb	r2, [r3, #20]
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <_ZN11RemoraComms12dataReceivedEv>:



void RemoraComms::dataReceived()
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
	this->data= true;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	751a      	strb	r2, [r3, #20]
}
 8005782:	bf00      	nop
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <_ZN11RemoraComms9getStatusEv>:


bool RemoraComms::getStatus()
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
	return this->status;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	7d5b      	ldrb	r3, [r3, #21]
}
 800579a:	4618      	mov	r0, r3
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
	...

080057a8 <_ZN11RemoraCommsD1Ev>:
#include "configuration.h"
#include "remora.h"

#include "../module.h"

class RemoraComms : public Module
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	4a05      	ldr	r2, [pc, #20]	; (80057c8 <_ZN11RemoraCommsD1Ev+0x20>)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f000 fdcb 	bl	8006354 <_ZN6ModuleD1Ev>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4618      	mov	r0, r3
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	0801df0c 	.word	0x0801df0c

080057cc <_ZN11RemoraCommsD0Ev>:
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7ff ffe7 	bl	80057a8 <_ZN11RemoraCommsD1Ev>
 80057da:	2118      	movs	r1, #24
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f013 fb23 	bl	8018e28 <_ZdlPvj>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4618      	mov	r0, r3
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <_ZN3Pin3getEv>:
        void setAsInput();
        void pull_none();
        void pull_up();
        void pull_down();

        inline bool get()
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
        {
            return HAL_GPIO_ReadPin(this->GPIOx, this->pin);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	8bdb      	ldrh	r3, [r3, #30]
 80057fc:	4619      	mov	r1, r3
 80057fe:	4610      	mov	r0, r2
 8005800:	f005 f842 	bl	800a888 <HAL_GPIO_ReadPin>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	bf14      	ite	ne
 800580a:	2301      	movne	r3, #1
 800580c:	2300      	moveq	r3, #0
 800580e:	b2db      	uxtb	r3, r3
        }
 8005810:	4618      	mov	r0, r3
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <_Z16createDigitalPinv>:
/***********************************************************************
                MODULE CONFIGURATION AND CREATION FROM JSON     
************************************************************************/

void createDigitalPin()
{
 8005818:	b5b0      	push	{r4, r5, r7, lr}
 800581a:	b0f6      	sub	sp, #472	; 0x1d8
 800581c:	af04      	add	r7, sp, #16
 800581e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005822:	4add      	ldr	r2, [pc, #884]	; (8005b98 <_Z16createDigitalPinv+0x380>)
 8005824:	601a      	str	r2, [r3, #0]
template <typename TObject>
template <typename TString>
inline typename enable_if<IsString<TString *>::value,
                          MemberProxy<const TObject &, TString *> >::type
    ObjectShortcuts<TObject>::operator[](TString *key) const {
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8005826:	48dd      	ldr	r0, [pc, #884]	; (8005b9c <_Z16createDigitalPinv+0x384>)
 8005828:	f7fd fd2e 	bl	8003288 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 800582c:	4602      	mov	r2, r0
 800582e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005838:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800583c:	6812      	ldr	r2, [r2, #0]
 800583e:	601a      	str	r2, [r3, #0]
      : _object(variant), _key(key) {}
 8005840:	f107 0318 	add.w	r3, r7, #24
 8005844:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8005848:	6812      	ldr	r2, [r2, #0]
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	f107 0318 	add.w	r3, r7, #24
 8005850:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8005854:	6812      	ldr	r2, [r2, #0]
 8005856:	605a      	str	r2, [r3, #4]
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8005858:	bf00      	nop
template <typename TImpl>
class VariantCasts {
 public:
  template <typename T>
  FORCE_INLINE operator T() const {
    return impl()->template as<T>();
 800585a:	f107 0318 	add.w	r3, r7, #24
 800585e:	4618      	mov	r0, r3
 8005860:	f7fd fd1d 	bl	800329e <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8005864:	4603      	mov	r3, r0
 8005866:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800586a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800586e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    return _object.getMember(_key);
 8005872:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800587c:	6852      	ldr	r2, [r2, #4]
 800587e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005882:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005886:	601a      	str	r2, [r3, #0]
  // getMember(char*) const
  // getMember(const char*) const
  // getMember(const __FlashStringHelper*) const
  template <typename TChar>
  FORCE_INLINE VariantRef getMember(TChar* key) const {
    return get_impl(adaptString(key));
 8005888:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800588c:	6818      	ldr	r0, [r3, #0]
 800588e:	f7fb ffcb 	bl	8001828 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8005892:	4601      	mov	r1, r0
 8005894:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005898:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	f107 0314 	add.w	r3, r7, #20
 80058a2:	6019      	str	r1, [r3, #0]
  }

 private:
  template <typename TAdaptedString>
  FORCE_INLINE VariantRef get_impl(TAdaptedString key) const {
    return VariantRef(_pool, objectGet(_data, key));
 80058a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685c      	ldr	r4, [r3, #4]
 80058ac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	f107 0314 	add.w	r3, r7, #20
 80058b8:	6819      	ldr	r1, [r3, #0]
 80058ba:	4610      	mov	r0, r2
 80058bc:	f7fe fee0 	bl	8004680 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 80058c0:	4602      	mov	r2, r0
 80058c2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80058c6:	601c      	str	r4, [r3, #0]
 80058c8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80058cc:	601a      	str	r2, [r3, #0]
  friend class VariantConstRef;

 public:
  // Intenal use only
  FORCE_INLINE VariantRef(MemoryPool *pool, VariantData *data)
      : base_type(data), _pool(pool) {}
 80058ce:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80058d2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80058d6:	6819      	ldr	r1, [r3, #0]
 80058d8:	4610      	mov	r0, r2
 80058da:	f7fd fbc1 	bl	8003060 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 80058de:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80058e2:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80058e6:	6812      	ldr	r2, [r2, #0]
 80058e8:	605a      	str	r2, [r3, #4]
 80058ea:	bf00      	nop
    return get_impl(adaptString(key));
 80058ec:	bf00      	nop
 80058ee:	bf00      	nop
  FORCE_INLINE typename enable_if<!is_same<T, ArrayRef>::value &&
                                      !is_same<T, ObjectRef>::value &&
                                      !is_same<T, VariantRef>::value,
                                  typename VariantAs<T>::type>::type
  as() const {
    return variantAs<T>(_data);
 80058f0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7fe f9a4 	bl	8003c44 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
 80058fc:	4603      	mov	r3, r0
 80058fe:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8005900:	bf00      	nop
 8005902:	bf00      	nop
    const char* comment = module["Comment"];
 8005904:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    printf("\n%s\n",comment);
 8005908:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 800590c:	48a4      	ldr	r0, [pc, #656]	; (8005ba0 <_Z16createDigitalPinv+0x388>)
 800590e:	f013 fd9d 	bl	801944c <iprintf>
 8005912:	4ba4      	ldr	r3, [pc, #656]	; (8005ba4 <_Z16createDigitalPinv+0x38c>)
 8005914:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8005918:	48a0      	ldr	r0, [pc, #640]	; (8005b9c <_Z16createDigitalPinv+0x384>)
 800591a:	f7fd fcb5 	bl	8003288 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 800591e:	4603      	mov	r3, r0
 8005920:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005928:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      : _object(variant), _key(key) {}
 800592c:	f107 0320 	add.w	r3, r7, #32
 8005930:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	f107 0320 	add.w	r3, r7, #32
 800593a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800593e:	605a      	str	r2, [r3, #4]
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8005940:	bf00      	nop
 8005942:	f107 0320 	add.w	r3, r7, #32
 8005946:	4618      	mov	r0, r3
 8005948:	f7fd fca9 	bl	800329e <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 800594c:	4603      	mov	r3, r0
 800594e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005956:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    return _object.getMember(_key);
 800595a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800596a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800596e:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8005972:	f7fb ff59 	bl	8001828 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8005976:	4602      	mov	r2, r0
 8005978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800597c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005980:	f107 0310 	add.w	r3, r7, #16
 8005984:	601a      	str	r2, [r3, #0]
    return VariantRef(_pool, objectGet(_data, key));
 8005986:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800598a:	685c      	ldr	r4, [r3, #4]
 800598c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	f107 0310 	add.w	r3, r7, #16
 8005996:	6819      	ldr	r1, [r3, #0]
 8005998:	4610      	mov	r0, r2
 800599a:	f7fe fe71 	bl	8004680 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 800599e:	4603      	mov	r3, r0
 80059a0:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 80059a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      : base_type(data), _pool(pool) {}
 80059a8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80059ac:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7fd fb55 	bl	8003060 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 80059b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80059ba:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80059be:	605a      	str	r2, [r3, #4]
 80059c0:	bf00      	nop
    return get_impl(adaptString(key));
 80059c2:	bf00      	nop
 80059c4:	bf00      	nop
    return variantAs<T>(_data);
 80059c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fe f939 	bl	8003c44 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
 80059d2:	4603      	mov	r3, r0
 80059d4:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 80059d6:	bf00      	nop
 80059d8:	bf00      	nop

    const char* pin = module["Pin"];
 80059da:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80059de:	4b72      	ldr	r3, [pc, #456]	; (8005ba8 <_Z16createDigitalPinv+0x390>)
 80059e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 80059e4:	486d      	ldr	r0, [pc, #436]	; (8005b9c <_Z16createDigitalPinv+0x384>)
 80059e6:	f7fd fc4f 	bl	8003288 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 80059ea:	4603      	mov	r3, r0
 80059ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80059f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
      : _object(variant), _key(key) {}
 80059f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059fc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a06:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8005a0a:	605a      	str	r2, [r3, #4]
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8005a0c:	bf00      	nop
 8005a0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fd fc43 	bl	800329e <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005a1e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a22:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    return _object.getMember(_key);
 8005a26:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005a36:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a3a:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8005a3e:	f7fb fef3 	bl	8001828 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8005a42:	4602      	mov	r2, r0
 8005a44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a48:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005a4c:	f107 030c 	add.w	r3, r7, #12
 8005a50:	601a      	str	r2, [r3, #0]
    return VariantRef(_pool, objectGet(_data, key));
 8005a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a56:	685c      	ldr	r4, [r3, #4]
 8005a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	f107 030c 	add.w	r3, r7, #12
 8005a62:	6819      	ldr	r1, [r3, #0]
 8005a64:	4610      	mov	r0, r2
 8005a66:	f7fe fe0b 	bl	8004680 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8005a70:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      : base_type(data), _pool(pool) {}
 8005a74:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005a78:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fd faef 	bl	8003060 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8005a82:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005a86:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8005a8a:	605a      	str	r2, [r3, #4]
 8005a8c:	bf00      	nop
    return get_impl(adaptString(key));
 8005a8e:	bf00      	nop
 8005a90:	bf00      	nop
    return variantAs<T>(_data);
 8005a92:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7fe f8d3 	bl	8003c44 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8005aa2:	bf00      	nop
 8005aa4:	bf00      	nop
    const char* mode = module["Mode"];
 8005aa6:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8005aaa:	4b40      	ldr	r3, [pc, #256]	; (8005bac <_Z16createDigitalPinv+0x394>)
 8005aac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8005ab0:	483a      	ldr	r0, [pc, #232]	; (8005b9c <_Z16createDigitalPinv+0x384>)
 8005ab2:	f7fd fbe9 	bl	8003288 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005abc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005ac0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      : _object(variant), _key(key) {}
 8005ac4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ac8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ad2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005ad6:	605a      	str	r2, [r3, #4]
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8005ad8:	bf00      	nop
 8005ada:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fd fbdd 	bl	800329e <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005aea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005aee:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    return _object.getMember(_key);
 8005af2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8005b02:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8005b06:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8005b0a:	f7fb fe8d 	bl	8001828 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8005b14:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8005b18:	f107 0308 	add.w	r3, r7, #8
 8005b1c:	601a      	str	r2, [r3, #0]
    return VariantRef(_pool, objectGet(_data, key));
 8005b1e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005b22:	685c      	ldr	r4, [r3, #4]
 8005b24:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	f107 0308 	add.w	r3, r7, #8
 8005b2e:	6819      	ldr	r1, [r3, #0]
 8005b30:	4610      	mov	r0, r2
 8005b32:	f7fe fda5 	bl	8004680 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8005b36:	4603      	mov	r3, r0
 8005b38:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 8005b3c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      : base_type(data), _pool(pool) {}
 8005b40:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005b44:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7fd fa89 	bl	8003060 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8005b4e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005b52:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8005b56:	605a      	str	r2, [r3, #4]
 8005b58:	bf00      	nop
    return get_impl(adaptString(key));
 8005b5a:	bf00      	nop
 8005b5c:	bf00      	nop
    return variantAs<T>(_data);
 8005b5e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fe f86d 	bl	8003c44 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8005b6e:	bf00      	nop
 8005b70:	bf00      	nop
    const char* invert = module["Invert"];
 8005b72:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8005b76:	4b0e      	ldr	r3, [pc, #56]	; (8005bb0 <_Z16createDigitalPinv+0x398>)
 8005b78:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8005b7c:	4807      	ldr	r0, [pc, #28]	; (8005b9c <_Z16createDigitalPinv+0x384>)
 8005b7e:	f7fd fb83 	bl	8003288 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8005b82:	4603      	mov	r3, r0
 8005b84:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005b88:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005b8c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
      : _object(variant), _key(key) {}
 8005b90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005b94:	e00e      	b.n	8005bb4 <_Z16createDigitalPinv+0x39c>
 8005b96:	bf00      	nop
 8005b98:	0801acf8 	.word	0x0801acf8
 8005b9c:	20000348 	.word	0x20000348
 8005ba0:	0801ad00 	.word	0x0801ad00
 8005ba4:	0801ad08 	.word	0x0801ad08
 8005ba8:	0801ad0c 	.word	0x0801ad0c
 8005bac:	0801ad14 	.word	0x0801ad14
 8005bb0:	0801ad1c 	.word	0x0801ad1c
 8005bb4:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005bbe:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8005bc2:	605a      	str	r2, [r3, #4]
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8005bc4:	bf00      	nop
 8005bc6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fd fb67 	bl	800329e <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8005bd6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8005bda:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    return _object.getMember(_key);
 8005bde:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8005bee:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8005bf2:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 8005bf6:	f7fb fe17 	bl	8001828 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005c00:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005c04:	1d3b      	adds	r3, r7, #4
 8005c06:	601a      	str	r2, [r3, #0]
    return VariantRef(_pool, objectGet(_data, key));
 8005c08:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005c0c:	685c      	ldr	r4, [r3, #4]
 8005c0e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	1d3b      	adds	r3, r7, #4
 8005c16:	6819      	ldr	r1, [r3, #0]
 8005c18:	4610      	mov	r0, r2
 8005c1a:	f7fe fd31 	bl	8004680 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	f8c7 4160 	str.w	r4, [r7, #352]	; 0x160
 8005c24:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
      : base_type(data), _pool(pool) {}
 8005c28:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005c2c:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fd fa15 	bl	8003060 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8005c36:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005c3a:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8005c3e:	605a      	str	r2, [r3, #4]
 8005c40:	bf00      	nop
    return get_impl(adaptString(key));
 8005c42:	bf00      	nop
 8005c44:	bf00      	nop
    return variantAs<T>(_data);
 8005c46:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7fd fff9 	bl	8003c44 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
 8005c52:	4603      	mov	r3, r0
 8005c54:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8005c56:	bf00      	nop
 8005c58:	bf00      	nop
    const char* modifier = module["Modifier"];
 8005c5a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8005c5e:	4b9e      	ldr	r3, [pc, #632]	; (8005ed8 <_Z16createDigitalPinv+0x6c0>)
 8005c60:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8005c64:	489d      	ldr	r0, [pc, #628]	; (8005edc <_Z16createDigitalPinv+0x6c4>)
 8005c66:	f7fd fb0f 	bl	8003288 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005c70:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005c74:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
      : _object(variant), _key(key) {}
 8005c78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c7c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c86:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005c8a:	605a      	str	r2, [r3, #4]
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8005c8c:	bf00      	nop
 8005c8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fd fb03 	bl	800329e <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005c9e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8005ca2:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    return _object.getMember(_key);
 8005ca6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8005cb6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8005cba:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8005cbe:	f7fb fdb3 	bl	8001828 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8005cc8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8005ccc:	463b      	mov	r3, r7
 8005cce:	601a      	str	r2, [r3, #0]
    return VariantRef(_pool, objectGet(_data, key));
 8005cd0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8005cd4:	685c      	ldr	r4, [r3, #4]
 8005cd6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	463b      	mov	r3, r7
 8005cde:	6819      	ldr	r1, [r3, #0]
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	f7fe fccd 	bl	8004680 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	f8c7 4188 	str.w	r4, [r7, #392]	; 0x188
 8005cec:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
      : base_type(data), _pool(pool) {}
 8005cf0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005cf4:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7fd f9b1 	bl	8003060 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8005cfe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005d02:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8005d06:	605a      	str	r2, [r3, #4]
 8005d08:	bf00      	nop
    return get_impl(adaptString(key));
 8005d0a:	bf00      	nop
 8005d0c:	bf00      	nop
    return variantAs<T>(_data);
 8005d0e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 f9a8 	bl	800606a <_ZN19ArduinoJson6101_1109variantAsIiEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8005d1e:	bf00      	nop
 8005d20:	bf00      	nop
    int dataBit = module["Data Bit"];
 8005d22:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

    int mod;
    bool inv;

    if (!strcmp(modifier,"Open Drain"))
 8005d26:	496e      	ldr	r1, [pc, #440]	; (8005ee0 <_Z16createDigitalPinv+0x6c8>)
 8005d28:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8005d2c:	f7fa faa0 	bl	8000270 <strcmp>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d103      	bne.n	8005d3e <_Z16createDigitalPinv+0x526>
    {
        mod = OPENDRAIN;
 8005d36:	2301      	movs	r3, #1
 8005d38:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005d3c:	e026      	b.n	8005d8c <_Z16createDigitalPinv+0x574>
    }
    else if (!strcmp(modifier,"Pull Up"))
 8005d3e:	4969      	ldr	r1, [pc, #420]	; (8005ee4 <_Z16createDigitalPinv+0x6cc>)
 8005d40:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8005d44:	f7fa fa94 	bl	8000270 <strcmp>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d103      	bne.n	8005d56 <_Z16createDigitalPinv+0x53e>
    {
        mod = PULLUP;
 8005d4e:	2302      	movs	r3, #2
 8005d50:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005d54:	e01a      	b.n	8005d8c <_Z16createDigitalPinv+0x574>
    }
    else if (!strcmp(modifier,"Pull Down"))
 8005d56:	4964      	ldr	r1, [pc, #400]	; (8005ee8 <_Z16createDigitalPinv+0x6d0>)
 8005d58:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8005d5c:	f7fa fa88 	bl	8000270 <strcmp>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d103      	bne.n	8005d6e <_Z16createDigitalPinv+0x556>
    {
        mod = PULLDOWN;
 8005d66:	2303      	movs	r3, #3
 8005d68:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005d6c:	e00e      	b.n	8005d8c <_Z16createDigitalPinv+0x574>
    }
    else if (!strcmp(modifier,"Pull None"))
 8005d6e:	495f      	ldr	r1, [pc, #380]	; (8005eec <_Z16createDigitalPinv+0x6d4>)
 8005d70:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8005d74:	f7fa fa7c 	bl	8000270 <strcmp>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d103      	bne.n	8005d86 <_Z16createDigitalPinv+0x56e>
    {
        mod = PULLNONE;
 8005d7e:	2304      	movs	r3, #4
 8005d80:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005d84:	e002      	b.n	8005d8c <_Z16createDigitalPinv+0x574>
    }
    else
    {
        mod = NONE;
 8005d86:	2300      	movs	r3, #0
 8005d88:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    }

    if (!strcmp(invert,"True"))
 8005d8c:	4958      	ldr	r1, [pc, #352]	; (8005ef0 <_Z16createDigitalPinv+0x6d8>)
 8005d8e:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 8005d92:	f7fa fa6d 	bl	8000270 <strcmp>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d103      	bne.n	8005da4 <_Z16createDigitalPinv+0x58c>
    {
        inv = true;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
 8005da2:	e002      	b.n	8005daa <_Z16createDigitalPinv+0x592>
    }
    else inv = false;
 8005da4:	2300      	movs	r3, #0
 8005da6:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3

    ptrOutputs = &rxData.outputs;
 8005daa:	4b52      	ldr	r3, [pc, #328]	; (8005ef4 <_Z16createDigitalPinv+0x6dc>)
 8005dac:	4a52      	ldr	r2, [pc, #328]	; (8005ef8 <_Z16createDigitalPinv+0x6e0>)
 8005dae:	601a      	str	r2, [r3, #0]
    ptrInputs = &txData.inputs;
 8005db0:	4b52      	ldr	r3, [pc, #328]	; (8005efc <_Z16createDigitalPinv+0x6e4>)
 8005db2:	4a53      	ldr	r2, [pc, #332]	; (8005f00 <_Z16createDigitalPinv+0x6e8>)
 8005db4:	601a      	str	r2, [r3, #0]

    printf("Make Digital %s at pin %s\n", mode, pin);
 8005db6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005dba:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 8005dbe:	4851      	ldr	r0, [pc, #324]	; (8005f04 <_Z16createDigitalPinv+0x6ec>)
 8005dc0:	f013 fb44 	bl	801944c <iprintf>

    if (!strcmp(mode,"Output"))
 8005dc4:	4950      	ldr	r1, [pc, #320]	; (8005f08 <_Z16createDigitalPinv+0x6f0>)
 8005dc6:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 8005dca:	f7fa fa51 	bl	8000270 <strcmp>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d138      	bne.n	8005e46 <_Z16createDigitalPinv+0x62e>
    {
        Module* digitalPin = new DigitalPin(*ptrOutputs, 1, pin, dataBit, inv, mod);
 8005dd4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f013 f84a 	bl	8018e72 <_ZNSaIcEC1Ev>
 8005dde:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005de2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005de6:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8005dea:	4618      	mov	r0, r3
 8005dec:	f013 f9da 	bl	80191a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005df0:	f107 0548 	add.w	r5, r7, #72	; 0x48
 8005df4:	2048      	movs	r0, #72	; 0x48
 8005df6:	f013 f828 	bl	8018e4a <_Znwj>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	461c      	mov	r4, r3
 8005dfe:	4b3d      	ldr	r3, [pc, #244]	; (8005ef4 <_Z16createDigitalPinv+0x6dc>)
 8005e00:	6819      	ldr	r1, [r3, #0]
 8005e02:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8005e06:	9302      	str	r3, [sp, #8]
 8005e08:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 8005e0c:	9301      	str	r3, [sp, #4]
 8005e0e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	462b      	mov	r3, r5
 8005e16:	2201      	movs	r2, #1
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f000 f87d 	bl	8005f18 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 8005e1e:	f8c7 41a0 	str.w	r4, [r7, #416]	; 0x1a0
 8005e22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005e26:	4618      	mov	r0, r3
 8005e28:	f013 f8db 	bl	8018fe2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005e2c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005e30:	4618      	mov	r0, r3
 8005e32:	f013 f81f 	bl	8018e74 <_ZNSaIcED1Ev>
        servoThread->registerModule(digitalPin);
 8005e36:	4b35      	ldr	r3, [pc, #212]	; (8005f0c <_Z16createDigitalPinv+0x6f4>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f001 fbe6 	bl	8007610 <_ZN9pruThread14registerModuleEP6Module>
    }
    else
    {
        printf("Error - incorrectly defined Digital Pin\n");
    }
}
 8005e44:	e043      	b.n	8005ece <_Z16createDigitalPinv+0x6b6>
    else if (!strcmp(mode,"Input"))
 8005e46:	4932      	ldr	r1, [pc, #200]	; (8005f10 <_Z16createDigitalPinv+0x6f8>)
 8005e48:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 8005e4c:	f7fa fa10 	bl	8000270 <strcmp>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d138      	bne.n	8005ec8 <_Z16createDigitalPinv+0x6b0>
        Module* digitalPin = new DigitalPin(*ptrInputs, 0, pin, dataBit, inv, mod);
 8005e56:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f013 f809 	bl	8018e72 <_ZNSaIcEC1Ev>
 8005e60:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8005e64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005e68:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f013 f999 	bl	80191a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005e72:	f107 0564 	add.w	r5, r7, #100	; 0x64
 8005e76:	2048      	movs	r0, #72	; 0x48
 8005e78:	f012 ffe7 	bl	8018e4a <_Znwj>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	461c      	mov	r4, r3
 8005e80:	4b1e      	ldr	r3, [pc, #120]	; (8005efc <_Z16createDigitalPinv+0x6e4>)
 8005e82:	6819      	ldr	r1, [r3, #0]
 8005e84:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8005e88:	9302      	str	r3, [sp, #8]
 8005e8a:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 8005e8e:	9301      	str	r3, [sp, #4]
 8005e90:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	462b      	mov	r3, r5
 8005e98:	2200      	movs	r2, #0
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f000 f83c 	bl	8005f18 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>
 8005ea0:	f8c7 41a4 	str.w	r4, [r7, #420]	; 0x1a4
 8005ea4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f013 f89a 	bl	8018fe2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005eae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f012 ffde 	bl	8018e74 <_ZNSaIcED1Ev>
        servoThread->registerModule(digitalPin);
 8005eb8:	4b14      	ldr	r3, [pc, #80]	; (8005f0c <_Z16createDigitalPinv+0x6f4>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f8d7 11a4 	ldr.w	r1, [r7, #420]	; 0x1a4
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f001 fba5 	bl	8007610 <_ZN9pruThread14registerModuleEP6Module>
}
 8005ec6:	e002      	b.n	8005ece <_Z16createDigitalPinv+0x6b6>
        printf("Error - incorrectly defined Digital Pin\n");
 8005ec8:	4812      	ldr	r0, [pc, #72]	; (8005f14 <_Z16createDigitalPinv+0x6fc>)
 8005eca:	f013 fb45 	bl	8019558 <puts>
}
 8005ece:	bf00      	nop
 8005ed0:	f507 77e4 	add.w	r7, r7, #456	; 0x1c8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bdb0      	pop	{r4, r5, r7, pc}
 8005ed8:	0801ad28 	.word	0x0801ad28
 8005edc:	20000348 	.word	0x20000348
 8005ee0:	0801ad34 	.word	0x0801ad34
 8005ee4:	0801ad40 	.word	0x0801ad40
 8005ee8:	0801ad48 	.word	0x0801ad48
 8005eec:	0801ad54 	.word	0x0801ad54
 8005ef0:	0801ad60 	.word	0x0801ad60
 8005ef4:	200002ec 	.word	0x200002ec
 8005ef8:	20000205 	.word	0x20000205
 8005efc:	200002e8 	.word	0x200002e8
 8005f00:	20000248 	.word	0x20000248
 8005f04:	0801ad68 	.word	0x0801ad68
 8005f08:	0801ad84 	.word	0x0801ad84
 8005f0c:	20000174 	.word	0x20000174
 8005f10:	0801ad8c 	.word	0x0801ad8c
 8005f14:	0801ad94 	.word	0x0801ad94

08005f18 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi>:

/***********************************************************************
                METHOD DEFINITIONS
************************************************************************/

DigitalPin::DigitalPin(volatile uint32_t &ptrData, int mode, std::string portAndPin, int bitNumber, bool invert, int modifier) :
 8005f18:	b5b0      	push	{r4, r5, r7, lr}
 8005f1a:	b08a      	sub	sp, #40	; 0x28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
 8005f24:	603b      	str	r3, [r7, #0]
	ptrData(&ptrData),
	mode(mode),
	portAndPin(portAndPin),
	bitNumber(bitNumber),
    invert(invert),
	modifier(modifier)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f000 f9f9 	bl	8006320 <_ZN6ModuleC1Ev>
 8005f2e:	4a21      	ldr	r2, [pc, #132]	; (8005fb4 <_ZN10DigitalPinC1ERVmiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEibi+0x9c>)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	615a      	str	r2, [r3, #20]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f3e:	619a      	str	r2, [r3, #24]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8005f46:	771a      	strb	r2, [r3, #28]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	625a      	str	r2, [r3, #36]	; 0x24
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f52:	629a      	str	r2, [r3, #40]	; 0x28
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	332c      	adds	r3, #44	; 0x2c
 8005f58:	6839      	ldr	r1, [r7, #0]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f013 f8ee 	bl	801913c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
{
	this->pin = new Pin(this->portAndPin, this->mode, this->modifier);		// Input 0x0, Output 0x1
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8005f66:	f107 0310 	add.w	r3, r7, #16
 8005f6a:	4611      	mov	r1, r2
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f013 f8e5 	bl	801913c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8005f72:	f107 0510 	add.w	r5, r7, #16
 8005f76:	2044      	movs	r0, #68	; 0x44
 8005f78:	f012 ff67 	bl	8018e4a <_Znwj>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	461c      	mov	r4, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f88:	4629      	mov	r1, r5
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	f7fa ffcc 	bl	8000f28 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	645c      	str	r4, [r3, #68]	; 0x44
 8005f94:	f107 0310 	add.w	r3, r7, #16
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f013 f822 	bl	8018fe2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	this->mask = 1 << this->bitNumber;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	409a      	lsls	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	621a      	str	r2, [r3, #32]
}
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	4618      	mov	r0, r3
 8005fae:	3728      	adds	r7, #40	; 0x28
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bdb0      	pop	{r4, r5, r7, pc}
 8005fb4:	0801df30 	.word	0x0801df30

08005fb8 <_ZN10DigitalPin6updateEv>:


void DigitalPin::update()
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
	bool pinState;

	if (this->mode == 0)									// the pin is configured as an input
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d128      	bne.n	800601a <_ZN10DigitalPin6updateEv+0x62>
	{
		pinState = this->pin->get();
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7ff fc0d 	bl	80057ec <_ZN3Pin3getEv>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	73fb      	strb	r3, [r7, #15]
		if(this->invert)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	7f1b      	ldrb	r3, [r3, #28]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <_ZN10DigitalPin6updateEv+0x2e>
		{
			pinState = !pinState;
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
 8005fe0:	f083 0301 	eor.w	r3, r3, #1
 8005fe4:	73fb      	strb	r3, [r7, #15]
		}

		if (pinState == 1)								// input is high
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d10a      	bne.n	8006002 <_ZN10DigitalPin6updateEv+0x4a>
		{
			*(this->ptrData) |= this->mask;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	601a      	str	r2, [r3, #0]
		{
			pinState = !pinState;
		}
		this->pin->set(pinState);			// simple conversion to boolean
	}
}
 8006000:	e025      	b.n	800604e <_ZN10DigitalPin6updateEv+0x96>
			*(this->ptrData) &= ~this->mask;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	43db      	mvns	r3, r3
 800600e:	4619      	mov	r1, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	400a      	ands	r2, r1
 8006016:	601a      	str	r2, [r3, #0]
}
 8006018:	e019      	b.n	800604e <_ZN10DigitalPin6updateEv+0x96>
		pinState = *(this->ptrData) & this->mask;		// get the value of the bit in the data source
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	6a12      	ldr	r2, [r2, #32]
 8006024:	4013      	ands	r3, r2
 8006026:	2b00      	cmp	r3, #0
 8006028:	bf14      	ite	ne
 800602a:	2301      	movne	r3, #1
 800602c:	2300      	moveq	r3, #0
 800602e:	73fb      	strb	r3, [r7, #15]
		if(this->invert)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	7f1b      	ldrb	r3, [r3, #28]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d003      	beq.n	8006040 <_ZN10DigitalPin6updateEv+0x88>
			pinState = !pinState;
 8006038:	7bfb      	ldrb	r3, [r7, #15]
 800603a:	f083 0301 	eor.w	r3, r3, #1
 800603e:	73fb      	strb	r3, [r7, #15]
		this->pin->set(pinState);			// simple conversion to boolean
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006044:	7bfa      	ldrb	r2, [r7, #15]
 8006046:	4611      	mov	r1, r2
 8006048:	4618      	mov	r0, r3
 800604a:	f7ff faa1 	bl	8005590 <_ZN3Pin3setEb>
}
 800604e:	bf00      	nop
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <_ZN10DigitalPin10slowUpdateEv>:

void DigitalPin::slowUpdate()
{
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
	return;
 800605e:	bf00      	nop
}
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <_ZN19ArduinoJson6101_1109variantAsIiEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>:
inline typename enable_if<is_integral<T>::value, T>::type variantAs(
 800606a:	b580      	push	{r7, lr}
 800606c:	b082      	sub	sp, #8
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  return _data != 0 ? _data->asIntegral<T>() : T(0);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d004      	beq.n	8006082 <_ZN19ArduinoJson6101_1109variantAsIiEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x18>
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f807 	bl	800608c <_ZNK19ArduinoJson6101_11011VariantData10asIntegralIiEET_v>
 800607e:	4603      	mov	r3, r0
 8006080:	e000      	b.n	8006084 <_ZN19ArduinoJson6101_1109variantAsIiEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x1a>
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3708      	adds	r7, #8
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <_ZNK19ArduinoJson6101_11011VariantData10asIntegralIiEET_v>:
#include <string.h>  // for strcmp

namespace ARDUINOJSON_NAMESPACE {

template <typename T>
inline T VariantData::asIntegral() const {
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  switch (type()) {
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7fb fcad 	bl	80019f4 <_ZNK19ArduinoJson6101_11011VariantData4typeEv>
 800609a:	4603      	mov	r3, r0
 800609c:	3b03      	subs	r3, #3
 800609e:	2b05      	cmp	r3, #5
 80060a0:	d832      	bhi.n	8006108 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralIiEET_v+0x7c>
 80060a2:	a201      	add	r2, pc, #4	; (adr r2, 80060a8 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralIiEET_v+0x1c>)
 80060a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a8:	080060e5 	.word	0x080060e5
 80060ac:	080060e5 	.word	0x080060e5
 80060b0:	080060c1 	.word	0x080060c1
 80060b4:	080060c1 	.word	0x080060c1
 80060b8:	080060d3 	.word	0x080060d3
 80060bc:	080060f3 	.word	0x080060f3
    case VALUE_IS_POSITIVE_INTEGER:
    case VALUE_IS_BOOLEAN:
      return convertPositiveInteger<T>(_content.asInteger);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c6:	4610      	mov	r0, r2
 80060c8:	4619      	mov	r1, r3
 80060ca:	f000 f823 	bl	8006114 <_ZN19ArduinoJson6101_11022convertPositiveIntegerIiyEET_T0_>
 80060ce:	4603      	mov	r3, r0
 80060d0:	e01b      	b.n	800610a <_ZNK19ArduinoJson6101_11011VariantData10asIntegralIiEET_v+0x7e>
    case VALUE_IS_NEGATIVE_INTEGER:
      return convertNegativeInteger<T>(_content.asInteger);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d8:	4610      	mov	r0, r2
 80060da:	4619      	mov	r1, r3
 80060dc:	f000 f82d 	bl	800613a <_ZN19ArduinoJson6101_11022convertNegativeIntegerIiyEET_T0_>
 80060e0:	4603      	mov	r3, r0
 80060e2:	e012      	b.n	800610a <_ZNK19ArduinoJson6101_11011VariantData10asIntegralIiEET_v+0x7e>
    case VALUE_IS_LINKED_STRING:
    case VALUE_IS_OWNED_STRING:
      return parseInteger<T>(_content.asString);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4618      	mov	r0, r3
 80060ea:	f000 f83a 	bl	8006162 <_ZN19ArduinoJson6101_11012parseIntegerIiEET_PKc>
 80060ee:	4603      	mov	r3, r0
 80060f0:	e00b      	b.n	800610a <_ZNK19ArduinoJson6101_11011VariantData10asIntegralIiEET_v+0x7e>
    case VALUE_IS_FLOAT:
      return convertFloat<T>(_content.asFloat);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	ed93 7b00 	vldr	d7, [r3]
 80060f8:	eeb0 0a47 	vmov.f32	s0, s14
 80060fc:	eef0 0a67 	vmov.f32	s1, s15
 8006100:	f000 f843 	bl	800618a <_ZN19ArduinoJson6101_11012convertFloatIidEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>
 8006104:	4603      	mov	r3, r0
 8006106:	e000      	b.n	800610a <_ZNK19ArduinoJson6101_11011VariantData10asIntegralIiEET_v+0x7e>
    default:
      return 0;
 8006108:	2300      	movs	r3, #0
  }
}
 800610a:	4618      	mov	r0, r3
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop

08006114 <_ZN19ArduinoJson6101_11022convertPositiveIntegerIiyEET_T0_>:
canStoreNegativeInteger(TIn) {
  return false;
}

template <typename TOut, typename TIn>
TOut convertPositiveInteger(TIn value) {
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	e9c7 0100 	strd	r0, r1, [r7]
  return canStorePositiveInteger<TOut>(value) ? TOut(value) : 0;
 800611e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006122:	f000 f860 	bl	80061e6 <_ZN19ArduinoJson6101_11023canStorePositiveIntegerIiyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuelestS3_stT0_EbE4typeES5_>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d001      	beq.n	8006130 <_ZN19ArduinoJson6101_11022convertPositiveIntegerIiyEET_T0_+0x1c>
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	e000      	b.n	8006132 <_ZN19ArduinoJson6101_11022convertPositiveIntegerIiyEET_T0_+0x1e>
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <_ZN19ArduinoJson6101_11022convertNegativeIntegerIiyEET_T0_>:

template <typename TOut, typename TIn>
TOut convertNegativeInteger(TIn value) {
 800613a:	b580      	push	{r7, lr}
 800613c:	b082      	sub	sp, #8
 800613e:	af00      	add	r7, sp, #0
 8006140:	e9c7 0100 	strd	r0, r1, [r7]
  return canStoreNegativeInteger<TOut>(value) ? TOut(~value + 1) : 0;
 8006144:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006148:	f000 f865 	bl	8006216 <_ZN19ArduinoJson6101_11023canStoreNegativeIntegerIiyEENS_9enable_ifIXaaaasrNS_11is_integralIT_EE5valuesrNS_9is_signedIS3_EE5valuelestS3_stT0_EbE4typeES7_>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d002      	beq.n	8006158 <_ZN19ArduinoJson6101_11022convertNegativeIntegerIiyEET_T0_+0x1e>
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	425b      	negs	r3, r3
 8006156:	e000      	b.n	800615a <_ZN19ArduinoJson6101_11022convertNegativeIntegerIiyEET_T0_+0x20>
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <_ZN19ArduinoJson6101_11012parseIntegerIiEET_PKc>:
#include "convertNumber.hpp"
#include "parseNumber.hpp"

namespace ARDUINOJSON_NAMESPACE {
template <typename T>
T parseInteger(const char *s) {
 8006162:	b580      	push	{r7, lr}
 8006164:	b088      	sub	sp, #32
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  // try to reuse the same parameters as JsonDeserializer
  typedef typename choose_largest<UInt, typename make_unsigned<T>::type>::type
      TUInt;
  return parseNumber<Float, TUInt>(s).template as<T>();
 800616a:	f107 0308 	add.w	r3, r7, #8
 800616e:	6879      	ldr	r1, [r7, #4]
 8006170:	4618      	mov	r0, r3
 8006172:	f7fe f869 	bl	8004248 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>
 8006176:	f107 0308 	add.w	r3, r7, #8
 800617a:	4618      	mov	r0, r3
 800617c:	f000 f866 	bl	800624c <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asIiEET_v>
 8006180:	4603      	mov	r3, r0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3720      	adds	r7, #32
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <_ZN19ArduinoJson6101_11012convertFloatIidEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>:
    TIn value) {
  return TOut(value);
}

template <typename TOut, typename TIn>
typename enable_if<!is_floating_point<TOut>::value, TOut>::type convertFloat(
 800618a:	b580      	push	{r7, lr}
 800618c:	b082      	sub	sp, #8
 800618e:	af00      	add	r7, sp, #0
 8006190:	ed87 0b00 	vstr	d0, [r7]
    TIn value) {
  return value >= numeric_limits<TOut>::lowest() &&
 8006194:	f000 f88a 	bl	80062ac <_ZN19ArduinoJson6101_11014numeric_limitsIivE6lowestEv>
 8006198:	4603      	mov	r3, r0
 800619a:	4618      	mov	r0, r3
 800619c:	f7fa f9cc 	bl	8000538 <__aeabi_i2d>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
                 value <= numeric_limits<TOut>::highest()
             ? TOut(value)
 80061a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061a8:	f7fa fcb6 	bl	8000b18 <__aeabi_dcmpge>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d014      	beq.n	80061dc <_ZN19ArduinoJson6101_11012convertFloatIidEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x52>
                 value <= numeric_limits<TOut>::highest()
 80061b2:	f000 f884 	bl	80062be <_ZN19ArduinoJson6101_11014numeric_limitsIivE7highestEv>
 80061b6:	4603      	mov	r3, r0
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fa f9bd 	bl	8000538 <__aeabi_i2d>
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
  return value >= numeric_limits<TOut>::lowest() &&
 80061c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061c6:	f7fa fc9d 	bl	8000b04 <__aeabi_dcmple>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d005      	beq.n	80061dc <_ZN19ArduinoJson6101_11012convertFloatIidEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x52>
             ? TOut(value)
 80061d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80061d4:	f7fa fcb4 	bl	8000b40 <__aeabi_d2iz>
 80061d8:	4603      	mov	r3, r0
 80061da:	e000      	b.n	80061de <_ZN19ArduinoJson6101_11012convertFloatIidEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x54>
 80061dc:	2300      	movs	r3, #0
             : 0;
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <_ZN19ArduinoJson6101_11023canStorePositiveIntegerIiyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuelestS3_stT0_EbE4typeES5_>:
canStorePositiveInteger(TIn value) {
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b082      	sub	sp, #8
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 80061f0:	f000 f865 	bl	80062be <_ZN19ArduinoJson6101_11014numeric_limitsIivE7highestEv>
 80061f4:	4603      	mov	r3, r0
 80061f6:	4618      	mov	r0, r3
 80061f8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80061fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006200:	4299      	cmp	r1, r3
 8006202:	bf08      	it	eq
 8006204:	4290      	cmpeq	r0, r2
 8006206:	bf2c      	ite	cs
 8006208:	2301      	movcs	r3, #1
 800620a:	2300      	movcc	r3, #0
 800620c:	b2db      	uxtb	r3, r3
}
 800620e:	4618      	mov	r0, r3
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <_ZN19ArduinoJson6101_11023canStoreNegativeIntegerIiyEENS_9enable_ifIXaaaasrNS_11is_integralIT_EE5valuesrNS_9is_signedIS3_EE5valuelestS3_stT0_EbE4typeES7_>:
canStoreNegativeInteger(TIn value) {
 8006216:	b5b0      	push	{r4, r5, r7, lr}
 8006218:	b082      	sub	sp, #8
 800621a:	af00      	add	r7, sp, #0
 800621c:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest()) + 1;
 8006220:	f000 f84d 	bl	80062be <_ZN19ArduinoJson6101_11014numeric_limitsIivE7highestEv>
 8006224:	4603      	mov	r3, r0
 8006226:	461a      	mov	r2, r3
 8006228:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800622c:	1c54      	adds	r4, r2, #1
 800622e:	f143 0500 	adc.w	r5, r3, #0
 8006232:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006236:	429d      	cmp	r5, r3
 8006238:	bf08      	it	eq
 800623a:	4294      	cmpeq	r4, r2
 800623c:	bf2c      	ite	cs
 800623e:	2301      	movcs	r3, #1
 8006240:	2300      	movcc	r3, #0
 8006242:	b2db      	uxtb	r3, r3
}
 8006244:	4618      	mov	r0, r3
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bdb0      	pop	{r4, r5, r7, pc}

0800624c <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asIiEET_v>:
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}

  template <typename T>
  T as() const {
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
    switch (_type) {
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	7c1b      	ldrb	r3, [r3, #16]
 8006258:	2b08      	cmp	r3, #8
 800625a:	d017      	beq.n	800628c <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asIiEET_v+0x40>
 800625c:	2b08      	cmp	r3, #8
 800625e:	dc20      	bgt.n	80062a2 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asIiEET_v+0x56>
 8006260:	2b06      	cmp	r3, #6
 8006262:	d00a      	beq.n	800627a <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asIiEET_v+0x2e>
 8006264:	2b07      	cmp	r3, #7
 8006266:	d11c      	bne.n	80062a2 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asIiEET_v+0x56>
      case VALUE_IS_NEGATIVE_INTEGER:
        return convertNegativeInteger<T>(uintValue);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626e:	4610      	mov	r0, r2
 8006270:	4619      	mov	r1, r3
 8006272:	f7ff ff62 	bl	800613a <_ZN19ArduinoJson6101_11022convertNegativeIntegerIiyEET_T0_>
 8006276:	4603      	mov	r3, r0
 8006278:	e014      	b.n	80062a4 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asIiEET_v+0x58>
      case VALUE_IS_POSITIVE_INTEGER:
        return convertPositiveInteger<T>(uintValue);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006280:	4610      	mov	r0, r2
 8006282:	4619      	mov	r1, r3
 8006284:	f7ff ff46 	bl	8006114 <_ZN19ArduinoJson6101_11022convertPositiveIntegerIiyEET_T0_>
 8006288:	4603      	mov	r3, r0
 800628a:	e00b      	b.n	80062a4 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asIiEET_v+0x58>
      case VALUE_IS_FLOAT:
        return convertFloat<T>(floatValue);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	ed93 7b02 	vldr	d7, [r3, #8]
 8006292:	eeb0 0a47 	vmov.f32	s0, s14
 8006296:	eef0 0a67 	vmov.f32	s1, s15
 800629a:	f7ff ff76 	bl	800618a <_ZN19ArduinoJson6101_11012convertFloatIidEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>
 800629e:	4603      	mov	r3, r0
 80062a0:	e000      	b.n	80062a4 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asIiEET_v+0x58>
      default:
        return 0;
 80062a2:	2300      	movs	r3, #0
    }
  }
 80062a4:	4618      	mov	r0, r3
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <_ZN19ArduinoJson6101_11014numeric_limitsIivE6lowestEv>:
};

template <typename T>
struct numeric_limits<
    T, typename enable_if<is_integral<T>::value && is_signed<T>::value>::type> {
  static T lowest() {
 80062ac:	b480      	push	{r7}
 80062ae:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 80062b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  }
 80062b4:	4618      	mov	r0, r3
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <_ZN19ArduinoJson6101_11014numeric_limitsIivE7highestEv>:
  static T highest() {
 80062be:	b580      	push	{r7, lr}
 80062c0:	af00      	add	r7, sp, #0
    return T(~lowest());
 80062c2:	f7ff fff3 	bl	80062ac <_ZN19ArduinoJson6101_11014numeric_limitsIivE6lowestEv>
 80062c6:	4603      	mov	r3, r0
 80062c8:	43db      	mvns	r3, r3
  }
 80062ca:	4618      	mov	r0, r3
 80062cc:	bd80      	pop	{r7, pc}
	...

080062d0 <_ZN10DigitalPinD1Ev>:

#include "extern.h"

void createDigitalPin(void);

class DigitalPin : public Module
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	4a08      	ldr	r2, [pc, #32]	; (80062fc <_ZN10DigitalPinD1Ev+0x2c>)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	332c      	adds	r3, #44	; 0x2c
 80062e2:	4618      	mov	r0, r3
 80062e4:	f012 fe7d 	bl	8018fe2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 f832 	bl	8006354 <_ZN6ModuleD1Ev>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4618      	mov	r0, r3
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	0801df30 	.word	0x0801df30

08006300 <_ZN10DigitalPinD0Ev>:
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7ff ffe1 	bl	80062d0 <_ZN10DigitalPinD1Ev>
 800630e:	2148      	movs	r1, #72	; 0x48
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f012 fd89 	bl	8018e28 <_ZdlPvj>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4618      	mov	r0, r3
 800631a:	3708      	adds	r7, #8
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <_ZN6ModuleC1Ev>:
#include "module.h"

#include <cstdio>

Module::Module()
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	4a08      	ldr	r2, [pc, #32]	; (800634c <_ZN6ModuleC1Ev+0x2c>)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	601a      	str	r2, [r3, #0]
{
	this->counter = 0;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	611a      	str	r2, [r3, #16]
	this->updateCount = 1;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	60da      	str	r2, [r3, #12]
	printf("\nCreating a std module\n");
 800633a:	4805      	ldr	r0, [pc, #20]	; (8006350 <_ZN6ModuleC1Ev+0x30>)
 800633c:	f013 f90c 	bl	8019558 <puts>
}
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4618      	mov	r0, r3
 8006344:	3708      	adds	r7, #8
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	0801df54 	.word	0x0801df54
 8006350:	0801adbc 	.word	0x0801adbc

08006354 <_ZN6ModuleD1Ev>:
	this->counter = 0;
	this->updateCount = this->threadFreq / this->slowUpdateFreq;
	printf("\nCreating a slower module, updating every %d thread cycles\n",this->updateCount);
}

Module::~Module(){}
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	4a04      	ldr	r2, [pc, #16]	; (8006370 <_ZN6ModuleD1Ev+0x1c>)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4618      	mov	r0, r3
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	0801df54 	.word	0x0801df54

08006374 <_ZN6ModuleD0Ev>:
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f7ff ffe9 	bl	8006354 <_ZN6ModuleD1Ev>
 8006382:	2114      	movs	r1, #20
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f012 fd4f 	bl	8018e28 <_ZdlPvj>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4618      	mov	r0, r3
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <_ZN6Module9runModuleEv>:


void Module::runModule()
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
	++this->counter;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	611a      	str	r2, [r3, #16]

	if (this->counter >= this->updateCount)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	691a      	ldr	r2, [r3, #16]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	db08      	blt.n	80063c4 <_ZN6Module9runModuleEv+0x30>
	{
		this->slowUpdate();
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	3310      	adds	r3, #16
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	4798      	blx	r3
		this->counter = 0;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	611a      	str	r2, [r3, #16]
	}

	this->update();
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3308      	adds	r3, #8
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	4798      	blx	r3
}
 80063d0:	bf00      	nop
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <_ZN6Module13runModulePostEv>:


void Module::runModulePost()
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
	this->updatePost();
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	330c      	adds	r3, #12
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	4798      	blx	r3
}
 80063ec:	bf00      	nop
 80063ee:	3708      	adds	r7, #8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <_ZN6Module6updateEv>:

void Module::update(){}
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <_ZN6Module10updatePostEv>:
void Module::updatePost(){}
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <_ZN6Module10slowUpdateEv>:
void Module::slowUpdate(){}
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <_ZN6Module9configureEv>:
void Module::configure(){}
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <_ZN6Module15handleInterruptEv>:
void Module::handleInterrupt(){}
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <_ZN15ModuleInterruptC1EiP6Module>:
#include "../interrupt/interrupt.h"
#include "moduleInterrupt.h"
#include "module.h"


ModuleInterrupt::ModuleInterrupt(int interruptNumber, Module* owner)
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4618      	mov	r0, r3
 8006468:	f7ff f85e 	bl	8005528 <_ZN9InterruptC1Ev>
 800646c:	4a07      	ldr	r2, [pc, #28]	; (800648c <_ZN15ModuleInterruptC1EiP6Module+0x34>)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	4619      	mov	r1, r3
 800647c:	68b8      	ldr	r0, [r7, #8]
 800647e:	f7ff f863 	bl	8005548 <_ZN9Interrupt8RegisterEiPS_>
}
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	0801df78 	.word	0x0801df78

08006490 <_ZN15ModuleInterrupt11ISR_HandlerEv>:


void ModuleInterrupt::ISR_Handler(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->handleInterrupt();
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3318      	adds	r3, #24
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4610      	mov	r0, r2
 80064a8:	4798      	blx	r3
}
 80064aa:	bf00      	nop
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
	...

080064b4 <_Z11createNVMPGv>:
/***********************************************************************
                MODULE CONFIGURATION AND CREATION FROM JSON
************************************************************************/

void createNVMPG()
{
 80064b4:	b590      	push	{r4, r7, lr}
 80064b6:	b091      	sub	sp, #68	; 0x44
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	4b32      	ldr	r3, [pc, #200]	; (8006584 <_Z11createNVMPGv+0xd0>)
 80064bc:	61fb      	str	r3, [r7, #28]
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 80064be:	4832      	ldr	r0, [pc, #200]	; (8006588 <_Z11createNVMPGv+0xd4>)
 80064c0:	f7fc fee2 	bl	8003288 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 80064c4:	4603      	mov	r3, r0
 80064c6:	61bb      	str	r3, [r7, #24]
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	617b      	str	r3, [r7, #20]
      : _object(variant), _key(key) {}
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	607b      	str	r3, [r7, #4]
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	60bb      	str	r3, [r7, #8]
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 80064d4:	bf00      	nop
 80064d6:	1d3b      	adds	r3, r7, #4
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fc fee0 	bl	800329e <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 80064de:	4603      	mov	r3, r0
 80064e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80064e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e4:	637b      	str	r3, [r7, #52]	; 0x34
    return _object.getMember(_key);
 80064e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	633a      	str	r2, [r7, #48]	; 0x30
 80064f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064f4:	f7fb f998 	bl	8001828 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 80064f8:	4602      	mov	r2, r0
 80064fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80064fe:	603a      	str	r2, [r7, #0]
    return VariantRef(_pool, objectGet(_data, key));
 8006500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006502:	685c      	ldr	r4, [r3, #4]
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6839      	ldr	r1, [r7, #0]
 800650a:	4618      	mov	r0, r3
 800650c:	f7fe f8b8 	bl	8004680 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8006510:	4603      	mov	r3, r0
 8006512:	627c      	str	r4, [r7, #36]	; 0x24
 8006514:	623b      	str	r3, [r7, #32]
      : base_type(data), _pool(pool) {}
 8006516:	f107 030c 	add.w	r3, r7, #12
 800651a:	6a39      	ldr	r1, [r7, #32]
 800651c:	4618      	mov	r0, r3
 800651e:	f7fc fd9f 	bl	8003060 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006524:	613b      	str	r3, [r7, #16]
 8006526:	bf00      	nop
    return get_impl(adaptString(key));
 8006528:	bf00      	nop
 800652a:	bf00      	nop
    return variantAs<T>(_data);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4618      	mov	r0, r3
 8006530:	f7fd fb88 	bl	8003c44 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
 8006534:	4603      	mov	r3, r0
 8006536:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8006538:	bf00      	nop
 800653a:	bf00      	nop
    const char* comment = module["Comment"];
 800653c:	63fb      	str	r3, [r7, #60]	; 0x3c
    printf("\n%s\n",comment);
 800653e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006540:	4812      	ldr	r0, [pc, #72]	; (800658c <_Z11createNVMPGv+0xd8>)
 8006542:	f012 ff83 	bl	801944c <iprintf>

    ptrNVMPGInputs = &txData.NVMPGinputs;
 8006546:	4b12      	ldr	r3, [pc, #72]	; (8006590 <_Z11createNVMPGv+0xdc>)
 8006548:	4a12      	ldr	r2, [pc, #72]	; (8006594 <_Z11createNVMPGv+0xe0>)
 800654a:	601a      	str	r2, [r3, #0]
    MPG = new NVMPG(*ptrMpgData, *ptrNVMPGInputs);
 800654c:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8006550:	f012 fc7b 	bl	8018e4a <_Znwj>
 8006554:	4603      	mov	r3, r0
 8006556:	461c      	mov	r4, r3
 8006558:	4b0f      	ldr	r3, [pc, #60]	; (8006598 <_Z11createNVMPGv+0xe4>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a0c      	ldr	r2, [pc, #48]	; (8006590 <_Z11createNVMPGv+0xdc>)
 800655e:	6812      	ldr	r2, [r2, #0]
 8006560:	4619      	mov	r1, r3
 8006562:	4620      	mov	r0, r4
 8006564:	f000 f81e 	bl	80065a4 <_ZN5NVMPGC1ERV9mpgData_tRVt>
 8006568:	4b0c      	ldr	r3, [pc, #48]	; (800659c <_Z11createNVMPGv+0xe8>)
 800656a:	601c      	str	r4, [r3, #0]
    servoThread->registerModule(MPG);
 800656c:	4b0c      	ldr	r3, [pc, #48]	; (80065a0 <_Z11createNVMPGv+0xec>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a0a      	ldr	r2, [pc, #40]	; (800659c <_Z11createNVMPGv+0xe8>)
 8006572:	6812      	ldr	r2, [r2, #0]
 8006574:	4611      	mov	r1, r2
 8006576:	4618      	mov	r0, r3
 8006578:	f001 f84a 	bl	8007610 <_ZN9pruThread14registerModuleEP6Module>
}
 800657c:	bf00      	nop
 800657e:	3744      	adds	r7, #68	; 0x44
 8006580:	46bd      	mov	sp, r7
 8006582:	bd90      	pop	{r4, r7, pc}
 8006584:	0801ae10 	.word	0x0801ae10
 8006588:	20000348 	.word	0x20000348
 800658c:	0801ae18 	.word	0x0801ae18
 8006590:	200002f0 	.word	0x200002f0
 8006594:	2000024c 	.word	0x2000024c
 8006598:	20000008 	.word	0x20000008
 800659c:	20000180 	.word	0x20000180
 80065a0:	20000174 	.word	0x20000174

080065a4 <_ZN5NVMPGC1ERV9mpgData_tRVt>:

/***********************************************************************
                METHOD DEFINITIONS
************************************************************************/

NVMPG::NVMPG(volatile mpgData_t &ptrMpgData, volatile uint16_t &ptrData) :
 80065a4:	b590      	push	{r4, r7, lr}
 80065a6:	b08d      	sub	sp, #52	; 0x34
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
	ptrMpgData(&ptrMpgData),
	ptrData(&ptrData)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7ff feb4 	bl	8006320 <_ZN6ModuleC1Ev>
 80065b8:	4a9c      	ldr	r2, [pc, #624]	; (800682c <_ZN5NVMPGC1ERV9mpgData_tRVt+0x288>)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	601a      	str	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	61da      	str	r2, [r3, #28]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	621a      	str	r2, [r3, #32]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	3324      	adds	r3, #36	; 0x24
 80065ce:	2235      	movs	r2, #53	; 0x35
 80065d0:	2100      	movs	r1, #0
 80065d2:	4618      	mov	r0, r3
 80065d4:	f012 fe88 	bl	80192e8 <memset>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
{

	this->irq = DMA1_Stream5_IRQn;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2210      	movs	r2, #16
 80065f4:	761a      	strb	r2, [r3, #24]
	interruptPtr = new ModuleInterrupt(this->irq, this);	// Instantiate a new Module Interrupt object and pass "this" pointer
 80065f6:	2008      	movs	r0, #8
 80065f8:	f012 fc27 	bl	8018e4a <_Znwj>
 80065fc:	4603      	mov	r3, r0
 80065fe:	461c      	mov	r4, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8006606:	4619      	mov	r1, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	461a      	mov	r2, r3
 800660c:	4620      	mov	r0, r4
 800660e:	f7ff ff23 	bl	8006458 <_ZN15ModuleInterruptC1EiP6Module>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	615c      	str	r4, [r3, #20]


	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006616:	f107 031c 	add.w	r3, r7, #28
 800661a:	2200      	movs	r2, #0
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	605a      	str	r2, [r3, #4]
 8006620:	609a      	str	r2, [r3, #8]
 8006622:	60da      	str	r2, [r3, #12]
 8006624:	611a      	str	r2, [r3, #16]

	printf("Creating NVMPG module\n");
 8006626:	4882      	ldr	r0, [pc, #520]	; (8006830 <_ZN5NVMPGC1ERV9mpgData_tRVt+0x28c>)
 8006628:	f012 ff96 	bl	8019558 <puts>

	this->uartHandle.Instance = USART2;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4a81      	ldr	r2, [pc, #516]	; (8006834 <_ZN5NVMPGC1ERV9mpgData_tRVt+0x290>)
 8006630:	665a      	str	r2, [r3, #100]	; 0x64

	if(this->uartHandle.Instance==USART2)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006636:	4a7f      	ldr	r2, [pc, #508]	; (8006834 <_ZN5NVMPGC1ERV9mpgData_tRVt+0x290>)
 8006638:	4293      	cmp	r3, r2
 800663a:	f040 80d9 	bne.w	80067f0 <_ZN5NVMPGC1ERV9mpgData_tRVt+0x24c>
	{
	    __HAL_RCC_GPIOD_CLK_ENABLE();
 800663e:	2300      	movs	r3, #0
 8006640:	61bb      	str	r3, [r7, #24]
 8006642:	4b7d      	ldr	r3, [pc, #500]	; (8006838 <_ZN5NVMPGC1ERV9mpgData_tRVt+0x294>)
 8006644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006646:	4a7c      	ldr	r2, [pc, #496]	; (8006838 <_ZN5NVMPGC1ERV9mpgData_tRVt+0x294>)
 8006648:	f043 0308 	orr.w	r3, r3, #8
 800664c:	6313      	str	r3, [r2, #48]	; 0x30
 800664e:	4b7a      	ldr	r3, [pc, #488]	; (8006838 <_ZN5NVMPGC1ERV9mpgData_tRVt+0x294>)
 8006650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006652:	f003 0308 	and.w	r3, r3, #8
 8006656:	61bb      	str	r3, [r7, #24]
 8006658:	69bb      	ldr	r3, [r7, #24]
	    /**USART2 GPIO Configuration
	    PD5     ------> USART2_TX
	    PD6     ------> USART2_RX
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800665a:	2360      	movs	r3, #96	; 0x60
 800665c:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800665e:	2302      	movs	r3, #2
 8006660:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006662:	2300      	movs	r3, #0
 8006664:	627b      	str	r3, [r7, #36]	; 0x24
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006666:	2303      	movs	r3, #3
 8006668:	62bb      	str	r3, [r7, #40]	; 0x28
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800666a:	2307      	movs	r3, #7
 800666c:	62fb      	str	r3, [r7, #44]	; 0x2c
	    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800666e:	f107 031c 	add.w	r3, r7, #28
 8006672:	4619      	mov	r1, r3
 8006674:	4871      	ldr	r0, [pc, #452]	; (800683c <_ZN5NVMPGC1ERV9mpgData_tRVt+0x298>)
 8006676:	f003 ff6b 	bl	800a550 <HAL_GPIO_Init>

	    __HAL_RCC_USART2_CLK_ENABLE();
 800667a:	2300      	movs	r3, #0
 800667c:	617b      	str	r3, [r7, #20]
 800667e:	4b6e      	ldr	r3, [pc, #440]	; (8006838 <_ZN5NVMPGC1ERV9mpgData_tRVt+0x294>)
 8006680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006682:	4a6d      	ldr	r2, [pc, #436]	; (8006838 <_ZN5NVMPGC1ERV9mpgData_tRVt+0x294>)
 8006684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006688:	6413      	str	r3, [r2, #64]	; 0x40
 800668a:	4b6b      	ldr	r3, [pc, #428]	; (8006838 <_ZN5NVMPGC1ERV9mpgData_tRVt+0x294>)
 800668c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006692:	617b      	str	r3, [r7, #20]
 8006694:	697b      	ldr	r3, [r7, #20]

		this->uartHandle.Init.BaudRate = 115200;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800669c:	669a      	str	r2, [r3, #104]	; 0x68
		this->uartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	66da      	str	r2, [r3, #108]	; 0x6c
		this->uartHandle.Init.StopBits = UART_STOPBITS_1;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	671a      	str	r2, [r3, #112]	; 0x70
		this->uartHandle.Init.Parity = UART_PARITY_NONE;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	675a      	str	r2, [r3, #116]	; 0x74
		this->uartHandle.Init.Mode = UART_MODE_TX_RX;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	220c      	movs	r2, #12
 80066b4:	679a      	str	r2, [r3, #120]	; 0x78
		this->uartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	67da      	str	r2, [r3, #124]	; 0x7c
		this->uartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

		HAL_UART_Init(&this->uartHandle);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	3364      	adds	r3, #100	; 0x64
 80066c8:	4618      	mov	r0, r3
 80066ca:	f005 fa2d 	bl	800bb28 <HAL_UART_Init>

		__HAL_RCC_DMA2_CLK_ENABLE();
 80066ce:	2300      	movs	r3, #0
 80066d0:	613b      	str	r3, [r7, #16]
 80066d2:	4b59      	ldr	r3, [pc, #356]	; (8006838 <_ZN5NVMPGC1ERV9mpgData_tRVt+0x294>)
 80066d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d6:	4a58      	ldr	r2, [pc, #352]	; (8006838 <_ZN5NVMPGC1ERV9mpgData_tRVt+0x294>)
 80066d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80066dc:	6313      	str	r3, [r2, #48]	; 0x30
 80066de:	4b56      	ldr	r3, [pc, #344]	; (8006838 <_ZN5NVMPGC1ERV9mpgData_tRVt+0x294>)
 80066e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066e6:	613b      	str	r3, [r7, #16]
 80066e8:	693b      	ldr	r3, [r7, #16]

		this->hdma_usart2_rx.Instance = DMA1_Stream5;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	4a54      	ldr	r2, [pc, #336]	; (8006840 <_ZN5NVMPGC1ERV9mpgData_tRVt+0x29c>)
 80066ee:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		this->hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80066f8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		this->hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		this->hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		this->hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006712:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		this->hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		this->hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		this->hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		this->hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		this->hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

		HAL_DMA_Init(&this->hdma_usart2_rx);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	33a8      	adds	r3, #168	; 0xa8
 8006742:	4618      	mov	r0, r3
 8006744:	f001 ffa6 	bl	8008694 <HAL_DMA_Init>

	    __HAL_LINKDMA(&this->uartHandle,hdmarx,this->hdma_usart2_rx);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

	    HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8006760:	2200      	movs	r2, #0
 8006762:	2100      	movs	r1, #0
 8006764:	2010      	movs	r0, #16
 8006766:	f001 ff5a 	bl	800861e <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800676a:	2010      	movs	r0, #16
 800676c:	f001 ff73 	bl	8008656 <HAL_NVIC_EnableIRQ>

	    this->hdma_usart2_tx.Instance = DMA1_Stream6;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4a34      	ldr	r2, [pc, #208]	; (8006844 <_ZN5NVMPGC1ERV9mpgData_tRVt+0x2a0>)
 8006774:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	    this->hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800677e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	    this->hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2240      	movs	r2, #64	; 0x40
 8006786:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	    this->hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	    this->hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006798:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	    this->hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	    this->hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	    //this->hdma_usart2_tx.Init.Mode = DMA_NORMAL;
	    this->hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067b2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	    this->hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	    this->hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

	    HAL_DMA_Init(&this->hdma_usart2_tx);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80067cc:	4618      	mov	r0, r3
 80067ce:	f001 ff61 	bl	8008694 <HAL_DMA_Init>

	    __HAL_LINKDMA(&this->uartHandle,hdmatx,this->hdma_usart2_tx);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f503 7284 	add.w	r2, r3, #264	; 0x108
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

		printf("UART2 DMA configured\n");
 80067ea:	4817      	ldr	r0, [pc, #92]	; (8006848 <_ZN5NVMPGC1ERV9mpgData_tRVt+0x2a4>)
 80067ec:	f012 feb4 	bl	8019558 <puts>
	}

	sprintf((char*)this->txData, "ZZ");
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	3324      	adds	r3, #36	; 0x24
 80067f4:	4915      	ldr	r1, [pc, #84]	; (800684c <_ZN5NVMPGC1ERV9mpgData_tRVt+0x2a8>)
 80067f6:	4618      	mov	r0, r3
 80067f8:	f012 ff4a 	bl	8019690 <siprintf>
	HAL_UART_Transmit(&this->uartHandle, (uint8_t*)&this->txData, 53, 100);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006808:	2364      	movs	r3, #100	; 0x64
 800680a:	2235      	movs	r2, #53	; 0x35
 800680c:	f005 f9d9 	bl	800bbc2 <HAL_UART_Transmit>

	HAL_UART_Receive_DMA(&this->uartHandle, (uint8_t*)&this->rxData, 1);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	3359      	adds	r3, #89	; 0x59
 800681a:	2201      	movs	r2, #1
 800681c:	4619      	mov	r1, r3
 800681e:	f005 fae1 	bl	800bde4 <HAL_UART_Receive_DMA>
}
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	4618      	mov	r0, r3
 8006826:	3734      	adds	r7, #52	; 0x34
 8006828:	46bd      	mov	sp, r7
 800682a:	bd90      	pop	{r4, r7, pc}
 800682c:	0801df84 	.word	0x0801df84
 8006830:	0801ae20 	.word	0x0801ae20
 8006834:	40004400 	.word	0x40004400
 8006838:	40023800 	.word	0x40023800
 800683c:	40020c00 	.word	0x40020c00
 8006840:	40026088 	.word	0x40026088
 8006844:	400260a0 	.word	0x400260a0
 8006848:	0801ae38 	.word	0x0801ae38
 800684c:	0801ae50 	.word	0x0801ae50

08006850 <_ZN5NVMPG6updateEv>:


void NVMPG::update()
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
	if (this->serialReceived)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 800685e:	2b00      	cmp	r3, #0
 8006860:	d041      	beq.n	80068e6 <_ZN5NVMPG6updateEv+0x96>
	{
		// get the button number from the low nibble, subtract 2 (buttons start from #2), NVMPG start at bit 26 in the uint64_t output structure
		mask = 1 << ((rxData & 0x0f) - 2);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006868:	f003 030f 	and.w	r3, r3, #15
 800686c:	3b02      	subs	r3, #2
 800686e:	2201      	movs	r2, #1
 8006870:	fa02 f303 	lsl.w	r3, r2, r3
 8006874:	b29a      	uxth	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

		// button state is from the high nibble, x0_ is button down (logical 1), x8_ is button up (logical 0)
		buttonState = (rxData & 0x80);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006882:	b25b      	sxtb	r3, r3
 8006884:	b2db      	uxtb	r3, r3
 8006886:	09db      	lsrs	r3, r3, #7
 8006888:	b2da      	uxtb	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e

		if (buttonState)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8006896:	2b00      	cmp	r3, #0
 8006898:	d011      	beq.n	80068be <_ZN5NVMPG6updateEv+0x6e>
		{
			*(this->ptrData) &= ~this->mask;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	b21a      	sxth	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80068aa:	b21b      	sxth	r3, r3
 80068ac:	43db      	mvns	r3, r3
 80068ae:	b21b      	sxth	r3, r3
 80068b0:	4013      	ands	r3, r2
 80068b2:	b21a      	sxth	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	b292      	uxth	r2, r2
 80068ba:	801a      	strh	r2, [r3, #0]
 80068bc:	e00b      	b.n	80068d6 <_ZN5NVMPG6updateEv+0x86>
		}
		else
		{
			*(this->ptrData) |= this->mask;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	881b      	ldrh	r3, [r3, #0]
 80068c4:	b299      	uxth	r1, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a1b      	ldr	r3, [r3, #32]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	b292      	uxth	r2, r2
 80068d4:	801a      	strh	r2, [r3, #0]
		}

		rxData = 0;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
		this->serialReceived = false;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	}

	if (this->payloadReceived)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d021      	beq.n	8006934 <_ZN5NVMPG6updateEv+0xe4>
	{
		// copy the data to txData buffer
		for (int i = 1; i < 53; i++)
 80068f0:	2301      	movs	r3, #1
 80068f2:	60fb      	str	r3, [r7, #12]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2b34      	cmp	r3, #52	; 0x34
 80068f8:	dc0f      	bgt.n	800691a <_ZN5NVMPG6updateEv+0xca>
		{
			this->txData[i] =  this->ptrMpgData->payload[i+4];
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	69da      	ldr	r2, [r3, #28]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3304      	adds	r3, #4
 8006902:	5cd3      	ldrb	r3, [r2, r3]
 8006904:	b2d9      	uxtb	r1, r3
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4413      	add	r3, r2
 800690c:	3324      	adds	r3, #36	; 0x24
 800690e:	460a      	mov	r2, r1
 8006910:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < 53; i++)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	3301      	adds	r3, #1
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	e7ec      	b.n	80068f4 <_ZN5NVMPG6updateEv+0xa4>
		}
		HAL_UART_Transmit_DMA(&this->uartHandle, (uint8_t*)&this->txData, 53);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	3324      	adds	r3, #36	; 0x24
 8006924:	2235      	movs	r2, #53	; 0x35
 8006926:	4619      	mov	r1, r3
 8006928:	f005 f9de 	bl	800bce8 <HAL_UART_Transmit_DMA>
		this->payloadReceived = false;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	}
}
 8006934:	bf00      	nop
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <_ZN5NVMPG10slowUpdateEv>:


void NVMPG::slowUpdate()
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
	return;
 8006944:	bf00      	nop
}
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <_ZN5NVMPG9configureEv>:

void NVMPG::configure()
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
	// use standard module configure method to set payload flag
	this->payloadReceived = true;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <_ZN5NVMPG15handleInterruptEv>:

void NVMPG::handleInterrupt()
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
	this->serialReceived = true;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	HAL_DMA_IRQHandler(&this->hdma_usart2_rx);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	33a8      	adds	r3, #168	; 0xa8
 8006980:	4618      	mov	r0, r3
 8006982:	f001 ff8d 	bl	80088a0 <HAL_DMA_IRQHandler>
	HAL_UART_Receive_DMA(&this->uartHandle, (uint8_t*)&this->rxData, 1);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	3359      	adds	r3, #89	; 0x59
 8006990:	2201      	movs	r2, #1
 8006992:	4619      	mov	r1, r3
 8006994:	f005 fa26 	bl	800bde4 <HAL_UART_Receive_DMA>
}
 8006998:	bf00      	nop
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <_ZN5NVMPGD1Ev>:

#include "extern.h"

void createNVMPG(void);

class NVMPG : public Module
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	4a05      	ldr	r2, [pc, #20]	; (80069c0 <_ZN5NVMPGD1Ev+0x20>)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7ff fccf 	bl	8006354 <_ZN6ModuleD1Ev>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4618      	mov	r0, r3
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	0801df84 	.word	0x0801df84

080069c4 <_ZN5NVMPGD0Ev>:
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7ff ffe7 	bl	80069a0 <_ZN5NVMPGD1Ev>
 80069d2:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f012 fa26 	bl	8018e28 <_ZdlPvj>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
	...

080069e8 <_Z16createSpindlePWMv>:
/***********************************************************************
                MODULE CONFIGURATION AND CREATION FROM JSON
************************************************************************/

void createSpindlePWM()
{
 80069e8:	b590      	push	{r4, r7, lr}
 80069ea:	b0a3      	sub	sp, #140	; 0x8c
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	4b59      	ldr	r3, [pc, #356]	; (8006b54 <_Z16createSpindlePWMv+0x16c>)
 80069f0:	637b      	str	r3, [r7, #52]	; 0x34
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 80069f2:	4859      	ldr	r0, [pc, #356]	; (8006b58 <_Z16createSpindlePWMv+0x170>)
 80069f4:	f7fc fc48 	bl	8003288 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 80069f8:	4603      	mov	r3, r0
 80069fa:	633b      	str	r3, [r7, #48]	; 0x30
 80069fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      : _object(variant), _key(key) {}
 8006a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a06:	613b      	str	r3, [r7, #16]
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8006a08:	bf00      	nop
 8006a0a:	f107 030c 	add.w	r3, r7, #12
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fc fc45 	bl	800329e <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8006a14:	4603      	mov	r3, r0
 8006a16:	653b      	str	r3, [r7, #80]	; 0x50
 8006a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
    return _object.getMember(_key);
 8006a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a26:	647b      	str	r3, [r7, #68]	; 0x44
 8006a28:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006a2a:	f7fa fefd 	bl	8001828 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a32:	643b      	str	r3, [r7, #64]	; 0x40
 8006a34:	60ba      	str	r2, [r7, #8]
    return VariantRef(_pool, objectGet(_data, key));
 8006a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a38:	685c      	ldr	r4, [r3, #4]
 8006a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68b9      	ldr	r1, [r7, #8]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7fd fe1d 	bl	8004680 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8006a46:	4603      	mov	r3, r0
 8006a48:	63fc      	str	r4, [r7, #60]	; 0x3c
 8006a4a:	63bb      	str	r3, [r7, #56]	; 0x38
      : base_type(data), _pool(pool) {}
 8006a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fc fb04 	bl	8003060 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8006a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a5c:	bf00      	nop
    return get_impl(adaptString(key));
 8006a5e:	bf00      	nop
 8006a60:	bf00      	nop
    return variantAs<T>(_data);
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7fd f8ed 	bl	8003c44 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8006a6e:	bf00      	nop
 8006a70:	bf00      	nop
    const char* comment = module["Comment"];
 8006a72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    printf("\n%s\n",comment);
 8006a76:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8006a7a:	4838      	ldr	r0, [pc, #224]	; (8006b5c <_Z16createSpindlePWMv+0x174>)
 8006a7c:	f012 fce6 	bl	801944c <iprintf>
 8006a80:	4b37      	ldr	r3, [pc, #220]	; (8006b60 <_Z16createSpindlePWMv+0x178>)
 8006a82:	65fb      	str	r3, [r7, #92]	; 0x5c
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8006a84:	4834      	ldr	r0, [pc, #208]	; (8006b58 <_Z16createSpindlePWMv+0x170>)
 8006a86:	f7fc fbff 	bl	8003288 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a90:	657b      	str	r3, [r7, #84]	; 0x54
      : _object(variant), _key(key) {}
 8006a92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a94:	617b      	str	r3, [r7, #20]
 8006a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a98:	61bb      	str	r3, [r7, #24]
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8006a9a:	bf00      	nop
 8006a9c:	f107 0314 	add.w	r3, r7, #20
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7fc fbfc 	bl	800329e <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006aaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aac:	677b      	str	r3, [r7, #116]	; 0x74
    return _object.getMember(_key);
 8006aae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	673a      	str	r2, [r7, #112]	; 0x70
 8006ab8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006aba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006abc:	f7fa feb4 	bl	8001828 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ac4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ac6:	607a      	str	r2, [r7, #4]
    return VariantRef(_pool, objectGet(_data, key));
 8006ac8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006aca:	685c      	ldr	r4, [r3, #4]
 8006acc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6879      	ldr	r1, [r7, #4]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fd fdd4 	bl	8004680 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	667c      	str	r4, [r7, #100]	; 0x64
 8006adc:	663b      	str	r3, [r7, #96]	; 0x60
      : base_type(data), _pool(pool) {}
 8006ade:	f107 031c 	add.w	r3, r7, #28
 8006ae2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fc fabb 	bl	8003060 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8006aea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006aec:	623b      	str	r3, [r7, #32]
 8006aee:	bf00      	nop
    return get_impl(adaptString(key));
 8006af0:	bf00      	nop
 8006af2:	bf00      	nop
    return variantAs<T>(_data);
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7ff fab7 	bl	800606a <_ZN19ArduinoJson6101_1109variantAsIiEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>
 8006afc:	4603      	mov	r3, r0
 8006afe:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8006b00:	bf00      	nop
 8006b02:	bf00      	nop

    int sp = module["SP[i]"];
 8006b04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    ptrSetPoint[sp] = &rxData.setPoint[sp];
 8006b08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b0c:	3308      	adds	r3, #8
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4a14      	ldr	r2, [pc, #80]	; (8006b64 <_Z16createSpindlePWMv+0x17c>)
 8006b12:	4413      	add	r3, r2
 8006b14:	1d1a      	adds	r2, r3, #4
 8006b16:	4914      	ldr	r1, [pc, #80]	; (8006b68 <_Z16createSpindlePWMv+0x180>)
 8006b18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    Module* spindle = new SpindlePWM(*ptrSetPoint[sp]);
 8006b20:	2070      	movs	r0, #112	; 0x70
 8006b22:	f012 f992 	bl	8018e4a <_Znwj>
 8006b26:	4603      	mov	r3, r0
 8006b28:	461c      	mov	r4, r3
 8006b2a:	4a0f      	ldr	r2, [pc, #60]	; (8006b68 <_Z16createSpindlePWMv+0x180>)
 8006b2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b34:	4619      	mov	r1, r3
 8006b36:	4620      	mov	r0, r4
 8006b38:	f000 f81a 	bl	8006b70 <_ZN10SpindlePWMC1ERVf>
 8006b3c:	67fc      	str	r4, [r7, #124]	; 0x7c
    servoThread->registerModule(spindle);
 8006b3e:	4b0b      	ldr	r3, [pc, #44]	; (8006b6c <_Z16createSpindlePWMv+0x184>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b44:	4618      	mov	r0, r3
 8006b46:	f000 fd63 	bl	8007610 <_ZN9pruThread14registerModuleEP6Module>
}
 8006b4a:	bf00      	nop
 8006b4c:	378c      	adds	r7, #140	; 0x8c
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd90      	pop	{r4, r7, pc}
 8006b52:	bf00      	nop
 8006b54:	0801ae54 	.word	0x0801ae54
 8006b58:	20000348 	.word	0x20000348
 8006b5c:	0801ae5c 	.word	0x0801ae5c
 8006b60:	0801ae64 	.word	0x0801ae64
 8006b64:	200001c8 	.word	0x200001c8
 8006b68:	200002d0 	.word	0x200002d0
 8006b6c:	20000174 	.word	0x20000174

08006b70 <_ZN10SpindlePWMC1ERVf>:

/***********************************************************************
                METHOD DEFINITIONS
************************************************************************/

SpindlePWM::SpindlePWM(volatile float &ptrPwmPulseWidth) :
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b092      	sub	sp, #72	; 0x48
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
    ptrPwmPulseWidth(&ptrPwmPulseWidth)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7ff fbcf 	bl	8006320 <_ZN6ModuleC1Ev>
 8006b82:	4a4a      	ldr	r2, [pc, #296]	; (8006cac <_ZN10SpindlePWMC1ERVf+0x13c>)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	65da      	str	r2, [r3, #92]	; 0x5c
{
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]
 8006b96:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8006b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	601a      	str	r2, [r3, #0]
 8006ba0:	605a      	str	r2, [r3, #4]
 8006ba2:	609a      	str	r2, [r3, #8]
 8006ba4:	60da      	str	r2, [r3, #12]
 8006ba6:	611a      	str	r2, [r3, #16]
 8006ba8:	615a      	str	r2, [r3, #20]
 8006baa:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bac:	f107 0310 	add.w	r3, r7, #16
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	605a      	str	r2, [r3, #4]
 8006bb6:	609a      	str	r2, [r3, #8]
 8006bb8:	60da      	str	r2, [r3, #12]
 8006bba:	611a      	str	r2, [r3, #16]

	__HAL_RCC_TIM2_CLK_ENABLE();
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	60fb      	str	r3, [r7, #12]
 8006bc0:	4b3b      	ldr	r3, [pc, #236]	; (8006cb0 <_ZN10SpindlePWMC1ERVf+0x140>)
 8006bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc4:	4a3a      	ldr	r2, [pc, #232]	; (8006cb0 <_ZN10SpindlePWMC1ERVf+0x140>)
 8006bc6:	f043 0301 	orr.w	r3, r3, #1
 8006bca:	6413      	str	r3, [r2, #64]	; 0x40
 8006bcc:	4b38      	ldr	r3, [pc, #224]	; (8006cb0 <_ZN10SpindlePWMC1ERVf+0x140>)
 8006bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	60fb      	str	r3, [r7, #12]
 8006bd6:	68fb      	ldr	r3, [r7, #12]

	this->prescaler = 60;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	223c      	movs	r2, #60	; 0x3c
 8006bdc:	665a      	str	r2, [r3, #100]	; 0x64
	this->period = 10000;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f242 7210 	movw	r2, #10000	; 0x2710
 8006be4:	669a      	str	r2, [r3, #104]	; 0x68

	this->htim.Instance = TIM2;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006bec:	615a      	str	r2, [r3, #20]
	this->htim.Init.Prescaler = this->prescaler-1;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bf2:	1e5a      	subs	r2, r3, #1
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	619a      	str	r2, [r3, #24]
	this->htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	61da      	str	r2, [r3, #28]
	this->htim.Init.Period = this->period-1;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c02:	1e5a      	subs	r2, r3, #1
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	621a      	str	r2, [r3, #32]
	this->htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	625a      	str	r2, [r3, #36]	; 0x24
	this->htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	62da      	str	r2, [r3, #44]	; 0x2c

	HAL_TIM_PWM_Init(&this->htim);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3314      	adds	r3, #20
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f004 faaf 	bl	800b17c <HAL_TIM_PWM_Init>

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006c22:	2300      	movs	r3, #0
 8006c24:	647b      	str	r3, [r7, #68]	; 0x44

	HAL_TIMEx_MasterConfigSynchronization(&this->htim, &sMasterConfig);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	3314      	adds	r3, #20
 8006c2a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006c2e:	4611      	mov	r1, r2
 8006c30:	4618      	mov	r0, r3
 8006c32:	f004 fefd 	bl	800ba30 <HAL_TIMEx_MasterConfigSynchronization>

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006c36:	2360      	movs	r3, #96	; 0x60
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24
	//sConfigOC.Pulse = 0;
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	637b      	str	r3, [r7, #52]	; 0x34

	HAL_TIM_PWM_ConfigChannel(&this->htim, &sConfigOC, TIM_CHANNEL_1);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	3314      	adds	r3, #20
 8006c46:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f004 fbb7 	bl	800b3c0 <HAL_TIM_PWM_ConfigChannel>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c52:	2300      	movs	r3, #0
 8006c54:	60bb      	str	r3, [r7, #8]
 8006c56:	4b16      	ldr	r3, [pc, #88]	; (8006cb0 <_ZN10SpindlePWMC1ERVf+0x140>)
 8006c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5a:	4a15      	ldr	r2, [pc, #84]	; (8006cb0 <_ZN10SpindlePWMC1ERVf+0x140>)
 8006c5c:	f043 0301 	orr.w	r3, r3, #1
 8006c60:	6313      	str	r3, [r2, #48]	; 0x30
 8006c62:	4b13      	ldr	r3, [pc, #76]	; (8006cb0 <_ZN10SpindlePWMC1ERVf+0x140>)
 8006c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	60bb      	str	r3, [r7, #8]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c72:	2302      	movs	r3, #2
 8006c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c76:	2300      	movs	r3, #0
 8006c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c82:	f107 0310 	add.w	r3, r7, #16
 8006c86:	4619      	mov	r1, r3
 8006c88:	480a      	ldr	r0, [pc, #40]	; (8006cb4 <_ZN10SpindlePWMC1ERVf+0x144>)
 8006c8a:	f003 fc61 	bl	800a550 <HAL_GPIO_Init>

	HAL_TIM_PWM_Start(&this->htim, TIM_CHANNEL_1);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	3314      	adds	r3, #20
 8006c92:	2100      	movs	r1, #0
 8006c94:	4618      	mov	r0, r3
 8006c96:	f004 facb 	bl	800b230 <HAL_TIM_PWM_Start>
	TIM2->CCR1 = 0;
 8006c9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3748      	adds	r7, #72	; 0x48
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	0801dfa8 	.word	0x0801dfa8
 8006cb0:	40023800 	.word	0x40023800
 8006cb4:	40020000 	.word	0x40020000

08006cb8 <_ZN10SpindlePWM6updateEv>:



void SpindlePWM::update()
{
 8006cb8:	b5b0      	push	{r4, r5, r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]

    if (*(this->ptrPwmPulseWidth) != this->pwmPulseWidth)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc4:	ed93 7a00 	vldr	s14, [r3]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8006cce:	eeb4 7a67 	vcmp.f32	s14, s15
 8006cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cd6:	bf14      	ite	ne
 8006cd8:	2301      	movne	r3, #1
 8006cda:	2300      	moveq	r3, #0
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d050      	beq.n	8006d84 <_ZN10SpindlePWM6updateEv+0xcc>
    {
        // PWM duty has changed
        this->pwmPulseWidth = *(this->ptrPwmPulseWidth);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	661a      	str	r2, [r3, #96]	; 0x60

        if (this->pwmPulseWidth > 100.0)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8006cf2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006d8c <_ZN10SpindlePWM6updateEv+0xd4>
 8006cf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cfe:	dd02      	ble.n	8006d06 <_ZN10SpindlePWM6updateEv+0x4e>
        {
        	this->pwmPulseWidth = 100.0;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a23      	ldr	r2, [pc, #140]	; (8006d90 <_ZN10SpindlePWM6updateEv+0xd8>)
 8006d04:	661a      	str	r2, [r3, #96]	; 0x60
        }

        if (this->pwmPulseWidth < 0.0)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8006d0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d14:	d503      	bpl.n	8006d1e <_ZN10SpindlePWM6updateEv+0x66>
        {
        	this->pwmPulseWidth = 0.0;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f04f 0200 	mov.w	r2, #0
 8006d1c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        this->pulse = (uint32_t)((float)this->period*(this->pwmPulseWidth / 100.0));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d22:	ee07 3a90 	vmov	s15, r3
 8006d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d2a:	ee17 0a90 	vmov	r0, s15
 8006d2e:	f7f9 fc15 	bl	800055c <__aeabi_f2d>
 8006d32:	4604      	mov	r4, r0
 8006d34:	460d      	mov	r5, r1
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7f9 fc0e 	bl	800055c <__aeabi_f2d>
 8006d40:	f04f 0200 	mov.w	r2, #0
 8006d44:	4b13      	ldr	r3, [pc, #76]	; (8006d94 <_ZN10SpindlePWM6updateEv+0xdc>)
 8006d46:	f7f9 fd8b 	bl	8000860 <__aeabi_ddiv>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	4620      	mov	r0, r4
 8006d50:	4629      	mov	r1, r5
 8006d52:	f7f9 fc5b 	bl	800060c <__aeabi_dmul>
 8006d56:	4602      	mov	r2, r0
 8006d58:	460b      	mov	r3, r1
 8006d5a:	4610      	mov	r0, r2
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	f7f9 ff17 	bl	8000b90 <__aeabi_d2uiz>
 8006d62:	4602      	mov	r2, r0
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	66da      	str	r2, [r3, #108]	; 0x6c
        if (this->pulse == 0)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d103      	bne.n	8006d78 <_ZN10SpindlePWM6updateEv+0xc0>
        {
        	TIM5->CCR1 = 0;
 8006d70:	4b09      	ldr	r3, [pc, #36]	; (8006d98 <_ZN10SpindlePWM6updateEv+0xe0>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	635a      	str	r2, [r3, #52]	; 0x34
        {
        	TIM5->CCR1 = this->pulse-1;
        }
    }

    return;
 8006d76:	e005      	b.n	8006d84 <_ZN10SpindlePWM6updateEv+0xcc>
        	TIM5->CCR1 = this->pulse-1;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d7c:	4a06      	ldr	r2, [pc, #24]	; (8006d98 <_ZN10SpindlePWM6updateEv+0xe0>)
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	6353      	str	r3, [r2, #52]	; 0x34
    return;
 8006d82:	bf00      	nop
 8006d84:	bf00      	nop
}
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bdb0      	pop	{r4, r5, r7, pc}
 8006d8c:	42c80000 	.word	0x42c80000
 8006d90:	42c80000 	.word	0x42c80000
 8006d94:	40590000 	.word	0x40590000
 8006d98:	40000c00 	.word	0x40000c00

08006d9c <_ZN10SpindlePWM10slowUpdateEv>:


void SpindlePWM::slowUpdate()
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
	return;
 8006da4:	bf00      	nop
}
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <_ZN10SpindlePWMD1Ev>:

#include "extern.h"

void createSpindlePWM(void);

class SpindlePWM : public Module
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	4a05      	ldr	r2, [pc, #20]	; (8006dd0 <_ZN10SpindlePWMD1Ev+0x20>)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7ff fac7 	bl	8006354 <_ZN6ModuleD1Ev>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	0801dfa8 	.word	0x0801dfa8

08006dd4 <_ZN10SpindlePWMD0Ev>:
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7ff ffe7 	bl	8006db0 <_ZN10SpindlePWMD1Ev>
 8006de2:	2170      	movs	r1, #112	; 0x70
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f012 f81f 	bl	8018e28 <_ZdlPvj>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4618      	mov	r0, r3
 8006dee:	3708      	adds	r7, #8
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <_Z13createStepgenv>:
/***********************************************************************
                MODULE CONFIGURATION AND CREATION FROM JSON     
************************************************************************/

void createStepgen()
{
 8006df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006df6:	b0d7      	sub	sp, #348	; 0x15c
 8006df8:	af06      	add	r7, sp, #24
 8006dfa:	4be4      	ldr	r3, [pc, #912]	; (800718c <_Z13createStepgenv+0x398>)
 8006dfc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8006e00:	48e3      	ldr	r0, [pc, #908]	; (8007190 <_Z13createStepgenv+0x39c>)
 8006e02:	f7fc fa41 	bl	8003288 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8006e06:	4603      	mov	r3, r0
 8006e08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      : _object(variant), _key(key) {}
 8006e14:	f107 0314 	add.w	r3, r7, #20
 8006e18:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	f107 0314 	add.w	r3, r7, #20
 8006e22:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006e26:	605a      	str	r2, [r3, #4]
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8006e28:	bf00      	nop
 8006e2a:	f107 0314 	add.w	r3, r7, #20
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fc fa35 	bl	800329e <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8006e34:	4603      	mov	r3, r0
 8006e36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    return _object.getMember(_key);
 8006e42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006e56:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8006e5a:	f7fa fce5 	bl	8001828 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e68:	f107 0310 	add.w	r3, r7, #16
 8006e6c:	601a      	str	r2, [r3, #0]
    return VariantRef(_pool, objectGet(_data, key));
 8006e6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e72:	685c      	ldr	r4, [r3, #4]
 8006e74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	f107 0310 	add.w	r3, r7, #16
 8006e7e:	6819      	ldr	r1, [r3, #0]
 8006e80:	4610      	mov	r0, r2
 8006e82:	f7fd fbfd 	bl	8004680 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8006e86:	4603      	mov	r3, r0
 8006e88:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
 8006e8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      : base_type(data), _pool(pool) {}
 8006e90:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006e94:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7fc f8e1 	bl	8003060 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8006e9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ea2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006ea6:	bf00      	nop
    return get_impl(adaptString(key));
 8006ea8:	bf00      	nop
 8006eaa:	bf00      	nop
    return variantAs<T>(_data);
 8006eac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7fc fec7 	bl	8003c44 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8006eba:	bf00      	nop
 8006ebc:	bf00      	nop
    const char* comment = module["Comment"];
 8006ebe:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    printf("\n%s\n",comment);
 8006ec2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8006ec6:	48b3      	ldr	r0, [pc, #716]	; (8007194 <_Z13createStepgenv+0x3a0>)
 8006ec8:	f012 fac0 	bl	801944c <iprintf>
 8006ecc:	4bb2      	ldr	r3, [pc, #712]	; (8007198 <_Z13createStepgenv+0x3a4>)
 8006ece:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8006ed2:	48af      	ldr	r0, [pc, #700]	; (8007190 <_Z13createStepgenv+0x39c>)
 8006ed4:	f7fc f9d8 	bl	8003288 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ede:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006ee2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      : _object(variant), _key(key) {}
 8006ee6:	f107 031c 	add.w	r3, r7, #28
 8006eea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006eee:	601a      	str	r2, [r3, #0]
 8006ef0:	f107 031c 	add.w	r3, r7, #28
 8006ef4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ef8:	605a      	str	r2, [r3, #4]
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8006efa:	bf00      	nop
 8006efc:	f107 031c 	add.w	r3, r7, #28
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7fc f9cc 	bl	800329e <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8006f06:	4603      	mov	r3, r0
 8006f08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    return _object.getMember(_key);
 8006f14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8006f24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f28:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8006f2c:	f7fa fc7c 	bl	8001828 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8006f30:	4602      	mov	r2, r0
 8006f32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006f36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f3a:	f107 030c 	add.w	r3, r7, #12
 8006f3e:	601a      	str	r2, [r3, #0]
    return VariantRef(_pool, objectGet(_data, key));
 8006f40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f44:	685c      	ldr	r4, [r3, #4]
 8006f46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	f107 030c 	add.w	r3, r7, #12
 8006f50:	6819      	ldr	r1, [r3, #0]
 8006f52:	4610      	mov	r0, r2
 8006f54:	f7fd fb94 	bl	8004680 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
 8006f5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      : base_type(data), _pool(pool) {}
 8006f62:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006f66:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fc f878 	bl	8003060 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8006f70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f78:	bf00      	nop
    return get_impl(adaptString(key));
 8006f7a:	bf00      	nop
 8006f7c:	bf00      	nop
    return variantAs<T>(_data);
 8006f7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7ff f872 	bl	800606a <_ZN19ArduinoJson6101_1109variantAsIiEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>
 8006f86:	4603      	mov	r3, r0
 8006f88:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8006f8a:	bf00      	nop
 8006f8c:	bf00      	nop

    int joint = module["Joint Number"];
 8006f8e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8006f92:	4b82      	ldr	r3, [pc, #520]	; (800719c <_Z13createStepgenv+0x3a8>)
 8006f94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8006f98:	487d      	ldr	r0, [pc, #500]	; (8007190 <_Z13createStepgenv+0x39c>)
 8006f9a:	f7fc f975 	bl	8003288 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      : _object(variant), _key(key) {}
 8006fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fb0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006fbe:	605a      	str	r2, [r3, #4]
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8006fc0:	bf00      	nop
 8006fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fc f969 	bl	800329e <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006fd2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006fd6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    return _object.getMember(_key);
 8006fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8006fea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006fee:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8006ff2:	f7fa fc19 	bl	8001828 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ffc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007000:	f107 0308 	add.w	r3, r7, #8
 8007004:	601a      	str	r2, [r3, #0]
    return VariantRef(_pool, objectGet(_data, key));
 8007006:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800700a:	685c      	ldr	r4, [r3, #4]
 800700c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	f107 0308 	add.w	r3, r7, #8
 8007016:	6819      	ldr	r1, [r3, #0]
 8007018:	4610      	mov	r0, r2
 800701a:	f7fd fb31 	bl	8004680 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 800701e:	4603      	mov	r3, r0
 8007020:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 8007024:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      : base_type(data), _pool(pool) {}
 8007028:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800702c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8007030:	4618      	mov	r0, r3
 8007032:	f7fc f815 	bl	8003060 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8007036:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800703a:	67bb      	str	r3, [r7, #120]	; 0x78
 800703c:	bf00      	nop
    return get_impl(adaptString(key));
 800703e:	bf00      	nop
 8007040:	bf00      	nop
    return variantAs<T>(_data);
 8007042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007044:	4618      	mov	r0, r3
 8007046:	f7fc fdfd 	bl	8003c44 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
 800704a:	4603      	mov	r3, r0
 800704c:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 800704e:	bf00      	nop
 8007050:	bf00      	nop
    const char* step = module["Step Pin"];
 8007052:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8007056:	4b52      	ldr	r3, [pc, #328]	; (80071a0 <_Z13createStepgenv+0x3ac>)
 8007058:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 800705c:	484c      	ldr	r0, [pc, #304]	; (8007190 <_Z13createStepgenv+0x39c>)
 800705e:	f7fc f913 	bl	8003288 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8007062:	4603      	mov	r3, r0
 8007064:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007068:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800706c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
      : _object(variant), _key(key) {}
 8007070:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007074:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800707e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8007082:	605a      	str	r2, [r3, #4]
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8007084:	bf00      	nop
 8007086:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800708a:	4618      	mov	r0, r3
 800708c:	f7fc f907 	bl	800329e <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8007090:	4603      	mov	r3, r0
 8007092:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007096:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800709a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    return _object.getMember(_key);
 800709e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 80070ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80070b2:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80070b6:	f7fa fbb7 	bl	8001828 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 80070ba:	4602      	mov	r2, r0
 80070bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80070c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80070c4:	1d3b      	adds	r3, r7, #4
 80070c6:	601a      	str	r2, [r3, #0]
    return VariantRef(_pool, objectGet(_data, key));
 80070c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80070cc:	685c      	ldr	r4, [r3, #4]
 80070ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	1d3b      	adds	r3, r7, #4
 80070d6:	6819      	ldr	r1, [r3, #0]
 80070d8:	4610      	mov	r0, r2
 80070da:	f7fd fad1 	bl	8004680 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 80070de:	4603      	mov	r3, r0
 80070e0:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 80070e4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
      : base_type(data), _pool(pool) {}
 80070e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80070ec:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7fb ffb5 	bl	8003060 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 80070f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070fa:	673b      	str	r3, [r7, #112]	; 0x70
 80070fc:	bf00      	nop
    return get_impl(adaptString(key));
 80070fe:	bf00      	nop
 8007100:	bf00      	nop
    return variantAs<T>(_data);
 8007102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007104:	4618      	mov	r0, r3
 8007106:	f7fc fd9d 	bl	8003c44 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
 800710a:	4603      	mov	r3, r0
 800710c:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 800710e:	bf00      	nop
 8007110:	bf00      	nop
    const char* dir = module["Direction Pin"];
 8007112:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    // configure pointers to data source and feedback location
    ptrJointFreqCmd[joint] = &rxData.jointFreqCmd[joint];
 8007116:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4a21      	ldr	r2, [pc, #132]	; (80071a4 <_Z13createStepgenv+0x3b0>)
 800711e:	4413      	add	r3, r2
 8007120:	1d1a      	adds	r2, r3, #4
 8007122:	4921      	ldr	r1, [pc, #132]	; (80071a8 <_Z13createStepgenv+0x3b4>)
 8007124:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ptrJointFeedback[joint] = &txData.jointFeedback[joint];
 800712c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4a1e      	ldr	r2, [pc, #120]	; (80071ac <_Z13createStepgenv+0x3b8>)
 8007134:	4413      	add	r3, r2
 8007136:	1d1a      	adds	r2, r3, #4
 8007138:	491d      	ldr	r1, [pc, #116]	; (80071b0 <_Z13createStepgenv+0x3bc>)
 800713a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800713e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ptrJointEnable = &rxData.jointEnable;
 8007142:	4b1c      	ldr	r3, [pc, #112]	; (80071b4 <_Z13createStepgenv+0x3c0>)
 8007144:	4a1c      	ldr	r2, [pc, #112]	; (80071b8 <_Z13createStepgenv+0x3c4>)
 8007146:	601a      	str	r2, [r3, #0]

    // create the step generator, register it in the thread
    Module* stepgen = new Stepgen(base_freq, joint, step, dir, STEPBIT, *ptrJointFreqCmd[joint], *ptrJointFeedback[joint], *ptrJointEnable);
 8007148:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800714c:	4618      	mov	r0, r3
 800714e:	f011 fe90 	bl	8018e72 <_ZNSaIcEC1Ev>
 8007152:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8007156:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800715a:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 800715e:	4618      	mov	r0, r3
 8007160:	f012 f820 	bl	80191a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007164:	f107 0634 	add.w	r6, r7, #52	; 0x34
 8007168:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800716c:	4618      	mov	r0, r3
 800716e:	f011 fe80 	bl	8018e72 <_ZNSaIcEC1Ev>
 8007172:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8007176:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800717a:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800717e:	4618      	mov	r0, r3
 8007180:	f012 f810 	bl	80191a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8007184:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8007188:	e018      	b.n	80071bc <_Z13createStepgenv+0x3c8>
 800718a:	bf00      	nop
 800718c:	0801ae6c 	.word	0x0801ae6c
 8007190:	20000348 	.word	0x20000348
 8007194:	0801ae74 	.word	0x0801ae74
 8007198:	0801ae7c 	.word	0x0801ae7c
 800719c:	0801ae8c 	.word	0x0801ae8c
 80071a0:	0801ae98 	.word	0x0801ae98
 80071a4:	200001c8 	.word	0x200001c8
 80071a8:	2000028c 	.word	0x2000028c
 80071ac:	2000020c 	.word	0x2000020c
 80071b0:	200002ac 	.word	0x200002ac
 80071b4:	200002cc 	.word	0x200002cc
 80071b8:	20000204 	.word	0x20000204
 80071bc:	207c      	movs	r0, #124	; 0x7c
 80071be:	f011 fe44 	bl	8018e4a <_Znwj>
 80071c2:	4603      	mov	r3, r0
 80071c4:	461d      	mov	r5, r3
 80071c6:	4b22      	ldr	r3, [pc, #136]	; (8007250 <_Z13createStepgenv+0x45c>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4618      	mov	r0, r3
 80071cc:	4a21      	ldr	r2, [pc, #132]	; (8007254 <_Z13createStepgenv+0x460>)
 80071ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80071d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071d6:	4920      	ldr	r1, [pc, #128]	; (8007258 <_Z13createStepgenv+0x464>)
 80071d8:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80071dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80071e0:	491e      	ldr	r1, [pc, #120]	; (800725c <_Z13createStepgenv+0x468>)
 80071e2:	6809      	ldr	r1, [r1, #0]
 80071e4:	9104      	str	r1, [sp, #16]
 80071e6:	9203      	str	r2, [sp, #12]
 80071e8:	9302      	str	r3, [sp, #8]
 80071ea:	2316      	movs	r3, #22
 80071ec:	9301      	str	r3, [sp, #4]
 80071ee:	9400      	str	r4, [sp, #0]
 80071f0:	4633      	mov	r3, r6
 80071f2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80071f6:	4601      	mov	r1, r0
 80071f8:	4628      	mov	r0, r5
 80071fa:	f000 f833 	bl	8007264 <_ZN7StepgenC1EliNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_iRVlS7_RVh>
 80071fe:	f8c7 512c 	str.w	r5, [r7, #300]	; 0x12c
 8007202:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007206:	4618      	mov	r0, r3
 8007208:	f011 feeb 	bl	8018fe2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800720c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007210:	4618      	mov	r0, r3
 8007212:	f011 fe2f 	bl	8018e74 <_ZNSaIcED1Ev>
 8007216:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800721a:	4618      	mov	r0, r3
 800721c:	f011 fee1 	bl	8018fe2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8007220:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007224:	4618      	mov	r0, r3
 8007226:	f011 fe25 	bl	8018e74 <_ZNSaIcED1Ev>
    baseThread->registerModule(stepgen);
 800722a:	4b0d      	ldr	r3, [pc, #52]	; (8007260 <_Z13createStepgenv+0x46c>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8007232:	4618      	mov	r0, r3
 8007234:	f000 f9ec 	bl	8007610 <_ZN9pruThread14registerModuleEP6Module>
    baseThread->registerModulePost(stepgen);
 8007238:	4b09      	ldr	r3, [pc, #36]	; (8007260 <_Z13createStepgenv+0x46c>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8007240:	4618      	mov	r0, r3
 8007242:	f000 f9f5 	bl	8007630 <_ZN9pruThread18registerModulePostEP6Module>
}
 8007246:	bf00      	nop
 8007248:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800724c:	46bd      	mov	sp, r7
 800724e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007250:	20000000 	.word	0x20000000
 8007254:	2000028c 	.word	0x2000028c
 8007258:	200002ac 	.word	0x200002ac
 800725c:	200002cc 	.word	0x200002cc
 8007260:	20000178 	.word	0x20000178

08007264 <_ZN7StepgenC1EliNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_iRVlS7_RVh>:

/***********************************************************************
                METHOD DEFINITIONS
************************************************************************/

Stepgen::Stepgen(int32_t threadFreq, int jointNumber, std::string step, std::string direction, int stepBit, volatile int32_t &ptrFrequencyCommand, volatile int32_t &ptrFeedback, volatile uint8_t &ptrJointEnable) :
 8007264:	b5b0      	push	{r4, r5, r7, lr}
 8007266:	b090      	sub	sp, #64	; 0x40
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
 8007270:	603b      	str	r3, [r7, #0]
	step(step),
	direction(direction),
	stepBit(stepBit),
	ptrFrequencyCommand(&ptrFrequencyCommand),
	ptrFeedback(&ptrFeedback),
	ptrJointEnable(&ptrJointEnable)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4618      	mov	r0, r3
 8007276:	f7ff f853 	bl	8006320 <_ZN6ModuleC1Ev>
 800727a:	4a3f      	ldr	r2, [pc, #252]	; (8007378 <_ZN7StepgenC1EliNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_iRVlS7_RVh+0x114>)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	601a      	str	r2, [r3, #0]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	615a      	str	r2, [r3, #20]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	331c      	adds	r3, #28
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	4618      	mov	r0, r3
 800728e:	f011 ff55 	bl	801913c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3334      	adds	r3, #52	; 0x34
 8007296:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007298:	4618      	mov	r0, r3
 800729a:	f011 ff4f 	bl	801913c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072a2:	655a      	str	r2, [r3, #84]	; 0x54
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072ae:	661a      	str	r2, [r3, #96]	; 0x60
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80072b4:	671a      	str	r2, [r3, #112]	; 0x70
{
	this->stepPin = new Pin(this->step, OUTPUT);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f103 021c 	add.w	r2, r3, #28
 80072bc:	f107 0310 	add.w	r3, r7, #16
 80072c0:	4611      	mov	r1, r2
 80072c2:	4618      	mov	r0, r3
 80072c4:	f011 ff3a 	bl	801913c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80072c8:	f107 0510 	add.w	r5, r7, #16
 80072cc:	2044      	movs	r0, #68	; 0x44
 80072ce:	f011 fdbc 	bl	8018e4a <_Znwj>
 80072d2:	4603      	mov	r3, r0
 80072d4:	461c      	mov	r4, r3
 80072d6:	2201      	movs	r2, #1
 80072d8:	4629      	mov	r1, r5
 80072da:	4620      	mov	r0, r4
 80072dc:	f7f9 fdf4 	bl	8000ec8 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	675c      	str	r4, [r3, #116]	; 0x74
 80072e4:	f107 0310 	add.w	r3, r7, #16
 80072e8:	4618      	mov	r0, r3
 80072ea:	f011 fe7a 	bl	8018fe2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	this->directionPin = new Pin(this->direction, OUTPUT);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80072f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80072f8:	4611      	mov	r1, r2
 80072fa:	4618      	mov	r0, r3
 80072fc:	f011 ff1e 	bl	801913c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8007300:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8007304:	2044      	movs	r0, #68	; 0x44
 8007306:	f011 fda0 	bl	8018e4a <_Znwj>
 800730a:	4603      	mov	r3, r0
 800730c:	461c      	mov	r4, r3
 800730e:	2201      	movs	r2, #1
 8007310:	4629      	mov	r1, r5
 8007312:	4620      	mov	r0, r4
 8007314:	f7f9 fdd8 	bl	8000ec8 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	679c      	str	r4, [r3, #120]	; 0x78
 800731c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007320:	4618      	mov	r0, r3
 8007322:	f011 fe5e 	bl	8018fe2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	this->DDSaccumulator = 0;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	665a      	str	r2, [r3, #100]	; 0x64
	this->frequencyScale = (float)(1 << this->stepBit) / (float)threadFreq;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007330:	2201      	movs	r2, #1
 8007332:	fa02 f303 	lsl.w	r3, r2, r3
 8007336:	ee07 3a90 	vmov	s15, r3
 800733a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	ee07 3a90 	vmov	s15, r3
 8007344:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007348:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	this->mask = 1 << this->jointNumber;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	2201      	movs	r2, #1
 8007358:	409a      	lsls	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	619a      	str	r2, [r3, #24]
	this->isEnabled = false;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	this->isForward = false;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
}
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	4618      	mov	r0, r3
 8007372:	3740      	adds	r7, #64	; 0x40
 8007374:	46bd      	mov	sp, r7
 8007376:	bdb0      	pop	{r4, r5, r7, pc}
 8007378:	0801dfcc 	.word	0x0801dfcc

0800737c <_ZN7Stepgen6updateEv>:


void Stepgen::update()
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
	// Use the standard Module interface to run makePulses()
	this->makePulses();
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f819 	bl	80073bc <_ZN7Stepgen10makePulsesEv>
}
 800738a:	bf00      	nop
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <_ZN7Stepgen10updatePostEv>:

void Stepgen::updatePost()
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b082      	sub	sp, #8
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
	this->stopPulses();
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f889 	bl	80074b2 <_ZN7Stepgen10stopPulsesEv>
}
 80073a0:	bf00      	nop
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <_ZN7Stepgen10slowUpdateEv>:

void Stepgen::slowUpdate()
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
	return;
 80073b0:	bf00      	nop
}
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <_ZN7Stepgen10makePulsesEv>:

void Stepgen::makePulses()
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
	int32_t stepNow = 0;
 80073c4:	2300      	movs	r3, #0
 80073c6:	60fb      	str	r3, [r7, #12]

	this->isEnabled = ((*(this->ptrJointEnable) & this->mask) != 0);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	461a      	mov	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	4013      	ands	r3, r2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	bf14      	ite	ne
 80073dc:	2301      	movne	r3, #1
 80073de:	2300      	moveq	r3, #0
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	if (this->isEnabled == true)  												// this Step generator is enables so make the pulses
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d15b      	bne.n	80074aa <_ZN7Stepgen10makePulsesEv+0xee>
	{
		this->frequencyCommand = *(this->ptrFrequencyCommand);            		// Get the latest frequency command via pointer to the data source
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	651a      	str	r2, [r3, #80]	; 0x50
		this->DDSaddValue = this->frequencyCommand * this->frequencyScale;		// Scale the frequency command to get the DDS add value
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007400:	ee07 3a90 	vmov	s15, r3
 8007404:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800740e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007412:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007416:	ee17 2a90 	vmov	r2, s15
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	66da      	str	r2, [r3, #108]	; 0x6c
		stepNow = this->DDSaccumulator;                           				// Save the current DDS accumulator value
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007422:	60fb      	str	r3, [r7, #12]
		this->DDSaccumulator += this->DDSaddValue;           	  				// Update the DDS accumulator with the new add value
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800742c:	441a      	add	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	665a      	str	r2, [r3, #100]	; 0x64
		stepNow ^= this->DDSaccumulator;                          				// Test for changes in the low half of the DDS accumulator
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	4053      	eors	r3, r2
 800743a:	60fb      	str	r3, [r7, #12]
		stepNow &= (1L << this->stepBit);                         				// Check for the step bit
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007440:	2201      	movs	r2, #1
 8007442:	fa02 f303 	lsl.w	r3, r2, r3
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	4013      	ands	r3, r2
 800744a:	60fb      	str	r3, [r7, #12]
		this->rawCount = this->DDSaccumulator >> this->stepBit;   				// Update the position raw count
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007454:	411a      	asrs	r2, r3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	659a      	str	r2, [r3, #88]	; 0x58

		if (this->DDSaddValue > 0)												// The sign of the DDS add value indicates the desired direction
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800745e:	2b00      	cmp	r3, #0
 8007460:	dd04      	ble.n	800746c <_ZN7Stepgen10makePulsesEv+0xb0>
		{
			this->isForward = true;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800746a:	e003      	b.n	8007474 <_ZN7Stepgen10makePulsesEv+0xb8>
		}
		else //if (this->DDSaddValue < 0)
		{
			this->isForward = false;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		}

		if (stepNow)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d017      	beq.n	80074aa <_ZN7Stepgen10makePulsesEv+0xee>
		{
			this->directionPin->set(this->isForward);             		// Set direction pin
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007484:	4619      	mov	r1, r3
 8007486:	4610      	mov	r0, r2
 8007488:	f7fe f882 	bl	8005590 <_ZN3Pin3setEb>
			this->stepPin->set(true);										// Raise step pin - A4988 / DRV8825 stepper drivers only need 200ns setup time
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007490:	2101      	movs	r1, #1
 8007492:	4618      	mov	r0, r3
 8007494:	f7fe f87c 	bl	8005590 <_ZN3Pin3setEb>
			*(this->ptrFeedback) = this->DDSaccumulator;                     // Update position feedback via pointer to the data receiver
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80074a0:	601a      	str	r2, [r3, #0]
			this->isStepping = true;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		}
	}


}
 80074aa:	bf00      	nop
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <_ZN7Stepgen10stopPulsesEv>:


void Stepgen::stopPulses()
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b082      	sub	sp, #8
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
	this->stepPin->set(false);	// Reset step pin
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074be:	2100      	movs	r1, #0
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7fe f865 	bl	8005590 <_ZN3Pin3setEb>
	this->isStepping = false;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
}
 80074ce:	bf00      	nop
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <_ZN7StepgenD1Ev>:

#include "extern.h"

void createStepgen(void);

class Stepgen : public Module
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	4a0a      	ldr	r2, [pc, #40]	; (800750c <_ZN7StepgenD1Ev+0x34>)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	601a      	str	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	3334      	adds	r3, #52	; 0x34
 80074ea:	4618      	mov	r0, r3
 80074ec:	f011 fd79 	bl	8018fe2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	331c      	adds	r3, #28
 80074f4:	4618      	mov	r0, r3
 80074f6:	f011 fd74 	bl	8018fe2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7fe ff29 	bl	8006354 <_ZN6ModuleD1Ev>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4618      	mov	r0, r3
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	0801dfcc 	.word	0x0801dfcc

08007510 <_ZN7StepgenD0Ev>:
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7ff ffdd 	bl	80074d8 <_ZN7StepgenD1Ev>
 800751e:	217c      	movs	r1, #124	; 0x7c
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f011 fc81 	bl	8018e28 <_ZdlPvj>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4618      	mov	r0, r3
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	4618      	mov	r0, r3
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4618      	mov	r0, r3
 8007554:	f000 f8df 	bl	8007716 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE12_Vector_implC1Ev>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4618      	mov	r0, r3
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8007562:	b580      	push	{r7, lr}
 8007564:	b082      	sub	sp, #8
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4618      	mov	r0, r3
 800756e:	f7ff ffeb 	bl	8007548 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EEC1Ev>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4618      	mov	r0, r3
 8007576:	3708      	adds	r7, #8
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>:


using namespace std;

// Thread constructor
pruThread::pruThread(TIM_TypeDef* timer, IRQn_Type irq, uint32_t frequency) :
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	603b      	str	r3, [r7, #0]
 8007588:	4613      	mov	r3, r2
 800758a:	71fb      	strb	r3, [r7, #7]
	timer(timer),
	irq(irq),
	frequency(frequency)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	68ba      	ldr	r2, [r7, #8]
 8007590:	605a      	str	r2, [r3, #4]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	79fa      	ldrb	r2, [r7, #7]
 8007596:	721a      	strb	r2, [r3, #8]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	60da      	str	r2, [r3, #12]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	3314      	adds	r3, #20
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7ff ffdd 	bl	8007562 <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	3320      	adds	r3, #32
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7ff ffd8 	bl	8007562 <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	332c      	adds	r3, #44	; 0x2c
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 f8bd 	bl	8007736 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1Ev>
{
	printf("Creating thread %d\n", this->frequency);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	4619      	mov	r1, r3
 80075c2:	4804      	ldr	r0, [pc, #16]	; (80075d4 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem+0x58>)
 80075c4:	f011 ff42 	bl	801944c <iprintf>
}
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	0801aea8 	.word	0x0801aea8

080075d8 <_ZN9pruThread11startThreadEv>:

void pruThread::startThread(void)
{
 80075d8:	b590      	push	{r4, r7, lr}
 80075da:	b085      	sub	sp, #20
 80075dc:	af02      	add	r7, sp, #8
 80075de:	6078      	str	r0, [r7, #4]
	TimerPtr = new pruTimer(this->timer, this->irq, this->frequency, this);
 80075e0:	2014      	movs	r0, #20
 80075e2:	f011 fc32 	bl	8018e4a <_Znwj>
 80075e6:	4603      	mov	r3, r0
 80075e8:	461c      	mov	r4, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6859      	ldr	r1, [r3, #4]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68d8      	ldr	r0, [r3, #12]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	4603      	mov	r3, r0
 80075fe:	4620      	mov	r0, r4
 8007600:	f000 fd82 	bl	8008108 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	601c      	str	r4, [r3, #0]
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	bd90      	pop	{r4, r7, pc}

08007610 <_ZN9pruThread14registerModuleEP6Module>:
    this->TimerPtr->stopTimer();
}


void pruThread::registerModule(Module* module)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
	this->vThread.push_back(module);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	3314      	adds	r3, #20
 800761e:	463a      	mov	r2, r7
 8007620:	4611      	mov	r1, r2
 8007622:	4618      	mov	r0, r3
 8007624:	f000 f895 	bl	8007752 <_ZNSt6vectorIP6ModuleSaIS1_EE9push_backERKS1_>
}
 8007628:	bf00      	nop
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <_ZN9pruThread18registerModulePostEP6Module>:


void pruThread::registerModulePost(Module* module)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
	this->vThreadPost.push_back(module);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	3320      	adds	r3, #32
 800763e:	463a      	mov	r2, r7
 8007640:	4611      	mov	r1, r2
 8007642:	4618      	mov	r0, r3
 8007644:	f000 f885 	bl	8007752 <_ZNSt6vectorIP6ModuleSaIS1_EE9push_backERKS1_>
	this->hasThreadPost = true;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	741a      	strb	r2, [r3, #16]
}
 800764e:	bf00      	nop
 8007650:	3708      	adds	r7, #8
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <_ZN9pruThread3runEv>:


void pruThread::run(void)
{
 8007656:	b590      	push	{r4, r7, lr}
 8007658:	b085      	sub	sp, #20
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
	// iterate over the Thread pointer vector to run all instances of Module::runModule()
	for (iter = vThread.begin(); iter != vThread.end(); ++iter) (*iter)->runModule();
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	3314      	adds	r3, #20
 8007662:	687c      	ldr	r4, [r7, #4]
 8007664:	4618      	mov	r0, r3
 8007666:	f000 f899 	bl	800779c <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>
 800766a:	62e0      	str	r0, [r4, #44]	; 0x2c
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	3314      	adds	r3, #20
 8007676:	4618      	mov	r0, r3
 8007678:	f000 f8a0 	bl	80077bc <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>
 800767c:	4603      	mov	r3, r0
 800767e:	60bb      	str	r3, [r7, #8]
 8007680:	f107 0308 	add.w	r3, r7, #8
 8007684:	4619      	mov	r1, r3
 8007686:	4620      	mov	r0, r4
 8007688:	f000 f8a9 	bl	80077de <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00f      	beq.n	80076b2 <_ZN9pruThread3runEv+0x5c>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	332c      	adds	r3, #44	; 0x2c
 8007696:	4618      	mov	r0, r3
 8007698:	f000 f8c9 	bl	800782e <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>
 800769c:	4603      	mov	r3, r0
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7fe fe77 	bl	8006394 <_ZN6Module9runModuleEv>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	332c      	adds	r3, #44	; 0x2c
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 f8af 	bl	800780e <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>
 80076b0:	e7dc      	b.n	800766c <_ZN9pruThread3runEv+0x16>

	// iterate over the second vector that contains module pointers to run after (post) the main vector
	if (hasThreadPost)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	7c1b      	ldrb	r3, [r3, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d029      	beq.n	800770e <_ZN9pruThread3runEv+0xb8>
	{
		for (iter = vThreadPost.begin(); iter != vThreadPost.end(); ++iter) (*iter)->runModulePost();
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	3320      	adds	r3, #32
 80076be:	687c      	ldr	r4, [r7, #4]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 f86b 	bl	800779c <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>
 80076c6:	62e0      	str	r0, [r4, #44]	; 0x2c
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	3320      	adds	r3, #32
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 f872 	bl	80077bc <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>
 80076d8:	4603      	mov	r3, r0
 80076da:	60fb      	str	r3, [r7, #12]
 80076dc:	f107 030c 	add.w	r3, r7, #12
 80076e0:	4619      	mov	r1, r3
 80076e2:	4620      	mov	r0, r4
 80076e4:	f000 f87b 	bl	80077de <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00f      	beq.n	800770e <_ZN9pruThread3runEv+0xb8>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	332c      	adds	r3, #44	; 0x2c
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 f89b 	bl	800782e <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>
 80076f8:	4603      	mov	r3, r0
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7fe fe6b 	bl	80063d8 <_ZN6Module13runModulePostEv>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	332c      	adds	r3, #44	; 0x2c
 8007706:	4618      	mov	r0, r3
 8007708:	f000 f881 	bl	800780e <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>
 800770c:	e7dc      	b.n	80076c8 <_ZN9pruThread3runEv+0x72>
	}
}
 800770e:	bf00      	nop
 8007710:	3714      	adds	r7, #20
 8007712:	46bd      	mov	sp, r7
 8007714:	bd90      	pop	{r4, r7, pc}

08007716 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8007716:	b580      	push	{r7, lr}
 8007718:	b082      	sub	sp, #8
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f891 	bl	8007846 <_ZNSaIP6ModuleEC1Ev>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4618      	mov	r0, r3
 8007728:	f000 f899 	bl	800785e <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4618      	mov	r0, r3
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1Ev>:
      typedef typename __traits_type::value_type  	value_type;
      typedef typename __traits_type::difference_type 	difference_type;
      typedef typename __traits_type::reference 	reference;
      typedef typename __traits_type::pointer   	pointer;

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 8007736:	b480      	push	{r7}
 8007738:	b083      	sub	sp, #12
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
      : _M_current(_Iterator()) { }
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4618      	mov	r0, r3
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <_ZNSt6vectorIP6ModuleSaIS1_EE9push_backERKS1_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8007752:	b580      	push	{r7, lr}
 8007754:	b082      	sub	sp, #8
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
 800775a:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685a      	ldr	r2, [r3, #4]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	429a      	cmp	r2, r3
 8007766:	d00c      	beq.n	8007782 <_ZNSt6vectorIP6ModuleSaIS1_EE9push_backERKS1_+0x30>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	4619      	mov	r1, r3
 8007772:	f000 f8b4 	bl	80078de <_ZNSt16allocator_traitsISaIP6ModuleEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	1d1a      	adds	r2, r3, #4
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8007780:	e008      	b.n	8007794 <_ZNSt6vectorIP6ModuleSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f81a 	bl	80077bc <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>
 8007788:	4603      	mov	r3, r0
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	4619      	mov	r1, r3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f8ce 	bl	8007930 <_ZNSt6vectorIP6ModuleSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8007794:	bf00      	nop
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	f107 030c 	add.w	r3, r7, #12
 80077aa:	4611      	mov	r1, r2
 80077ac:	4618      	mov	r0, r3
 80077ae:	f000 f97b 	bl	8007aa8 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	1d1a      	adds	r2, r3, #4
 80077c8:	f107 030c 	add.w	r3, r7, #12
 80077cc:	4611      	mov	r1, r2
 80077ce:	4618      	mov	r0, r3
 80077d0:	f000 f96a 	bl	8007aa8 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80077de:	b590      	push	{r4, r7, lr}
 80077e0:	b083      	sub	sp, #12
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f96d 	bl	8007ac8 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 80077ee:	4603      	mov	r3, r0
 80077f0:	681c      	ldr	r4, [r3, #0]
 80077f2:	6838      	ldr	r0, [r7, #0]
 80077f4:	f000 f968 	bl	8007ac8 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 80077f8:	4603      	mov	r3, r0
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	429c      	cmp	r4, r3
 80077fe:	bf14      	ite	ne
 8007800:	2301      	movne	r3, #1
 8007802:	2300      	moveq	r3, #0
 8007804:	b2db      	uxtb	r3, r3
 8007806:	4618      	mov	r0, r3
 8007808:	370c      	adds	r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	bd90      	pop	{r4, r7, pc}

0800780e <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800780e:	b480      	push	{r7}
 8007810:	b083      	sub	sp, #12
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
	++_M_current;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	1d1a      	adds	r2, r3, #4
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	601a      	str	r2, [r3, #0]
	return *this;
 8007820:	687b      	ldr	r3, [r7, #4]
      }
 8007822:	4618      	mov	r0, r3
 8007824:	370c      	adds	r7, #12
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800782e:	b480      	push	{r7}
 8007830:	b083      	sub	sp, #12
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4618      	mov	r0, r3
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <_ZNSaIP6ModuleEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8007846:	b580      	push	{r7, lr}
 8007848:	b082      	sub	sp, #8
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f945 	bl	8007ade <_ZN9__gnu_cxx13new_allocatorIP6ModuleEC1Ev>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4618      	mov	r0, r3
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800785e:	b480      	push	{r7}
 8007860:	b083      	sub	sp, #12
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	601a      	str	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	605a      	str	r2, [r3, #4]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	609a      	str	r2, [r3, #8]
	{ }
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4618      	mov	r0, r3
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8007886:	b580      	push	{r7, lr}
 8007888:	b084      	sub	sp, #16
 800788a:	af00      	add	r7, sp, #0
 800788c:	60f8      	str	r0, [r7, #12]
 800788e:	60b9      	str	r1, [r7, #8]
 8007890:	607a      	str	r2, [r7, #4]
	if (__p)
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d005      	beq.n	80078a4 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	68b9      	ldr	r1, [r7, #8]
 800789e:	4618      	mov	r0, r3
 80078a0:	f000 f928 	bl	8007af4 <_ZNSt16allocator_traitsISaIP6ModuleEE10deallocateERS2_PS1_j>
      }
 80078a4:	bf00      	nop
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4618      	mov	r0, r3
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <_ZSt8_DestroyIPP6ModuleS1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b084      	sub	sp, #16
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	60f8      	str	r0, [r7, #12]
 80078ca:	60b9      	str	r1, [r7, #8]
 80078cc:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80078ce:	68b9      	ldr	r1, [r7, #8]
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f000 f91e 	bl	8007b12 <_ZSt8_DestroyIPP6ModuleEvT_S3_>
    }
 80078d6:	bf00      	nop
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <_ZNSt16allocator_traitsISaIP6ModuleEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80078de:	b580      	push	{r7, lr}
 80078e0:	b084      	sub	sp, #16
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	60f8      	str	r0, [r7, #12]
 80078e6:	60b9      	str	r1, [r7, #8]
 80078e8:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f91e 	bl	8007b2c <_ZSt7forwardIRKP6ModuleEOT_RNSt16remove_referenceIS4_E4typeE>
 80078f0:	4603      	mov	r3, r0
 80078f2:	461a      	mov	r2, r3
 80078f4:	68b9      	ldr	r1, [r7, #8]
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f000 f923 	bl	8007b42 <_ZN9__gnu_cxx13new_allocatorIP6ModuleE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 80078fc:	bf00      	nop
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <_ZNSt6vectorIP6ModuleSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800790a:	4618      	mov	r0, r3
 800790c:	f000 f805 	bl	800791a <_ZNSt6vectorIP6ModuleSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8007910:	4603      	mov	r3, r0
      }
 8007912:	4618      	mov	r0, r3
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <_ZNSt6vectorIP6ModuleSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800791a:	b480      	push	{r7}
 800791c:	b083      	sub	sp, #12
 800791e:	af00      	add	r7, sp, #0
 8007920:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8007922:	2301      	movs	r3, #1
      }
 8007924:	4618      	mov	r0, r3
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <_ZNSt6vectorIP6ModuleSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8007930:	b5b0      	push	{r4, r5, r7, lr}
 8007932:	b08c      	sub	sp, #48	; 0x30
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 800793c:	4a59      	ldr	r2, [pc, #356]	; (8007aa4 <_ZNSt6vectorIP6ModuleSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 800793e:	2101      	movs	r1, #1
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f000 f914 	bl	8007b6e <_ZNKSt6vectorIP6ModuleSaIS1_EE12_M_check_lenEjPKc>
 8007946:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f7ff ff21 	bl	800779c <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>
 800795a:	4603      	mov	r3, r0
 800795c:	617b      	str	r3, [r7, #20]
 800795e:	f107 0214 	add.w	r2, r7, #20
 8007962:	f107 0308 	add.w	r3, r7, #8
 8007966:	4611      	mov	r1, r2
 8007968:	4618      	mov	r0, r3
 800796a:	f000 f947 	bl	8007bfc <_ZN9__gnu_cxxmiIPP6ModuleSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800796e:	4603      	mov	r3, r0
 8007970:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007976:	4618      	mov	r0, r3
 8007978:	f000 f955 	bl	8007c26 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE11_M_allocateEj>
 800797c:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8007982:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8007988:	69ba      	ldr	r2, [r7, #24]
 800798a:	18d5      	adds	r5, r2, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f8cd 	bl	8007b2c <_ZSt7forwardIRKP6ModuleEOT_RNSt16remove_referenceIS4_E4typeE>
 8007992:	4603      	mov	r3, r0
 8007994:	461a      	mov	r2, r3
 8007996:	4629      	mov	r1, r5
 8007998:	4620      	mov	r0, r4
 800799a:	f7ff ffa0 	bl	80078de <_ZNSt16allocator_traitsISaIP6ModuleEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800799e:	2300      	movs	r3, #0
 80079a0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80079a2:	f7ff ffaf 	bl	8007904 <_ZNSt6vectorIP6ModuleSaIS1_EE15_S_use_relocateEv>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d027      	beq.n	80079fc <_ZNSt6vectorIP6ModuleSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80079ac:	f107 0308 	add.w	r3, r7, #8
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 f889 	bl	8007ac8 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 80079b6:	4603      	mov	r3, r0
 80079b8:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	4618      	mov	r0, r3
 80079be:	f7ff ff75 	bl	80078ac <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE19_M_get_Tp_allocatorEv>
 80079c2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	4621      	mov	r1, r4
 80079c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079ca:	f000 f940 	bl	8007c4e <_ZNSt6vectorIP6ModuleSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80079ce:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80079d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d2:	3304      	adds	r3, #4
 80079d4:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80079d6:	f107 0308 	add.w	r3, r7, #8
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 f874 	bl	8007ac8 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 80079e0:	4603      	mov	r3, r0
 80079e2:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7ff ff60 	bl	80078ac <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE19_M_get_Tp_allocatorEv>
 80079ec:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80079ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079f0:	6a39      	ldr	r1, [r7, #32]
 80079f2:	4620      	mov	r0, r4
 80079f4:	f000 f92b 	bl	8007c4e <_ZNSt6vectorIP6ModuleSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80079f8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80079fa:	e026      	b.n	8007a4a <_ZNSt6vectorIP6ModuleSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 80079fc:	f107 0308 	add.w	r3, r7, #8
 8007a00:	4618      	mov	r0, r3
 8007a02:	f000 f861 	bl	8007ac8 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 8007a06:	4603      	mov	r3, r0
 8007a08:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7ff ff4d 	bl	80078ac <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE19_M_get_Tp_allocatorEv>
 8007a12:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8007a14:	69ba      	ldr	r2, [r7, #24]
 8007a16:	4621      	mov	r1, r4
 8007a18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a1a:	f000 f92c 	bl	8007c76 <_ZSt34__uninitialized_move_if_noexcept_aIPP6ModuleS2_SaIS1_EET0_T_S5_S4_RT1_>
 8007a1e:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8007a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a22:	3304      	adds	r3, #4
 8007a24:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8007a26:	f107 0308 	add.w	r3, r7, #8
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 f84c 	bl	8007ac8 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 8007a30:	4603      	mov	r3, r0
 8007a32:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7ff ff38 	bl	80078ac <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE19_M_get_Tp_allocatorEv>
 8007a3c:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8007a3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a40:	6a39      	ldr	r1, [r7, #32]
 8007a42:	4620      	mov	r0, r4
 8007a44:	f000 f917 	bl	8007c76 <_ZSt34__uninitialized_move_if_noexcept_aIPP6ModuleS2_SaIS1_EET0_T_S5_S4_RT1_>
 8007a48:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8007a4a:	f7ff ff5b 	bl	8007904 <_ZNSt6vectorIP6ModuleSaIS1_EE15_S_use_relocateEv>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	f083 0301 	eor.w	r3, r3, #1
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d009      	beq.n	8007a6e <_ZNSt6vectorIP6ModuleSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7ff ff25 	bl	80078ac <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE19_M_get_Tp_allocatorEv>
 8007a62:	4603      	mov	r3, r0
 8007a64:	461a      	mov	r2, r3
 8007a66:	6a39      	ldr	r1, [r7, #32]
 8007a68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a6a:	f7ff ff2a 	bl	80078c2 <_ZSt8_DestroyIPP6ModuleS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8007a6e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	689a      	ldr	r2, [r3, #8]
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a7e:	f7ff ff02 	bl	8007886 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	69ba      	ldr	r2, [r7, #24]
 8007a86:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a8c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8007a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	69ba      	ldr	r2, [r7, #24]
 8007a94:	441a      	add	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	609a      	str	r2, [r3, #8]
    }
 8007a9a:	bf00      	nop
 8007a9c:	3730      	adds	r7, #48	; 0x30
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bdb0      	pop	{r4, r5, r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	0801aebc 	.word	0x0801aebc

08007aa8 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	601a      	str	r2, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4618      	mov	r0, r3
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	370c      	adds	r7, #12
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <_ZN9__gnu_cxx13new_allocatorIP6ModuleEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8007ade:	b480      	push	{r7}
 8007ae0:	b083      	sub	sp, #12
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <_ZNSt16allocator_traitsISaIP6ModuleEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	68b9      	ldr	r1, [r7, #8]
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 f8cf 	bl	8007ca8 <_ZN9__gnu_cxx13new_allocatorIP6ModuleE10deallocateEPS2_j>
 8007b0a:	bf00      	nop
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <_ZSt8_DestroyIPP6ModuleEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b082      	sub	sp, #8
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
 8007b1a:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f8cf 	bl	8007cc2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6ModuleEEvT_S5_>
    }
 8007b24:	bf00      	nop
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <_ZSt7forwardIRKP6ModuleEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4618      	mov	r0, r3
 8007b38:	370c      	adds	r7, #12
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <_ZN9__gnu_cxx13new_allocatorIP6ModuleE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8007b42:	b590      	push	{r4, r7, lr}
 8007b44:	b085      	sub	sp, #20
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	60f8      	str	r0, [r7, #12]
 8007b4a:	60b9      	str	r1, [r7, #8]
 8007b4c:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7ff ffec 	bl	8007b2c <_ZSt7forwardIRKP6ModuleEOT_RNSt16remove_referenceIS4_E4typeE>
 8007b54:	4603      	mov	r3, r0
 8007b56:	681c      	ldr	r4, [r3, #0]
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	2004      	movs	r0, #4
 8007b5e:	f7ff fce7 	bl	8007530 <_ZnwjPv>
 8007b62:	4603      	mov	r3, r0
 8007b64:	601c      	str	r4, [r3, #0]
 8007b66:	bf00      	nop
 8007b68:	3714      	adds	r7, #20
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd90      	pop	{r4, r7, pc}

08007b6e <_ZNKSt6vectorIP6ModuleSaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8007b6e:	b590      	push	{r4, r7, lr}
 8007b70:	b087      	sub	sp, #28
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	60f8      	str	r0, [r7, #12]
 8007b76:	60b9      	str	r1, [r7, #8]
 8007b78:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f000 f8ac 	bl	8007cd8 <_ZNKSt6vectorIP6ModuleSaIS1_EE8max_sizeEv>
 8007b80:	4604      	mov	r4, r0
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f000 f8b9 	bl	8007cfa <_ZNKSt6vectorIP6ModuleSaIS1_EE4sizeEv>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	1ae2      	subs	r2, r4, r3
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	bf34      	ite	cc
 8007b92:	2301      	movcc	r3, #1
 8007b94:	2300      	movcs	r3, #0
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d002      	beq.n	8007ba2 <_ZNKSt6vectorIP6ModuleSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f011 f970 	bl	8018e82 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f000 f8a9 	bl	8007cfa <_ZNKSt6vectorIP6ModuleSaIS1_EE4sizeEv>
 8007ba8:	4604      	mov	r4, r0
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f000 f8a5 	bl	8007cfa <_ZNKSt6vectorIP6ModuleSaIS1_EE4sizeEv>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	613b      	str	r3, [r7, #16]
 8007bb4:	f107 0208 	add.w	r2, r7, #8
 8007bb8:	f107 0310 	add.w	r3, r7, #16
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 f8ab 	bl	8007d1a <_ZSt3maxIjERKT_S2_S2_>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4423      	add	r3, r4
 8007bca:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f000 f894 	bl	8007cfa <_ZNKSt6vectorIP6ModuleSaIS1_EE4sizeEv>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d306      	bcc.n	8007be8 <_ZNKSt6vectorIP6ModuleSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f000 f87c 	bl	8007cd8 <_ZNKSt6vectorIP6ModuleSaIS1_EE8max_sizeEv>
 8007be0:	4602      	mov	r2, r0
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d904      	bls.n	8007bf2 <_ZNKSt6vectorIP6ModuleSaIS1_EE12_M_check_lenEjPKc+0x84>
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f000 f875 	bl	8007cd8 <_ZNKSt6vectorIP6ModuleSaIS1_EE8max_sizeEv>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	e000      	b.n	8007bf4 <_ZNKSt6vectorIP6ModuleSaIS1_EE12_M_check_lenEjPKc+0x86>
 8007bf2:	697b      	ldr	r3, [r7, #20]
      }
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	371c      	adds	r7, #28
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd90      	pop	{r4, r7, pc}

08007bfc <_ZN9__gnu_cxxmiIPP6ModuleSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8007bfc:	b590      	push	{r4, r7, lr}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7ff ff5e 	bl	8007ac8 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	681c      	ldr	r4, [r3, #0]
 8007c10:	6838      	ldr	r0, [r7, #0]
 8007c12:	f7ff ff59 	bl	8007ac8 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 8007c16:	4603      	mov	r3, r0
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	1ae3      	subs	r3, r4, r3
 8007c1c:	109b      	asrs	r3, r3, #2
 8007c1e:	4618      	mov	r0, r3
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd90      	pop	{r4, r7, pc}

08007c26 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b082      	sub	sp, #8
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d006      	beq.n	8007c44 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE11_M_allocateEj+0x1e>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6839      	ldr	r1, [r7, #0]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 f881 	bl	8007d42 <_ZNSt16allocator_traitsISaIP6ModuleEE8allocateERS2_j>
 8007c40:	4603      	mov	r3, r0
 8007c42:	e000      	b.n	8007c46 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE11_M_allocateEj+0x20>
 8007c44:	2300      	movs	r3, #0
      }
 8007c46:	4618      	mov	r0, r3
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <_ZNSt6vectorIP6ModuleSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8007c4e:	b590      	push	{r4, r7, lr}
 8007c50:	b089      	sub	sp, #36	; 0x24
 8007c52:	af02      	add	r7, sp, #8
 8007c54:	60f8      	str	r0, [r7, #12]
 8007c56:	60b9      	str	r1, [r7, #8]
 8007c58:	607a      	str	r2, [r7, #4]
 8007c5a:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8007c5c:	f88d 4000 	strb.w	r4, [sp]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	68b9      	ldr	r1, [r7, #8]
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f000 f87a 	bl	8007d60 <_ZNSt6vectorIP6ModuleSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8007c6c:	4603      	mov	r3, r0
      }
 8007c6e:	4618      	mov	r0, r3
 8007c70:	371c      	adds	r7, #28
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd90      	pop	{r4, r7, pc}

08007c76 <_ZSt34__uninitialized_move_if_noexcept_aIPP6ModuleS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8007c76:	b590      	push	{r4, r7, lr}
 8007c78:	b085      	sub	sp, #20
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	60f8      	str	r0, [r7, #12]
 8007c7e:	60b9      	str	r1, [r7, #8]
 8007c80:	607a      	str	r2, [r7, #4]
 8007c82:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f000 f87d 	bl	8007d84 <_ZSt32__make_move_if_noexcept_iteratorIP6ModuleSt13move_iteratorIPS1_EET0_PT_>
 8007c8a:	4604      	mov	r4, r0
 8007c8c:	68b8      	ldr	r0, [r7, #8]
 8007c8e:	f000 f879 	bl	8007d84 <_ZSt32__make_move_if_noexcept_iteratorIP6ModuleSt13move_iteratorIPS1_EET0_PT_>
 8007c92:	4601      	mov	r1, r0
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f000 f882 	bl	8007da2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP6ModuleES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8007c9e:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3714      	adds	r7, #20
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd90      	pop	{r4, r7, pc}

08007ca8 <_ZN9__gnu_cxx13new_allocatorIP6ModuleE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8007cb4:	68b8      	ldr	r0, [r7, #8]
 8007cb6:	f011 f8b5 	bl	8018e24 <_ZdlPv>
      }
 8007cba:	bf00      	nop
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6ModuleEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8007cc2:	b480      	push	{r7}
 8007cc4:	b083      	sub	sp, #12
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	6039      	str	r1, [r7, #0]
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <_ZNKSt6vectorIP6ModuleSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 f888 	bl	8007df8 <_ZNKSt12_Vector_baseIP6ModuleSaIS1_EE19_M_get_Tp_allocatorEv>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	4618      	mov	r0, r3
 8007cec:	f000 f86a 	bl	8007dc4 <_ZNSt6vectorIP6ModuleSaIS1_EE11_S_max_sizeERKS2_>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3708      	adds	r7, #8
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <_ZNKSt6vectorIP6ModuleSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8007cfa:	b480      	push	{r7}
 8007cfc:	b083      	sub	sp, #12
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685a      	ldr	r2, [r3, #4]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	109b      	asrs	r3, r3, #2
 8007d0e:	4618      	mov	r0, r3
 8007d10:	370c      	adds	r7, #12
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8007d1a:	b480      	push	{r7}
 8007d1c:	b083      	sub	sp, #12
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
 8007d22:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d201      	bcs.n	8007d34 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	e000      	b.n	8007d36 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8007d34:	687b      	ldr	r3, [r7, #4]
    }
 8007d36:	4618      	mov	r0, r3
 8007d38:	370c      	adds	r7, #12
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr

08007d42 <_ZNSt16allocator_traitsISaIP6ModuleEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b082      	sub	sp, #8
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
 8007d4a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	6839      	ldr	r1, [r7, #0]
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f85c 	bl	8007e0e <_ZN9__gnu_cxx13new_allocatorIP6ModuleE8allocateEjPKv>
 8007d56:	4603      	mov	r3, r0
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3708      	adds	r7, #8
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <_ZNSt6vectorIP6ModuleSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
 8007d6c:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	68b9      	ldr	r1, [r7, #8]
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f000 f868 	bl	8007e4a <_ZSt12__relocate_aIPP6ModuleS2_SaIS1_EET0_T_S5_S4_RT1_>
 8007d7a:	4603      	mov	r3, r0
      }
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <_ZSt32__make_move_if_noexcept_iteratorIP6ModuleSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8007d8c:	f107 030c 	add.w	r3, r7, #12
 8007d90:	6879      	ldr	r1, [r7, #4]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 f876 	bl	8007e84 <_ZNSt13move_iteratorIPP6ModuleEC1ES2_>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP6ModuleES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b084      	sub	sp, #16
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	60f8      	str	r0, [r7, #12]
 8007daa:	60b9      	str	r1, [r7, #8]
 8007dac:	607a      	str	r2, [r7, #4]
 8007dae:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	68b9      	ldr	r1, [r7, #8]
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f000 f874 	bl	8007ea2 <_ZSt18uninitialized_copyISt13move_iteratorIPP6ModuleES3_ET0_T_S6_S5_>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <_ZNSt6vectorIP6ModuleSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8007dcc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8007dd0:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f877 	bl	8007ec6 <_ZNSt16allocator_traitsISaIP6ModuleEE8max_sizeERKS2_>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8007ddc:	f107 0208 	add.w	r2, r7, #8
 8007de0:	f107 030c 	add.w	r3, r7, #12
 8007de4:	4611      	mov	r1, r2
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 f879 	bl	8007ede <_ZSt3minIjERKT_S2_S2_>
 8007dec:	4603      	mov	r3, r0
 8007dee:	681b      	ldr	r3, [r3, #0]
      }
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <_ZNKSt12_Vector_baseIP6ModuleSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4618      	mov	r0, r3
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr

08007e0e <_ZN9__gnu_cxx13new_allocatorIP6ModuleE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b084      	sub	sp, #16
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	60f8      	str	r0, [r7, #12]
 8007e16:	60b9      	str	r1, [r7, #8]
 8007e18:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f000 f873 	bl	8007f06 <_ZNK9__gnu_cxx13new_allocatorIP6ModuleE8max_sizeEv>
 8007e20:	4602      	mov	r2, r0
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	4293      	cmp	r3, r2
 8007e26:	bf8c      	ite	hi
 8007e28:	2301      	movhi	r3, #1
 8007e2a:	2300      	movls	r3, #0
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <_ZN9__gnu_cxx13new_allocatorIP6ModuleE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007e32:	f011 f820 	bl	8018e76 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f011 f805 	bl	8018e4a <_Znwj>
 8007e40:	4603      	mov	r3, r0
      }
 8007e42:	4618      	mov	r0, r3
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <_ZSt12__relocate_aIPP6ModuleS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8007e4a:	b5b0      	push	{r4, r5, r7, lr}
 8007e4c:	b084      	sub	sp, #16
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	60f8      	str	r0, [r7, #12]
 8007e52:	60b9      	str	r1, [r7, #8]
 8007e54:	607a      	str	r2, [r7, #4]
 8007e56:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f000 f860 	bl	8007f1e <_ZSt12__niter_baseIPP6ModuleET_S3_>
 8007e5e:	4604      	mov	r4, r0
 8007e60:	68b8      	ldr	r0, [r7, #8]
 8007e62:	f000 f85c 	bl	8007f1e <_ZSt12__niter_baseIPP6ModuleET_S3_>
 8007e66:	4605      	mov	r5, r0
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f858 	bl	8007f1e <_ZSt12__niter_baseIPP6ModuleET_S3_>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	4629      	mov	r1, r5
 8007e74:	4620      	mov	r0, r4
 8007e76:	f000 f85d 	bl	8007f34 <_ZSt14__relocate_a_1IP6ModuleS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8007e7a:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bdb0      	pop	{r4, r5, r7, pc}

08007e84 <_ZNSt13move_iteratorIPP6ModuleEC1ES2_>:
      move_iterator(iterator_type __i)
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4618      	mov	r0, r3
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <_ZSt18uninitialized_copyISt13move_iteratorIPP6ModuleES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b086      	sub	sp, #24
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	60f8      	str	r0, [r7, #12]
 8007eaa:	60b9      	str	r1, [r7, #8]
 8007eac:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	68b9      	ldr	r1, [r7, #8]
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f000 f85a 	bl	8007f70 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP6ModuleES5_EET0_T_S8_S7_>
 8007ebc:	4603      	mov	r3, r0
    }
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3718      	adds	r7, #24
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <_ZNSt16allocator_traitsISaIP6ModuleEE8max_sizeERKS2_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b082      	sub	sp, #8
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f819 	bl	8007f06 <_ZNK9__gnu_cxx13new_allocatorIP6ModuleE8max_sizeEv>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8007ede:	b480      	push	{r7}
 8007ee0:	b083      	sub	sp, #12
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
 8007ee6:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d201      	bcs.n	8007ef8 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	e000      	b.n	8007efa <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8007ef8:	687b      	ldr	r3, [r7, #4]
    }
 8007efa:	4618      	mov	r0, r3
 8007efc:	370c      	adds	r7, #12
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr

08007f06 <_ZNK9__gnu_cxx13new_allocatorIP6ModuleE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007f06:	b480      	push	{r7}
 8007f08:	b083      	sub	sp, #12
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007f0e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8007f12:	4618      	mov	r0, r3
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <_ZSt12__niter_baseIPP6ModuleET_S3_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    inline _Iterator
    __niter_base(_Iterator __it)
 8007f1e:	b480      	push	{r7}
 8007f20:	b083      	sub	sp, #12
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <_ZSt14__relocate_a_1IP6ModuleS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b086      	sub	sp, #24
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	607a      	str	r2, [r7, #4]
 8007f40:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	109b      	asrs	r3, r3, #2
 8007f4a:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	dd06      	ble.n	8007f60 <_ZSt14__relocate_a_1IP6ModuleS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	461a      	mov	r2, r3
 8007f58:	68f9      	ldr	r1, [r7, #12]
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f011 f9aa 	bl	80192b4 <memmove>
      return __result + __count;
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	4413      	add	r3, r2
    }
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3718      	adds	r7, #24
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP6ModuleES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	68b9      	ldr	r1, [r7, #8]
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f000 f805 	bl	8007f90 <_ZSt4copyISt13move_iteratorIPP6ModuleES3_ET0_T_S6_S5_>
 8007f86:	4603      	mov	r3, r0
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <_ZSt4copyISt13move_iteratorIPP6ModuleES3_ET0_T_S6_S5_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8007f90:	b590      	push	{r4, r7, lr}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f000 f80f 	bl	8007fc0 <_ZSt12__miter_baseIPP6ModuleEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	68b8      	ldr	r0, [r7, #8]
 8007fa6:	f000 f80b 	bl	8007fc0 <_ZSt12__miter_baseIPP6ModuleEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007faa:	4603      	mov	r3, r0
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	4619      	mov	r1, r3
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	f000 f816 	bl	8007fe2 <_ZSt14__copy_move_a2ILb1EPP6ModuleS2_ET1_T0_S4_S3_>
 8007fb6:	4603      	mov	r3, r0
    }
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd90      	pop	{r4, r7, pc}

08007fc0 <_ZSt12__miter_baseIPP6ModuleEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8007fc8:	1d3b      	adds	r3, r7, #4
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 f82c 	bl	8008028 <_ZNKSt13move_iteratorIPP6ModuleE4baseEv>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 f834 	bl	8008040 <_ZSt12__miter_baseIPP6ModuleET_S3_>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <_ZSt14__copy_move_a2ILb1EPP6ModuleS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8007fe2:	b5b0      	push	{r4, r5, r7, lr}
 8007fe4:	b084      	sub	sp, #16
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	60f8      	str	r0, [r7, #12]
 8007fea:	60b9      	str	r1, [r7, #8]
 8007fec:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f7ff ff95 	bl	8007f1e <_ZSt12__niter_baseIPP6ModuleET_S3_>
 8007ff4:	4604      	mov	r4, r0
 8007ff6:	68b8      	ldr	r0, [r7, #8]
 8007ff8:	f7ff ff91 	bl	8007f1e <_ZSt12__niter_baseIPP6ModuleET_S3_>
 8007ffc:	4605      	mov	r5, r0
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4618      	mov	r0, r3
 8008002:	f7ff ff8c 	bl	8007f1e <_ZSt12__niter_baseIPP6ModuleET_S3_>
 8008006:	4603      	mov	r3, r0
 8008008:	461a      	mov	r2, r3
 800800a:	4629      	mov	r1, r5
 800800c:	4620      	mov	r0, r4
 800800e:	f000 f822 	bl	8008056 <_ZSt13__copy_move_aILb1EPP6ModuleS2_ET1_T0_S4_S3_>
 8008012:	4602      	mov	r2, r0
 8008014:	1d3b      	adds	r3, r7, #4
 8008016:	4611      	mov	r1, r2
 8008018:	4618      	mov	r0, r3
 800801a:	f000 f82e 	bl	800807a <_ZSt12__niter_wrapIPP6ModuleET_RKS3_S3_>
 800801e:	4603      	mov	r3, r0
    }
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bdb0      	pop	{r4, r5, r7, pc}

08008028 <_ZNKSt13move_iteratorIPP6ModuleE4baseEv>:
      base() const
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4618      	mov	r0, r3
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <_ZSt12__miter_baseIPP6ModuleET_S3_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
    { return __it; }
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4618      	mov	r0, r3
 800804c:	370c      	adds	r7, #12
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <_ZSt13__copy_move_aILb1EPP6ModuleS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8008056:	b580      	push	{r7, lr}
 8008058:	b086      	sub	sp, #24
 800805a:	af00      	add	r7, sp, #0
 800805c:	60f8      	str	r0, [r7, #12]
 800805e:	60b9      	str	r1, [r7, #8]
 8008060:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8008062:	2301      	movs	r3, #1
 8008064:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	68b9      	ldr	r1, [r7, #8]
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	f000 f811 	bl	8008092 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP6ModuleEEPT_PKS5_S8_S6_>
 8008070:	4603      	mov	r3, r0
    }
 8008072:	4618      	mov	r0, r3
 8008074:	3718      	adds	r7, #24
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <_ZSt12__niter_wrapIPP6ModuleET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800807a:	b480      	push	{r7}
 800807c:	b083      	sub	sp, #12
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	6039      	str	r1, [r7, #0]
    { return __res; }
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	4618      	mov	r0, r3
 8008088:	370c      	adds	r7, #12
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP6ModuleEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8008092:	b580      	push	{r7, lr}
 8008094:	b086      	sub	sp, #24
 8008096:	af00      	add	r7, sp, #0
 8008098:	60f8      	str	r0, [r7, #12]
 800809a:	60b9      	str	r1, [r7, #8]
 800809c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	1ad3      	subs	r3, r2, r3
 80080a4:	109b      	asrs	r3, r3, #2
 80080a6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d006      	beq.n	80080bc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP6ModuleEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	461a      	mov	r2, r3
 80080b4:	68f9      	ldr	r1, [r7, #12]
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f011 f8fc 	bl	80192b4 <memmove>
	  return __result + _Num;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	4413      	add	r3, r2
	}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3718      	adds	r7, #24
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <__NVIC_EnableIRQ>:
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	4603      	mov	r3, r0
 80080d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	db0b      	blt.n	80080f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80080de:	79fb      	ldrb	r3, [r7, #7]
 80080e0:	f003 021f 	and.w	r2, r3, #31
 80080e4:	4907      	ldr	r1, [pc, #28]	; (8008104 <__NVIC_EnableIRQ+0x38>)
 80080e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080ea:	095b      	lsrs	r3, r3, #5
 80080ec:	2001      	movs	r0, #1
 80080ee:	fa00 f202 	lsl.w	r2, r0, r2
 80080f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80080f6:	bf00      	nop
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	e000e100 	.word	0xe000e100

08008108 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>:
#include "pruThread.h"



// Timer constructor
pruTimer::pruTimer(TIM_TypeDef* timer, IRQn_Type irq, uint32_t frequency, pruThread* ownerPtr):
 8008108:	b590      	push	{r4, r7, lr}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	603b      	str	r3, [r7, #0]
 8008114:	4613      	mov	r3, r2
 8008116:	71fb      	strb	r3, [r7, #7]
	timer(timer),
	irq(irq),
	frequency(frequency),
	timerOwnerPtr(ownerPtr)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	605a      	str	r2, [r3, #4]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	79fa      	ldrb	r2, [r7, #7]
 8008122:	721a      	strb	r2, [r3, #8]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	60da      	str	r2, [r3, #12]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6a3a      	ldr	r2, [r7, #32]
 800812e:	611a      	str	r2, [r3, #16]
{
	interruptPtr = new TimerInterrupt(this->irq, this);	// Instantiate a new Timer Interrupt object and pass "this" pointer
 8008130:	2008      	movs	r0, #8
 8008132:	f010 fe8a 	bl	8018e4a <_Znwj>
 8008136:	4603      	mov	r3, r0
 8008138:	461c      	mov	r4, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	4619      	mov	r1, r3
 8008144:	4620      	mov	r0, r4
 8008146:	f000 f88f 	bl	8008268 <_ZN14TimerInterruptC1EiP8pruTimer>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	601c      	str	r4, [r3, #0]

	this->startTimer();
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f000 f812 	bl	8008178 <_ZN8pruTimer10startTimerEv>
}
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	4618      	mov	r0, r3
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	bd90      	pop	{r4, r7, pc}

0800815e <_ZN8pruTimer9timerTickEv>:


void pruTimer::timerTick(void)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b082      	sub	sp, #8
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
	//Do something here
	this->timerOwnerPtr->run();
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	4618      	mov	r0, r3
 800816c:	f7ff fa73 	bl	8007656 <_ZN9pruThread3runEv>
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <_ZN8pruTimer10startTimerEv>:



void pruTimer::startTimer(void)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
    uint32_t TIM_CLK;

    if (this->timer == TIM9)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	4a31      	ldr	r2, [pc, #196]	; (800824c <_ZN8pruTimer10startTimerEv+0xd4>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d114      	bne.n	80081b4 <_ZN8pruTimer10startTimerEv+0x3c>
    {
        printf("	power on Timer 9\n\r");
 800818a:	4831      	ldr	r0, [pc, #196]	; (8008250 <_ZN8pruTimer10startTimerEv+0xd8>)
 800818c:	f011 f95e 	bl	801944c <iprintf>
        __TIM9_CLK_ENABLE();
 8008190:	2300      	movs	r3, #0
 8008192:	613b      	str	r3, [r7, #16]
 8008194:	4b2f      	ldr	r3, [pc, #188]	; (8008254 <_ZN8pruTimer10startTimerEv+0xdc>)
 8008196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008198:	4a2e      	ldr	r2, [pc, #184]	; (8008254 <_ZN8pruTimer10startTimerEv+0xdc>)
 800819a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800819e:	6453      	str	r3, [r2, #68]	; 0x44
 80081a0:	4b2c      	ldr	r3, [pc, #176]	; (8008254 <_ZN8pruTimer10startTimerEv+0xdc>)
 80081a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081a8:	613b      	str	r3, [r7, #16]
 80081aa:	693b      	ldr	r3, [r7, #16]
        TIM_CLK = APB1CLK;
 80081ac:	4b2a      	ldr	r3, [pc, #168]	; (8008258 <_ZN8pruTimer10startTimerEv+0xe0>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	617b      	str	r3, [r7, #20]
 80081b2:	e018      	b.n	80081e6 <_ZN8pruTimer10startTimerEv+0x6e>
    }
    else if (this->timer == TIM10)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	4a28      	ldr	r2, [pc, #160]	; (800825c <_ZN8pruTimer10startTimerEv+0xe4>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d113      	bne.n	80081e6 <_ZN8pruTimer10startTimerEv+0x6e>
    {
        printf("	power on Timer 10\n\r");
 80081be:	4828      	ldr	r0, [pc, #160]	; (8008260 <_ZN8pruTimer10startTimerEv+0xe8>)
 80081c0:	f011 f944 	bl	801944c <iprintf>
        __TIM10_CLK_ENABLE();
 80081c4:	2300      	movs	r3, #0
 80081c6:	60fb      	str	r3, [r7, #12]
 80081c8:	4b22      	ldr	r3, [pc, #136]	; (8008254 <_ZN8pruTimer10startTimerEv+0xdc>)
 80081ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081cc:	4a21      	ldr	r2, [pc, #132]	; (8008254 <_ZN8pruTimer10startTimerEv+0xdc>)
 80081ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081d2:	6453      	str	r3, [r2, #68]	; 0x44
 80081d4:	4b1f      	ldr	r3, [pc, #124]	; (8008254 <_ZN8pruTimer10startTimerEv+0xdc>)
 80081d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081dc:	60fb      	str	r3, [r7, #12]
 80081de:	68fb      	ldr	r3, [r7, #12]
        TIM_CLK = APB1CLK;
 80081e0:	4b1d      	ldr	r3, [pc, #116]	; (8008258 <_ZN8pruTimer10startTimerEv+0xe0>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	617b      	str	r3, [r7, #20]
    }


    //timer update frequency = TIM_CLK/(TIM_PSC+1)/(TIM_ARR + 1)

    this->timer->CR2 &= 0;                                            // UG used as trigg output
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	605a      	str	r2, [r3, #4]
    this->timer->PSC = TIM_PSC-1;                                     // prescaler
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	2203      	movs	r2, #3
 80081fa:	629a      	str	r2, [r3, #40]	; 0x28
    this->timer->ARR = ((TIM_CLK / TIM_PSC / this->frequency) - 1);   // period           
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	089a      	lsrs	r2, r3, #2
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	fbb2 f2f3 	udiv	r2, r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	3a01      	subs	r2, #1
 800820e:	62da      	str	r2, [r3, #44]	; 0x2c
    this->timer->EGR = TIM_EGR_UG;                                    // reinit the counter
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	615a      	str	r2, [r3, #20]
    this->timer->DIER = TIM_DIER_UIE;                                 // enable update interrupts
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	60da      	str	r2, [r3, #12]

    this->timer->CR1 |= TIM_CR1_CEN;                                  // enable timer
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	f042 0201 	orr.w	r2, r2, #1
 800822e:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(this->irq);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008236:	4618      	mov	r0, r3
 8008238:	f7ff ff48 	bl	80080cc <__NVIC_EnableIRQ>

    printf("	timer started\n");
 800823c:	4809      	ldr	r0, [pc, #36]	; (8008264 <_ZN8pruTimer10startTimerEv+0xec>)
 800823e:	f011 f98b 	bl	8019558 <puts>
}
 8008242:	bf00      	nop
 8008244:	3718      	adds	r7, #24
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	40014000 	.word	0x40014000
 8008250:	0801aed8 	.word	0x0801aed8
 8008254:	40023800 	.word	0x40023800
 8008258:	20000058 	.word	0x20000058
 800825c:	40014400 	.word	0x40014400
 8008260:	0801aeec 	.word	0x0801aeec
 8008264:	0801af04 	.word	0x0801af04

08008268 <_ZN14TimerInterruptC1EiP8pruTimer>:
#include "../interrupt/interrupt.h"
#include "timerInterrupt.h"
#include "timer.h"


TimerInterrupt::TimerInterrupt(int interruptNumber, pruTimer* owner)
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	4618      	mov	r0, r3
 8008278:	f7fd f956 	bl	8005528 <_ZN9InterruptC1Ev>
 800827c:	4a07      	ldr	r2, [pc, #28]	; (800829c <_ZN14TimerInterruptC1EiP8pruTimer+0x34>)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	4619      	mov	r1, r3
 800828c:	68b8      	ldr	r0, [r7, #8]
 800828e:	f7fd f95b 	bl	8005548 <_ZN9Interrupt8RegisterEiPS_>
}
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	4618      	mov	r0, r3
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	0801dff0 	.word	0x0801dff0

080082a0 <_ZN14TimerInterrupt11ISR_HandlerEv>:


void TimerInterrupt::ISR_Handler(void)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->timerTick();
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7ff ff56 	bl	800815e <_ZN8pruTimer9timerTickEv>
}
 80082b2:	bf00      	nop
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
	...

080082bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80082bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80082f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80082c0:	480d      	ldr	r0, [pc, #52]	; (80082f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80082c2:	490e      	ldr	r1, [pc, #56]	; (80082fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80082c4:	4a0e      	ldr	r2, [pc, #56]	; (8008300 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80082c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80082c8:	e002      	b.n	80082d0 <LoopCopyDataInit>

080082ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80082ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80082cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80082ce:	3304      	adds	r3, #4

080082d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80082d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80082d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80082d4:	d3f9      	bcc.n	80082ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80082d6:	4a0b      	ldr	r2, [pc, #44]	; (8008304 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80082d8:	4c0b      	ldr	r4, [pc, #44]	; (8008308 <LoopFillZerobss+0x26>)
  movs r3, #0
 80082da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80082dc:	e001      	b.n	80082e2 <LoopFillZerobss>

080082de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80082de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80082e0:	3204      	adds	r2, #4

080082e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80082e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80082e4:	d3fb      	bcc.n	80082de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80082e6:	f7fc fee1 	bl	80050ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80082ea:	f010 ff93 	bl	8019214 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80082ee:	f7fa fbe3 	bl	8002ab8 <main>
  bx  lr    
 80082f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80082f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80082f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80082fc:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8008300:	0801e2b8 	.word	0x0801e2b8
  ldr r2, =_sbss
 8008304:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8008308:	20006d54 	.word	0x20006d54

0800830c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800830c:	e7fe      	b.n	800830c <ADC_IRQHandler>
	...

08008310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008314:	4b0e      	ldr	r3, [pc, #56]	; (8008350 <HAL_Init+0x40>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a0d      	ldr	r2, [pc, #52]	; (8008350 <HAL_Init+0x40>)
 800831a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800831e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008320:	4b0b      	ldr	r3, [pc, #44]	; (8008350 <HAL_Init+0x40>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a0a      	ldr	r2, [pc, #40]	; (8008350 <HAL_Init+0x40>)
 8008326:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800832a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800832c:	4b08      	ldr	r3, [pc, #32]	; (8008350 <HAL_Init+0x40>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a07      	ldr	r2, [pc, #28]	; (8008350 <HAL_Init+0x40>)
 8008332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008336:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008338:	2003      	movs	r0, #3
 800833a:	f000 f965 	bl	8008608 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800833e:	200f      	movs	r0, #15
 8008340:	f000 f808 	bl	8008354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008344:	f7fc fd4e 	bl	8004de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	40023c00 	.word	0x40023c00

08008354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800835c:	4b12      	ldr	r3, [pc, #72]	; (80083a8 <HAL_InitTick+0x54>)
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	4b12      	ldr	r3, [pc, #72]	; (80083ac <HAL_InitTick+0x58>)
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	4619      	mov	r1, r3
 8008366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800836a:	fbb3 f3f1 	udiv	r3, r3, r1
 800836e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008372:	4618      	mov	r0, r3
 8008374:	f000 f981 	bl	800867a <HAL_SYSTICK_Config>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d001      	beq.n	8008382 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e00e      	b.n	80083a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2b0f      	cmp	r3, #15
 8008386:	d80a      	bhi.n	800839e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008388:	2200      	movs	r2, #0
 800838a:	6879      	ldr	r1, [r7, #4]
 800838c:	f04f 30ff 	mov.w	r0, #4294967295
 8008390:	f000 f945 	bl	800861e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008394:	4a06      	ldr	r2, [pc, #24]	; (80083b0 <HAL_InitTick+0x5c>)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	e000      	b.n	80083a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	20000058 	.word	0x20000058
 80083ac:	20000060 	.word	0x20000060
 80083b0:	2000005c 	.word	0x2000005c

080083b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80083b4:	b480      	push	{r7}
 80083b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80083b8:	4b06      	ldr	r3, [pc, #24]	; (80083d4 <HAL_IncTick+0x20>)
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	461a      	mov	r2, r3
 80083be:	4b06      	ldr	r3, [pc, #24]	; (80083d8 <HAL_IncTick+0x24>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4413      	add	r3, r2
 80083c4:	4a04      	ldr	r2, [pc, #16]	; (80083d8 <HAL_IncTick+0x24>)
 80083c6:	6013      	str	r3, [r2, #0]
}
 80083c8:	bf00      	nop
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	20000060 	.word	0x20000060
 80083d8:	20000684 	.word	0x20000684

080083dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80083dc:	b480      	push	{r7}
 80083de:	af00      	add	r7, sp, #0
  return uwTick;
 80083e0:	4b03      	ldr	r3, [pc, #12]	; (80083f0 <HAL_GetTick+0x14>)
 80083e2:	681b      	ldr	r3, [r3, #0]
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	20000684 	.word	0x20000684

080083f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80083fc:	f7ff ffee 	bl	80083dc <HAL_GetTick>
 8008400:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840c:	d005      	beq.n	800841a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800840e:	4b0a      	ldr	r3, [pc, #40]	; (8008438 <HAL_Delay+0x44>)
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	461a      	mov	r2, r3
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	4413      	add	r3, r2
 8008418:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800841a:	bf00      	nop
 800841c:	f7ff ffde 	bl	80083dc <HAL_GetTick>
 8008420:	4602      	mov	r2, r0
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	429a      	cmp	r2, r3
 800842a:	d8f7      	bhi.n	800841c <HAL_Delay+0x28>
  {
  }
}
 800842c:	bf00      	nop
 800842e:	bf00      	nop
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	20000060 	.word	0x20000060

0800843c <__NVIC_SetPriorityGrouping>:
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f003 0307 	and.w	r3, r3, #7
 800844a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800844c:	4b0c      	ldr	r3, [pc, #48]	; (8008480 <__NVIC_SetPriorityGrouping+0x44>)
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008452:	68ba      	ldr	r2, [r7, #8]
 8008454:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008458:	4013      	ands	r3, r2
 800845a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008464:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800846c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800846e:	4a04      	ldr	r2, [pc, #16]	; (8008480 <__NVIC_SetPriorityGrouping+0x44>)
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	60d3      	str	r3, [r2, #12]
}
 8008474:	bf00      	nop
 8008476:	3714      	adds	r7, #20
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	e000ed00 	.word	0xe000ed00

08008484 <__NVIC_GetPriorityGrouping>:
{
 8008484:	b480      	push	{r7}
 8008486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008488:	4b04      	ldr	r3, [pc, #16]	; (800849c <__NVIC_GetPriorityGrouping+0x18>)
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	0a1b      	lsrs	r3, r3, #8
 800848e:	f003 0307 	and.w	r3, r3, #7
}
 8008492:	4618      	mov	r0, r3
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr
 800849c:	e000ed00 	.word	0xe000ed00

080084a0 <__NVIC_EnableIRQ>:
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	4603      	mov	r3, r0
 80084a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80084aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	db0b      	blt.n	80084ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80084b2:	79fb      	ldrb	r3, [r7, #7]
 80084b4:	f003 021f 	and.w	r2, r3, #31
 80084b8:	4907      	ldr	r1, [pc, #28]	; (80084d8 <__NVIC_EnableIRQ+0x38>)
 80084ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084be:	095b      	lsrs	r3, r3, #5
 80084c0:	2001      	movs	r0, #1
 80084c2:	fa00 f202 	lsl.w	r2, r0, r2
 80084c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80084ca:	bf00      	nop
 80084cc:	370c      	adds	r7, #12
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	e000e100 	.word	0xe000e100

080084dc <__NVIC_SetPriority>:
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	4603      	mov	r3, r0
 80084e4:	6039      	str	r1, [r7, #0]
 80084e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80084e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	db0a      	blt.n	8008506 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	b2da      	uxtb	r2, r3
 80084f4:	490c      	ldr	r1, [pc, #48]	; (8008528 <__NVIC_SetPriority+0x4c>)
 80084f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084fa:	0112      	lsls	r2, r2, #4
 80084fc:	b2d2      	uxtb	r2, r2
 80084fe:	440b      	add	r3, r1
 8008500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008504:	e00a      	b.n	800851c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	b2da      	uxtb	r2, r3
 800850a:	4908      	ldr	r1, [pc, #32]	; (800852c <__NVIC_SetPriority+0x50>)
 800850c:	79fb      	ldrb	r3, [r7, #7]
 800850e:	f003 030f 	and.w	r3, r3, #15
 8008512:	3b04      	subs	r3, #4
 8008514:	0112      	lsls	r2, r2, #4
 8008516:	b2d2      	uxtb	r2, r2
 8008518:	440b      	add	r3, r1
 800851a:	761a      	strb	r2, [r3, #24]
}
 800851c:	bf00      	nop
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr
 8008528:	e000e100 	.word	0xe000e100
 800852c:	e000ed00 	.word	0xe000ed00

08008530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008530:	b480      	push	{r7}
 8008532:	b089      	sub	sp, #36	; 0x24
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f003 0307 	and.w	r3, r3, #7
 8008542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	f1c3 0307 	rsb	r3, r3, #7
 800854a:	2b04      	cmp	r3, #4
 800854c:	bf28      	it	cs
 800854e:	2304      	movcs	r3, #4
 8008550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	3304      	adds	r3, #4
 8008556:	2b06      	cmp	r3, #6
 8008558:	d902      	bls.n	8008560 <NVIC_EncodePriority+0x30>
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	3b03      	subs	r3, #3
 800855e:	e000      	b.n	8008562 <NVIC_EncodePriority+0x32>
 8008560:	2300      	movs	r3, #0
 8008562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008564:	f04f 32ff 	mov.w	r2, #4294967295
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	fa02 f303 	lsl.w	r3, r2, r3
 800856e:	43da      	mvns	r2, r3
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	401a      	ands	r2, r3
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008578:	f04f 31ff 	mov.w	r1, #4294967295
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	fa01 f303 	lsl.w	r3, r1, r3
 8008582:	43d9      	mvns	r1, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008588:	4313      	orrs	r3, r2
         );
}
 800858a:	4618      	mov	r0, r3
 800858c:	3724      	adds	r7, #36	; 0x24
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
	...

08008598 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8008598:	b480      	push	{r7}
 800859a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800859c:	f3bf 8f4f 	dsb	sy
}
 80085a0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80085a2:	4b06      	ldr	r3, [pc, #24]	; (80085bc <__NVIC_SystemReset+0x24>)
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80085aa:	4904      	ldr	r1, [pc, #16]	; (80085bc <__NVIC_SystemReset+0x24>)
 80085ac:	4b04      	ldr	r3, [pc, #16]	; (80085c0 <__NVIC_SystemReset+0x28>)
 80085ae:	4313      	orrs	r3, r2
 80085b0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80085b2:	f3bf 8f4f 	dsb	sy
}
 80085b6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80085b8:	bf00      	nop
 80085ba:	e7fd      	b.n	80085b8 <__NVIC_SystemReset+0x20>
 80085bc:	e000ed00 	.word	0xe000ed00
 80085c0:	05fa0004 	.word	0x05fa0004

080085c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	3b01      	subs	r3, #1
 80085d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80085d4:	d301      	bcc.n	80085da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80085d6:	2301      	movs	r3, #1
 80085d8:	e00f      	b.n	80085fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80085da:	4a0a      	ldr	r2, [pc, #40]	; (8008604 <SysTick_Config+0x40>)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	3b01      	subs	r3, #1
 80085e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80085e2:	210f      	movs	r1, #15
 80085e4:	f04f 30ff 	mov.w	r0, #4294967295
 80085e8:	f7ff ff78 	bl	80084dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80085ec:	4b05      	ldr	r3, [pc, #20]	; (8008604 <SysTick_Config+0x40>)
 80085ee:	2200      	movs	r2, #0
 80085f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80085f2:	4b04      	ldr	r3, [pc, #16]	; (8008604 <SysTick_Config+0x40>)
 80085f4:	2207      	movs	r2, #7
 80085f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3708      	adds	r7, #8
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	e000e010 	.word	0xe000e010

08008608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f7ff ff13 	bl	800843c <__NVIC_SetPriorityGrouping>
}
 8008616:	bf00      	nop
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800861e:	b580      	push	{r7, lr}
 8008620:	b086      	sub	sp, #24
 8008622:	af00      	add	r7, sp, #0
 8008624:	4603      	mov	r3, r0
 8008626:	60b9      	str	r1, [r7, #8]
 8008628:	607a      	str	r2, [r7, #4]
 800862a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800862c:	2300      	movs	r3, #0
 800862e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008630:	f7ff ff28 	bl	8008484 <__NVIC_GetPriorityGrouping>
 8008634:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	68b9      	ldr	r1, [r7, #8]
 800863a:	6978      	ldr	r0, [r7, #20]
 800863c:	f7ff ff78 	bl	8008530 <NVIC_EncodePriority>
 8008640:	4602      	mov	r2, r0
 8008642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008646:	4611      	mov	r1, r2
 8008648:	4618      	mov	r0, r3
 800864a:	f7ff ff47 	bl	80084dc <__NVIC_SetPriority>
}
 800864e:	bf00      	nop
 8008650:	3718      	adds	r7, #24
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b082      	sub	sp, #8
 800865a:	af00      	add	r7, sp, #0
 800865c:	4603      	mov	r3, r0
 800865e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008664:	4618      	mov	r0, r3
 8008666:	f7ff ff1b 	bl	80084a0 <__NVIC_EnableIRQ>
}
 800866a:	bf00      	nop
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8008676:	f7ff ff8f 	bl	8008598 <__NVIC_SystemReset>

0800867a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b082      	sub	sp, #8
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f7ff ff9e 	bl	80085c4 <SysTick_Config>
 8008688:	4603      	mov	r3, r0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
	...

08008694 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b086      	sub	sp, #24
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800869c:	2300      	movs	r3, #0
 800869e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80086a0:	f7ff fe9c 	bl	80083dc <HAL_GetTick>
 80086a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d101      	bne.n	80086b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e099      	b.n	80087e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2202      	movs	r2, #2
 80086b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f022 0201 	bic.w	r2, r2, #1
 80086ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80086d0:	e00f      	b.n	80086f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80086d2:	f7ff fe83 	bl	80083dc <HAL_GetTick>
 80086d6:	4602      	mov	r2, r0
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	2b05      	cmp	r3, #5
 80086de:	d908      	bls.n	80086f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2220      	movs	r2, #32
 80086e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2203      	movs	r2, #3
 80086ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e078      	b.n	80087e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 0301 	and.w	r3, r3, #1
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1e8      	bne.n	80086d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008708:	697a      	ldr	r2, [r7, #20]
 800870a:	4b38      	ldr	r3, [pc, #224]	; (80087ec <HAL_DMA_Init+0x158>)
 800870c:	4013      	ands	r3, r2
 800870e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685a      	ldr	r2, [r3, #4]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800871e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800872a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	699b      	ldr	r3, [r3, #24]
 8008730:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008736:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6a1b      	ldr	r3, [r3, #32]
 800873c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	4313      	orrs	r3, r2
 8008742:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008748:	2b04      	cmp	r3, #4
 800874a:	d107      	bne.n	800875c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008754:	4313      	orrs	r3, r2
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	4313      	orrs	r3, r2
 800875a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	f023 0307 	bic.w	r3, r3, #7
 8008772:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008778:	697a      	ldr	r2, [r7, #20]
 800877a:	4313      	orrs	r3, r2
 800877c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008782:	2b04      	cmp	r3, #4
 8008784:	d117      	bne.n	80087b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878a:	697a      	ldr	r2, [r7, #20]
 800878c:	4313      	orrs	r3, r2
 800878e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00e      	beq.n	80087b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 fa6f 	bl	8008c7c <DMA_CheckFifoParam>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d008      	beq.n	80087b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2240      	movs	r2, #64	; 0x40
 80087a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80087b2:	2301      	movs	r3, #1
 80087b4:	e016      	b.n	80087e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	697a      	ldr	r2, [r7, #20]
 80087bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fa26 	bl	8008c10 <DMA_CalcBaseAndBitshift>
 80087c4:	4603      	mov	r3, r0
 80087c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087cc:	223f      	movs	r2, #63	; 0x3f
 80087ce:	409a      	lsls	r2, r3
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2201      	movs	r2, #1
 80087de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3718      	adds	r7, #24
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	f010803f 	.word	0xf010803f

080087f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
 80087fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008806:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800880e:	2b01      	cmp	r3, #1
 8008810:	d101      	bne.n	8008816 <HAL_DMA_Start_IT+0x26>
 8008812:	2302      	movs	r3, #2
 8008814:	e040      	b.n	8008898 <HAL_DMA_Start_IT+0xa8>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2201      	movs	r2, #1
 800881a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b01      	cmp	r3, #1
 8008828:	d12f      	bne.n	800888a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2202      	movs	r2, #2
 800882e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2200      	movs	r2, #0
 8008836:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	68b9      	ldr	r1, [r7, #8]
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f000 f9b8 	bl	8008bb4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008848:	223f      	movs	r2, #63	; 0x3f
 800884a:	409a      	lsls	r2, r3
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f042 0216 	orr.w	r2, r2, #22
 800885e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008864:	2b00      	cmp	r3, #0
 8008866:	d007      	beq.n	8008878 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f042 0208 	orr.w	r2, r2, #8
 8008876:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f042 0201 	orr.w	r2, r2, #1
 8008886:	601a      	str	r2, [r3, #0]
 8008888:	e005      	b.n	8008896 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2200      	movs	r2, #0
 800888e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008892:	2302      	movs	r3, #2
 8008894:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008896:	7dfb      	ldrb	r3, [r7, #23]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3718      	adds	r7, #24
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80088a8:	2300      	movs	r3, #0
 80088aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80088ac:	4b92      	ldr	r3, [pc, #584]	; (8008af8 <HAL_DMA_IRQHandler+0x258>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a92      	ldr	r2, [pc, #584]	; (8008afc <HAL_DMA_IRQHandler+0x25c>)
 80088b2:	fba2 2303 	umull	r2, r3, r2, r3
 80088b6:	0a9b      	lsrs	r3, r3, #10
 80088b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ca:	2208      	movs	r2, #8
 80088cc:	409a      	lsls	r2, r3
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	4013      	ands	r3, r2
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d01a      	beq.n	800890c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 0304 	and.w	r3, r3, #4
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d013      	beq.n	800890c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f022 0204 	bic.w	r2, r2, #4
 80088f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088f8:	2208      	movs	r2, #8
 80088fa:	409a      	lsls	r2, r3
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008904:	f043 0201 	orr.w	r2, r3, #1
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008910:	2201      	movs	r2, #1
 8008912:	409a      	lsls	r2, r3
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	4013      	ands	r3, r2
 8008918:	2b00      	cmp	r3, #0
 800891a:	d012      	beq.n	8008942 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	695b      	ldr	r3, [r3, #20]
 8008922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00b      	beq.n	8008942 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800892e:	2201      	movs	r2, #1
 8008930:	409a      	lsls	r2, r3
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800893a:	f043 0202 	orr.w	r2, r3, #2
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008946:	2204      	movs	r2, #4
 8008948:	409a      	lsls	r2, r3
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	4013      	ands	r3, r2
 800894e:	2b00      	cmp	r3, #0
 8008950:	d012      	beq.n	8008978 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0302 	and.w	r3, r3, #2
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00b      	beq.n	8008978 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008964:	2204      	movs	r2, #4
 8008966:	409a      	lsls	r2, r3
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008970:	f043 0204 	orr.w	r2, r3, #4
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800897c:	2210      	movs	r2, #16
 800897e:	409a      	lsls	r2, r3
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	4013      	ands	r3, r2
 8008984:	2b00      	cmp	r3, #0
 8008986:	d043      	beq.n	8008a10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 0308 	and.w	r3, r3, #8
 8008992:	2b00      	cmp	r3, #0
 8008994:	d03c      	beq.n	8008a10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800899a:	2210      	movs	r2, #16
 800899c:	409a      	lsls	r2, r3
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d018      	beq.n	80089e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d108      	bne.n	80089d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d024      	beq.n	8008a10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	4798      	blx	r3
 80089ce:	e01f      	b.n	8008a10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d01b      	beq.n	8008a10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	4798      	blx	r3
 80089e0:	e016      	b.n	8008a10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d107      	bne.n	8008a00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f022 0208 	bic.w	r2, r2, #8
 80089fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d003      	beq.n	8008a10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a14:	2220      	movs	r2, #32
 8008a16:	409a      	lsls	r2, r3
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 808e 	beq.w	8008b3e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 0310 	and.w	r3, r3, #16
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f000 8086 	beq.w	8008b3e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a36:	2220      	movs	r2, #32
 8008a38:	409a      	lsls	r2, r3
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b05      	cmp	r3, #5
 8008a48:	d136      	bne.n	8008ab8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f022 0216 	bic.w	r2, r2, #22
 8008a58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	695a      	ldr	r2, [r3, #20]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d103      	bne.n	8008a7a <HAL_DMA_IRQHandler+0x1da>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d007      	beq.n	8008a8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f022 0208 	bic.w	r2, r2, #8
 8008a88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a8e:	223f      	movs	r2, #63	; 0x3f
 8008a90:	409a      	lsls	r2, r3
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d07d      	beq.n	8008baa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	4798      	blx	r3
        }
        return;
 8008ab6:	e078      	b.n	8008baa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d01c      	beq.n	8008b00 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d108      	bne.n	8008ae6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d030      	beq.n	8008b3e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	4798      	blx	r3
 8008ae4:	e02b      	b.n	8008b3e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d027      	beq.n	8008b3e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	4798      	blx	r3
 8008af6:	e022      	b.n	8008b3e <HAL_DMA_IRQHandler+0x29e>
 8008af8:	20000058 	.word	0x20000058
 8008afc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10f      	bne.n	8008b2e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f022 0210 	bic.w	r2, r2, #16
 8008b1c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2201      	movs	r2, #1
 8008b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d003      	beq.n	8008b3e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d032      	beq.n	8008bac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b4a:	f003 0301 	and.w	r3, r3, #1
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d022      	beq.n	8008b98 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2205      	movs	r2, #5
 8008b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f022 0201 	bic.w	r2, r2, #1
 8008b68:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	60bb      	str	r3, [r7, #8]
 8008b70:	697a      	ldr	r2, [r7, #20]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d307      	bcc.n	8008b86 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 0301 	and.w	r3, r3, #1
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1f2      	bne.n	8008b6a <HAL_DMA_IRQHandler+0x2ca>
 8008b84:	e000      	b.n	8008b88 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008b86:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d005      	beq.n	8008bac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	4798      	blx	r3
 8008ba8:	e000      	b.n	8008bac <HAL_DMA_IRQHandler+0x30c>
        return;
 8008baa:	bf00      	nop
    }
  }
}
 8008bac:	3718      	adds	r7, #24
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop

08008bb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
 8008bc0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008bd0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	683a      	ldr	r2, [r7, #0]
 8008bd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	2b40      	cmp	r3, #64	; 0x40
 8008be0:	d108      	bne.n	8008bf4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008bf2:	e007      	b.n	8008c04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	60da      	str	r2, [r3, #12]
}
 8008c04:	bf00      	nop
 8008c06:	3714      	adds	r7, #20
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	3b10      	subs	r3, #16
 8008c20:	4a14      	ldr	r2, [pc, #80]	; (8008c74 <DMA_CalcBaseAndBitshift+0x64>)
 8008c22:	fba2 2303 	umull	r2, r3, r2, r3
 8008c26:	091b      	lsrs	r3, r3, #4
 8008c28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008c2a:	4a13      	ldr	r2, [pc, #76]	; (8008c78 <DMA_CalcBaseAndBitshift+0x68>)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	4413      	add	r3, r2
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	461a      	mov	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2b03      	cmp	r3, #3
 8008c3c:	d909      	bls.n	8008c52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008c46:	f023 0303 	bic.w	r3, r3, #3
 8008c4a:	1d1a      	adds	r2, r3, #4
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	659a      	str	r2, [r3, #88]	; 0x58
 8008c50:	e007      	b.n	8008c62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008c5a:	f023 0303 	bic.w	r3, r3, #3
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	aaaaaaab 	.word	0xaaaaaaab
 8008c78:	0801dff4 	.word	0x0801dff4

08008c7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b085      	sub	sp, #20
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c84:	2300      	movs	r3, #0
 8008c86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	699b      	ldr	r3, [r3, #24]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d11f      	bne.n	8008cd6 <DMA_CheckFifoParam+0x5a>
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	2b03      	cmp	r3, #3
 8008c9a:	d856      	bhi.n	8008d4a <DMA_CheckFifoParam+0xce>
 8008c9c:	a201      	add	r2, pc, #4	; (adr r2, 8008ca4 <DMA_CheckFifoParam+0x28>)
 8008c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca2:	bf00      	nop
 8008ca4:	08008cb5 	.word	0x08008cb5
 8008ca8:	08008cc7 	.word	0x08008cc7
 8008cac:	08008cb5 	.word	0x08008cb5
 8008cb0:	08008d4b 	.word	0x08008d4b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d046      	beq.n	8008d4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008cc4:	e043      	b.n	8008d4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008cce:	d140      	bne.n	8008d52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008cd4:	e03d      	b.n	8008d52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	699b      	ldr	r3, [r3, #24]
 8008cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cde:	d121      	bne.n	8008d24 <DMA_CheckFifoParam+0xa8>
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	2b03      	cmp	r3, #3
 8008ce4:	d837      	bhi.n	8008d56 <DMA_CheckFifoParam+0xda>
 8008ce6:	a201      	add	r2, pc, #4	; (adr r2, 8008cec <DMA_CheckFifoParam+0x70>)
 8008ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cec:	08008cfd 	.word	0x08008cfd
 8008cf0:	08008d03 	.word	0x08008d03
 8008cf4:	08008cfd 	.word	0x08008cfd
 8008cf8:	08008d15 	.word	0x08008d15
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8008d00:	e030      	b.n	8008d64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d025      	beq.n	8008d5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d12:	e022      	b.n	8008d5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008d1c:	d11f      	bne.n	8008d5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008d22:	e01c      	b.n	8008d5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d903      	bls.n	8008d32 <DMA_CheckFifoParam+0xb6>
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	2b03      	cmp	r3, #3
 8008d2e:	d003      	beq.n	8008d38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008d30:	e018      	b.n	8008d64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	73fb      	strb	r3, [r7, #15]
      break;
 8008d36:	e015      	b.n	8008d64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00e      	beq.n	8008d62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	73fb      	strb	r3, [r7, #15]
      break;
 8008d48:	e00b      	b.n	8008d62 <DMA_CheckFifoParam+0xe6>
      break;
 8008d4a:	bf00      	nop
 8008d4c:	e00a      	b.n	8008d64 <DMA_CheckFifoParam+0xe8>
      break;
 8008d4e:	bf00      	nop
 8008d50:	e008      	b.n	8008d64 <DMA_CheckFifoParam+0xe8>
      break;
 8008d52:	bf00      	nop
 8008d54:	e006      	b.n	8008d64 <DMA_CheckFifoParam+0xe8>
      break;
 8008d56:	bf00      	nop
 8008d58:	e004      	b.n	8008d64 <DMA_CheckFifoParam+0xe8>
      break;
 8008d5a:	bf00      	nop
 8008d5c:	e002      	b.n	8008d64 <DMA_CheckFifoParam+0xe8>
      break;   
 8008d5e:	bf00      	nop
 8008d60:	e000      	b.n	8008d64 <DMA_CheckFifoParam+0xe8>
      break;
 8008d62:	bf00      	nop
    }
  } 
  
  return status; 
 8008d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3714      	adds	r7, #20
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop

08008d74 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b088      	sub	sp, #32
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	61fb      	str	r3, [r7, #28]
 8008d80:	2300      	movs	r3, #0
 8008d82:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8008d84:	4baa      	ldr	r3, [pc, #680]	; (8009030 <HAL_ETH_Init+0x2bc>)
 8008d86:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d101      	bne.n	8008d9a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e183      	b.n	80090a2 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d106      	bne.n	8008db4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f003 fd7c 	bl	800c8ac <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008db4:	2300      	movs	r3, #0
 8008db6:	60bb      	str	r3, [r7, #8]
 8008db8:	4b9e      	ldr	r3, [pc, #632]	; (8009034 <HAL_ETH_Init+0x2c0>)
 8008dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dbc:	4a9d      	ldr	r2, [pc, #628]	; (8009034 <HAL_ETH_Init+0x2c0>)
 8008dbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008dc2:	6453      	str	r3, [r2, #68]	; 0x44
 8008dc4:	4b9b      	ldr	r3, [pc, #620]	; (8009034 <HAL_ETH_Init+0x2c0>)
 8008dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dcc:	60bb      	str	r3, [r7, #8]
 8008dce:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8008dd0:	4b99      	ldr	r3, [pc, #612]	; (8009038 <HAL_ETH_Init+0x2c4>)
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	4a98      	ldr	r2, [pc, #608]	; (8009038 <HAL_ETH_Init+0x2c4>)
 8008dd6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008dda:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8008ddc:	4b96      	ldr	r3, [pc, #600]	; (8009038 <HAL_ETH_Init+0x2c4>)
 8008dde:	685a      	ldr	r2, [r3, #4]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a1b      	ldr	r3, [r3, #32]
 8008de4:	4994      	ldr	r1, [pc, #592]	; (8009038 <HAL_ETH_Init+0x2c4>)
 8008de6:	4313      	orrs	r3, r2
 8008de8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f042 0201 	orr.w	r2, r2, #1
 8008dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e00:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8008e02:	f7ff faeb 	bl	80083dc <HAL_GetTick>
 8008e06:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8008e08:	e011      	b.n	8008e2e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8008e0a:	f7ff fae7 	bl	80083dc <HAL_GetTick>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008e18:	d909      	bls.n	8008e2e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2203      	movs	r2, #3
 8008e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	e139      	b.n	80090a2 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 0301 	and.w	r3, r3, #1
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1e4      	bne.n	8008e0a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	f023 031c 	bic.w	r3, r3, #28
 8008e4e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8008e50:	f002 f960 	bl	800b114 <HAL_RCC_GetHCLKFreq>
 8008e54:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	4a78      	ldr	r2, [pc, #480]	; (800903c <HAL_ETH_Init+0x2c8>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d908      	bls.n	8008e70 <HAL_ETH_Init+0xfc>
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	4a77      	ldr	r2, [pc, #476]	; (8009040 <HAL_ETH_Init+0x2cc>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d804      	bhi.n	8008e70 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	f043 0308 	orr.w	r3, r3, #8
 8008e6c:	61fb      	str	r3, [r7, #28]
 8008e6e:	e027      	b.n	8008ec0 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	4a73      	ldr	r2, [pc, #460]	; (8009040 <HAL_ETH_Init+0x2cc>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d908      	bls.n	8008e8a <HAL_ETH_Init+0x116>
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	4a6d      	ldr	r2, [pc, #436]	; (8009030 <HAL_ETH_Init+0x2bc>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d204      	bcs.n	8008e8a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	f043 030c 	orr.w	r3, r3, #12
 8008e86:	61fb      	str	r3, [r7, #28]
 8008e88:	e01a      	b.n	8008ec0 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	4a68      	ldr	r2, [pc, #416]	; (8009030 <HAL_ETH_Init+0x2bc>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d303      	bcc.n	8008e9a <HAL_ETH_Init+0x126>
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	4a6b      	ldr	r2, [pc, #428]	; (8009044 <HAL_ETH_Init+0x2d0>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d911      	bls.n	8008ebe <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	4a69      	ldr	r2, [pc, #420]	; (8009044 <HAL_ETH_Init+0x2d0>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d908      	bls.n	8008eb4 <HAL_ETH_Init+0x140>
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	4a68      	ldr	r2, [pc, #416]	; (8009048 <HAL_ETH_Init+0x2d4>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d804      	bhi.n	8008eb4 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	f043 0304 	orr.w	r3, r3, #4
 8008eb0:	61fb      	str	r3, [r7, #28]
 8008eb2:	e005      	b.n	8008ec0 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	f043 0310 	orr.w	r3, r3, #16
 8008eba:	61fb      	str	r3, [r7, #28]
 8008ebc:	e000      	b.n	8008ec0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8008ebe:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	69fa      	ldr	r2, [r7, #28]
 8008ec6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8008ec8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008ecc:	2100      	movs	r1, #0
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fb98 	bl	8009604 <HAL_ETH_WritePHYRegister>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00b      	beq.n	8008ef2 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8008ede:	6939      	ldr	r1, [r7, #16]
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 fd4d 	bl	8009980 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e0d7      	b.n	80090a2 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8008ef2:	20ff      	movs	r0, #255	; 0xff
 8008ef4:	f7ff fa7e 	bl	80083f4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f000 80a5 	beq.w	800904c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8008f02:	f7ff fa6b 	bl	80083dc <HAL_GetTick>
 8008f06:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8008f08:	f107 030c 	add.w	r3, r7, #12
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	2101      	movs	r1, #1
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 fb0f 	bl	8009534 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8008f16:	f7ff fa61 	bl	80083dc <HAL_GetTick>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	1ad3      	subs	r3, r2, r3
 8008f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d90f      	bls.n	8008f48 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8008f2c:	6939      	ldr	r1, [r7, #16]
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fd26 	bl	8009980 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8008f44:	2303      	movs	r3, #3
 8008f46:	e0ac      	b.n	80090a2 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f003 0304 	and.w	r3, r3, #4
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d0da      	beq.n	8008f08 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8008f52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008f56:	2100      	movs	r1, #0
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 fb53 	bl	8009604 <HAL_ETH_WritePHYRegister>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00b      	beq.n	8008f7c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8008f68:	6939      	ldr	r1, [r7, #16]
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fd08 	bl	8009980 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e092      	b.n	80090a2 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8008f7c:	f7ff fa2e 	bl	80083dc <HAL_GetTick>
 8008f80:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8008f82:	f107 030c 	add.w	r3, r7, #12
 8008f86:	461a      	mov	r2, r3
 8008f88:	2101      	movs	r1, #1
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fad2 	bl	8009534 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8008f90:	f7ff fa24 	bl	80083dc <HAL_GetTick>
 8008f94:	4602      	mov	r2, r0
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	1ad3      	subs	r3, r2, r3
 8008f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d90f      	bls.n	8008fc2 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8008fa6:	6939      	ldr	r1, [r7, #16]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 fce9 	bl	8009980 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	e06f      	b.n	80090a2 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f003 0320 	and.w	r3, r3, #32
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d0da      	beq.n	8008f82 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8008fcc:	f107 030c 	add.w	r3, r7, #12
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	2110      	movs	r1, #16
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 faad 	bl	8009534 <HAL_ETH_ReadPHYRegister>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00b      	beq.n	8008ff8 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8008fe4:	6939      	ldr	r1, [r7, #16]
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fcca 	bl	8009980 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e054      	b.n	80090a2 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f003 0304 	and.w	r3, r3, #4
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d004      	beq.n	800900c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009008:	60da      	str	r2, [r3, #12]
 800900a:	e002      	b.n	8009012 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f003 0302 	and.w	r3, r3, #2
 8009018:	2b00      	cmp	r3, #0
 800901a:	d003      	beq.n	8009024 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	609a      	str	r2, [r3, #8]
 8009022:	e035      	b.n	8009090 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800902a:	609a      	str	r2, [r3, #8]
 800902c:	e030      	b.n	8009090 <HAL_ETH_Init+0x31c>
 800902e:	bf00      	nop
 8009030:	03938700 	.word	0x03938700
 8009034:	40023800 	.word	0x40023800
 8009038:	40013800 	.word	0x40013800
 800903c:	01312cff 	.word	0x01312cff
 8009040:	02160ebf 	.word	0x02160ebf
 8009044:	05f5e0ff 	.word	0x05f5e0ff
 8009048:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	08db      	lsrs	r3, r3, #3
 8009052:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	085b      	lsrs	r3, r3, #1
 800905a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800905c:	4313      	orrs	r3, r2
 800905e:	b29b      	uxth	r3, r3
 8009060:	461a      	mov	r2, r3
 8009062:	2100      	movs	r1, #0
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 facd 	bl	8009604 <HAL_ETH_WritePHYRegister>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00b      	beq.n	8009088 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8009074:	6939      	ldr	r1, [r7, #16]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fc82 	bl	8009980 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8009084:	2301      	movs	r3, #1
 8009086:	e00c      	b.n	80090a2 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8009088:	f640 70ff 	movw	r0, #4095	; 0xfff
 800908c:	f7ff f9b2 	bl	80083f4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8009090:	6939      	ldr	r1, [r7, #16]
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fc74 	bl	8009980 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3720      	adds	r7, #32
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop

080090ac <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b087      	sub	sp, #28
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
 80090b8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80090ba:	2300      	movs	r3, #0
 80090bc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d101      	bne.n	80090cc <HAL_ETH_DMATxDescListInit+0x20>
 80090c8:	2302      	movs	r3, #2
 80090ca:	e052      	b.n	8009172 <HAL_ETH_DMATxDescListInit+0xc6>
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2202      	movs	r2, #2
 80090d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	68ba      	ldr	r2, [r7, #8]
 80090e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80090e2:	2300      	movs	r3, #0
 80090e4:	617b      	str	r3, [r7, #20]
 80090e6:	e030      	b.n	800914a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	015b      	lsls	r3, r3, #5
 80090ec:	68ba      	ldr	r2, [r7, #8]
 80090ee:	4413      	add	r3, r2
 80090f0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80090f8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009100:	fb02 f303 	mul.w	r3, r2, r3
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	4413      	add	r3, r2
 8009108:	461a      	mov	r2, r3
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	69db      	ldr	r3, [r3, #28]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d105      	bne.n	8009122 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	3b01      	subs	r3, #1
 8009126:	697a      	ldr	r2, [r7, #20]
 8009128:	429a      	cmp	r2, r3
 800912a:	d208      	bcs.n	800913e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	3301      	adds	r3, #1
 8009130:	015b      	lsls	r3, r3, #5
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	4413      	add	r3, r2
 8009136:	461a      	mov	r2, r3
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	60da      	str	r2, [r3, #12]
 800913c:	e002      	b.n	8009144 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	3301      	adds	r3, #1
 8009148:	617b      	str	r3, [r7, #20]
 800914a:	697a      	ldr	r2, [r7, #20]
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	429a      	cmp	r2, r3
 8009150:	d3ca      	bcc.n	80090e8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800915c:	3310      	adds	r3, #16
 800915e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2200      	movs	r2, #0
 800916c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	371c      	adds	r7, #28
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800917e:	b480      	push	{r7}
 8009180:	b087      	sub	sp, #28
 8009182:	af00      	add	r7, sp, #0
 8009184:	60f8      	str	r0, [r7, #12]
 8009186:	60b9      	str	r1, [r7, #8]
 8009188:	607a      	str	r2, [r7, #4]
 800918a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800918c:	2300      	movs	r3, #0
 800918e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009196:	2b01      	cmp	r3, #1
 8009198:	d101      	bne.n	800919e <HAL_ETH_DMARxDescListInit+0x20>
 800919a:	2302      	movs	r3, #2
 800919c:	e056      	b.n	800924c <HAL_ETH_DMARxDescListInit+0xce>
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2202      	movs	r2, #2
 80091aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	68ba      	ldr	r2, [r7, #8]
 80091b2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80091b4:	2300      	movs	r3, #0
 80091b6:	617b      	str	r3, [r7, #20]
 80091b8:	e034      	b.n	8009224 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	015b      	lsls	r3, r3, #5
 80091be:	68ba      	ldr	r2, [r7, #8]
 80091c0:	4413      	add	r3, r2
 80091c2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80091ca:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80091d2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80091da:	fb02 f303 	mul.w	r3, r2, r3
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	4413      	add	r3, r2
 80091e2:	461a      	mov	r2, r3
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d105      	bne.n	80091fc <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	3b01      	subs	r3, #1
 8009200:	697a      	ldr	r2, [r7, #20]
 8009202:	429a      	cmp	r2, r3
 8009204:	d208      	bcs.n	8009218 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	3301      	adds	r3, #1
 800920a:	015b      	lsls	r3, r3, #5
 800920c:	68ba      	ldr	r2, [r7, #8]
 800920e:	4413      	add	r3, r2
 8009210:	461a      	mov	r2, r3
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	60da      	str	r2, [r3, #12]
 8009216:	e002      	b.n	800921e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8009218:	68ba      	ldr	r2, [r7, #8]
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	3301      	adds	r3, #1
 8009222:	617b      	str	r3, [r7, #20]
 8009224:	697a      	ldr	r2, [r7, #20]
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	429a      	cmp	r2, r3
 800922a:	d3c6      	bcc.n	80091ba <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009236:	330c      	adds	r3, #12
 8009238:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2201      	movs	r2, #1
 800923e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	371c      	adds	r7, #28
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8009258:	b480      	push	{r7}
 800925a:	b087      	sub	sp, #28
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8009262:	2300      	movs	r3, #0
 8009264:	617b      	str	r3, [r7, #20]
 8009266:	2300      	movs	r3, #0
 8009268:	60fb      	str	r3, [r7, #12]
 800926a:	2300      	movs	r3, #0
 800926c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009274:	2b01      	cmp	r3, #1
 8009276:	d101      	bne.n	800927c <HAL_ETH_TransmitFrame+0x24>
 8009278:	2302      	movs	r3, #2
 800927a:	e0cd      	b.n	8009418 <HAL_ETH_TransmitFrame+0x1c0>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2202      	movs	r2, #2
 8009288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d109      	bne.n	80092a6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2201      	movs	r2, #1
 8009296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80092a2:	2301      	movs	r3, #1
 80092a4:	e0b8      	b.n	8009418 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	da09      	bge.n	80092c4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2212      	movs	r2, #18
 80092b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	e0a9      	b.n	8009418 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d915      	bls.n	80092fa <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	4a54      	ldr	r2, [pc, #336]	; (8009424 <HAL_ETH_TransmitFrame+0x1cc>)
 80092d2:	fba2 2303 	umull	r2, r3, r2, r3
 80092d6:	0a9b      	lsrs	r3, r3, #10
 80092d8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	4b51      	ldr	r3, [pc, #324]	; (8009424 <HAL_ETH_TransmitFrame+0x1cc>)
 80092de:	fba3 1302 	umull	r1, r3, r3, r2
 80092e2:	0a9b      	lsrs	r3, r3, #10
 80092e4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80092e8:	fb01 f303 	mul.w	r3, r1, r3
 80092ec:	1ad3      	subs	r3, r2, r3
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d005      	beq.n	80092fe <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	3301      	adds	r3, #1
 80092f6:	617b      	str	r3, [r7, #20]
 80092f8:	e001      	b.n	80092fe <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80092fa:	2301      	movs	r3, #1
 80092fc:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	2b01      	cmp	r3, #1
 8009302:	d11c      	bne.n	800933e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8009312:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009318:	683a      	ldr	r2, [r7, #0]
 800931a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800931e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800932e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	461a      	mov	r2, r3
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	62da      	str	r2, [r3, #44]	; 0x2c
 800933c:	e04b      	b.n	80093d6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800933e:	2300      	movs	r3, #0
 8009340:	613b      	str	r3, [r7, #16]
 8009342:	e044      	b.n	80093ce <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009352:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d107      	bne.n	800936a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009364:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009368:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009372:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	3b01      	subs	r3, #1
 8009378:	693a      	ldr	r2, [r7, #16]
 800937a:	429a      	cmp	r2, r3
 800937c:	d116      	bne.n	80093ac <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009388:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800938c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	4a25      	ldr	r2, [pc, #148]	; (8009428 <HAL_ETH_TransmitFrame+0x1d0>)
 8009392:	fb02 f203 	mul.w	r2, r2, r3
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	4413      	add	r3, r2
 800939a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800939e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80093aa:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80093ba:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	461a      	mov	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	3301      	adds	r3, #1
 80093cc:	613b      	str	r3, [r7, #16]
 80093ce:	693a      	ldr	r2, [r7, #16]
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d3b6      	bcc.n	8009344 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093de:	3314      	adds	r3, #20
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f003 0304 	and.w	r3, r3, #4
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00d      	beq.n	8009406 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093f2:	3314      	adds	r3, #20
 80093f4:	2204      	movs	r2, #4
 80093f6:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009400:	3304      	adds	r3, #4
 8009402:	2200      	movs	r2, #0
 8009404:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	371c      	adds	r7, #28
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr
 8009424:	ac02b00b 	.word	0xac02b00b
 8009428:	fffffa0c 	.word	0xfffffa0c

0800942c <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 800942c:	b480      	push	{r7}
 800942e:	b085      	sub	sp, #20
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8009434:	2300      	movs	r3, #0
 8009436:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800943e:	2b01      	cmp	r3, #1
 8009440:	d101      	bne.n	8009446 <HAL_ETH_GetReceivedFrame+0x1a>
 8009442:	2302      	movs	r3, #2
 8009444:	e070      	b.n	8009528 <HAL_ETH_GetReceivedFrame+0xfc>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2201      	movs	r2, #1
 800944a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2202      	movs	r2, #2
 8009452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	db5a      	blt.n	8009516 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800946a:	2b00      	cmp	r3, #0
 800946c:	d030      	beq.n	80094d0 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009472:	1c5a      	adds	r2, r3, #1
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947c:	2b01      	cmp	r3, #1
 800947e:	d103      	bne.n	8009488 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	0c1b      	lsrs	r3, r3, #16
 8009498:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800949c:	3b04      	subs	r3, #4
 800949e:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	68fa      	ldr	r2, [r7, #12]
 80094a4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094aa:	689a      	ldr	r2, [r3, #8]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	461a      	mov	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80094cc:	2300      	movs	r3, #0
 80094ce:	e02b      	b.n	8009528 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d010      	beq.n	8009500 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	461a      	mov	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	629a      	str	r2, [r3, #40]	; 0x28
 80094fe:	e00a      	b.n	8009516 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009504:	1c5a      	adds	r2, r3, #1
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	461a      	mov	r2, r3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2201      	movs	r2, #1
 800951a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8009526:	2301      	movs	r3, #1
}
 8009528:	4618      	mov	r0, r3
 800952a:	3714      	adds	r7, #20
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	460b      	mov	r3, r1
 800953e:	607a      	str	r2, [r7, #4]
 8009540:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8009542:	2300      	movs	r3, #0
 8009544:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8009546:	2300      	movs	r3, #0
 8009548:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009550:	b2db      	uxtb	r3, r3
 8009552:	2b82      	cmp	r3, #130	; 0x82
 8009554:	d101      	bne.n	800955a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8009556:	2302      	movs	r3, #2
 8009558:	e050      	b.n	80095fc <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2282      	movs	r2, #130	; 0x82
 800955e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	691b      	ldr	r3, [r3, #16]
 8009568:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	f003 031c 	and.w	r3, r3, #28
 8009570:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	8a1b      	ldrh	r3, [r3, #16]
 8009576:	02db      	lsls	r3, r3, #11
 8009578:	b29b      	uxth	r3, r3
 800957a:	697a      	ldr	r2, [r7, #20]
 800957c:	4313      	orrs	r3, r2
 800957e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8009580:	897b      	ldrh	r3, [r7, #10]
 8009582:	019b      	lsls	r3, r3, #6
 8009584:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8009588:	697a      	ldr	r2, [r7, #20]
 800958a:	4313      	orrs	r3, r2
 800958c:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	f023 0302 	bic.w	r3, r3, #2
 8009594:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	f043 0301 	orr.w	r3, r3, #1
 800959c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	697a      	ldr	r2, [r7, #20]
 80095a4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80095a6:	f7fe ff19 	bl	80083dc <HAL_GetTick>
 80095aa:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80095ac:	e015      	b.n	80095da <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80095ae:	f7fe ff15 	bl	80083dc <HAL_GetTick>
 80095b2:	4602      	mov	r2, r0
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	1ad3      	subs	r3, r2, r3
 80095b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095bc:	d309      	bcc.n	80095d2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2201      	movs	r2, #1
 80095c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80095ce:	2303      	movs	r3, #3
 80095d0:	e014      	b.n	80095fc <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	691b      	ldr	r3, [r3, #16]
 80095d8:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	f003 0301 	and.w	r3, r3, #1
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1e4      	bne.n	80095ae <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	695b      	ldr	r3, [r3, #20]
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	461a      	mov	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80095fa:	2300      	movs	r3, #0
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3718      	adds	r7, #24
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	460b      	mov	r3, r1
 800960e:	607a      	str	r2, [r7, #4]
 8009610:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8009612:	2300      	movs	r3, #0
 8009614:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8009616:	2300      	movs	r3, #0
 8009618:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009620:	b2db      	uxtb	r3, r3
 8009622:	2b42      	cmp	r3, #66	; 0x42
 8009624:	d101      	bne.n	800962a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8009626:	2302      	movs	r3, #2
 8009628:	e04e      	b.n	80096c8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2242      	movs	r2, #66	; 0x42
 800962e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	f003 031c 	and.w	r3, r3, #28
 8009640:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	8a1b      	ldrh	r3, [r3, #16]
 8009646:	02db      	lsls	r3, r3, #11
 8009648:	b29b      	uxth	r3, r3
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	4313      	orrs	r3, r2
 800964e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8009650:	897b      	ldrh	r3, [r7, #10]
 8009652:	019b      	lsls	r3, r3, #6
 8009654:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8009658:	697a      	ldr	r2, [r7, #20]
 800965a:	4313      	orrs	r3, r2
 800965c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	f043 0302 	orr.w	r3, r3, #2
 8009664:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	f043 0301 	orr.w	r3, r3, #1
 800966c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	b29a      	uxth	r2, r3
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8009680:	f7fe feac 	bl	80083dc <HAL_GetTick>
 8009684:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009686:	e015      	b.n	80096b4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8009688:	f7fe fea8 	bl	80083dc <HAL_GetTick>
 800968c:	4602      	mov	r2, r0
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	1ad3      	subs	r3, r2, r3
 8009692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009696:	d309      	bcc.n	80096ac <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80096a8:	2303      	movs	r3, #3
 80096aa:	e00d      	b.n	80096c8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	f003 0301 	and.w	r3, r3, #1
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d1e4      	bne.n	8009688 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2201      	movs	r2, #1
 80096c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80096c6:	2300      	movs	r3, #0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3718      	adds	r7, #24
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d101      	bne.n	80096e6 <HAL_ETH_Start+0x16>
 80096e2:	2302      	movs	r3, #2
 80096e4:	e01f      	b.n	8009726 <HAL_ETH_Start+0x56>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2201      	movs	r2, #1
 80096ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2202      	movs	r2, #2
 80096f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 fb44 	bl	8009d84 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 fb7b 	bl	8009df8 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 fc12 	bl	8009f2c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 fbaf 	bl	8009e6c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fbdc 	bl	8009ecc <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800972e:	b580      	push	{r7, lr}
 8009730:	b082      	sub	sp, #8
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800973c:	2b01      	cmp	r3, #1
 800973e:	d101      	bne.n	8009744 <HAL_ETH_Stop+0x16>
 8009740:	2302      	movs	r3, #2
 8009742:	e01f      	b.n	8009784 <HAL_ETH_Stop+0x56>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2202      	movs	r2, #2
 8009750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 fba1 	bl	8009e9c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 fbce 	bl	8009efc <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 fb66 	bl	8009e32 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 fbe0 	bl	8009f2c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 fb26 	bl	8009dbe <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2201      	movs	r2, #1
 8009776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8009796:	2300      	movs	r3, #0
 8009798:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d101      	bne.n	80097a8 <HAL_ETH_ConfigMAC+0x1c>
 80097a4:	2302      	movs	r3, #2
 80097a6:	e0e4      	b.n	8009972 <HAL_ETH_ConfigMAC+0x1e6>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2202      	movs	r2, #2
 80097b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	f000 80b1 	beq.w	8009922 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	4b6c      	ldr	r3, [pc, #432]	; (800997c <HAL_ETH_ConfigMAC+0x1f0>)
 80097cc:	4013      	ands	r3, r2
 80097ce:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80097d8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80097de:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80097e4:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80097ea:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80097f0:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80097f6:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80097fc:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8009802:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8009808:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800980e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8009814:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800981a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	4313      	orrs	r3, r2
 8009820:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	68fa      	ldr	r2, [r7, #12]
 8009828:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009832:	2001      	movs	r0, #1
 8009834:	f7fe fdde 	bl	80083f4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8009848:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800984e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8009854:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800985a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8009860:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8009866:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8009872:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8009874:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800987e:	2001      	movs	r0, #1
 8009880:	f7fe fdb8 	bl	80083f4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	683a      	ldr	r2, [r7, #0]
 8009892:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009894:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	683a      	ldr	r2, [r7, #0]
 800989c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800989e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	699b      	ldr	r3, [r3, #24]
 80098a6:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	f64f 7341 	movw	r3, #65345	; 0xff41
 80098ae:	4013      	ands	r3, r2
 80098b0:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098b6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80098bc:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80098c2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80098c8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80098ce:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80098d4:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	4313      	orrs	r3, r2
 80098da:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	699b      	ldr	r3, [r3, #24]
 80098ea:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80098ec:	2001      	movs	r0, #1
 80098ee:	f7fe fd81 	bl	80083f4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	68fa      	ldr	r2, [r7, #12]
 80098f8:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	430a      	orrs	r2, r1
 8009908:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	69db      	ldr	r3, [r3, #28]
 8009910:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8009912:	2001      	movs	r0, #1
 8009914:	f7fe fd6e 	bl	80083f4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	61da      	str	r2, [r3, #28]
 8009920:	e01e      	b.n	8009960 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8009930:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	689a      	ldr	r2, [r3, #8]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	4313      	orrs	r3, r2
 800993c:	68fa      	ldr	r2, [r7, #12]
 800993e:	4313      	orrs	r3, r2
 8009940:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009952:	2001      	movs	r0, #1
 8009954:	f7fe fd4e 	bl	80083f4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	ff20810f 	.word	0xff20810f

08009980 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b0b0      	sub	sp, #192	; 0xc0
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800998a:	2300      	movs	r3, #0
 800998c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d007      	beq.n	80099a6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800999c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80099a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80099a6:	2300      	movs	r3, #0
 80099a8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80099aa:	2300      	movs	r3, #0
 80099ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80099ae:	2300      	movs	r3, #0
 80099b0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80099b2:	2300      	movs	r3, #0
 80099b4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80099b6:	2300      	movs	r3, #0
 80099b8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80099ba:	2300      	movs	r3, #0
 80099bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	69db      	ldr	r3, [r3, #28]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d103      	bne.n	80099ce <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80099c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099ca:	663b      	str	r3, [r7, #96]	; 0x60
 80099cc:	e001      	b.n	80099d2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80099ce:	2300      	movs	r3, #0
 80099d0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80099d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099d6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80099d8:	2300      	movs	r3, #0
 80099da:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80099dc:	2300      	movs	r3, #0
 80099de:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80099e0:	2300      	movs	r3, #0
 80099e2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80099e4:	2300      	movs	r3, #0
 80099e6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80099e8:	2300      	movs	r3, #0
 80099ea:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80099ec:	2340      	movs	r3, #64	; 0x40
 80099ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80099f0:	2300      	movs	r3, #0
 80099f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80099f6:	2300      	movs	r3, #0
 80099f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80099fc:	2300      	movs	r3, #0
 80099fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8009a02:	2300      	movs	r3, #0
 8009a04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8009a14:	2300      	movs	r3, #0
 8009a16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8009a20:	2380      	movs	r3, #128	; 0x80
 8009a22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8009a26:	2300      	movs	r3, #0
 8009a28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8009a32:	2300      	movs	r3, #0
 8009a34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8009a44:	2300      	movs	r3, #0
 8009a46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8009a54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009a58:	4bac      	ldr	r3, [pc, #688]	; (8009d0c <ETH_MACDMAConfig+0x38c>)
 8009a5a:	4013      	ands	r3, r2
 8009a5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8009a60:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8009a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8009a64:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8009a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8009a68:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8009a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8009a6c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8009a72:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8009a74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8009a76:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8009a78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8009a7a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8009a80:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8009a82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8009a84:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8009a86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8009a88:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8009a8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8009a8c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8009a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8009a90:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8009a92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8009a94:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8009a96:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009aa8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009ab4:	2001      	movs	r0, #1
 8009ab6:	f7fe fc9d 	bl	80083f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009ac2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8009ac4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8009ac6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8009ac8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8009aca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8009acc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8009ace:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8009ad2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8009ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8009ad8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8009ada:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8009ade:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8009ae0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8009ae4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8009ae8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8009af0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8009af2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8009afe:	2001      	movs	r0, #1
 8009b00:	f7fe fc78 	bl	80083f4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009b0c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009b16:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009b20:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	699b      	ldr	r3, [r3, #24]
 8009b28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8009b2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009b30:	f64f 7341 	movw	r3, #65345	; 0xff41
 8009b34:	4013      	ands	r3, r2
 8009b36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8009b3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009b3e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8009b40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8009b44:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8009b46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8009b4a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8009b4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8009b50:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8009b52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8009b56:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8009b58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8009b5c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8009b5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009b62:	4313      	orrs	r3, r2
 8009b64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009b70:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	699b      	ldr	r3, [r3, #24]
 8009b78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8009b7c:	2001      	movs	r0, #1
 8009b7e:	f7fe fc39 	bl	80083f4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009b8a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8009b8c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8009b90:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	430a      	orrs	r2, r1
 8009b9a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	69db      	ldr	r3, [r3, #28]
 8009ba2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009ba6:	2001      	movs	r0, #1
 8009ba8:	f7fe fc24 	bl	80083f4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009bb4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8009bba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009bbe:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8009bc4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009bc8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8009bda:	2304      	movs	r3, #4
 8009bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8009bde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8009be4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009be8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8009bea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009bee:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8009bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009bf4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8009bf6:	2380      	movs	r3, #128	; 0x80
 8009bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c0a:	3318      	adds	r3, #24
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8009c12:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009c16:	4b3e      	ldr	r3, [pc, #248]	; (8009d10 <ETH_MACDMAConfig+0x390>)
 8009c18:	4013      	ands	r3, r2
 8009c1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8009c1e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8009c20:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8009c22:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8009c24:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8009c26:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8009c28:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8009c2a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8009c2c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8009c2e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8009c30:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8009c32:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8009c34:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8009c36:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8009c3a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8009c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8009c3e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8009c40:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009c44:	4313      	orrs	r3, r2
 8009c46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c52:	3318      	adds	r3, #24
 8009c54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009c58:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c62:	3318      	adds	r3, #24
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009c6a:	2001      	movs	r0, #1
 8009c6c:	f7fe fbc2 	bl	80083f4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c78:	3318      	adds	r3, #24
 8009c7a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009c7e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8009c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8009c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8009c84:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8009c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8009c88:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8009c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8009c8c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8009c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8009c90:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8009c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c94:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8009c96:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8009c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8009c9a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ca8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8009cb8:	2001      	movs	r0, #1
 8009cba:	f7fe fb9b 	bl	80083f4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cc6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009cca:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d10f      	bne.n	8009cf4 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cdc:	331c      	adds	r3, #28
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cf0:	331c      	adds	r3, #28
 8009cf2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	695b      	ldr	r3, [r3, #20]
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 f809 	bl	8009d14 <ETH_MACAddressConfig>
}
 8009d02:	bf00      	nop
 8009d04:	37c0      	adds	r7, #192	; 0xc0
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	ff20810f 	.word	0xff20810f
 8009d10:	f8de3f23 	.word	0xf8de3f23

08009d14 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b087      	sub	sp, #28
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	3305      	adds	r3, #5
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	021b      	lsls	r3, r3, #8
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	3204      	adds	r2, #4
 8009d2c:	7812      	ldrb	r2, [r2, #0]
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8009d32:	68ba      	ldr	r2, [r7, #8]
 8009d34:	4b11      	ldr	r3, [pc, #68]	; (8009d7c <ETH_MACAddressConfig+0x68>)
 8009d36:	4413      	add	r3, r2
 8009d38:	461a      	mov	r2, r3
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	3303      	adds	r3, #3
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	061a      	lsls	r2, r3, #24
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	3302      	adds	r3, #2
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	041b      	lsls	r3, r3, #16
 8009d4e:	431a      	orrs	r2, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	3301      	adds	r3, #1
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	021b      	lsls	r3, r3, #8
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	7812      	ldrb	r2, [r2, #0]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8009d62:	68ba      	ldr	r2, [r7, #8]
 8009d64:	4b06      	ldr	r3, [pc, #24]	; (8009d80 <ETH_MACAddressConfig+0x6c>)
 8009d66:	4413      	add	r3, r2
 8009d68:	461a      	mov	r2, r3
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	6013      	str	r3, [r2, #0]
}
 8009d6e:	bf00      	nop
 8009d70:	371c      	adds	r7, #28
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr
 8009d7a:	bf00      	nop
 8009d7c:	40028040 	.word	0x40028040
 8009d80:	40028044 	.word	0x40028044

08009d84 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f042 0208 	orr.w	r2, r2, #8
 8009d9e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8009da8:	2001      	movs	r0, #1
 8009daa:	f000 f8e9 	bl	8009f80 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	601a      	str	r2, [r3, #0]
}
 8009db6:	bf00      	nop
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b084      	sub	sp, #16
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f022 0208 	bic.w	r2, r2, #8
 8009dd8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8009de2:	2001      	movs	r0, #1
 8009de4:	f000 f8cc 	bl	8009f80 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	601a      	str	r2, [r3, #0]
}
 8009df0:	bf00      	nop
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8009e00:	2300      	movs	r3, #0
 8009e02:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f042 0204 	orr.w	r2, r2, #4
 8009e12:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8009e1c:	2001      	movs	r0, #1
 8009e1e:	f000 f8af 	bl	8009f80 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	601a      	str	r2, [r3, #0]
}
 8009e2a:	bf00      	nop
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b084      	sub	sp, #16
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f022 0204 	bic.w	r2, r2, #4
 8009e4c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8009e56:	2001      	movs	r0, #1
 8009e58:	f000 f892 	bl	8009f80 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	68fa      	ldr	r2, [r7, #12]
 8009e62:	601a      	str	r2, [r3, #0]
}
 8009e64:	bf00      	nop
 8009e66:	3710      	adds	r7, #16
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e7c:	3318      	adds	r3, #24
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e8c:	3318      	adds	r3, #24
 8009e8e:	601a      	str	r2, [r3, #0]
}
 8009e90:	bf00      	nop
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eac:	3318      	adds	r3, #24
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ebc:	3318      	adds	r3, #24
 8009ebe:	601a      	str	r2, [r3, #0]
}
 8009ec0:	bf00      	nop
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009edc:	3318      	adds	r3, #24
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f042 0202 	orr.w	r2, r2, #2
 8009ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eec:	3318      	adds	r3, #24
 8009eee:	601a      	str	r2, [r3, #0]
}
 8009ef0:	bf00      	nop
 8009ef2:	370c      	adds	r7, #12
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr

08009efc <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f0c:	3318      	adds	r3, #24
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f022 0202 	bic.w	r2, r2, #2
 8009f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f1c:	3318      	adds	r3, #24
 8009f1e:	601a      	str	r2, [r3, #0]
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8009f34:	2300      	movs	r3, #0
 8009f36:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f40:	3318      	adds	r3, #24
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f50:	3318      	adds	r3, #24
 8009f52:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f5c:	3318      	adds	r3, #24
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8009f62:	2001      	movs	r0, #1
 8009f64:	f000 f80c 	bl	8009f80 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	68fa      	ldr	r2, [r7, #12]
 8009f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f72:	3318      	adds	r3, #24
 8009f74:	601a      	str	r2, [r3, #0]
}
 8009f76:	bf00      	nop
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
	...

08009f80 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009f88:	4b0b      	ldr	r3, [pc, #44]	; (8009fb8 <ETH_Delay+0x38>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a0b      	ldr	r2, [pc, #44]	; (8009fbc <ETH_Delay+0x3c>)
 8009f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f92:	0a5b      	lsrs	r3, r3, #9
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	fb02 f303 	mul.w	r3, r2, r3
 8009f9a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8009f9c:	bf00      	nop
  } 
  while (Delay --);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	1e5a      	subs	r2, r3, #1
 8009fa2:	60fa      	str	r2, [r7, #12]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d1f9      	bne.n	8009f9c <ETH_Delay+0x1c>
}
 8009fa8:	bf00      	nop
 8009faa:	bf00      	nop
 8009fac:	3714      	adds	r7, #20
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	20000058 	.word	0x20000058
 8009fbc:	10624dd3 	.word	0x10624dd3

08009fc0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b086      	sub	sp, #24
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009fd2:	4b23      	ldr	r3, [pc, #140]	; (800a060 <HAL_FLASH_Program+0xa0>)
 8009fd4:	7e1b      	ldrb	r3, [r3, #24]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d101      	bne.n	8009fde <HAL_FLASH_Program+0x1e>
 8009fda:	2302      	movs	r3, #2
 8009fdc:	e03b      	b.n	800a056 <HAL_FLASH_Program+0x96>
 8009fde:	4b20      	ldr	r3, [pc, #128]	; (800a060 <HAL_FLASH_Program+0xa0>)
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009fe4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009fe8:	f000 f860 	bl	800a0ac <FLASH_WaitForLastOperation>
 8009fec:	4603      	mov	r3, r0
 8009fee:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8009ff0:	7dfb      	ldrb	r3, [r7, #23]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d12b      	bne.n	800a04e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d105      	bne.n	800a008 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8009ffc:	783b      	ldrb	r3, [r7, #0]
 8009ffe:	4619      	mov	r1, r3
 800a000:	68b8      	ldr	r0, [r7, #8]
 800a002:	f000 f90b 	bl	800a21c <FLASH_Program_Byte>
 800a006:	e016      	b.n	800a036 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d105      	bne.n	800a01a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800a00e:	883b      	ldrh	r3, [r7, #0]
 800a010:	4619      	mov	r1, r3
 800a012:	68b8      	ldr	r0, [r7, #8]
 800a014:	f000 f8de 	bl	800a1d4 <FLASH_Program_HalfWord>
 800a018:	e00d      	b.n	800a036 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2b02      	cmp	r3, #2
 800a01e:	d105      	bne.n	800a02c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	4619      	mov	r1, r3
 800a024:	68b8      	ldr	r0, [r7, #8]
 800a026:	f000 f8b3 	bl	800a190 <FLASH_Program_Word>
 800a02a:	e004      	b.n	800a036 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800a02c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a030:	68b8      	ldr	r0, [r7, #8]
 800a032:	f000 f87b 	bl	800a12c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a036:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a03a:	f000 f837 	bl	800a0ac <FLASH_WaitForLastOperation>
 800a03e:	4603      	mov	r3, r0
 800a040:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800a042:	4b08      	ldr	r3, [pc, #32]	; (800a064 <HAL_FLASH_Program+0xa4>)
 800a044:	691b      	ldr	r3, [r3, #16]
 800a046:	4a07      	ldr	r2, [pc, #28]	; (800a064 <HAL_FLASH_Program+0xa4>)
 800a048:	f023 0301 	bic.w	r3, r3, #1
 800a04c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a04e:	4b04      	ldr	r3, [pc, #16]	; (800a060 <HAL_FLASH_Program+0xa0>)
 800a050:	2200      	movs	r2, #0
 800a052:	761a      	strb	r2, [r3, #24]
  
  return status;
 800a054:	7dfb      	ldrb	r3, [r7, #23]
}
 800a056:	4618      	mov	r0, r3
 800a058:	3718      	adds	r7, #24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	20000688 	.word	0x20000688
 800a064:	40023c00 	.word	0x40023c00

0800a068 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a06e:	2300      	movs	r3, #0
 800a070:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a072:	4b0b      	ldr	r3, [pc, #44]	; (800a0a0 <HAL_FLASH_Unlock+0x38>)
 800a074:	691b      	ldr	r3, [r3, #16]
 800a076:	2b00      	cmp	r3, #0
 800a078:	da0b      	bge.n	800a092 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800a07a:	4b09      	ldr	r3, [pc, #36]	; (800a0a0 <HAL_FLASH_Unlock+0x38>)
 800a07c:	4a09      	ldr	r2, [pc, #36]	; (800a0a4 <HAL_FLASH_Unlock+0x3c>)
 800a07e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800a080:	4b07      	ldr	r3, [pc, #28]	; (800a0a0 <HAL_FLASH_Unlock+0x38>)
 800a082:	4a09      	ldr	r2, [pc, #36]	; (800a0a8 <HAL_FLASH_Unlock+0x40>)
 800a084:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a086:	4b06      	ldr	r3, [pc, #24]	; (800a0a0 <HAL_FLASH_Unlock+0x38>)
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	da01      	bge.n	800a092 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800a092:	79fb      	ldrb	r3, [r7, #7]
}
 800a094:	4618      	mov	r0, r3
 800a096:	370c      	adds	r7, #12
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr
 800a0a0:	40023c00 	.word	0x40023c00
 800a0a4:	45670123 	.word	0x45670123
 800a0a8:	cdef89ab 	.word	0xcdef89ab

0800a0ac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a0b8:	4b1a      	ldr	r3, [pc, #104]	; (800a124 <FLASH_WaitForLastOperation+0x78>)
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800a0be:	f7fe f98d 	bl	80083dc <HAL_GetTick>
 800a0c2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a0c4:	e010      	b.n	800a0e8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0cc:	d00c      	beq.n	800a0e8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d007      	beq.n	800a0e4 <FLASH_WaitForLastOperation+0x38>
 800a0d4:	f7fe f982 	bl	80083dc <HAL_GetTick>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	1ad3      	subs	r3, r2, r3
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d201      	bcs.n	800a0e8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800a0e4:	2303      	movs	r3, #3
 800a0e6:	e019      	b.n	800a11c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a0e8:	4b0f      	ldr	r3, [pc, #60]	; (800a128 <FLASH_WaitForLastOperation+0x7c>)
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d1e8      	bne.n	800a0c6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800a0f4:	4b0c      	ldr	r3, [pc, #48]	; (800a128 <FLASH_WaitForLastOperation+0x7c>)
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	f003 0301 	and.w	r3, r3, #1
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d002      	beq.n	800a106 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a100:	4b09      	ldr	r3, [pc, #36]	; (800a128 <FLASH_WaitForLastOperation+0x7c>)
 800a102:	2201      	movs	r2, #1
 800a104:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800a106:	4b08      	ldr	r3, [pc, #32]	; (800a128 <FLASH_WaitForLastOperation+0x7c>)
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d003      	beq.n	800a11a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800a112:	f000 f8a5 	bl	800a260 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	e000      	b.n	800a11c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800a11a:	2300      	movs	r3, #0
  
}  
 800a11c:	4618      	mov	r0, r3
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}
 800a124:	20000688 	.word	0x20000688
 800a128:	40023c00 	.word	0x40023c00

0800a12c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b085      	sub	sp, #20
 800a130:	af00      	add	r7, sp, #0
 800a132:	60f8      	str	r0, [r7, #12]
 800a134:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a138:	4b14      	ldr	r3, [pc, #80]	; (800a18c <FLASH_Program_DoubleWord+0x60>)
 800a13a:	691b      	ldr	r3, [r3, #16]
 800a13c:	4a13      	ldr	r2, [pc, #76]	; (800a18c <FLASH_Program_DoubleWord+0x60>)
 800a13e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a142:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800a144:	4b11      	ldr	r3, [pc, #68]	; (800a18c <FLASH_Program_DoubleWord+0x60>)
 800a146:	691b      	ldr	r3, [r3, #16]
 800a148:	4a10      	ldr	r2, [pc, #64]	; (800a18c <FLASH_Program_DoubleWord+0x60>)
 800a14a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a14e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a150:	4b0e      	ldr	r3, [pc, #56]	; (800a18c <FLASH_Program_DoubleWord+0x60>)
 800a152:	691b      	ldr	r3, [r3, #16]
 800a154:	4a0d      	ldr	r2, [pc, #52]	; (800a18c <FLASH_Program_DoubleWord+0x60>)
 800a156:	f043 0301 	orr.w	r3, r3, #1
 800a15a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	683a      	ldr	r2, [r7, #0]
 800a160:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800a162:	f3bf 8f6f 	isb	sy
}
 800a166:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800a168:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a16c:	f04f 0200 	mov.w	r2, #0
 800a170:	f04f 0300 	mov.w	r3, #0
 800a174:	000a      	movs	r2, r1
 800a176:	2300      	movs	r3, #0
 800a178:	68f9      	ldr	r1, [r7, #12]
 800a17a:	3104      	adds	r1, #4
 800a17c:	4613      	mov	r3, r2
 800a17e:	600b      	str	r3, [r1, #0]
}
 800a180:	bf00      	nop
 800a182:	3714      	adds	r7, #20
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr
 800a18c:	40023c00 	.word	0x40023c00

0800a190 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a19a:	4b0d      	ldr	r3, [pc, #52]	; (800a1d0 <FLASH_Program_Word+0x40>)
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	4a0c      	ldr	r2, [pc, #48]	; (800a1d0 <FLASH_Program_Word+0x40>)
 800a1a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800a1a6:	4b0a      	ldr	r3, [pc, #40]	; (800a1d0 <FLASH_Program_Word+0x40>)
 800a1a8:	691b      	ldr	r3, [r3, #16]
 800a1aa:	4a09      	ldr	r2, [pc, #36]	; (800a1d0 <FLASH_Program_Word+0x40>)
 800a1ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a1b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a1b2:	4b07      	ldr	r3, [pc, #28]	; (800a1d0 <FLASH_Program_Word+0x40>)
 800a1b4:	691b      	ldr	r3, [r3, #16]
 800a1b6:	4a06      	ldr	r2, [pc, #24]	; (800a1d0 <FLASH_Program_Word+0x40>)
 800a1b8:	f043 0301 	orr.w	r3, r3, #1
 800a1bc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	683a      	ldr	r2, [r7, #0]
 800a1c2:	601a      	str	r2, [r3, #0]
}
 800a1c4:	bf00      	nop
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr
 800a1d0:	40023c00 	.word	0x40023c00

0800a1d4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	460b      	mov	r3, r1
 800a1de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a1e0:	4b0d      	ldr	r3, [pc, #52]	; (800a218 <FLASH_Program_HalfWord+0x44>)
 800a1e2:	691b      	ldr	r3, [r3, #16]
 800a1e4:	4a0c      	ldr	r2, [pc, #48]	; (800a218 <FLASH_Program_HalfWord+0x44>)
 800a1e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800a1ec:	4b0a      	ldr	r3, [pc, #40]	; (800a218 <FLASH_Program_HalfWord+0x44>)
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	4a09      	ldr	r2, [pc, #36]	; (800a218 <FLASH_Program_HalfWord+0x44>)
 800a1f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a1f8:	4b07      	ldr	r3, [pc, #28]	; (800a218 <FLASH_Program_HalfWord+0x44>)
 800a1fa:	691b      	ldr	r3, [r3, #16]
 800a1fc:	4a06      	ldr	r2, [pc, #24]	; (800a218 <FLASH_Program_HalfWord+0x44>)
 800a1fe:	f043 0301 	orr.w	r3, r3, #1
 800a202:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	887a      	ldrh	r2, [r7, #2]
 800a208:	801a      	strh	r2, [r3, #0]
}
 800a20a:	bf00      	nop
 800a20c:	370c      	adds	r7, #12
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop
 800a218:	40023c00 	.word	0x40023c00

0800a21c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	460b      	mov	r3, r1
 800a226:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a228:	4b0c      	ldr	r3, [pc, #48]	; (800a25c <FLASH_Program_Byte+0x40>)
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	4a0b      	ldr	r2, [pc, #44]	; (800a25c <FLASH_Program_Byte+0x40>)
 800a22e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a232:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800a234:	4b09      	ldr	r3, [pc, #36]	; (800a25c <FLASH_Program_Byte+0x40>)
 800a236:	4a09      	ldr	r2, [pc, #36]	; (800a25c <FLASH_Program_Byte+0x40>)
 800a238:	691b      	ldr	r3, [r3, #16]
 800a23a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a23c:	4b07      	ldr	r3, [pc, #28]	; (800a25c <FLASH_Program_Byte+0x40>)
 800a23e:	691b      	ldr	r3, [r3, #16]
 800a240:	4a06      	ldr	r2, [pc, #24]	; (800a25c <FLASH_Program_Byte+0x40>)
 800a242:	f043 0301 	orr.w	r3, r3, #1
 800a246:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	78fa      	ldrb	r2, [r7, #3]
 800a24c:	701a      	strb	r2, [r3, #0]
}
 800a24e:	bf00      	nop
 800a250:	370c      	adds	r7, #12
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	40023c00 	.word	0x40023c00

0800a260 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800a260:	b480      	push	{r7}
 800a262:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800a264:	4b27      	ldr	r3, [pc, #156]	; (800a304 <FLASH_SetErrorCode+0xa4>)
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	f003 0310 	and.w	r3, r3, #16
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d008      	beq.n	800a282 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800a270:	4b25      	ldr	r3, [pc, #148]	; (800a308 <FLASH_SetErrorCode+0xa8>)
 800a272:	69db      	ldr	r3, [r3, #28]
 800a274:	f043 0310 	orr.w	r3, r3, #16
 800a278:	4a23      	ldr	r2, [pc, #140]	; (800a308 <FLASH_SetErrorCode+0xa8>)
 800a27a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800a27c:	4b21      	ldr	r3, [pc, #132]	; (800a304 <FLASH_SetErrorCode+0xa4>)
 800a27e:	2210      	movs	r2, #16
 800a280:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800a282:	4b20      	ldr	r3, [pc, #128]	; (800a304 <FLASH_SetErrorCode+0xa4>)
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	f003 0320 	and.w	r3, r3, #32
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d008      	beq.n	800a2a0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800a28e:	4b1e      	ldr	r3, [pc, #120]	; (800a308 <FLASH_SetErrorCode+0xa8>)
 800a290:	69db      	ldr	r3, [r3, #28]
 800a292:	f043 0308 	orr.w	r3, r3, #8
 800a296:	4a1c      	ldr	r2, [pc, #112]	; (800a308 <FLASH_SetErrorCode+0xa8>)
 800a298:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800a29a:	4b1a      	ldr	r3, [pc, #104]	; (800a304 <FLASH_SetErrorCode+0xa4>)
 800a29c:	2220      	movs	r2, #32
 800a29e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800a2a0:	4b18      	ldr	r3, [pc, #96]	; (800a304 <FLASH_SetErrorCode+0xa4>)
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d008      	beq.n	800a2be <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800a2ac:	4b16      	ldr	r3, [pc, #88]	; (800a308 <FLASH_SetErrorCode+0xa8>)
 800a2ae:	69db      	ldr	r3, [r3, #28]
 800a2b0:	f043 0304 	orr.w	r3, r3, #4
 800a2b4:	4a14      	ldr	r2, [pc, #80]	; (800a308 <FLASH_SetErrorCode+0xa8>)
 800a2b6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800a2b8:	4b12      	ldr	r3, [pc, #72]	; (800a304 <FLASH_SetErrorCode+0xa4>)
 800a2ba:	2240      	movs	r2, #64	; 0x40
 800a2bc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800a2be:	4b11      	ldr	r3, [pc, #68]	; (800a304 <FLASH_SetErrorCode+0xa4>)
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d008      	beq.n	800a2dc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800a2ca:	4b0f      	ldr	r3, [pc, #60]	; (800a308 <FLASH_SetErrorCode+0xa8>)
 800a2cc:	69db      	ldr	r3, [r3, #28]
 800a2ce:	f043 0302 	orr.w	r3, r3, #2
 800a2d2:	4a0d      	ldr	r2, [pc, #52]	; (800a308 <FLASH_SetErrorCode+0xa8>)
 800a2d4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800a2d6:	4b0b      	ldr	r3, [pc, #44]	; (800a304 <FLASH_SetErrorCode+0xa4>)
 800a2d8:	2280      	movs	r2, #128	; 0x80
 800a2da:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800a2dc:	4b09      	ldr	r3, [pc, #36]	; (800a304 <FLASH_SetErrorCode+0xa4>)
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	f003 0302 	and.w	r3, r3, #2
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d008      	beq.n	800a2fa <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800a2e8:	4b07      	ldr	r3, [pc, #28]	; (800a308 <FLASH_SetErrorCode+0xa8>)
 800a2ea:	69db      	ldr	r3, [r3, #28]
 800a2ec:	f043 0320 	orr.w	r3, r3, #32
 800a2f0:	4a05      	ldr	r2, [pc, #20]	; (800a308 <FLASH_SetErrorCode+0xa8>)
 800a2f2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800a2f4:	4b03      	ldr	r3, [pc, #12]	; (800a304 <FLASH_SetErrorCode+0xa4>)
 800a2f6:	2202      	movs	r2, #2
 800a2f8:	60da      	str	r2, [r3, #12]
  }
}
 800a2fa:	bf00      	nop
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr
 800a304:	40023c00 	.word	0x40023c00
 800a308:	20000688 	.word	0x20000688

0800a30c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800a31a:	2300      	movs	r3, #0
 800a31c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a31e:	4b31      	ldr	r3, [pc, #196]	; (800a3e4 <HAL_FLASHEx_Erase+0xd8>)
 800a320:	7e1b      	ldrb	r3, [r3, #24]
 800a322:	2b01      	cmp	r3, #1
 800a324:	d101      	bne.n	800a32a <HAL_FLASHEx_Erase+0x1e>
 800a326:	2302      	movs	r3, #2
 800a328:	e058      	b.n	800a3dc <HAL_FLASHEx_Erase+0xd0>
 800a32a:	4b2e      	ldr	r3, [pc, #184]	; (800a3e4 <HAL_FLASHEx_Erase+0xd8>)
 800a32c:	2201      	movs	r2, #1
 800a32e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a330:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a334:	f7ff feba 	bl	800a0ac <FLASH_WaitForLastOperation>
 800a338:	4603      	mov	r3, r0
 800a33a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a33c:	7bfb      	ldrb	r3, [r7, #15]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d148      	bne.n	800a3d4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	f04f 32ff 	mov.w	r2, #4294967295
 800a348:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d115      	bne.n	800a37e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	691b      	ldr	r3, [r3, #16]
 800a356:	b2da      	uxtb	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	4619      	mov	r1, r3
 800a35e:	4610      	mov	r0, r2
 800a360:	f000 f844 	bl	800a3ec <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a364:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a368:	f7ff fea0 	bl	800a0ac <FLASH_WaitForLastOperation>
 800a36c:	4603      	mov	r3, r0
 800a36e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800a370:	4b1d      	ldr	r3, [pc, #116]	; (800a3e8 <HAL_FLASHEx_Erase+0xdc>)
 800a372:	691b      	ldr	r3, [r3, #16]
 800a374:	4a1c      	ldr	r2, [pc, #112]	; (800a3e8 <HAL_FLASHEx_Erase+0xdc>)
 800a376:	f023 0304 	bic.w	r3, r3, #4
 800a37a:	6113      	str	r3, [r2, #16]
 800a37c:	e028      	b.n	800a3d0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	689b      	ldr	r3, [r3, #8]
 800a382:	60bb      	str	r3, [r7, #8]
 800a384:	e01c      	b.n	800a3c0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	691b      	ldr	r3, [r3, #16]
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	4619      	mov	r1, r3
 800a38e:	68b8      	ldr	r0, [r7, #8]
 800a390:	f000 f850 	bl	800a434 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a394:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a398:	f7ff fe88 	bl	800a0ac <FLASH_WaitForLastOperation>
 800a39c:	4603      	mov	r3, r0
 800a39e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800a3a0:	4b11      	ldr	r3, [pc, #68]	; (800a3e8 <HAL_FLASHEx_Erase+0xdc>)
 800a3a2:	691b      	ldr	r3, [r3, #16]
 800a3a4:	4a10      	ldr	r2, [pc, #64]	; (800a3e8 <HAL_FLASHEx_Erase+0xdc>)
 800a3a6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800a3aa:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800a3ac:	7bfb      	ldrb	r3, [r7, #15]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d003      	beq.n	800a3ba <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	68ba      	ldr	r2, [r7, #8]
 800a3b6:	601a      	str	r2, [r3, #0]
          break;
 800a3b8:	e00a      	b.n	800a3d0 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	60bb      	str	r3, [r7, #8]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	68da      	ldr	r2, [r3, #12]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	68ba      	ldr	r2, [r7, #8]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d3da      	bcc.n	800a386 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800a3d0:	f000 f878 	bl	800a4c4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a3d4:	4b03      	ldr	r3, [pc, #12]	; (800a3e4 <HAL_FLASHEx_Erase+0xd8>)
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	761a      	strb	r2, [r3, #24]

  return status;
 800a3da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3710      	adds	r7, #16
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}
 800a3e4:	20000688 	.word	0x20000688
 800a3e8:	40023c00 	.word	0x40023c00

0800a3ec <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	6039      	str	r1, [r7, #0]
 800a3f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a3f8:	4b0d      	ldr	r3, [pc, #52]	; (800a430 <FLASH_MassErase+0x44>)
 800a3fa:	691b      	ldr	r3, [r3, #16]
 800a3fc:	4a0c      	ldr	r2, [pc, #48]	; (800a430 <FLASH_MassErase+0x44>)
 800a3fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a402:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800a404:	4b0a      	ldr	r3, [pc, #40]	; (800a430 <FLASH_MassErase+0x44>)
 800a406:	691b      	ldr	r3, [r3, #16]
 800a408:	4a09      	ldr	r2, [pc, #36]	; (800a430 <FLASH_MassErase+0x44>)
 800a40a:	f043 0304 	orr.w	r3, r3, #4
 800a40e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800a410:	4b07      	ldr	r3, [pc, #28]	; (800a430 <FLASH_MassErase+0x44>)
 800a412:	691a      	ldr	r2, [r3, #16]
 800a414:	79fb      	ldrb	r3, [r7, #7]
 800a416:	021b      	lsls	r3, r3, #8
 800a418:	4313      	orrs	r3, r2
 800a41a:	4a05      	ldr	r2, [pc, #20]	; (800a430 <FLASH_MassErase+0x44>)
 800a41c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a420:	6113      	str	r3, [r2, #16]
}
 800a422:	bf00      	nop
 800a424:	370c      	adds	r7, #12
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop
 800a430:	40023c00 	.word	0x40023c00

0800a434 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800a434:	b480      	push	{r7}
 800a436:	b085      	sub	sp, #20
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	460b      	mov	r3, r1
 800a43e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800a440:	2300      	movs	r3, #0
 800a442:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800a444:	78fb      	ldrb	r3, [r7, #3]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d102      	bne.n	800a450 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800a44a:	2300      	movs	r3, #0
 800a44c:	60fb      	str	r3, [r7, #12]
 800a44e:	e010      	b.n	800a472 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800a450:	78fb      	ldrb	r3, [r7, #3]
 800a452:	2b01      	cmp	r3, #1
 800a454:	d103      	bne.n	800a45e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800a456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a45a:	60fb      	str	r3, [r7, #12]
 800a45c:	e009      	b.n	800a472 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800a45e:	78fb      	ldrb	r3, [r7, #3]
 800a460:	2b02      	cmp	r3, #2
 800a462:	d103      	bne.n	800a46c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800a464:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a468:	60fb      	str	r3, [r7, #12]
 800a46a:	e002      	b.n	800a472 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800a46c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a470:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a472:	4b13      	ldr	r3, [pc, #76]	; (800a4c0 <FLASH_Erase_Sector+0x8c>)
 800a474:	691b      	ldr	r3, [r3, #16]
 800a476:	4a12      	ldr	r2, [pc, #72]	; (800a4c0 <FLASH_Erase_Sector+0x8c>)
 800a478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a47c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800a47e:	4b10      	ldr	r3, [pc, #64]	; (800a4c0 <FLASH_Erase_Sector+0x8c>)
 800a480:	691a      	ldr	r2, [r3, #16]
 800a482:	490f      	ldr	r1, [pc, #60]	; (800a4c0 <FLASH_Erase_Sector+0x8c>)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	4313      	orrs	r3, r2
 800a488:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800a48a:	4b0d      	ldr	r3, [pc, #52]	; (800a4c0 <FLASH_Erase_Sector+0x8c>)
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	4a0c      	ldr	r2, [pc, #48]	; (800a4c0 <FLASH_Erase_Sector+0x8c>)
 800a490:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a494:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800a496:	4b0a      	ldr	r3, [pc, #40]	; (800a4c0 <FLASH_Erase_Sector+0x8c>)
 800a498:	691a      	ldr	r2, [r3, #16]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	00db      	lsls	r3, r3, #3
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	4a07      	ldr	r2, [pc, #28]	; (800a4c0 <FLASH_Erase_Sector+0x8c>)
 800a4a2:	f043 0302 	orr.w	r3, r3, #2
 800a4a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800a4a8:	4b05      	ldr	r3, [pc, #20]	; (800a4c0 <FLASH_Erase_Sector+0x8c>)
 800a4aa:	691b      	ldr	r3, [r3, #16]
 800a4ac:	4a04      	ldr	r2, [pc, #16]	; (800a4c0 <FLASH_Erase_Sector+0x8c>)
 800a4ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4b2:	6113      	str	r3, [r2, #16]
}
 800a4b4:	bf00      	nop
 800a4b6:	3714      	adds	r7, #20
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr
 800a4c0:	40023c00 	.word	0x40023c00

0800a4c4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800a4c8:	4b20      	ldr	r3, [pc, #128]	; (800a54c <FLASH_FlushCaches+0x88>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d017      	beq.n	800a504 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800a4d4:	4b1d      	ldr	r3, [pc, #116]	; (800a54c <FLASH_FlushCaches+0x88>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a1c      	ldr	r2, [pc, #112]	; (800a54c <FLASH_FlushCaches+0x88>)
 800a4da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a4de:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800a4e0:	4b1a      	ldr	r3, [pc, #104]	; (800a54c <FLASH_FlushCaches+0x88>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a19      	ldr	r2, [pc, #100]	; (800a54c <FLASH_FlushCaches+0x88>)
 800a4e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a4ea:	6013      	str	r3, [r2, #0]
 800a4ec:	4b17      	ldr	r3, [pc, #92]	; (800a54c <FLASH_FlushCaches+0x88>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a16      	ldr	r2, [pc, #88]	; (800a54c <FLASH_FlushCaches+0x88>)
 800a4f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a4f6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a4f8:	4b14      	ldr	r3, [pc, #80]	; (800a54c <FLASH_FlushCaches+0x88>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a13      	ldr	r2, [pc, #76]	; (800a54c <FLASH_FlushCaches+0x88>)
 800a4fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a502:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800a504:	4b11      	ldr	r3, [pc, #68]	; (800a54c <FLASH_FlushCaches+0x88>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d017      	beq.n	800a540 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800a510:	4b0e      	ldr	r3, [pc, #56]	; (800a54c <FLASH_FlushCaches+0x88>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4a0d      	ldr	r2, [pc, #52]	; (800a54c <FLASH_FlushCaches+0x88>)
 800a516:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a51a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800a51c:	4b0b      	ldr	r3, [pc, #44]	; (800a54c <FLASH_FlushCaches+0x88>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a0a      	ldr	r2, [pc, #40]	; (800a54c <FLASH_FlushCaches+0x88>)
 800a522:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a526:	6013      	str	r3, [r2, #0]
 800a528:	4b08      	ldr	r3, [pc, #32]	; (800a54c <FLASH_FlushCaches+0x88>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a07      	ldr	r2, [pc, #28]	; (800a54c <FLASH_FlushCaches+0x88>)
 800a52e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a532:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800a534:	4b05      	ldr	r3, [pc, #20]	; (800a54c <FLASH_FlushCaches+0x88>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a04      	ldr	r2, [pc, #16]	; (800a54c <FLASH_FlushCaches+0x88>)
 800a53a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a53e:	6013      	str	r3, [r2, #0]
  }
}
 800a540:	bf00      	nop
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
 800a54a:	bf00      	nop
 800a54c:	40023c00 	.word	0x40023c00

0800a550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a550:	b480      	push	{r7}
 800a552:	b089      	sub	sp, #36	; 0x24
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a55a:	2300      	movs	r3, #0
 800a55c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a55e:	2300      	movs	r3, #0
 800a560:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a562:	2300      	movs	r3, #0
 800a564:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a566:	2300      	movs	r3, #0
 800a568:	61fb      	str	r3, [r7, #28]
 800a56a:	e16b      	b.n	800a844 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a56c:	2201      	movs	r2, #1
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	fa02 f303 	lsl.w	r3, r2, r3
 800a574:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	697a      	ldr	r2, [r7, #20]
 800a57c:	4013      	ands	r3, r2
 800a57e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	429a      	cmp	r2, r3
 800a586:	f040 815a 	bne.w	800a83e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	f003 0303 	and.w	r3, r3, #3
 800a592:	2b01      	cmp	r3, #1
 800a594:	d005      	beq.n	800a5a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	d130      	bne.n	800a604 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	005b      	lsls	r3, r3, #1
 800a5ac:	2203      	movs	r2, #3
 800a5ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a5b2:	43db      	mvns	r3, r3
 800a5b4:	69ba      	ldr	r2, [r7, #24]
 800a5b6:	4013      	ands	r3, r2
 800a5b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	68da      	ldr	r2, [r3, #12]
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	005b      	lsls	r3, r3, #1
 800a5c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5c6:	69ba      	ldr	r2, [r7, #24]
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	69ba      	ldr	r2, [r7, #24]
 800a5d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a5d8:	2201      	movs	r2, #1
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a5e0:	43db      	mvns	r3, r3
 800a5e2:	69ba      	ldr	r2, [r7, #24]
 800a5e4:	4013      	ands	r3, r2
 800a5e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	091b      	lsrs	r3, r3, #4
 800a5ee:	f003 0201 	and.w	r2, r3, #1
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f8:	69ba      	ldr	r2, [r7, #24]
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	69ba      	ldr	r2, [r7, #24]
 800a602:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	f003 0303 	and.w	r3, r3, #3
 800a60c:	2b03      	cmp	r3, #3
 800a60e:	d017      	beq.n	800a640 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	68db      	ldr	r3, [r3, #12]
 800a614:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a616:	69fb      	ldr	r3, [r7, #28]
 800a618:	005b      	lsls	r3, r3, #1
 800a61a:	2203      	movs	r2, #3
 800a61c:	fa02 f303 	lsl.w	r3, r2, r3
 800a620:	43db      	mvns	r3, r3
 800a622:	69ba      	ldr	r2, [r7, #24]
 800a624:	4013      	ands	r3, r2
 800a626:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	689a      	ldr	r2, [r3, #8]
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	005b      	lsls	r3, r3, #1
 800a630:	fa02 f303 	lsl.w	r3, r2, r3
 800a634:	69ba      	ldr	r2, [r7, #24]
 800a636:	4313      	orrs	r3, r2
 800a638:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	69ba      	ldr	r2, [r7, #24]
 800a63e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	f003 0303 	and.w	r3, r3, #3
 800a648:	2b02      	cmp	r3, #2
 800a64a:	d123      	bne.n	800a694 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	08da      	lsrs	r2, r3, #3
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	3208      	adds	r2, #8
 800a654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a658:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a65a:	69fb      	ldr	r3, [r7, #28]
 800a65c:	f003 0307 	and.w	r3, r3, #7
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	220f      	movs	r2, #15
 800a664:	fa02 f303 	lsl.w	r3, r2, r3
 800a668:	43db      	mvns	r3, r3
 800a66a:	69ba      	ldr	r2, [r7, #24]
 800a66c:	4013      	ands	r3, r2
 800a66e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	691a      	ldr	r2, [r3, #16]
 800a674:	69fb      	ldr	r3, [r7, #28]
 800a676:	f003 0307 	and.w	r3, r3, #7
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	fa02 f303 	lsl.w	r3, r2, r3
 800a680:	69ba      	ldr	r2, [r7, #24]
 800a682:	4313      	orrs	r3, r2
 800a684:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	08da      	lsrs	r2, r3, #3
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	3208      	adds	r2, #8
 800a68e:	69b9      	ldr	r1, [r7, #24]
 800a690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a69a:	69fb      	ldr	r3, [r7, #28]
 800a69c:	005b      	lsls	r3, r3, #1
 800a69e:	2203      	movs	r2, #3
 800a6a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a6a4:	43db      	mvns	r3, r3
 800a6a6:	69ba      	ldr	r2, [r7, #24]
 800a6a8:	4013      	ands	r3, r2
 800a6aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	f003 0203 	and.w	r2, r3, #3
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	005b      	lsls	r3, r3, #1
 800a6b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a6bc:	69ba      	ldr	r2, [r7, #24]
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	69ba      	ldr	r2, [r7, #24]
 800a6c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	f000 80b4 	beq.w	800a83e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	60fb      	str	r3, [r7, #12]
 800a6da:	4b60      	ldr	r3, [pc, #384]	; (800a85c <HAL_GPIO_Init+0x30c>)
 800a6dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6de:	4a5f      	ldr	r2, [pc, #380]	; (800a85c <HAL_GPIO_Init+0x30c>)
 800a6e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a6e4:	6453      	str	r3, [r2, #68]	; 0x44
 800a6e6:	4b5d      	ldr	r3, [pc, #372]	; (800a85c <HAL_GPIO_Init+0x30c>)
 800a6e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6ee:	60fb      	str	r3, [r7, #12]
 800a6f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a6f2:	4a5b      	ldr	r2, [pc, #364]	; (800a860 <HAL_GPIO_Init+0x310>)
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	089b      	lsrs	r3, r3, #2
 800a6f8:	3302      	adds	r3, #2
 800a6fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	f003 0303 	and.w	r3, r3, #3
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	220f      	movs	r2, #15
 800a70a:	fa02 f303 	lsl.w	r3, r2, r3
 800a70e:	43db      	mvns	r3, r3
 800a710:	69ba      	ldr	r2, [r7, #24]
 800a712:	4013      	ands	r3, r2
 800a714:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	4a52      	ldr	r2, [pc, #328]	; (800a864 <HAL_GPIO_Init+0x314>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d02b      	beq.n	800a776 <HAL_GPIO_Init+0x226>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	4a51      	ldr	r2, [pc, #324]	; (800a868 <HAL_GPIO_Init+0x318>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d025      	beq.n	800a772 <HAL_GPIO_Init+0x222>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	4a50      	ldr	r2, [pc, #320]	; (800a86c <HAL_GPIO_Init+0x31c>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d01f      	beq.n	800a76e <HAL_GPIO_Init+0x21e>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	4a4f      	ldr	r2, [pc, #316]	; (800a870 <HAL_GPIO_Init+0x320>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d019      	beq.n	800a76a <HAL_GPIO_Init+0x21a>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	4a4e      	ldr	r2, [pc, #312]	; (800a874 <HAL_GPIO_Init+0x324>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d013      	beq.n	800a766 <HAL_GPIO_Init+0x216>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	4a4d      	ldr	r2, [pc, #308]	; (800a878 <HAL_GPIO_Init+0x328>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d00d      	beq.n	800a762 <HAL_GPIO_Init+0x212>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	4a4c      	ldr	r2, [pc, #304]	; (800a87c <HAL_GPIO_Init+0x32c>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d007      	beq.n	800a75e <HAL_GPIO_Init+0x20e>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	4a4b      	ldr	r2, [pc, #300]	; (800a880 <HAL_GPIO_Init+0x330>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d101      	bne.n	800a75a <HAL_GPIO_Init+0x20a>
 800a756:	2307      	movs	r3, #7
 800a758:	e00e      	b.n	800a778 <HAL_GPIO_Init+0x228>
 800a75a:	2308      	movs	r3, #8
 800a75c:	e00c      	b.n	800a778 <HAL_GPIO_Init+0x228>
 800a75e:	2306      	movs	r3, #6
 800a760:	e00a      	b.n	800a778 <HAL_GPIO_Init+0x228>
 800a762:	2305      	movs	r3, #5
 800a764:	e008      	b.n	800a778 <HAL_GPIO_Init+0x228>
 800a766:	2304      	movs	r3, #4
 800a768:	e006      	b.n	800a778 <HAL_GPIO_Init+0x228>
 800a76a:	2303      	movs	r3, #3
 800a76c:	e004      	b.n	800a778 <HAL_GPIO_Init+0x228>
 800a76e:	2302      	movs	r3, #2
 800a770:	e002      	b.n	800a778 <HAL_GPIO_Init+0x228>
 800a772:	2301      	movs	r3, #1
 800a774:	e000      	b.n	800a778 <HAL_GPIO_Init+0x228>
 800a776:	2300      	movs	r3, #0
 800a778:	69fa      	ldr	r2, [r7, #28]
 800a77a:	f002 0203 	and.w	r2, r2, #3
 800a77e:	0092      	lsls	r2, r2, #2
 800a780:	4093      	lsls	r3, r2
 800a782:	69ba      	ldr	r2, [r7, #24]
 800a784:	4313      	orrs	r3, r2
 800a786:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a788:	4935      	ldr	r1, [pc, #212]	; (800a860 <HAL_GPIO_Init+0x310>)
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	089b      	lsrs	r3, r3, #2
 800a78e:	3302      	adds	r3, #2
 800a790:	69ba      	ldr	r2, [r7, #24]
 800a792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a796:	4b3b      	ldr	r3, [pc, #236]	; (800a884 <HAL_GPIO_Init+0x334>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	43db      	mvns	r3, r3
 800a7a0:	69ba      	ldr	r2, [r7, #24]
 800a7a2:	4013      	ands	r3, r2
 800a7a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d003      	beq.n	800a7ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800a7b2:	69ba      	ldr	r2, [r7, #24]
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a7ba:	4a32      	ldr	r2, [pc, #200]	; (800a884 <HAL_GPIO_Init+0x334>)
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a7c0:	4b30      	ldr	r3, [pc, #192]	; (800a884 <HAL_GPIO_Init+0x334>)
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	43db      	mvns	r3, r3
 800a7ca:	69ba      	ldr	r2, [r7, #24]
 800a7cc:	4013      	ands	r3, r2
 800a7ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d003      	beq.n	800a7e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800a7dc:	69ba      	ldr	r2, [r7, #24]
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a7e4:	4a27      	ldr	r2, [pc, #156]	; (800a884 <HAL_GPIO_Init+0x334>)
 800a7e6:	69bb      	ldr	r3, [r7, #24]
 800a7e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a7ea:	4b26      	ldr	r3, [pc, #152]	; (800a884 <HAL_GPIO_Init+0x334>)
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	43db      	mvns	r3, r3
 800a7f4:	69ba      	ldr	r2, [r7, #24]
 800a7f6:	4013      	ands	r3, r2
 800a7f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a802:	2b00      	cmp	r3, #0
 800a804:	d003      	beq.n	800a80e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800a806:	69ba      	ldr	r2, [r7, #24]
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	4313      	orrs	r3, r2
 800a80c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a80e:	4a1d      	ldr	r2, [pc, #116]	; (800a884 <HAL_GPIO_Init+0x334>)
 800a810:	69bb      	ldr	r3, [r7, #24]
 800a812:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a814:	4b1b      	ldr	r3, [pc, #108]	; (800a884 <HAL_GPIO_Init+0x334>)
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	43db      	mvns	r3, r3
 800a81e:	69ba      	ldr	r2, [r7, #24]
 800a820:	4013      	ands	r3, r2
 800a822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d003      	beq.n	800a838 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800a830:	69ba      	ldr	r2, [r7, #24]
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	4313      	orrs	r3, r2
 800a836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a838:	4a12      	ldr	r2, [pc, #72]	; (800a884 <HAL_GPIO_Init+0x334>)
 800a83a:	69bb      	ldr	r3, [r7, #24]
 800a83c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a83e:	69fb      	ldr	r3, [r7, #28]
 800a840:	3301      	adds	r3, #1
 800a842:	61fb      	str	r3, [r7, #28]
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	2b0f      	cmp	r3, #15
 800a848:	f67f ae90 	bls.w	800a56c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a84c:	bf00      	nop
 800a84e:	bf00      	nop
 800a850:	3724      	adds	r7, #36	; 0x24
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	40023800 	.word	0x40023800
 800a860:	40013800 	.word	0x40013800
 800a864:	40020000 	.word	0x40020000
 800a868:	40020400 	.word	0x40020400
 800a86c:	40020800 	.word	0x40020800
 800a870:	40020c00 	.word	0x40020c00
 800a874:	40021000 	.word	0x40021000
 800a878:	40021400 	.word	0x40021400
 800a87c:	40021800 	.word	0x40021800
 800a880:	40021c00 	.word	0x40021c00
 800a884:	40013c00 	.word	0x40013c00

0800a888 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	460b      	mov	r3, r1
 800a892:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	691a      	ldr	r2, [r3, #16]
 800a898:	887b      	ldrh	r3, [r7, #2]
 800a89a:	4013      	ands	r3, r2
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d002      	beq.n	800a8a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	73fb      	strb	r3, [r7, #15]
 800a8a4:	e001      	b.n	800a8aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a8aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3714      	adds	r7, #20
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	807b      	strh	r3, [r7, #2]
 800a8c4:	4613      	mov	r3, r2
 800a8c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a8c8:	787b      	ldrb	r3, [r7, #1]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d003      	beq.n	800a8d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a8ce:	887a      	ldrh	r2, [r7, #2]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a8d4:	e003      	b.n	800a8de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a8d6:	887b      	ldrh	r3, [r7, #2]
 800a8d8:	041a      	lsls	r2, r3, #16
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	619a      	str	r2, [r3, #24]
}
 800a8de:	bf00      	nop
 800a8e0:	370c      	adds	r7, #12
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr
	...

0800a8ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b086      	sub	sp, #24
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d101      	bne.n	800a8fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e264      	b.n	800adc8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f003 0301 	and.w	r3, r3, #1
 800a906:	2b00      	cmp	r3, #0
 800a908:	d075      	beq.n	800a9f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a90a:	4ba3      	ldr	r3, [pc, #652]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800a90c:	689b      	ldr	r3, [r3, #8]
 800a90e:	f003 030c 	and.w	r3, r3, #12
 800a912:	2b04      	cmp	r3, #4
 800a914:	d00c      	beq.n	800a930 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a916:	4ba0      	ldr	r3, [pc, #640]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a91e:	2b08      	cmp	r3, #8
 800a920:	d112      	bne.n	800a948 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a922:	4b9d      	ldr	r3, [pc, #628]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a92a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a92e:	d10b      	bne.n	800a948 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a930:	4b99      	ldr	r3, [pc, #612]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d05b      	beq.n	800a9f4 <HAL_RCC_OscConfig+0x108>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d157      	bne.n	800a9f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a944:	2301      	movs	r3, #1
 800a946:	e23f      	b.n	800adc8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a950:	d106      	bne.n	800a960 <HAL_RCC_OscConfig+0x74>
 800a952:	4b91      	ldr	r3, [pc, #580]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4a90      	ldr	r2, [pc, #576]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800a958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a95c:	6013      	str	r3, [r2, #0]
 800a95e:	e01d      	b.n	800a99c <HAL_RCC_OscConfig+0xb0>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a968:	d10c      	bne.n	800a984 <HAL_RCC_OscConfig+0x98>
 800a96a:	4b8b      	ldr	r3, [pc, #556]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a8a      	ldr	r2, [pc, #552]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800a970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a974:	6013      	str	r3, [r2, #0]
 800a976:	4b88      	ldr	r3, [pc, #544]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a87      	ldr	r2, [pc, #540]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800a97c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a980:	6013      	str	r3, [r2, #0]
 800a982:	e00b      	b.n	800a99c <HAL_RCC_OscConfig+0xb0>
 800a984:	4b84      	ldr	r3, [pc, #528]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a83      	ldr	r2, [pc, #524]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800a98a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a98e:	6013      	str	r3, [r2, #0]
 800a990:	4b81      	ldr	r3, [pc, #516]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a80      	ldr	r2, [pc, #512]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800a996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a99a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d013      	beq.n	800a9cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9a4:	f7fd fd1a 	bl	80083dc <HAL_GetTick>
 800a9a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a9aa:	e008      	b.n	800a9be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a9ac:	f7fd fd16 	bl	80083dc <HAL_GetTick>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	1ad3      	subs	r3, r2, r3
 800a9b6:	2b64      	cmp	r3, #100	; 0x64
 800a9b8:	d901      	bls.n	800a9be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a9ba:	2303      	movs	r3, #3
 800a9bc:	e204      	b.n	800adc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a9be:	4b76      	ldr	r3, [pc, #472]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d0f0      	beq.n	800a9ac <HAL_RCC_OscConfig+0xc0>
 800a9ca:	e014      	b.n	800a9f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9cc:	f7fd fd06 	bl	80083dc <HAL_GetTick>
 800a9d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a9d2:	e008      	b.n	800a9e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a9d4:	f7fd fd02 	bl	80083dc <HAL_GetTick>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	1ad3      	subs	r3, r2, r3
 800a9de:	2b64      	cmp	r3, #100	; 0x64
 800a9e0:	d901      	bls.n	800a9e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a9e2:	2303      	movs	r3, #3
 800a9e4:	e1f0      	b.n	800adc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a9e6:	4b6c      	ldr	r3, [pc, #432]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d1f0      	bne.n	800a9d4 <HAL_RCC_OscConfig+0xe8>
 800a9f2:	e000      	b.n	800a9f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a9f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f003 0302 	and.w	r3, r3, #2
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d063      	beq.n	800aaca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800aa02:	4b65      	ldr	r3, [pc, #404]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	f003 030c 	and.w	r3, r3, #12
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00b      	beq.n	800aa26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aa0e:	4b62      	ldr	r3, [pc, #392]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800aa16:	2b08      	cmp	r3, #8
 800aa18:	d11c      	bne.n	800aa54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aa1a:	4b5f      	ldr	r3, [pc, #380]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d116      	bne.n	800aa54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa26:	4b5c      	ldr	r3, [pc, #368]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f003 0302 	and.w	r3, r3, #2
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d005      	beq.n	800aa3e <HAL_RCC_OscConfig+0x152>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d001      	beq.n	800aa3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e1c4      	b.n	800adc8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa3e:	4b56      	ldr	r3, [pc, #344]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	691b      	ldr	r3, [r3, #16]
 800aa4a:	00db      	lsls	r3, r3, #3
 800aa4c:	4952      	ldr	r1, [pc, #328]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aa52:	e03a      	b.n	800aaca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d020      	beq.n	800aa9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aa5c:	4b4f      	ldr	r3, [pc, #316]	; (800ab9c <HAL_RCC_OscConfig+0x2b0>)
 800aa5e:	2201      	movs	r2, #1
 800aa60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa62:	f7fd fcbb 	bl	80083dc <HAL_GetTick>
 800aa66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa68:	e008      	b.n	800aa7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aa6a:	f7fd fcb7 	bl	80083dc <HAL_GetTick>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	1ad3      	subs	r3, r2, r3
 800aa74:	2b02      	cmp	r3, #2
 800aa76:	d901      	bls.n	800aa7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800aa78:	2303      	movs	r3, #3
 800aa7a:	e1a5      	b.n	800adc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa7c:	4b46      	ldr	r3, [pc, #280]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f003 0302 	and.w	r3, r3, #2
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d0f0      	beq.n	800aa6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa88:	4b43      	ldr	r3, [pc, #268]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	691b      	ldr	r3, [r3, #16]
 800aa94:	00db      	lsls	r3, r3, #3
 800aa96:	4940      	ldr	r1, [pc, #256]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	600b      	str	r3, [r1, #0]
 800aa9c:	e015      	b.n	800aaca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa9e:	4b3f      	ldr	r3, [pc, #252]	; (800ab9c <HAL_RCC_OscConfig+0x2b0>)
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaa4:	f7fd fc9a 	bl	80083dc <HAL_GetTick>
 800aaa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aaaa:	e008      	b.n	800aabe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aaac:	f7fd fc96 	bl	80083dc <HAL_GetTick>
 800aab0:	4602      	mov	r2, r0
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	1ad3      	subs	r3, r2, r3
 800aab6:	2b02      	cmp	r3, #2
 800aab8:	d901      	bls.n	800aabe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800aaba:	2303      	movs	r3, #3
 800aabc:	e184      	b.n	800adc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aabe:	4b36      	ldr	r3, [pc, #216]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f003 0302 	and.w	r3, r3, #2
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1f0      	bne.n	800aaac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f003 0308 	and.w	r3, r3, #8
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d030      	beq.n	800ab38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	695b      	ldr	r3, [r3, #20]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d016      	beq.n	800ab0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aade:	4b30      	ldr	r3, [pc, #192]	; (800aba0 <HAL_RCC_OscConfig+0x2b4>)
 800aae0:	2201      	movs	r2, #1
 800aae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aae4:	f7fd fc7a 	bl	80083dc <HAL_GetTick>
 800aae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aaea:	e008      	b.n	800aafe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aaec:	f7fd fc76 	bl	80083dc <HAL_GetTick>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	1ad3      	subs	r3, r2, r3
 800aaf6:	2b02      	cmp	r3, #2
 800aaf8:	d901      	bls.n	800aafe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800aafa:	2303      	movs	r3, #3
 800aafc:	e164      	b.n	800adc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aafe:	4b26      	ldr	r3, [pc, #152]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800ab00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab02:	f003 0302 	and.w	r3, r3, #2
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d0f0      	beq.n	800aaec <HAL_RCC_OscConfig+0x200>
 800ab0a:	e015      	b.n	800ab38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ab0c:	4b24      	ldr	r3, [pc, #144]	; (800aba0 <HAL_RCC_OscConfig+0x2b4>)
 800ab0e:	2200      	movs	r2, #0
 800ab10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ab12:	f7fd fc63 	bl	80083dc <HAL_GetTick>
 800ab16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab18:	e008      	b.n	800ab2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ab1a:	f7fd fc5f 	bl	80083dc <HAL_GetTick>
 800ab1e:	4602      	mov	r2, r0
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	1ad3      	subs	r3, r2, r3
 800ab24:	2b02      	cmp	r3, #2
 800ab26:	d901      	bls.n	800ab2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800ab28:	2303      	movs	r3, #3
 800ab2a:	e14d      	b.n	800adc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab2c:	4b1a      	ldr	r3, [pc, #104]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800ab2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab30:	f003 0302 	and.w	r3, r3, #2
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d1f0      	bne.n	800ab1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f003 0304 	and.w	r3, r3, #4
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	f000 80a0 	beq.w	800ac86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ab46:	2300      	movs	r3, #0
 800ab48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ab4a:	4b13      	ldr	r3, [pc, #76]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800ab4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d10f      	bne.n	800ab76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab56:	2300      	movs	r3, #0
 800ab58:	60bb      	str	r3, [r7, #8]
 800ab5a:	4b0f      	ldr	r3, [pc, #60]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800ab5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab5e:	4a0e      	ldr	r2, [pc, #56]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800ab60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab64:	6413      	str	r3, [r2, #64]	; 0x40
 800ab66:	4b0c      	ldr	r3, [pc, #48]	; (800ab98 <HAL_RCC_OscConfig+0x2ac>)
 800ab68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab6e:	60bb      	str	r3, [r7, #8]
 800ab70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ab72:	2301      	movs	r3, #1
 800ab74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab76:	4b0b      	ldr	r3, [pc, #44]	; (800aba4 <HAL_RCC_OscConfig+0x2b8>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d121      	bne.n	800abc6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ab82:	4b08      	ldr	r3, [pc, #32]	; (800aba4 <HAL_RCC_OscConfig+0x2b8>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4a07      	ldr	r2, [pc, #28]	; (800aba4 <HAL_RCC_OscConfig+0x2b8>)
 800ab88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab8e:	f7fd fc25 	bl	80083dc <HAL_GetTick>
 800ab92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab94:	e011      	b.n	800abba <HAL_RCC_OscConfig+0x2ce>
 800ab96:	bf00      	nop
 800ab98:	40023800 	.word	0x40023800
 800ab9c:	42470000 	.word	0x42470000
 800aba0:	42470e80 	.word	0x42470e80
 800aba4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aba8:	f7fd fc18 	bl	80083dc <HAL_GetTick>
 800abac:	4602      	mov	r2, r0
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	1ad3      	subs	r3, r2, r3
 800abb2:	2b02      	cmp	r3, #2
 800abb4:	d901      	bls.n	800abba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800abb6:	2303      	movs	r3, #3
 800abb8:	e106      	b.n	800adc8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800abba:	4b85      	ldr	r3, [pc, #532]	; (800add0 <HAL_RCC_OscConfig+0x4e4>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d0f0      	beq.n	800aba8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	689b      	ldr	r3, [r3, #8]
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d106      	bne.n	800abdc <HAL_RCC_OscConfig+0x2f0>
 800abce:	4b81      	ldr	r3, [pc, #516]	; (800add4 <HAL_RCC_OscConfig+0x4e8>)
 800abd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abd2:	4a80      	ldr	r2, [pc, #512]	; (800add4 <HAL_RCC_OscConfig+0x4e8>)
 800abd4:	f043 0301 	orr.w	r3, r3, #1
 800abd8:	6713      	str	r3, [r2, #112]	; 0x70
 800abda:	e01c      	b.n	800ac16 <HAL_RCC_OscConfig+0x32a>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	2b05      	cmp	r3, #5
 800abe2:	d10c      	bne.n	800abfe <HAL_RCC_OscConfig+0x312>
 800abe4:	4b7b      	ldr	r3, [pc, #492]	; (800add4 <HAL_RCC_OscConfig+0x4e8>)
 800abe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abe8:	4a7a      	ldr	r2, [pc, #488]	; (800add4 <HAL_RCC_OscConfig+0x4e8>)
 800abea:	f043 0304 	orr.w	r3, r3, #4
 800abee:	6713      	str	r3, [r2, #112]	; 0x70
 800abf0:	4b78      	ldr	r3, [pc, #480]	; (800add4 <HAL_RCC_OscConfig+0x4e8>)
 800abf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abf4:	4a77      	ldr	r2, [pc, #476]	; (800add4 <HAL_RCC_OscConfig+0x4e8>)
 800abf6:	f043 0301 	orr.w	r3, r3, #1
 800abfa:	6713      	str	r3, [r2, #112]	; 0x70
 800abfc:	e00b      	b.n	800ac16 <HAL_RCC_OscConfig+0x32a>
 800abfe:	4b75      	ldr	r3, [pc, #468]	; (800add4 <HAL_RCC_OscConfig+0x4e8>)
 800ac00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac02:	4a74      	ldr	r2, [pc, #464]	; (800add4 <HAL_RCC_OscConfig+0x4e8>)
 800ac04:	f023 0301 	bic.w	r3, r3, #1
 800ac08:	6713      	str	r3, [r2, #112]	; 0x70
 800ac0a:	4b72      	ldr	r3, [pc, #456]	; (800add4 <HAL_RCC_OscConfig+0x4e8>)
 800ac0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac0e:	4a71      	ldr	r2, [pc, #452]	; (800add4 <HAL_RCC_OscConfig+0x4e8>)
 800ac10:	f023 0304 	bic.w	r3, r3, #4
 800ac14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d015      	beq.n	800ac4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac1e:	f7fd fbdd 	bl	80083dc <HAL_GetTick>
 800ac22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac24:	e00a      	b.n	800ac3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac26:	f7fd fbd9 	bl	80083dc <HAL_GetTick>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	1ad3      	subs	r3, r2, r3
 800ac30:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d901      	bls.n	800ac3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800ac38:	2303      	movs	r3, #3
 800ac3a:	e0c5      	b.n	800adc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac3c:	4b65      	ldr	r3, [pc, #404]	; (800add4 <HAL_RCC_OscConfig+0x4e8>)
 800ac3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac40:	f003 0302 	and.w	r3, r3, #2
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d0ee      	beq.n	800ac26 <HAL_RCC_OscConfig+0x33a>
 800ac48:	e014      	b.n	800ac74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac4a:	f7fd fbc7 	bl	80083dc <HAL_GetTick>
 800ac4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac50:	e00a      	b.n	800ac68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac52:	f7fd fbc3 	bl	80083dc <HAL_GetTick>
 800ac56:	4602      	mov	r2, r0
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	1ad3      	subs	r3, r2, r3
 800ac5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d901      	bls.n	800ac68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800ac64:	2303      	movs	r3, #3
 800ac66:	e0af      	b.n	800adc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac68:	4b5a      	ldr	r3, [pc, #360]	; (800add4 <HAL_RCC_OscConfig+0x4e8>)
 800ac6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac6c:	f003 0302 	and.w	r3, r3, #2
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d1ee      	bne.n	800ac52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ac74:	7dfb      	ldrb	r3, [r7, #23]
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d105      	bne.n	800ac86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac7a:	4b56      	ldr	r3, [pc, #344]	; (800add4 <HAL_RCC_OscConfig+0x4e8>)
 800ac7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac7e:	4a55      	ldr	r2, [pc, #340]	; (800add4 <HAL_RCC_OscConfig+0x4e8>)
 800ac80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	699b      	ldr	r3, [r3, #24]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	f000 809b 	beq.w	800adc6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ac90:	4b50      	ldr	r3, [pc, #320]	; (800add4 <HAL_RCC_OscConfig+0x4e8>)
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	f003 030c 	and.w	r3, r3, #12
 800ac98:	2b08      	cmp	r3, #8
 800ac9a:	d05c      	beq.n	800ad56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	699b      	ldr	r3, [r3, #24]
 800aca0:	2b02      	cmp	r3, #2
 800aca2:	d141      	bne.n	800ad28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aca4:	4b4c      	ldr	r3, [pc, #304]	; (800add8 <HAL_RCC_OscConfig+0x4ec>)
 800aca6:	2200      	movs	r2, #0
 800aca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800acaa:	f7fd fb97 	bl	80083dc <HAL_GetTick>
 800acae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800acb0:	e008      	b.n	800acc4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800acb2:	f7fd fb93 	bl	80083dc <HAL_GetTick>
 800acb6:	4602      	mov	r2, r0
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	1ad3      	subs	r3, r2, r3
 800acbc:	2b02      	cmp	r3, #2
 800acbe:	d901      	bls.n	800acc4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800acc0:	2303      	movs	r3, #3
 800acc2:	e081      	b.n	800adc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800acc4:	4b43      	ldr	r3, [pc, #268]	; (800add4 <HAL_RCC_OscConfig+0x4e8>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800accc:	2b00      	cmp	r3, #0
 800acce:	d1f0      	bne.n	800acb2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	69da      	ldr	r2, [r3, #28]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6a1b      	ldr	r3, [r3, #32]
 800acd8:	431a      	orrs	r2, r3
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acde:	019b      	lsls	r3, r3, #6
 800ace0:	431a      	orrs	r2, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace6:	085b      	lsrs	r3, r3, #1
 800ace8:	3b01      	subs	r3, #1
 800acea:	041b      	lsls	r3, r3, #16
 800acec:	431a      	orrs	r2, r3
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf2:	061b      	lsls	r3, r3, #24
 800acf4:	4937      	ldr	r1, [pc, #220]	; (800add4 <HAL_RCC_OscConfig+0x4e8>)
 800acf6:	4313      	orrs	r3, r2
 800acf8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800acfa:	4b37      	ldr	r3, [pc, #220]	; (800add8 <HAL_RCC_OscConfig+0x4ec>)
 800acfc:	2201      	movs	r2, #1
 800acfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad00:	f7fd fb6c 	bl	80083dc <HAL_GetTick>
 800ad04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ad06:	e008      	b.n	800ad1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ad08:	f7fd fb68 	bl	80083dc <HAL_GetTick>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	1ad3      	subs	r3, r2, r3
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	d901      	bls.n	800ad1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800ad16:	2303      	movs	r3, #3
 800ad18:	e056      	b.n	800adc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ad1a:	4b2e      	ldr	r3, [pc, #184]	; (800add4 <HAL_RCC_OscConfig+0x4e8>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d0f0      	beq.n	800ad08 <HAL_RCC_OscConfig+0x41c>
 800ad26:	e04e      	b.n	800adc6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad28:	4b2b      	ldr	r3, [pc, #172]	; (800add8 <HAL_RCC_OscConfig+0x4ec>)
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad2e:	f7fd fb55 	bl	80083dc <HAL_GetTick>
 800ad32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ad34:	e008      	b.n	800ad48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ad36:	f7fd fb51 	bl	80083dc <HAL_GetTick>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	1ad3      	subs	r3, r2, r3
 800ad40:	2b02      	cmp	r3, #2
 800ad42:	d901      	bls.n	800ad48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800ad44:	2303      	movs	r3, #3
 800ad46:	e03f      	b.n	800adc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ad48:	4b22      	ldr	r3, [pc, #136]	; (800add4 <HAL_RCC_OscConfig+0x4e8>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d1f0      	bne.n	800ad36 <HAL_RCC_OscConfig+0x44a>
 800ad54:	e037      	b.n	800adc6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	699b      	ldr	r3, [r3, #24]
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d101      	bne.n	800ad62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e032      	b.n	800adc8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ad62:	4b1c      	ldr	r3, [pc, #112]	; (800add4 <HAL_RCC_OscConfig+0x4e8>)
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	699b      	ldr	r3, [r3, #24]
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d028      	beq.n	800adc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d121      	bne.n	800adc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d11a      	bne.n	800adc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ad8c:	68fa      	ldr	r2, [r7, #12]
 800ad8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ad92:	4013      	ands	r3, r2
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ad98:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d111      	bne.n	800adc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ada8:	085b      	lsrs	r3, r3, #1
 800adaa:	3b01      	subs	r3, #1
 800adac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800adae:	429a      	cmp	r2, r3
 800adb0:	d107      	bne.n	800adc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adbc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d001      	beq.n	800adc6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800adc2:	2301      	movs	r3, #1
 800adc4:	e000      	b.n	800adc8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800adc6:	2300      	movs	r3, #0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3718      	adds	r7, #24
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}
 800add0:	40007000 	.word	0x40007000
 800add4:	40023800 	.word	0x40023800
 800add8:	42470060 	.word	0x42470060

0800addc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d101      	bne.n	800adf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800adec:	2301      	movs	r3, #1
 800adee:	e0cc      	b.n	800af8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800adf0:	4b68      	ldr	r3, [pc, #416]	; (800af94 <HAL_RCC_ClockConfig+0x1b8>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f003 0307 	and.w	r3, r3, #7
 800adf8:	683a      	ldr	r2, [r7, #0]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d90c      	bls.n	800ae18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800adfe:	4b65      	ldr	r3, [pc, #404]	; (800af94 <HAL_RCC_ClockConfig+0x1b8>)
 800ae00:	683a      	ldr	r2, [r7, #0]
 800ae02:	b2d2      	uxtb	r2, r2
 800ae04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae06:	4b63      	ldr	r3, [pc, #396]	; (800af94 <HAL_RCC_ClockConfig+0x1b8>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f003 0307 	and.w	r3, r3, #7
 800ae0e:	683a      	ldr	r2, [r7, #0]
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d001      	beq.n	800ae18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ae14:	2301      	movs	r3, #1
 800ae16:	e0b8      	b.n	800af8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f003 0302 	and.w	r3, r3, #2
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d020      	beq.n	800ae66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f003 0304 	and.w	r3, r3, #4
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d005      	beq.n	800ae3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ae30:	4b59      	ldr	r3, [pc, #356]	; (800af98 <HAL_RCC_ClockConfig+0x1bc>)
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	4a58      	ldr	r2, [pc, #352]	; (800af98 <HAL_RCC_ClockConfig+0x1bc>)
 800ae36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ae3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f003 0308 	and.w	r3, r3, #8
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d005      	beq.n	800ae54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ae48:	4b53      	ldr	r3, [pc, #332]	; (800af98 <HAL_RCC_ClockConfig+0x1bc>)
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	4a52      	ldr	r2, [pc, #328]	; (800af98 <HAL_RCC_ClockConfig+0x1bc>)
 800ae4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ae52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae54:	4b50      	ldr	r3, [pc, #320]	; (800af98 <HAL_RCC_ClockConfig+0x1bc>)
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	494d      	ldr	r1, [pc, #308]	; (800af98 <HAL_RCC_ClockConfig+0x1bc>)
 800ae62:	4313      	orrs	r3, r2
 800ae64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f003 0301 	and.w	r3, r3, #1
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d044      	beq.n	800aefc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d107      	bne.n	800ae8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae7a:	4b47      	ldr	r3, [pc, #284]	; (800af98 <HAL_RCC_ClockConfig+0x1bc>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d119      	bne.n	800aeba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	e07f      	b.n	800af8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	d003      	beq.n	800ae9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ae96:	2b03      	cmp	r3, #3
 800ae98:	d107      	bne.n	800aeaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae9a:	4b3f      	ldr	r3, [pc, #252]	; (800af98 <HAL_RCC_ClockConfig+0x1bc>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d109      	bne.n	800aeba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aea6:	2301      	movs	r3, #1
 800aea8:	e06f      	b.n	800af8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aeaa:	4b3b      	ldr	r3, [pc, #236]	; (800af98 <HAL_RCC_ClockConfig+0x1bc>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f003 0302 	and.w	r3, r3, #2
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d101      	bne.n	800aeba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e067      	b.n	800af8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aeba:	4b37      	ldr	r3, [pc, #220]	; (800af98 <HAL_RCC_ClockConfig+0x1bc>)
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	f023 0203 	bic.w	r2, r3, #3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	4934      	ldr	r1, [pc, #208]	; (800af98 <HAL_RCC_ClockConfig+0x1bc>)
 800aec8:	4313      	orrs	r3, r2
 800aeca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800aecc:	f7fd fa86 	bl	80083dc <HAL_GetTick>
 800aed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aed2:	e00a      	b.n	800aeea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aed4:	f7fd fa82 	bl	80083dc <HAL_GetTick>
 800aed8:	4602      	mov	r2, r0
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	1ad3      	subs	r3, r2, r3
 800aede:	f241 3288 	movw	r2, #5000	; 0x1388
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d901      	bls.n	800aeea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800aee6:	2303      	movs	r3, #3
 800aee8:	e04f      	b.n	800af8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aeea:	4b2b      	ldr	r3, [pc, #172]	; (800af98 <HAL_RCC_ClockConfig+0x1bc>)
 800aeec:	689b      	ldr	r3, [r3, #8]
 800aeee:	f003 020c 	and.w	r2, r3, #12
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d1eb      	bne.n	800aed4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800aefc:	4b25      	ldr	r3, [pc, #148]	; (800af94 <HAL_RCC_ClockConfig+0x1b8>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f003 0307 	and.w	r3, r3, #7
 800af04:	683a      	ldr	r2, [r7, #0]
 800af06:	429a      	cmp	r2, r3
 800af08:	d20c      	bcs.n	800af24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af0a:	4b22      	ldr	r3, [pc, #136]	; (800af94 <HAL_RCC_ClockConfig+0x1b8>)
 800af0c:	683a      	ldr	r2, [r7, #0]
 800af0e:	b2d2      	uxtb	r2, r2
 800af10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800af12:	4b20      	ldr	r3, [pc, #128]	; (800af94 <HAL_RCC_ClockConfig+0x1b8>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f003 0307 	and.w	r3, r3, #7
 800af1a:	683a      	ldr	r2, [r7, #0]
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d001      	beq.n	800af24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	e032      	b.n	800af8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f003 0304 	and.w	r3, r3, #4
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d008      	beq.n	800af42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800af30:	4b19      	ldr	r3, [pc, #100]	; (800af98 <HAL_RCC_ClockConfig+0x1bc>)
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	4916      	ldr	r1, [pc, #88]	; (800af98 <HAL_RCC_ClockConfig+0x1bc>)
 800af3e:	4313      	orrs	r3, r2
 800af40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f003 0308 	and.w	r3, r3, #8
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d009      	beq.n	800af62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800af4e:	4b12      	ldr	r3, [pc, #72]	; (800af98 <HAL_RCC_ClockConfig+0x1bc>)
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	691b      	ldr	r3, [r3, #16]
 800af5a:	00db      	lsls	r3, r3, #3
 800af5c:	490e      	ldr	r1, [pc, #56]	; (800af98 <HAL_RCC_ClockConfig+0x1bc>)
 800af5e:	4313      	orrs	r3, r2
 800af60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800af62:	f000 f821 	bl	800afa8 <HAL_RCC_GetSysClockFreq>
 800af66:	4602      	mov	r2, r0
 800af68:	4b0b      	ldr	r3, [pc, #44]	; (800af98 <HAL_RCC_ClockConfig+0x1bc>)
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	091b      	lsrs	r3, r3, #4
 800af6e:	f003 030f 	and.w	r3, r3, #15
 800af72:	490a      	ldr	r1, [pc, #40]	; (800af9c <HAL_RCC_ClockConfig+0x1c0>)
 800af74:	5ccb      	ldrb	r3, [r1, r3]
 800af76:	fa22 f303 	lsr.w	r3, r2, r3
 800af7a:	4a09      	ldr	r2, [pc, #36]	; (800afa0 <HAL_RCC_ClockConfig+0x1c4>)
 800af7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800af7e:	4b09      	ldr	r3, [pc, #36]	; (800afa4 <HAL_RCC_ClockConfig+0x1c8>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4618      	mov	r0, r3
 800af84:	f7fd f9e6 	bl	8008354 <HAL_InitTick>

  return HAL_OK;
 800af88:	2300      	movs	r3, #0
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3710      	adds	r7, #16
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	40023c00 	.word	0x40023c00
 800af98:	40023800 	.word	0x40023800
 800af9c:	0801debc 	.word	0x0801debc
 800afa0:	20000058 	.word	0x20000058
 800afa4:	2000005c 	.word	0x2000005c

0800afa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800afa8:	b5b0      	push	{r4, r5, r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800afae:	2100      	movs	r1, #0
 800afb0:	6079      	str	r1, [r7, #4]
 800afb2:	2100      	movs	r1, #0
 800afb4:	60f9      	str	r1, [r7, #12]
 800afb6:	2100      	movs	r1, #0
 800afb8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800afba:	2100      	movs	r1, #0
 800afbc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800afbe:	4952      	ldr	r1, [pc, #328]	; (800b108 <HAL_RCC_GetSysClockFreq+0x160>)
 800afc0:	6889      	ldr	r1, [r1, #8]
 800afc2:	f001 010c 	and.w	r1, r1, #12
 800afc6:	2908      	cmp	r1, #8
 800afc8:	d00d      	beq.n	800afe6 <HAL_RCC_GetSysClockFreq+0x3e>
 800afca:	2908      	cmp	r1, #8
 800afcc:	f200 8094 	bhi.w	800b0f8 <HAL_RCC_GetSysClockFreq+0x150>
 800afd0:	2900      	cmp	r1, #0
 800afd2:	d002      	beq.n	800afda <HAL_RCC_GetSysClockFreq+0x32>
 800afd4:	2904      	cmp	r1, #4
 800afd6:	d003      	beq.n	800afe0 <HAL_RCC_GetSysClockFreq+0x38>
 800afd8:	e08e      	b.n	800b0f8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800afda:	4b4c      	ldr	r3, [pc, #304]	; (800b10c <HAL_RCC_GetSysClockFreq+0x164>)
 800afdc:	60bb      	str	r3, [r7, #8]
       break;
 800afde:	e08e      	b.n	800b0fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800afe0:	4b4b      	ldr	r3, [pc, #300]	; (800b110 <HAL_RCC_GetSysClockFreq+0x168>)
 800afe2:	60bb      	str	r3, [r7, #8]
      break;
 800afe4:	e08b      	b.n	800b0fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800afe6:	4948      	ldr	r1, [pc, #288]	; (800b108 <HAL_RCC_GetSysClockFreq+0x160>)
 800afe8:	6849      	ldr	r1, [r1, #4]
 800afea:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800afee:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800aff0:	4945      	ldr	r1, [pc, #276]	; (800b108 <HAL_RCC_GetSysClockFreq+0x160>)
 800aff2:	6849      	ldr	r1, [r1, #4]
 800aff4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800aff8:	2900      	cmp	r1, #0
 800affa:	d024      	beq.n	800b046 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800affc:	4942      	ldr	r1, [pc, #264]	; (800b108 <HAL_RCC_GetSysClockFreq+0x160>)
 800affe:	6849      	ldr	r1, [r1, #4]
 800b000:	0989      	lsrs	r1, r1, #6
 800b002:	4608      	mov	r0, r1
 800b004:	f04f 0100 	mov.w	r1, #0
 800b008:	f240 14ff 	movw	r4, #511	; 0x1ff
 800b00c:	f04f 0500 	mov.w	r5, #0
 800b010:	ea00 0204 	and.w	r2, r0, r4
 800b014:	ea01 0305 	and.w	r3, r1, r5
 800b018:	493d      	ldr	r1, [pc, #244]	; (800b110 <HAL_RCC_GetSysClockFreq+0x168>)
 800b01a:	fb01 f003 	mul.w	r0, r1, r3
 800b01e:	2100      	movs	r1, #0
 800b020:	fb01 f102 	mul.w	r1, r1, r2
 800b024:	1844      	adds	r4, r0, r1
 800b026:	493a      	ldr	r1, [pc, #232]	; (800b110 <HAL_RCC_GetSysClockFreq+0x168>)
 800b028:	fba2 0101 	umull	r0, r1, r2, r1
 800b02c:	1863      	adds	r3, r4, r1
 800b02e:	4619      	mov	r1, r3
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	461a      	mov	r2, r3
 800b034:	f04f 0300 	mov.w	r3, #0
 800b038:	f7f5 fdca 	bl	8000bd0 <__aeabi_uldivmod>
 800b03c:	4602      	mov	r2, r0
 800b03e:	460b      	mov	r3, r1
 800b040:	4613      	mov	r3, r2
 800b042:	60fb      	str	r3, [r7, #12]
 800b044:	e04a      	b.n	800b0dc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b046:	4b30      	ldr	r3, [pc, #192]	; (800b108 <HAL_RCC_GetSysClockFreq+0x160>)
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	099b      	lsrs	r3, r3, #6
 800b04c:	461a      	mov	r2, r3
 800b04e:	f04f 0300 	mov.w	r3, #0
 800b052:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b056:	f04f 0100 	mov.w	r1, #0
 800b05a:	ea02 0400 	and.w	r4, r2, r0
 800b05e:	ea03 0501 	and.w	r5, r3, r1
 800b062:	4620      	mov	r0, r4
 800b064:	4629      	mov	r1, r5
 800b066:	f04f 0200 	mov.w	r2, #0
 800b06a:	f04f 0300 	mov.w	r3, #0
 800b06e:	014b      	lsls	r3, r1, #5
 800b070:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b074:	0142      	lsls	r2, r0, #5
 800b076:	4610      	mov	r0, r2
 800b078:	4619      	mov	r1, r3
 800b07a:	1b00      	subs	r0, r0, r4
 800b07c:	eb61 0105 	sbc.w	r1, r1, r5
 800b080:	f04f 0200 	mov.w	r2, #0
 800b084:	f04f 0300 	mov.w	r3, #0
 800b088:	018b      	lsls	r3, r1, #6
 800b08a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b08e:	0182      	lsls	r2, r0, #6
 800b090:	1a12      	subs	r2, r2, r0
 800b092:	eb63 0301 	sbc.w	r3, r3, r1
 800b096:	f04f 0000 	mov.w	r0, #0
 800b09a:	f04f 0100 	mov.w	r1, #0
 800b09e:	00d9      	lsls	r1, r3, #3
 800b0a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b0a4:	00d0      	lsls	r0, r2, #3
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	1912      	adds	r2, r2, r4
 800b0ac:	eb45 0303 	adc.w	r3, r5, r3
 800b0b0:	f04f 0000 	mov.w	r0, #0
 800b0b4:	f04f 0100 	mov.w	r1, #0
 800b0b8:	0299      	lsls	r1, r3, #10
 800b0ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b0be:	0290      	lsls	r0, r2, #10
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	460b      	mov	r3, r1
 800b0c4:	4610      	mov	r0, r2
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	f04f 0300 	mov.w	r3, #0
 800b0d0:	f7f5 fd7e 	bl	8000bd0 <__aeabi_uldivmod>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	4613      	mov	r3, r2
 800b0da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b0dc:	4b0a      	ldr	r3, [pc, #40]	; (800b108 <HAL_RCC_GetSysClockFreq+0x160>)
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	0c1b      	lsrs	r3, r3, #16
 800b0e2:	f003 0303 	and.w	r3, r3, #3
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	005b      	lsls	r3, r3, #1
 800b0ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b0ec:	68fa      	ldr	r2, [r7, #12]
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0f4:	60bb      	str	r3, [r7, #8]
      break;
 800b0f6:	e002      	b.n	800b0fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b0f8:	4b04      	ldr	r3, [pc, #16]	; (800b10c <HAL_RCC_GetSysClockFreq+0x164>)
 800b0fa:	60bb      	str	r3, [r7, #8]
      break;
 800b0fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b0fe:	68bb      	ldr	r3, [r7, #8]
}
 800b100:	4618      	mov	r0, r3
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bdb0      	pop	{r4, r5, r7, pc}
 800b108:	40023800 	.word	0x40023800
 800b10c:	00f42400 	.word	0x00f42400
 800b110:	017d7840 	.word	0x017d7840

0800b114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b114:	b480      	push	{r7}
 800b116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b118:	4b03      	ldr	r3, [pc, #12]	; (800b128 <HAL_RCC_GetHCLKFreq+0x14>)
 800b11a:	681b      	ldr	r3, [r3, #0]
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop
 800b128:	20000058 	.word	0x20000058

0800b12c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b130:	f7ff fff0 	bl	800b114 <HAL_RCC_GetHCLKFreq>
 800b134:	4602      	mov	r2, r0
 800b136:	4b05      	ldr	r3, [pc, #20]	; (800b14c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b138:	689b      	ldr	r3, [r3, #8]
 800b13a:	0a9b      	lsrs	r3, r3, #10
 800b13c:	f003 0307 	and.w	r3, r3, #7
 800b140:	4903      	ldr	r1, [pc, #12]	; (800b150 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b142:	5ccb      	ldrb	r3, [r1, r3]
 800b144:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b148:	4618      	mov	r0, r3
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	40023800 	.word	0x40023800
 800b150:	0801decc 	.word	0x0801decc

0800b154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b158:	f7ff ffdc 	bl	800b114 <HAL_RCC_GetHCLKFreq>
 800b15c:	4602      	mov	r2, r0
 800b15e:	4b05      	ldr	r3, [pc, #20]	; (800b174 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	0b5b      	lsrs	r3, r3, #13
 800b164:	f003 0307 	and.w	r3, r3, #7
 800b168:	4903      	ldr	r1, [pc, #12]	; (800b178 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b16a:	5ccb      	ldrb	r3, [r1, r3]
 800b16c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b170:	4618      	mov	r0, r3
 800b172:	bd80      	pop	{r7, pc}
 800b174:	40023800 	.word	0x40023800
 800b178:	0801decc 	.word	0x0801decc

0800b17c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b082      	sub	sp, #8
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d101      	bne.n	800b18e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b18a:	2301      	movs	r3, #1
 800b18c:	e041      	b.n	800b212 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b194:	b2db      	uxtb	r3, r3
 800b196:	2b00      	cmp	r3, #0
 800b198:	d106      	bne.n	800b1a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 f839 	bl	800b21a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2202      	movs	r2, #2
 800b1ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	3304      	adds	r3, #4
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	4610      	mov	r0, r2
 800b1bc:	f000 f9c2 	bl	800b544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2201      	movs	r2, #1
 800b204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2201      	movs	r2, #1
 800b20c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b210:	2300      	movs	r3, #0
}
 800b212:	4618      	mov	r0, r3
 800b214:	3708      	adds	r7, #8
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}

0800b21a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b21a:	b480      	push	{r7}
 800b21c:	b083      	sub	sp, #12
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b222:	bf00      	nop
 800b224:	370c      	adds	r7, #12
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr
	...

0800b230 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b084      	sub	sp, #16
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d109      	bne.n	800b254 <HAL_TIM_PWM_Start+0x24>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b246:	b2db      	uxtb	r3, r3
 800b248:	2b01      	cmp	r3, #1
 800b24a:	bf14      	ite	ne
 800b24c:	2301      	movne	r3, #1
 800b24e:	2300      	moveq	r3, #0
 800b250:	b2db      	uxtb	r3, r3
 800b252:	e022      	b.n	800b29a <HAL_TIM_PWM_Start+0x6a>
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	2b04      	cmp	r3, #4
 800b258:	d109      	bne.n	800b26e <HAL_TIM_PWM_Start+0x3e>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b260:	b2db      	uxtb	r3, r3
 800b262:	2b01      	cmp	r3, #1
 800b264:	bf14      	ite	ne
 800b266:	2301      	movne	r3, #1
 800b268:	2300      	moveq	r3, #0
 800b26a:	b2db      	uxtb	r3, r3
 800b26c:	e015      	b.n	800b29a <HAL_TIM_PWM_Start+0x6a>
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	2b08      	cmp	r3, #8
 800b272:	d109      	bne.n	800b288 <HAL_TIM_PWM_Start+0x58>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b27a:	b2db      	uxtb	r3, r3
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	bf14      	ite	ne
 800b280:	2301      	movne	r3, #1
 800b282:	2300      	moveq	r3, #0
 800b284:	b2db      	uxtb	r3, r3
 800b286:	e008      	b.n	800b29a <HAL_TIM_PWM_Start+0x6a>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	2b01      	cmp	r3, #1
 800b292:	bf14      	ite	ne
 800b294:	2301      	movne	r3, #1
 800b296:	2300      	moveq	r3, #0
 800b298:	b2db      	uxtb	r3, r3
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d001      	beq.n	800b2a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b29e:	2301      	movs	r3, #1
 800b2a0:	e07c      	b.n	800b39c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d104      	bne.n	800b2b2 <HAL_TIM_PWM_Start+0x82>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2202      	movs	r2, #2
 800b2ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b2b0:	e013      	b.n	800b2da <HAL_TIM_PWM_Start+0xaa>
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	2b04      	cmp	r3, #4
 800b2b6:	d104      	bne.n	800b2c2 <HAL_TIM_PWM_Start+0x92>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2202      	movs	r2, #2
 800b2bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b2c0:	e00b      	b.n	800b2da <HAL_TIM_PWM_Start+0xaa>
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	2b08      	cmp	r3, #8
 800b2c6:	d104      	bne.n	800b2d2 <HAL_TIM_PWM_Start+0xa2>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2202      	movs	r2, #2
 800b2cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b2d0:	e003      	b.n	800b2da <HAL_TIM_PWM_Start+0xaa>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2202      	movs	r2, #2
 800b2d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	6839      	ldr	r1, [r7, #0]
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f000 fb7e 	bl	800b9e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4a2d      	ldr	r2, [pc, #180]	; (800b3a4 <HAL_TIM_PWM_Start+0x174>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d004      	beq.n	800b2fc <HAL_TIM_PWM_Start+0xcc>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4a2c      	ldr	r2, [pc, #176]	; (800b3a8 <HAL_TIM_PWM_Start+0x178>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d101      	bne.n	800b300 <HAL_TIM_PWM_Start+0xd0>
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	e000      	b.n	800b302 <HAL_TIM_PWM_Start+0xd2>
 800b300:	2300      	movs	r3, #0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d007      	beq.n	800b316 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b314:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4a22      	ldr	r2, [pc, #136]	; (800b3a4 <HAL_TIM_PWM_Start+0x174>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d022      	beq.n	800b366 <HAL_TIM_PWM_Start+0x136>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b328:	d01d      	beq.n	800b366 <HAL_TIM_PWM_Start+0x136>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	4a1f      	ldr	r2, [pc, #124]	; (800b3ac <HAL_TIM_PWM_Start+0x17c>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d018      	beq.n	800b366 <HAL_TIM_PWM_Start+0x136>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a1d      	ldr	r2, [pc, #116]	; (800b3b0 <HAL_TIM_PWM_Start+0x180>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d013      	beq.n	800b366 <HAL_TIM_PWM_Start+0x136>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4a1c      	ldr	r2, [pc, #112]	; (800b3b4 <HAL_TIM_PWM_Start+0x184>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d00e      	beq.n	800b366 <HAL_TIM_PWM_Start+0x136>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a16      	ldr	r2, [pc, #88]	; (800b3a8 <HAL_TIM_PWM_Start+0x178>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d009      	beq.n	800b366 <HAL_TIM_PWM_Start+0x136>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4a18      	ldr	r2, [pc, #96]	; (800b3b8 <HAL_TIM_PWM_Start+0x188>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d004      	beq.n	800b366 <HAL_TIM_PWM_Start+0x136>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4a16      	ldr	r2, [pc, #88]	; (800b3bc <HAL_TIM_PWM_Start+0x18c>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d111      	bne.n	800b38a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	f003 0307 	and.w	r3, r3, #7
 800b370:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2b06      	cmp	r3, #6
 800b376:	d010      	beq.n	800b39a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f042 0201 	orr.w	r2, r2, #1
 800b386:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b388:	e007      	b.n	800b39a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f042 0201 	orr.w	r2, r2, #1
 800b398:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b39a:	2300      	movs	r3, #0
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3710      	adds	r7, #16
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	40010000 	.word	0x40010000
 800b3a8:	40010400 	.word	0x40010400
 800b3ac:	40000400 	.word	0x40000400
 800b3b0:	40000800 	.word	0x40000800
 800b3b4:	40000c00 	.word	0x40000c00
 800b3b8:	40014000 	.word	0x40014000
 800b3bc:	40001800 	.word	0x40001800

0800b3c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b086      	sub	sp, #24
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	60f8      	str	r0, [r7, #12]
 800b3c8:	60b9      	str	r1, [r7, #8]
 800b3ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d101      	bne.n	800b3de <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b3da:	2302      	movs	r3, #2
 800b3dc:	e0ae      	b.n	800b53c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2b0c      	cmp	r3, #12
 800b3ea:	f200 809f 	bhi.w	800b52c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b3ee:	a201      	add	r2, pc, #4	; (adr r2, 800b3f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f4:	0800b429 	.word	0x0800b429
 800b3f8:	0800b52d 	.word	0x0800b52d
 800b3fc:	0800b52d 	.word	0x0800b52d
 800b400:	0800b52d 	.word	0x0800b52d
 800b404:	0800b469 	.word	0x0800b469
 800b408:	0800b52d 	.word	0x0800b52d
 800b40c:	0800b52d 	.word	0x0800b52d
 800b410:	0800b52d 	.word	0x0800b52d
 800b414:	0800b4ab 	.word	0x0800b4ab
 800b418:	0800b52d 	.word	0x0800b52d
 800b41c:	0800b52d 	.word	0x0800b52d
 800b420:	0800b52d 	.word	0x0800b52d
 800b424:	0800b4eb 	.word	0x0800b4eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	68b9      	ldr	r1, [r7, #8]
 800b42e:	4618      	mov	r0, r3
 800b430:	f000 f928 	bl	800b684 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	699a      	ldr	r2, [r3, #24]
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f042 0208 	orr.w	r2, r2, #8
 800b442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	699a      	ldr	r2, [r3, #24]
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f022 0204 	bic.w	r2, r2, #4
 800b452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	6999      	ldr	r1, [r3, #24]
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	691a      	ldr	r2, [r3, #16]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	430a      	orrs	r2, r1
 800b464:	619a      	str	r2, [r3, #24]
      break;
 800b466:	e064      	b.n	800b532 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	68b9      	ldr	r1, [r7, #8]
 800b46e:	4618      	mov	r0, r3
 800b470:	f000 f978 	bl	800b764 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	699a      	ldr	r2, [r3, #24]
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	699a      	ldr	r2, [r3, #24]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	6999      	ldr	r1, [r3, #24]
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	691b      	ldr	r3, [r3, #16]
 800b49e:	021a      	lsls	r2, r3, #8
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	430a      	orrs	r2, r1
 800b4a6:	619a      	str	r2, [r3, #24]
      break;
 800b4a8:	e043      	b.n	800b532 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	68b9      	ldr	r1, [r7, #8]
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f000 f9cd 	bl	800b850 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	69da      	ldr	r2, [r3, #28]
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f042 0208 	orr.w	r2, r2, #8
 800b4c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	69da      	ldr	r2, [r3, #28]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f022 0204 	bic.w	r2, r2, #4
 800b4d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	69d9      	ldr	r1, [r3, #28]
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	691a      	ldr	r2, [r3, #16]
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	430a      	orrs	r2, r1
 800b4e6:	61da      	str	r2, [r3, #28]
      break;
 800b4e8:	e023      	b.n	800b532 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	68b9      	ldr	r1, [r7, #8]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f000 fa21 	bl	800b938 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	69da      	ldr	r2, [r3, #28]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	69da      	ldr	r2, [r3, #28]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	69d9      	ldr	r1, [r3, #28]
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	691b      	ldr	r3, [r3, #16]
 800b520:	021a      	lsls	r2, r3, #8
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	430a      	orrs	r2, r1
 800b528:	61da      	str	r2, [r3, #28]
      break;
 800b52a:	e002      	b.n	800b532 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b52c:	2301      	movs	r3, #1
 800b52e:	75fb      	strb	r3, [r7, #23]
      break;
 800b530:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2200      	movs	r2, #0
 800b536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b53a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3718      	adds	r7, #24
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b544:	b480      	push	{r7}
 800b546:	b085      	sub	sp, #20
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	4a40      	ldr	r2, [pc, #256]	; (800b658 <TIM_Base_SetConfig+0x114>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d013      	beq.n	800b584 <TIM_Base_SetConfig+0x40>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b562:	d00f      	beq.n	800b584 <TIM_Base_SetConfig+0x40>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	4a3d      	ldr	r2, [pc, #244]	; (800b65c <TIM_Base_SetConfig+0x118>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d00b      	beq.n	800b584 <TIM_Base_SetConfig+0x40>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	4a3c      	ldr	r2, [pc, #240]	; (800b660 <TIM_Base_SetConfig+0x11c>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d007      	beq.n	800b584 <TIM_Base_SetConfig+0x40>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	4a3b      	ldr	r2, [pc, #236]	; (800b664 <TIM_Base_SetConfig+0x120>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d003      	beq.n	800b584 <TIM_Base_SetConfig+0x40>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	4a3a      	ldr	r2, [pc, #232]	; (800b668 <TIM_Base_SetConfig+0x124>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d108      	bne.n	800b596 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b58a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	68fa      	ldr	r2, [r7, #12]
 800b592:	4313      	orrs	r3, r2
 800b594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	4a2f      	ldr	r2, [pc, #188]	; (800b658 <TIM_Base_SetConfig+0x114>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d02b      	beq.n	800b5f6 <TIM_Base_SetConfig+0xb2>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5a4:	d027      	beq.n	800b5f6 <TIM_Base_SetConfig+0xb2>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	4a2c      	ldr	r2, [pc, #176]	; (800b65c <TIM_Base_SetConfig+0x118>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d023      	beq.n	800b5f6 <TIM_Base_SetConfig+0xb2>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	4a2b      	ldr	r2, [pc, #172]	; (800b660 <TIM_Base_SetConfig+0x11c>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d01f      	beq.n	800b5f6 <TIM_Base_SetConfig+0xb2>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	4a2a      	ldr	r2, [pc, #168]	; (800b664 <TIM_Base_SetConfig+0x120>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d01b      	beq.n	800b5f6 <TIM_Base_SetConfig+0xb2>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	4a29      	ldr	r2, [pc, #164]	; (800b668 <TIM_Base_SetConfig+0x124>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d017      	beq.n	800b5f6 <TIM_Base_SetConfig+0xb2>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	4a28      	ldr	r2, [pc, #160]	; (800b66c <TIM_Base_SetConfig+0x128>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d013      	beq.n	800b5f6 <TIM_Base_SetConfig+0xb2>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	4a27      	ldr	r2, [pc, #156]	; (800b670 <TIM_Base_SetConfig+0x12c>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d00f      	beq.n	800b5f6 <TIM_Base_SetConfig+0xb2>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	4a26      	ldr	r2, [pc, #152]	; (800b674 <TIM_Base_SetConfig+0x130>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d00b      	beq.n	800b5f6 <TIM_Base_SetConfig+0xb2>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	4a25      	ldr	r2, [pc, #148]	; (800b678 <TIM_Base_SetConfig+0x134>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d007      	beq.n	800b5f6 <TIM_Base_SetConfig+0xb2>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	4a24      	ldr	r2, [pc, #144]	; (800b67c <TIM_Base_SetConfig+0x138>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d003      	beq.n	800b5f6 <TIM_Base_SetConfig+0xb2>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	4a23      	ldr	r2, [pc, #140]	; (800b680 <TIM_Base_SetConfig+0x13c>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d108      	bne.n	800b608 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	68db      	ldr	r3, [r3, #12]
 800b602:	68fa      	ldr	r2, [r7, #12]
 800b604:	4313      	orrs	r3, r2
 800b606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	695b      	ldr	r3, [r3, #20]
 800b612:	4313      	orrs	r3, r2
 800b614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	68fa      	ldr	r2, [r7, #12]
 800b61a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	689a      	ldr	r2, [r3, #8]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	681a      	ldr	r2, [r3, #0]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	4a0a      	ldr	r2, [pc, #40]	; (800b658 <TIM_Base_SetConfig+0x114>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d003      	beq.n	800b63c <TIM_Base_SetConfig+0xf8>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	4a0c      	ldr	r2, [pc, #48]	; (800b668 <TIM_Base_SetConfig+0x124>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d103      	bne.n	800b644 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	691a      	ldr	r2, [r3, #16]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2201      	movs	r2, #1
 800b648:	615a      	str	r2, [r3, #20]
}
 800b64a:	bf00      	nop
 800b64c:	3714      	adds	r7, #20
 800b64e:	46bd      	mov	sp, r7
 800b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b654:	4770      	bx	lr
 800b656:	bf00      	nop
 800b658:	40010000 	.word	0x40010000
 800b65c:	40000400 	.word	0x40000400
 800b660:	40000800 	.word	0x40000800
 800b664:	40000c00 	.word	0x40000c00
 800b668:	40010400 	.word	0x40010400
 800b66c:	40014000 	.word	0x40014000
 800b670:	40014400 	.word	0x40014400
 800b674:	40014800 	.word	0x40014800
 800b678:	40001800 	.word	0x40001800
 800b67c:	40001c00 	.word	0x40001c00
 800b680:	40002000 	.word	0x40002000

0800b684 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b684:	b480      	push	{r7}
 800b686:	b087      	sub	sp, #28
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6a1b      	ldr	r3, [r3, #32]
 800b692:	f023 0201 	bic.w	r2, r3, #1
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6a1b      	ldr	r3, [r3, #32]
 800b69e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	699b      	ldr	r3, [r3, #24]
 800b6aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f023 0303 	bic.w	r3, r3, #3
 800b6ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	68fa      	ldr	r2, [r7, #12]
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	f023 0302 	bic.w	r3, r3, #2
 800b6cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	697a      	ldr	r2, [r7, #20]
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	4a20      	ldr	r2, [pc, #128]	; (800b75c <TIM_OC1_SetConfig+0xd8>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d003      	beq.n	800b6e8 <TIM_OC1_SetConfig+0x64>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	4a1f      	ldr	r2, [pc, #124]	; (800b760 <TIM_OC1_SetConfig+0xdc>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d10c      	bne.n	800b702 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	f023 0308 	bic.w	r3, r3, #8
 800b6ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	697a      	ldr	r2, [r7, #20]
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	f023 0304 	bic.w	r3, r3, #4
 800b700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	4a15      	ldr	r2, [pc, #84]	; (800b75c <TIM_OC1_SetConfig+0xd8>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d003      	beq.n	800b712 <TIM_OC1_SetConfig+0x8e>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4a14      	ldr	r2, [pc, #80]	; (800b760 <TIM_OC1_SetConfig+0xdc>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d111      	bne.n	800b736 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	695b      	ldr	r3, [r3, #20]
 800b726:	693a      	ldr	r2, [r7, #16]
 800b728:	4313      	orrs	r3, r2
 800b72a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	699b      	ldr	r3, [r3, #24]
 800b730:	693a      	ldr	r2, [r7, #16]
 800b732:	4313      	orrs	r3, r2
 800b734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	693a      	ldr	r2, [r7, #16]
 800b73a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	685a      	ldr	r2, [r3, #4]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	697a      	ldr	r2, [r7, #20]
 800b74e:	621a      	str	r2, [r3, #32]
}
 800b750:	bf00      	nop
 800b752:	371c      	adds	r7, #28
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr
 800b75c:	40010000 	.word	0x40010000
 800b760:	40010400 	.word	0x40010400

0800b764 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b764:	b480      	push	{r7}
 800b766:	b087      	sub	sp, #28
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6a1b      	ldr	r3, [r3, #32]
 800b772:	f023 0210 	bic.w	r2, r3, #16
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6a1b      	ldr	r3, [r3, #32]
 800b77e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	699b      	ldr	r3, [r3, #24]
 800b78a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b79a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	021b      	lsls	r3, r3, #8
 800b7a2:	68fa      	ldr	r2, [r7, #12]
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	f023 0320 	bic.w	r3, r3, #32
 800b7ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	689b      	ldr	r3, [r3, #8]
 800b7b4:	011b      	lsls	r3, r3, #4
 800b7b6:	697a      	ldr	r2, [r7, #20]
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	4a22      	ldr	r2, [pc, #136]	; (800b848 <TIM_OC2_SetConfig+0xe4>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d003      	beq.n	800b7cc <TIM_OC2_SetConfig+0x68>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	4a21      	ldr	r2, [pc, #132]	; (800b84c <TIM_OC2_SetConfig+0xe8>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d10d      	bne.n	800b7e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	011b      	lsls	r3, r3, #4
 800b7da:	697a      	ldr	r2, [r7, #20]
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	4a17      	ldr	r2, [pc, #92]	; (800b848 <TIM_OC2_SetConfig+0xe4>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d003      	beq.n	800b7f8 <TIM_OC2_SetConfig+0x94>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4a16      	ldr	r2, [pc, #88]	; (800b84c <TIM_OC2_SetConfig+0xe8>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d113      	bne.n	800b820 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b7fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b806:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	695b      	ldr	r3, [r3, #20]
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	693a      	ldr	r2, [r7, #16]
 800b810:	4313      	orrs	r3, r2
 800b812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	699b      	ldr	r3, [r3, #24]
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	693a      	ldr	r2, [r7, #16]
 800b81c:	4313      	orrs	r3, r2
 800b81e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	693a      	ldr	r2, [r7, #16]
 800b824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	685a      	ldr	r2, [r3, #4]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	697a      	ldr	r2, [r7, #20]
 800b838:	621a      	str	r2, [r3, #32]
}
 800b83a:	bf00      	nop
 800b83c:	371c      	adds	r7, #28
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	40010000 	.word	0x40010000
 800b84c:	40010400 	.word	0x40010400

0800b850 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b850:	b480      	push	{r7}
 800b852:	b087      	sub	sp, #28
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6a1b      	ldr	r3, [r3, #32]
 800b85e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6a1b      	ldr	r3, [r3, #32]
 800b86a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	69db      	ldr	r3, [r3, #28]
 800b876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b87e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f023 0303 	bic.w	r3, r3, #3
 800b886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	4313      	orrs	r3, r2
 800b890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	689b      	ldr	r3, [r3, #8]
 800b89e:	021b      	lsls	r3, r3, #8
 800b8a0:	697a      	ldr	r2, [r7, #20]
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	4a21      	ldr	r2, [pc, #132]	; (800b930 <TIM_OC3_SetConfig+0xe0>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d003      	beq.n	800b8b6 <TIM_OC3_SetConfig+0x66>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	4a20      	ldr	r2, [pc, #128]	; (800b934 <TIM_OC3_SetConfig+0xe4>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d10d      	bne.n	800b8d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b8bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	021b      	lsls	r3, r3, #8
 800b8c4:	697a      	ldr	r2, [r7, #20]
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b8d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	4a16      	ldr	r2, [pc, #88]	; (800b930 <TIM_OC3_SetConfig+0xe0>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d003      	beq.n	800b8e2 <TIM_OC3_SetConfig+0x92>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	4a15      	ldr	r2, [pc, #84]	; (800b934 <TIM_OC3_SetConfig+0xe4>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d113      	bne.n	800b90a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b8e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b8f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	695b      	ldr	r3, [r3, #20]
 800b8f6:	011b      	lsls	r3, r3, #4
 800b8f8:	693a      	ldr	r2, [r7, #16]
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	699b      	ldr	r3, [r3, #24]
 800b902:	011b      	lsls	r3, r3, #4
 800b904:	693a      	ldr	r2, [r7, #16]
 800b906:	4313      	orrs	r3, r2
 800b908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	693a      	ldr	r2, [r7, #16]
 800b90e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	68fa      	ldr	r2, [r7, #12]
 800b914:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	685a      	ldr	r2, [r3, #4]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	697a      	ldr	r2, [r7, #20]
 800b922:	621a      	str	r2, [r3, #32]
}
 800b924:	bf00      	nop
 800b926:	371c      	adds	r7, #28
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr
 800b930:	40010000 	.word	0x40010000
 800b934:	40010400 	.word	0x40010400

0800b938 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b938:	b480      	push	{r7}
 800b93a:	b087      	sub	sp, #28
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6a1b      	ldr	r3, [r3, #32]
 800b946:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6a1b      	ldr	r3, [r3, #32]
 800b952:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	69db      	ldr	r3, [r3, #28]
 800b95e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b96e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	021b      	lsls	r3, r3, #8
 800b976:	68fa      	ldr	r2, [r7, #12]
 800b978:	4313      	orrs	r3, r2
 800b97a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b982:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	689b      	ldr	r3, [r3, #8]
 800b988:	031b      	lsls	r3, r3, #12
 800b98a:	693a      	ldr	r2, [r7, #16]
 800b98c:	4313      	orrs	r3, r2
 800b98e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	4a12      	ldr	r2, [pc, #72]	; (800b9dc <TIM_OC4_SetConfig+0xa4>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d003      	beq.n	800b9a0 <TIM_OC4_SetConfig+0x68>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	4a11      	ldr	r2, [pc, #68]	; (800b9e0 <TIM_OC4_SetConfig+0xa8>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d109      	bne.n	800b9b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b9a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	695b      	ldr	r3, [r3, #20]
 800b9ac:	019b      	lsls	r3, r3, #6
 800b9ae:	697a      	ldr	r2, [r7, #20]
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	697a      	ldr	r2, [r7, #20]
 800b9b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	685a      	ldr	r2, [r3, #4]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	693a      	ldr	r2, [r7, #16]
 800b9cc:	621a      	str	r2, [r3, #32]
}
 800b9ce:	bf00      	nop
 800b9d0:	371c      	adds	r7, #28
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr
 800b9da:	bf00      	nop
 800b9dc:	40010000 	.word	0x40010000
 800b9e0:	40010400 	.word	0x40010400

0800b9e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b087      	sub	sp, #28
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	f003 031f 	and.w	r3, r3, #31
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b9fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	6a1a      	ldr	r2, [r3, #32]
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	43db      	mvns	r3, r3
 800ba06:	401a      	ands	r2, r3
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6a1a      	ldr	r2, [r3, #32]
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	f003 031f 	and.w	r3, r3, #31
 800ba16:	6879      	ldr	r1, [r7, #4]
 800ba18:	fa01 f303 	lsl.w	r3, r1, r3
 800ba1c:	431a      	orrs	r2, r3
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	621a      	str	r2, [r3, #32]
}
 800ba22:	bf00      	nop
 800ba24:	371c      	adds	r7, #28
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr
	...

0800ba30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b085      	sub	sp, #20
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d101      	bne.n	800ba48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba44:	2302      	movs	r3, #2
 800ba46:	e05a      	b.n	800bafe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2202      	movs	r2, #2
 800ba54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	689b      	ldr	r3, [r3, #8]
 800ba66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	68fa      	ldr	r2, [r7, #12]
 800ba76:	4313      	orrs	r3, r2
 800ba78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	68fa      	ldr	r2, [r7, #12]
 800ba80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	4a21      	ldr	r2, [pc, #132]	; (800bb0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d022      	beq.n	800bad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba94:	d01d      	beq.n	800bad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a1d      	ldr	r2, [pc, #116]	; (800bb10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d018      	beq.n	800bad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a1b      	ldr	r2, [pc, #108]	; (800bb14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d013      	beq.n	800bad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	4a1a      	ldr	r2, [pc, #104]	; (800bb18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d00e      	beq.n	800bad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a18      	ldr	r2, [pc, #96]	; (800bb1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d009      	beq.n	800bad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4a17      	ldr	r2, [pc, #92]	; (800bb20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bac4:	4293      	cmp	r3, r2
 800bac6:	d004      	beq.n	800bad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4a15      	ldr	r2, [pc, #84]	; (800bb24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d10c      	bne.n	800baec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bad8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	68ba      	ldr	r2, [r7, #8]
 800bae0:	4313      	orrs	r3, r2
 800bae2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	68ba      	ldr	r2, [r7, #8]
 800baea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2201      	movs	r2, #1
 800baf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bafc:	2300      	movs	r3, #0
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3714      	adds	r7, #20
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr
 800bb0a:	bf00      	nop
 800bb0c:	40010000 	.word	0x40010000
 800bb10:	40000400 	.word	0x40000400
 800bb14:	40000800 	.word	0x40000800
 800bb18:	40000c00 	.word	0x40000c00
 800bb1c:	40010400 	.word	0x40010400
 800bb20:	40014000 	.word	0x40014000
 800bb24:	40001800 	.word	0x40001800

0800bb28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d101      	bne.n	800bb3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb36:	2301      	movs	r3, #1
 800bb38:	e03f      	b.n	800bbba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d106      	bne.n	800bb54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f7f9 f970 	bl	8004e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2224      	movs	r2, #36	; 0x24
 800bb58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	68da      	ldr	r2, [r3, #12]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bb6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 fc8f 	bl	800c490 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	691a      	ldr	r2, [r3, #16]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bb80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	695a      	ldr	r2, [r3, #20]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bb90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	68da      	ldr	r2, [r3, #12]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bba0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2200      	movs	r2, #0
 800bba6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2220      	movs	r2, #32
 800bbac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2220      	movs	r2, #32
 800bbb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bbb8:	2300      	movs	r3, #0
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3708      	adds	r7, #8
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}

0800bbc2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bbc2:	b580      	push	{r7, lr}
 800bbc4:	b08a      	sub	sp, #40	; 0x28
 800bbc6:	af02      	add	r7, sp, #8
 800bbc8:	60f8      	str	r0, [r7, #12]
 800bbca:	60b9      	str	r1, [r7, #8]
 800bbcc:	603b      	str	r3, [r7, #0]
 800bbce:	4613      	mov	r3, r2
 800bbd0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbdc:	b2db      	uxtb	r3, r3
 800bbde:	2b20      	cmp	r3, #32
 800bbe0:	d17c      	bne.n	800bcdc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d002      	beq.n	800bbee <HAL_UART_Transmit+0x2c>
 800bbe8:	88fb      	ldrh	r3, [r7, #6]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d101      	bne.n	800bbf2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bbee:	2301      	movs	r3, #1
 800bbf0:	e075      	b.n	800bcde <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d101      	bne.n	800bc00 <HAL_UART_Transmit+0x3e>
 800bbfc:	2302      	movs	r3, #2
 800bbfe:	e06e      	b.n	800bcde <HAL_UART_Transmit+0x11c>
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2201      	movs	r2, #1
 800bc04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2221      	movs	r2, #33	; 0x21
 800bc12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bc16:	f7fc fbe1 	bl	80083dc <HAL_GetTick>
 800bc1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	88fa      	ldrh	r2, [r7, #6]
 800bc20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	88fa      	ldrh	r2, [r7, #6]
 800bc26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	689b      	ldr	r3, [r3, #8]
 800bc2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc30:	d108      	bne.n	800bc44 <HAL_UART_Transmit+0x82>
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	691b      	ldr	r3, [r3, #16]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d104      	bne.n	800bc44 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	61bb      	str	r3, [r7, #24]
 800bc42:	e003      	b.n	800bc4c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800bc54:	e02a      	b.n	800bcac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	9300      	str	r3, [sp, #0]
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	2180      	movs	r1, #128	; 0x80
 800bc60:	68f8      	ldr	r0, [r7, #12]
 800bc62:	f000 fa80 	bl	800c166 <UART_WaitOnFlagUntilTimeout>
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d001      	beq.n	800bc70 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800bc6c:	2303      	movs	r3, #3
 800bc6e:	e036      	b.n	800bcde <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800bc70:	69fb      	ldr	r3, [r7, #28]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d10b      	bne.n	800bc8e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bc76:	69bb      	ldr	r3, [r7, #24]
 800bc78:	881b      	ldrh	r3, [r3, #0]
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bc84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bc86:	69bb      	ldr	r3, [r7, #24]
 800bc88:	3302      	adds	r3, #2
 800bc8a:	61bb      	str	r3, [r7, #24]
 800bc8c:	e007      	b.n	800bc9e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bc8e:	69fb      	ldr	r3, [r7, #28]
 800bc90:	781a      	ldrb	r2, [r3, #0]
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bc98:	69fb      	ldr	r3, [r7, #28]
 800bc9a:	3301      	adds	r3, #1
 800bc9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	3b01      	subs	r3, #1
 800bca6:	b29a      	uxth	r2, r3
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d1cf      	bne.n	800bc56 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	9300      	str	r3, [sp, #0]
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	2140      	movs	r1, #64	; 0x40
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	f000 fa50 	bl	800c166 <UART_WaitOnFlagUntilTimeout>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d001      	beq.n	800bcd0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800bccc:	2303      	movs	r3, #3
 800bcce:	e006      	b.n	800bcde <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2220      	movs	r2, #32
 800bcd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	e000      	b.n	800bcde <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bcdc:	2302      	movs	r3, #2
  }
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3720      	adds	r7, #32
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
	...

0800bce8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b08c      	sub	sp, #48	; 0x30
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcfc:	b2db      	uxtb	r3, r3
 800bcfe:	2b20      	cmp	r3, #32
 800bd00:	d165      	bne.n	800bdce <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d002      	beq.n	800bd0e <HAL_UART_Transmit_DMA+0x26>
 800bd08:	88fb      	ldrh	r3, [r7, #6]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d101      	bne.n	800bd12 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	e05e      	b.n	800bdd0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d101      	bne.n	800bd20 <HAL_UART_Transmit_DMA+0x38>
 800bd1c:	2302      	movs	r3, #2
 800bd1e:	e057      	b.n	800bdd0 <HAL_UART_Transmit_DMA+0xe8>
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	2201      	movs	r2, #1
 800bd24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800bd28:	68ba      	ldr	r2, [r7, #8]
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	88fa      	ldrh	r2, [r7, #6]
 800bd32:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	88fa      	ldrh	r2, [r7, #6]
 800bd38:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2221      	movs	r2, #33	; 0x21
 800bd44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd4c:	4a22      	ldr	r2, [pc, #136]	; (800bdd8 <HAL_UART_Transmit_DMA+0xf0>)
 800bd4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd54:	4a21      	ldr	r2, [pc, #132]	; (800bddc <HAL_UART_Transmit_DMA+0xf4>)
 800bd56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd5c:	4a20      	ldr	r2, [pc, #128]	; (800bde0 <HAL_UART_Transmit_DMA+0xf8>)
 800bd5e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd64:	2200      	movs	r2, #0
 800bd66:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800bd68:	f107 0308 	add.w	r3, r7, #8
 800bd6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800bd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd74:	6819      	ldr	r1, [r3, #0]
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	3304      	adds	r3, #4
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	88fb      	ldrh	r3, [r7, #6]
 800bd80:	f7fc fd36 	bl	80087f0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bd8c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2200      	movs	r2, #0
 800bd92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	3314      	adds	r3, #20
 800bd9c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd9e:	69bb      	ldr	r3, [r7, #24]
 800bda0:	e853 3f00 	ldrex	r3, [r3]
 800bda4:	617b      	str	r3, [r7, #20]
   return(result);
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdac:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	3314      	adds	r3, #20
 800bdb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdb6:	627a      	str	r2, [r7, #36]	; 0x24
 800bdb8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdba:	6a39      	ldr	r1, [r7, #32]
 800bdbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdbe:	e841 2300 	strex	r3, r2, [r1]
 800bdc2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d1e5      	bne.n	800bd96 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	e000      	b.n	800bdd0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800bdce:	2302      	movs	r3, #2
  }
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3730      	adds	r7, #48	; 0x30
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	0800bec1 	.word	0x0800bec1
 800bddc:	0800bf5b 	.word	0x0800bf5b
 800bde0:	0800c0d3 	.word	0x0800c0d3

0800bde4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b084      	sub	sp, #16
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	4613      	mov	r3, r2
 800bdf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bdf8:	b2db      	uxtb	r3, r3
 800bdfa:	2b20      	cmp	r3, #32
 800bdfc:	d11d      	bne.n	800be3a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d002      	beq.n	800be0a <HAL_UART_Receive_DMA+0x26>
 800be04:	88fb      	ldrh	r3, [r7, #6]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d101      	bne.n	800be0e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800be0a:	2301      	movs	r3, #1
 800be0c:	e016      	b.n	800be3c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be14:	2b01      	cmp	r3, #1
 800be16:	d101      	bne.n	800be1c <HAL_UART_Receive_DMA+0x38>
 800be18:	2302      	movs	r3, #2
 800be1a:	e00f      	b.n	800be3c <HAL_UART_Receive_DMA+0x58>
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2201      	movs	r2, #1
 800be20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2200      	movs	r2, #0
 800be28:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800be2a:	88fb      	ldrh	r3, [r7, #6]
 800be2c:	461a      	mov	r2, r3
 800be2e:	68b9      	ldr	r1, [r7, #8]
 800be30:	68f8      	ldr	r0, [r7, #12]
 800be32:	f000 fa07 	bl	800c244 <UART_Start_Receive_DMA>
 800be36:	4603      	mov	r3, r0
 800be38:	e000      	b.n	800be3c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800be3a:	2302      	movs	r3, #2
  }
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3710      	adds	r7, #16
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}

0800be44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800be44:	b480      	push	{r7}
 800be46:	b083      	sub	sp, #12
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800be4c:	bf00      	nop
 800be4e:	370c      	adds	r7, #12
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr

0800be58 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800be58:	b480      	push	{r7}
 800be5a:	b083      	sub	sp, #12
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800be60:	bf00      	nop
 800be62:	370c      	adds	r7, #12
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b083      	sub	sp, #12
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800be74:	bf00      	nop
 800be76:	370c      	adds	r7, #12
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr

0800be80 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800be80:	b480      	push	{r7}
 800be82:	b083      	sub	sp, #12
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800be88:	bf00      	nop
 800be8a:	370c      	adds	r7, #12
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr

0800be94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800be94:	b480      	push	{r7}
 800be96:	b083      	sub	sp, #12
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800be9c:	bf00      	nop
 800be9e:	370c      	adds	r7, #12
 800bea0:	46bd      	mov	sp, r7
 800bea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea6:	4770      	bx	lr

0800bea8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b083      	sub	sp, #12
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	460b      	mov	r3, r1
 800beb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800beb4:	bf00      	nop
 800beb6:	370c      	adds	r7, #12
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b090      	sub	sp, #64	; 0x40
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800becc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d137      	bne.n	800bf4c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800bedc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bede:	2200      	movs	r2, #0
 800bee0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	3314      	adds	r3, #20
 800bee8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beec:	e853 3f00 	ldrex	r3, [r3]
 800bef0:	623b      	str	r3, [r7, #32]
   return(result);
 800bef2:	6a3b      	ldr	r3, [r7, #32]
 800bef4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bef8:	63bb      	str	r3, [r7, #56]	; 0x38
 800befa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	3314      	adds	r3, #20
 800bf00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf02:	633a      	str	r2, [r7, #48]	; 0x30
 800bf04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf0a:	e841 2300 	strex	r3, r2, [r1]
 800bf0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bf10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d1e5      	bne.n	800bee2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bf16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	330c      	adds	r3, #12
 800bf1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	e853 3f00 	ldrex	r3, [r3]
 800bf24:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf2c:	637b      	str	r3, [r7, #52]	; 0x34
 800bf2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	330c      	adds	r3, #12
 800bf34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf36:	61fa      	str	r2, [r7, #28]
 800bf38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf3a:	69b9      	ldr	r1, [r7, #24]
 800bf3c:	69fa      	ldr	r2, [r7, #28]
 800bf3e:	e841 2300 	strex	r3, r2, [r1]
 800bf42:	617b      	str	r3, [r7, #20]
   return(result);
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d1e5      	bne.n	800bf16 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bf4a:	e002      	b.n	800bf52 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800bf4c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bf4e:	f7ff ff79 	bl	800be44 <HAL_UART_TxCpltCallback>
}
 800bf52:	bf00      	nop
 800bf54:	3740      	adds	r7, #64	; 0x40
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}

0800bf5a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bf5a:	b580      	push	{r7, lr}
 800bf5c:	b084      	sub	sp, #16
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf66:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bf68:	68f8      	ldr	r0, [r7, #12]
 800bf6a:	f7ff ff75 	bl	800be58 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf6e:	bf00      	nop
 800bf70:	3710      	adds	r7, #16
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b09c      	sub	sp, #112	; 0x70
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf82:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d172      	bne.n	800c078 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800bf92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf94:	2200      	movs	r2, #0
 800bf96:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	330c      	adds	r3, #12
 800bf9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfa2:	e853 3f00 	ldrex	r3, [r3]
 800bfa6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bfa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bfae:	66bb      	str	r3, [r7, #104]	; 0x68
 800bfb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	330c      	adds	r3, #12
 800bfb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bfb8:	65ba      	str	r2, [r7, #88]	; 0x58
 800bfba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bfbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bfc0:	e841 2300 	strex	r3, r2, [r1]
 800bfc4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bfc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d1e5      	bne.n	800bf98 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	3314      	adds	r3, #20
 800bfd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd6:	e853 3f00 	ldrex	r3, [r3]
 800bfda:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bfdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfde:	f023 0301 	bic.w	r3, r3, #1
 800bfe2:	667b      	str	r3, [r7, #100]	; 0x64
 800bfe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	3314      	adds	r3, #20
 800bfea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bfec:	647a      	str	r2, [r7, #68]	; 0x44
 800bfee:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bff2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bff4:	e841 2300 	strex	r3, r2, [r1]
 800bff8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d1e5      	bne.n	800bfcc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	3314      	adds	r3, #20
 800c006:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00a:	e853 3f00 	ldrex	r3, [r3]
 800c00e:	623b      	str	r3, [r7, #32]
   return(result);
 800c010:	6a3b      	ldr	r3, [r7, #32]
 800c012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c016:	663b      	str	r3, [r7, #96]	; 0x60
 800c018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	3314      	adds	r3, #20
 800c01e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c020:	633a      	str	r2, [r7, #48]	; 0x30
 800c022:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c024:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c028:	e841 2300 	strex	r3, r2, [r1]
 800c02c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c030:	2b00      	cmp	r3, #0
 800c032:	d1e5      	bne.n	800c000 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c036:	2220      	movs	r2, #32
 800c038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c03c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c03e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c040:	2b01      	cmp	r3, #1
 800c042:	d119      	bne.n	800c078 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	330c      	adds	r3, #12
 800c04a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	e853 3f00 	ldrex	r3, [r3]
 800c052:	60fb      	str	r3, [r7, #12]
   return(result);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f023 0310 	bic.w	r3, r3, #16
 800c05a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c05c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	330c      	adds	r3, #12
 800c062:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c064:	61fa      	str	r2, [r7, #28]
 800c066:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c068:	69b9      	ldr	r1, [r7, #24]
 800c06a:	69fa      	ldr	r2, [r7, #28]
 800c06c:	e841 2300 	strex	r3, r2, [r1]
 800c070:	617b      	str	r3, [r7, #20]
   return(result);
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d1e5      	bne.n	800c044 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c07a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d106      	bne.n	800c08e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c082:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c084:	4619      	mov	r1, r3
 800c086:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c088:	f7ff ff0e 	bl	800bea8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c08c:	e002      	b.n	800c094 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800c08e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c090:	f7ff feec 	bl	800be6c <HAL_UART_RxCpltCallback>
}
 800c094:	bf00      	nop
 800c096:	3770      	adds	r7, #112	; 0x70
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}

0800c09c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b084      	sub	sp, #16
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0a8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	d108      	bne.n	800c0c4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c0b6:	085b      	lsrs	r3, r3, #1
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	68f8      	ldr	r0, [r7, #12]
 800c0be:	f7ff fef3 	bl	800bea8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c0c2:	e002      	b.n	800c0ca <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800c0c4:	68f8      	ldr	r0, [r7, #12]
 800c0c6:	f7ff fedb 	bl	800be80 <HAL_UART_RxHalfCpltCallback>
}
 800c0ca:	bf00      	nop
 800c0cc:	3710      	adds	r7, #16
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}

0800c0d2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c0d2:	b580      	push	{r7, lr}
 800c0d4:	b084      	sub	sp, #16
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0e2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	695b      	ldr	r3, [r3, #20]
 800c0ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0ee:	2b80      	cmp	r3, #128	; 0x80
 800c0f0:	bf0c      	ite	eq
 800c0f2:	2301      	moveq	r3, #1
 800c0f4:	2300      	movne	r3, #0
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c100:	b2db      	uxtb	r3, r3
 800c102:	2b21      	cmp	r3, #33	; 0x21
 800c104:	d108      	bne.n	800c118 <UART_DMAError+0x46>
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d005      	beq.n	800c118 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	2200      	movs	r2, #0
 800c110:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c112:	68b8      	ldr	r0, [r7, #8]
 800c114:	f000 f930 	bl	800c378 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	695b      	ldr	r3, [r3, #20]
 800c11e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c122:	2b40      	cmp	r3, #64	; 0x40
 800c124:	bf0c      	ite	eq
 800c126:	2301      	moveq	r3, #1
 800c128:	2300      	movne	r3, #0
 800c12a:	b2db      	uxtb	r3, r3
 800c12c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c134:	b2db      	uxtb	r3, r3
 800c136:	2b22      	cmp	r3, #34	; 0x22
 800c138:	d108      	bne.n	800c14c <UART_DMAError+0x7a>
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d005      	beq.n	800c14c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	2200      	movs	r2, #0
 800c144:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c146:	68b8      	ldr	r0, [r7, #8]
 800c148:	f000 f93e 	bl	800c3c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c150:	f043 0210 	orr.w	r2, r3, #16
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c158:	68b8      	ldr	r0, [r7, #8]
 800c15a:	f7ff fe9b 	bl	800be94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c15e:	bf00      	nop
 800c160:	3710      	adds	r7, #16
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c166:	b580      	push	{r7, lr}
 800c168:	b090      	sub	sp, #64	; 0x40
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	60f8      	str	r0, [r7, #12]
 800c16e:	60b9      	str	r1, [r7, #8]
 800c170:	603b      	str	r3, [r7, #0]
 800c172:	4613      	mov	r3, r2
 800c174:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c176:	e050      	b.n	800c21a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c17a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c17e:	d04c      	beq.n	800c21a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c182:	2b00      	cmp	r3, #0
 800c184:	d007      	beq.n	800c196 <UART_WaitOnFlagUntilTimeout+0x30>
 800c186:	f7fc f929 	bl	80083dc <HAL_GetTick>
 800c18a:	4602      	mov	r2, r0
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	1ad3      	subs	r3, r2, r3
 800c190:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c192:	429a      	cmp	r2, r3
 800c194:	d241      	bcs.n	800c21a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	330c      	adds	r3, #12
 800c19c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a0:	e853 3f00 	ldrex	r3, [r3]
 800c1a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	330c      	adds	r3, #12
 800c1b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c1b6:	637a      	str	r2, [r7, #52]	; 0x34
 800c1b8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1be:	e841 2300 	strex	r3, r2, [r1]
 800c1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d1e5      	bne.n	800c196 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	3314      	adds	r3, #20
 800c1d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	e853 3f00 	ldrex	r3, [r3]
 800c1d8:	613b      	str	r3, [r7, #16]
   return(result);
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	f023 0301 	bic.w	r3, r3, #1
 800c1e0:	63bb      	str	r3, [r7, #56]	; 0x38
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	3314      	adds	r3, #20
 800c1e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1ea:	623a      	str	r2, [r7, #32]
 800c1ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ee:	69f9      	ldr	r1, [r7, #28]
 800c1f0:	6a3a      	ldr	r2, [r7, #32]
 800c1f2:	e841 2300 	strex	r3, r2, [r1]
 800c1f6:	61bb      	str	r3, [r7, #24]
   return(result);
 800c1f8:	69bb      	ldr	r3, [r7, #24]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d1e5      	bne.n	800c1ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2220      	movs	r2, #32
 800c202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2220      	movs	r2, #32
 800c20a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2200      	movs	r2, #0
 800c212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c216:	2303      	movs	r3, #3
 800c218:	e00f      	b.n	800c23a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	681a      	ldr	r2, [r3, #0]
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	4013      	ands	r3, r2
 800c224:	68ba      	ldr	r2, [r7, #8]
 800c226:	429a      	cmp	r2, r3
 800c228:	bf0c      	ite	eq
 800c22a:	2301      	moveq	r3, #1
 800c22c:	2300      	movne	r3, #0
 800c22e:	b2db      	uxtb	r3, r3
 800c230:	461a      	mov	r2, r3
 800c232:	79fb      	ldrb	r3, [r7, #7]
 800c234:	429a      	cmp	r2, r3
 800c236:	d09f      	beq.n	800c178 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c238:	2300      	movs	r3, #0
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3740      	adds	r7, #64	; 0x40
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
	...

0800c244 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b098      	sub	sp, #96	; 0x60
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	4613      	mov	r3, r2
 800c250:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800c252:	68ba      	ldr	r2, [r7, #8]
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	88fa      	ldrh	r2, [r7, #6]
 800c25c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2200      	movs	r2, #0
 800c262:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2222      	movs	r2, #34	; 0x22
 800c268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c270:	4a3e      	ldr	r2, [pc, #248]	; (800c36c <UART_Start_Receive_DMA+0x128>)
 800c272:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c278:	4a3d      	ldr	r2, [pc, #244]	; (800c370 <UART_Start_Receive_DMA+0x12c>)
 800c27a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c280:	4a3c      	ldr	r2, [pc, #240]	; (800c374 <UART_Start_Receive_DMA+0x130>)
 800c282:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c288:	2200      	movs	r2, #0
 800c28a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800c28c:	f107 0308 	add.w	r3, r7, #8
 800c290:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	3304      	adds	r3, #4
 800c29c:	4619      	mov	r1, r3
 800c29e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2a0:	681a      	ldr	r2, [r3, #0]
 800c2a2:	88fb      	ldrh	r3, [r7, #6]
 800c2a4:	f7fc faa4 	bl	80087f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	613b      	str	r3, [r7, #16]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	613b      	str	r3, [r7, #16]
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	613b      	str	r3, [r7, #16]
 800c2bc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	330c      	adds	r3, #12
 800c2cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2d0:	e853 3f00 	ldrex	r3, [r3]
 800c2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c2d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2dc:	65bb      	str	r3, [r7, #88]	; 0x58
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	330c      	adds	r3, #12
 800c2e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c2e6:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c2e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c2ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c2ee:	e841 2300 	strex	r3, r2, [r1]
 800c2f2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c2f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d1e5      	bne.n	800c2c6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	3314      	adds	r3, #20
 800c300:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c304:	e853 3f00 	ldrex	r3, [r3]
 800c308:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30c:	f043 0301 	orr.w	r3, r3, #1
 800c310:	657b      	str	r3, [r7, #84]	; 0x54
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	3314      	adds	r3, #20
 800c318:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c31a:	63ba      	str	r2, [r7, #56]	; 0x38
 800c31c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c31e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c320:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c322:	e841 2300 	strex	r3, r2, [r1]
 800c326:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d1e5      	bne.n	800c2fa <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	3314      	adds	r3, #20
 800c334:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c336:	69bb      	ldr	r3, [r7, #24]
 800c338:	e853 3f00 	ldrex	r3, [r3]
 800c33c:	617b      	str	r3, [r7, #20]
   return(result);
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c344:	653b      	str	r3, [r7, #80]	; 0x50
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	3314      	adds	r3, #20
 800c34c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c34e:	627a      	str	r2, [r7, #36]	; 0x24
 800c350:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c352:	6a39      	ldr	r1, [r7, #32]
 800c354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c356:	e841 2300 	strex	r3, r2, [r1]
 800c35a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c35c:	69fb      	ldr	r3, [r7, #28]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d1e5      	bne.n	800c32e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800c362:	2300      	movs	r3, #0
}
 800c364:	4618      	mov	r0, r3
 800c366:	3760      	adds	r7, #96	; 0x60
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}
 800c36c:	0800bf77 	.word	0x0800bf77
 800c370:	0800c09d 	.word	0x0800c09d
 800c374:	0800c0d3 	.word	0x0800c0d3

0800c378 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c378:	b480      	push	{r7}
 800c37a:	b089      	sub	sp, #36	; 0x24
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	330c      	adds	r3, #12
 800c386:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	e853 3f00 	ldrex	r3, [r3]
 800c38e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c396:	61fb      	str	r3, [r7, #28]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	330c      	adds	r3, #12
 800c39e:	69fa      	ldr	r2, [r7, #28]
 800c3a0:	61ba      	str	r2, [r7, #24]
 800c3a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3a4:	6979      	ldr	r1, [r7, #20]
 800c3a6:	69ba      	ldr	r2, [r7, #24]
 800c3a8:	e841 2300 	strex	r3, r2, [r1]
 800c3ac:	613b      	str	r3, [r7, #16]
   return(result);
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d1e5      	bne.n	800c380 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2220      	movs	r2, #32
 800c3b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800c3bc:	bf00      	nop
 800c3be:	3724      	adds	r7, #36	; 0x24
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr

0800c3c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b095      	sub	sp, #84	; 0x54
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	330c      	adds	r3, #12
 800c3d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3da:	e853 3f00 	ldrex	r3, [r3]
 800c3de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c3e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	330c      	adds	r3, #12
 800c3ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c3f0:	643a      	str	r2, [r7, #64]	; 0x40
 800c3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c3f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c3f8:	e841 2300 	strex	r3, r2, [r1]
 800c3fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c400:	2b00      	cmp	r3, #0
 800c402:	d1e5      	bne.n	800c3d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	3314      	adds	r3, #20
 800c40a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c40c:	6a3b      	ldr	r3, [r7, #32]
 800c40e:	e853 3f00 	ldrex	r3, [r3]
 800c412:	61fb      	str	r3, [r7, #28]
   return(result);
 800c414:	69fb      	ldr	r3, [r7, #28]
 800c416:	f023 0301 	bic.w	r3, r3, #1
 800c41a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	3314      	adds	r3, #20
 800c422:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c424:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c426:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c42a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c42c:	e841 2300 	strex	r3, r2, [r1]
 800c430:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c434:	2b00      	cmp	r3, #0
 800c436:	d1e5      	bne.n	800c404 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d119      	bne.n	800c474 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	330c      	adds	r3, #12
 800c446:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	e853 3f00 	ldrex	r3, [r3]
 800c44e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	f023 0310 	bic.w	r3, r3, #16
 800c456:	647b      	str	r3, [r7, #68]	; 0x44
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	330c      	adds	r3, #12
 800c45e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c460:	61ba      	str	r2, [r7, #24]
 800c462:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c464:	6979      	ldr	r1, [r7, #20]
 800c466:	69ba      	ldr	r2, [r7, #24]
 800c468:	e841 2300 	strex	r3, r2, [r1]
 800c46c:	613b      	str	r3, [r7, #16]
   return(result);
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d1e5      	bne.n	800c440 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2220      	movs	r2, #32
 800c478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2200      	movs	r2, #0
 800c480:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c482:	bf00      	nop
 800c484:	3754      	adds	r7, #84	; 0x54
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr
	...

0800c490 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c494:	b09f      	sub	sp, #124	; 0x7c
 800c496:	af00      	add	r7, sp, #0
 800c498:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c49a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	691b      	ldr	r3, [r3, #16]
 800c4a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c4a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4a6:	68d9      	ldr	r1, [r3, #12]
 800c4a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4aa:	681a      	ldr	r2, [r3, #0]
 800c4ac:	ea40 0301 	orr.w	r3, r0, r1
 800c4b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c4b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4b4:	689a      	ldr	r2, [r3, #8]
 800c4b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4b8:	691b      	ldr	r3, [r3, #16]
 800c4ba:	431a      	orrs	r2, r3
 800c4bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4be:	695b      	ldr	r3, [r3, #20]
 800c4c0:	431a      	orrs	r2, r3
 800c4c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4c4:	69db      	ldr	r3, [r3, #28]
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800c4ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	68db      	ldr	r3, [r3, #12]
 800c4d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c4d4:	f021 010c 	bic.w	r1, r1, #12
 800c4d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c4de:	430b      	orrs	r3, r1
 800c4e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c4e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	695b      	ldr	r3, [r3, #20]
 800c4e8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c4ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4ee:	6999      	ldr	r1, [r3, #24]
 800c4f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4f2:	681a      	ldr	r2, [r3, #0]
 800c4f4:	ea40 0301 	orr.w	r3, r0, r1
 800c4f8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c4fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	4bc5      	ldr	r3, [pc, #788]	; (800c814 <UART_SetConfig+0x384>)
 800c500:	429a      	cmp	r2, r3
 800c502:	d004      	beq.n	800c50e <UART_SetConfig+0x7e>
 800c504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	4bc3      	ldr	r3, [pc, #780]	; (800c818 <UART_SetConfig+0x388>)
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d103      	bne.n	800c516 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c50e:	f7fe fe21 	bl	800b154 <HAL_RCC_GetPCLK2Freq>
 800c512:	6778      	str	r0, [r7, #116]	; 0x74
 800c514:	e002      	b.n	800c51c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c516:	f7fe fe09 	bl	800b12c <HAL_RCC_GetPCLK1Freq>
 800c51a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c51c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c51e:	69db      	ldr	r3, [r3, #28]
 800c520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c524:	f040 80b6 	bne.w	800c694 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c528:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c52a:	461c      	mov	r4, r3
 800c52c:	f04f 0500 	mov.w	r5, #0
 800c530:	4622      	mov	r2, r4
 800c532:	462b      	mov	r3, r5
 800c534:	1891      	adds	r1, r2, r2
 800c536:	6439      	str	r1, [r7, #64]	; 0x40
 800c538:	415b      	adcs	r3, r3
 800c53a:	647b      	str	r3, [r7, #68]	; 0x44
 800c53c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c540:	1912      	adds	r2, r2, r4
 800c542:	eb45 0303 	adc.w	r3, r5, r3
 800c546:	f04f 0000 	mov.w	r0, #0
 800c54a:	f04f 0100 	mov.w	r1, #0
 800c54e:	00d9      	lsls	r1, r3, #3
 800c550:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c554:	00d0      	lsls	r0, r2, #3
 800c556:	4602      	mov	r2, r0
 800c558:	460b      	mov	r3, r1
 800c55a:	1911      	adds	r1, r2, r4
 800c55c:	6639      	str	r1, [r7, #96]	; 0x60
 800c55e:	416b      	adcs	r3, r5
 800c560:	667b      	str	r3, [r7, #100]	; 0x64
 800c562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c564:	685b      	ldr	r3, [r3, #4]
 800c566:	461a      	mov	r2, r3
 800c568:	f04f 0300 	mov.w	r3, #0
 800c56c:	1891      	adds	r1, r2, r2
 800c56e:	63b9      	str	r1, [r7, #56]	; 0x38
 800c570:	415b      	adcs	r3, r3
 800c572:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c574:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c578:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800c57c:	f7f4 fb28 	bl	8000bd0 <__aeabi_uldivmod>
 800c580:	4602      	mov	r2, r0
 800c582:	460b      	mov	r3, r1
 800c584:	4ba5      	ldr	r3, [pc, #660]	; (800c81c <UART_SetConfig+0x38c>)
 800c586:	fba3 2302 	umull	r2, r3, r3, r2
 800c58a:	095b      	lsrs	r3, r3, #5
 800c58c:	011e      	lsls	r6, r3, #4
 800c58e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c590:	461c      	mov	r4, r3
 800c592:	f04f 0500 	mov.w	r5, #0
 800c596:	4622      	mov	r2, r4
 800c598:	462b      	mov	r3, r5
 800c59a:	1891      	adds	r1, r2, r2
 800c59c:	6339      	str	r1, [r7, #48]	; 0x30
 800c59e:	415b      	adcs	r3, r3
 800c5a0:	637b      	str	r3, [r7, #52]	; 0x34
 800c5a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c5a6:	1912      	adds	r2, r2, r4
 800c5a8:	eb45 0303 	adc.w	r3, r5, r3
 800c5ac:	f04f 0000 	mov.w	r0, #0
 800c5b0:	f04f 0100 	mov.w	r1, #0
 800c5b4:	00d9      	lsls	r1, r3, #3
 800c5b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c5ba:	00d0      	lsls	r0, r2, #3
 800c5bc:	4602      	mov	r2, r0
 800c5be:	460b      	mov	r3, r1
 800c5c0:	1911      	adds	r1, r2, r4
 800c5c2:	65b9      	str	r1, [r7, #88]	; 0x58
 800c5c4:	416b      	adcs	r3, r5
 800c5c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	461a      	mov	r2, r3
 800c5ce:	f04f 0300 	mov.w	r3, #0
 800c5d2:	1891      	adds	r1, r2, r2
 800c5d4:	62b9      	str	r1, [r7, #40]	; 0x28
 800c5d6:	415b      	adcs	r3, r3
 800c5d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c5da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c5de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800c5e2:	f7f4 faf5 	bl	8000bd0 <__aeabi_uldivmod>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	4b8c      	ldr	r3, [pc, #560]	; (800c81c <UART_SetConfig+0x38c>)
 800c5ec:	fba3 1302 	umull	r1, r3, r3, r2
 800c5f0:	095b      	lsrs	r3, r3, #5
 800c5f2:	2164      	movs	r1, #100	; 0x64
 800c5f4:	fb01 f303 	mul.w	r3, r1, r3
 800c5f8:	1ad3      	subs	r3, r2, r3
 800c5fa:	00db      	lsls	r3, r3, #3
 800c5fc:	3332      	adds	r3, #50	; 0x32
 800c5fe:	4a87      	ldr	r2, [pc, #540]	; (800c81c <UART_SetConfig+0x38c>)
 800c600:	fba2 2303 	umull	r2, r3, r2, r3
 800c604:	095b      	lsrs	r3, r3, #5
 800c606:	005b      	lsls	r3, r3, #1
 800c608:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c60c:	441e      	add	r6, r3
 800c60e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c610:	4618      	mov	r0, r3
 800c612:	f04f 0100 	mov.w	r1, #0
 800c616:	4602      	mov	r2, r0
 800c618:	460b      	mov	r3, r1
 800c61a:	1894      	adds	r4, r2, r2
 800c61c:	623c      	str	r4, [r7, #32]
 800c61e:	415b      	adcs	r3, r3
 800c620:	627b      	str	r3, [r7, #36]	; 0x24
 800c622:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c626:	1812      	adds	r2, r2, r0
 800c628:	eb41 0303 	adc.w	r3, r1, r3
 800c62c:	f04f 0400 	mov.w	r4, #0
 800c630:	f04f 0500 	mov.w	r5, #0
 800c634:	00dd      	lsls	r5, r3, #3
 800c636:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c63a:	00d4      	lsls	r4, r2, #3
 800c63c:	4622      	mov	r2, r4
 800c63e:	462b      	mov	r3, r5
 800c640:	1814      	adds	r4, r2, r0
 800c642:	653c      	str	r4, [r7, #80]	; 0x50
 800c644:	414b      	adcs	r3, r1
 800c646:	657b      	str	r3, [r7, #84]	; 0x54
 800c648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c64a:	685b      	ldr	r3, [r3, #4]
 800c64c:	461a      	mov	r2, r3
 800c64e:	f04f 0300 	mov.w	r3, #0
 800c652:	1891      	adds	r1, r2, r2
 800c654:	61b9      	str	r1, [r7, #24]
 800c656:	415b      	adcs	r3, r3
 800c658:	61fb      	str	r3, [r7, #28]
 800c65a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c65e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800c662:	f7f4 fab5 	bl	8000bd0 <__aeabi_uldivmod>
 800c666:	4602      	mov	r2, r0
 800c668:	460b      	mov	r3, r1
 800c66a:	4b6c      	ldr	r3, [pc, #432]	; (800c81c <UART_SetConfig+0x38c>)
 800c66c:	fba3 1302 	umull	r1, r3, r3, r2
 800c670:	095b      	lsrs	r3, r3, #5
 800c672:	2164      	movs	r1, #100	; 0x64
 800c674:	fb01 f303 	mul.w	r3, r1, r3
 800c678:	1ad3      	subs	r3, r2, r3
 800c67a:	00db      	lsls	r3, r3, #3
 800c67c:	3332      	adds	r3, #50	; 0x32
 800c67e:	4a67      	ldr	r2, [pc, #412]	; (800c81c <UART_SetConfig+0x38c>)
 800c680:	fba2 2303 	umull	r2, r3, r2, r3
 800c684:	095b      	lsrs	r3, r3, #5
 800c686:	f003 0207 	and.w	r2, r3, #7
 800c68a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4432      	add	r2, r6
 800c690:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c692:	e0b9      	b.n	800c808 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c694:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c696:	461c      	mov	r4, r3
 800c698:	f04f 0500 	mov.w	r5, #0
 800c69c:	4622      	mov	r2, r4
 800c69e:	462b      	mov	r3, r5
 800c6a0:	1891      	adds	r1, r2, r2
 800c6a2:	6139      	str	r1, [r7, #16]
 800c6a4:	415b      	adcs	r3, r3
 800c6a6:	617b      	str	r3, [r7, #20]
 800c6a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c6ac:	1912      	adds	r2, r2, r4
 800c6ae:	eb45 0303 	adc.w	r3, r5, r3
 800c6b2:	f04f 0000 	mov.w	r0, #0
 800c6b6:	f04f 0100 	mov.w	r1, #0
 800c6ba:	00d9      	lsls	r1, r3, #3
 800c6bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c6c0:	00d0      	lsls	r0, r2, #3
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	eb12 0804 	adds.w	r8, r2, r4
 800c6ca:	eb43 0905 	adc.w	r9, r3, r5
 800c6ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f04f 0100 	mov.w	r1, #0
 800c6d8:	f04f 0200 	mov.w	r2, #0
 800c6dc:	f04f 0300 	mov.w	r3, #0
 800c6e0:	008b      	lsls	r3, r1, #2
 800c6e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c6e6:	0082      	lsls	r2, r0, #2
 800c6e8:	4640      	mov	r0, r8
 800c6ea:	4649      	mov	r1, r9
 800c6ec:	f7f4 fa70 	bl	8000bd0 <__aeabi_uldivmod>
 800c6f0:	4602      	mov	r2, r0
 800c6f2:	460b      	mov	r3, r1
 800c6f4:	4b49      	ldr	r3, [pc, #292]	; (800c81c <UART_SetConfig+0x38c>)
 800c6f6:	fba3 2302 	umull	r2, r3, r3, r2
 800c6fa:	095b      	lsrs	r3, r3, #5
 800c6fc:	011e      	lsls	r6, r3, #4
 800c6fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c700:	4618      	mov	r0, r3
 800c702:	f04f 0100 	mov.w	r1, #0
 800c706:	4602      	mov	r2, r0
 800c708:	460b      	mov	r3, r1
 800c70a:	1894      	adds	r4, r2, r2
 800c70c:	60bc      	str	r4, [r7, #8]
 800c70e:	415b      	adcs	r3, r3
 800c710:	60fb      	str	r3, [r7, #12]
 800c712:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c716:	1812      	adds	r2, r2, r0
 800c718:	eb41 0303 	adc.w	r3, r1, r3
 800c71c:	f04f 0400 	mov.w	r4, #0
 800c720:	f04f 0500 	mov.w	r5, #0
 800c724:	00dd      	lsls	r5, r3, #3
 800c726:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c72a:	00d4      	lsls	r4, r2, #3
 800c72c:	4622      	mov	r2, r4
 800c72e:	462b      	mov	r3, r5
 800c730:	1814      	adds	r4, r2, r0
 800c732:	64bc      	str	r4, [r7, #72]	; 0x48
 800c734:	414b      	adcs	r3, r1
 800c736:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	4618      	mov	r0, r3
 800c73e:	f04f 0100 	mov.w	r1, #0
 800c742:	f04f 0200 	mov.w	r2, #0
 800c746:	f04f 0300 	mov.w	r3, #0
 800c74a:	008b      	lsls	r3, r1, #2
 800c74c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c750:	0082      	lsls	r2, r0, #2
 800c752:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c756:	f7f4 fa3b 	bl	8000bd0 <__aeabi_uldivmod>
 800c75a:	4602      	mov	r2, r0
 800c75c:	460b      	mov	r3, r1
 800c75e:	4b2f      	ldr	r3, [pc, #188]	; (800c81c <UART_SetConfig+0x38c>)
 800c760:	fba3 1302 	umull	r1, r3, r3, r2
 800c764:	095b      	lsrs	r3, r3, #5
 800c766:	2164      	movs	r1, #100	; 0x64
 800c768:	fb01 f303 	mul.w	r3, r1, r3
 800c76c:	1ad3      	subs	r3, r2, r3
 800c76e:	011b      	lsls	r3, r3, #4
 800c770:	3332      	adds	r3, #50	; 0x32
 800c772:	4a2a      	ldr	r2, [pc, #168]	; (800c81c <UART_SetConfig+0x38c>)
 800c774:	fba2 2303 	umull	r2, r3, r2, r3
 800c778:	095b      	lsrs	r3, r3, #5
 800c77a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c77e:	441e      	add	r6, r3
 800c780:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c782:	4618      	mov	r0, r3
 800c784:	f04f 0100 	mov.w	r1, #0
 800c788:	4602      	mov	r2, r0
 800c78a:	460b      	mov	r3, r1
 800c78c:	1894      	adds	r4, r2, r2
 800c78e:	603c      	str	r4, [r7, #0]
 800c790:	415b      	adcs	r3, r3
 800c792:	607b      	str	r3, [r7, #4]
 800c794:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c798:	1812      	adds	r2, r2, r0
 800c79a:	eb41 0303 	adc.w	r3, r1, r3
 800c79e:	f04f 0400 	mov.w	r4, #0
 800c7a2:	f04f 0500 	mov.w	r5, #0
 800c7a6:	00dd      	lsls	r5, r3, #3
 800c7a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c7ac:	00d4      	lsls	r4, r2, #3
 800c7ae:	4622      	mov	r2, r4
 800c7b0:	462b      	mov	r3, r5
 800c7b2:	eb12 0a00 	adds.w	sl, r2, r0
 800c7b6:	eb43 0b01 	adc.w	fp, r3, r1
 800c7ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f04f 0100 	mov.w	r1, #0
 800c7c4:	f04f 0200 	mov.w	r2, #0
 800c7c8:	f04f 0300 	mov.w	r3, #0
 800c7cc:	008b      	lsls	r3, r1, #2
 800c7ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c7d2:	0082      	lsls	r2, r0, #2
 800c7d4:	4650      	mov	r0, sl
 800c7d6:	4659      	mov	r1, fp
 800c7d8:	f7f4 f9fa 	bl	8000bd0 <__aeabi_uldivmod>
 800c7dc:	4602      	mov	r2, r0
 800c7de:	460b      	mov	r3, r1
 800c7e0:	4b0e      	ldr	r3, [pc, #56]	; (800c81c <UART_SetConfig+0x38c>)
 800c7e2:	fba3 1302 	umull	r1, r3, r3, r2
 800c7e6:	095b      	lsrs	r3, r3, #5
 800c7e8:	2164      	movs	r1, #100	; 0x64
 800c7ea:	fb01 f303 	mul.w	r3, r1, r3
 800c7ee:	1ad3      	subs	r3, r2, r3
 800c7f0:	011b      	lsls	r3, r3, #4
 800c7f2:	3332      	adds	r3, #50	; 0x32
 800c7f4:	4a09      	ldr	r2, [pc, #36]	; (800c81c <UART_SetConfig+0x38c>)
 800c7f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c7fa:	095b      	lsrs	r3, r3, #5
 800c7fc:	f003 020f 	and.w	r2, r3, #15
 800c800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4432      	add	r2, r6
 800c806:	609a      	str	r2, [r3, #8]
}
 800c808:	bf00      	nop
 800c80a:	377c      	adds	r7, #124	; 0x7c
 800c80c:	46bd      	mov	sp, r7
 800c80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c812:	bf00      	nop
 800c814:	40011000 	.word	0x40011000
 800c818:	40011400 	.word	0x40011400
 800c81c:	51eb851f 	.word	0x51eb851f

0800c820 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b084      	sub	sp, #16
 800c824:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800c826:	f000 fbf1 	bl	800d00c <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800c82a:	4b19      	ldr	r3, [pc, #100]	; (800c890 <MX_LWIP_Init+0x70>)
 800c82c:	2200      	movs	r2, #0
 800c82e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800c830:	4b18      	ldr	r3, [pc, #96]	; (800c894 <MX_LWIP_Init+0x74>)
 800c832:	2200      	movs	r2, #0
 800c834:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800c836:	4b18      	ldr	r3, [pc, #96]	; (800c898 <MX_LWIP_Init+0x78>)
 800c838:	2200      	movs	r2, #0
 800c83a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800c83c:	4b17      	ldr	r3, [pc, #92]	; (800c89c <MX_LWIP_Init+0x7c>)
 800c83e:	9302      	str	r3, [sp, #8]
 800c840:	4b17      	ldr	r3, [pc, #92]	; (800c8a0 <MX_LWIP_Init+0x80>)
 800c842:	9301      	str	r3, [sp, #4]
 800c844:	2300      	movs	r3, #0
 800c846:	9300      	str	r3, [sp, #0]
 800c848:	4b13      	ldr	r3, [pc, #76]	; (800c898 <MX_LWIP_Init+0x78>)
 800c84a:	4a12      	ldr	r2, [pc, #72]	; (800c894 <MX_LWIP_Init+0x74>)
 800c84c:	4910      	ldr	r1, [pc, #64]	; (800c890 <MX_LWIP_Init+0x70>)
 800c84e:	4815      	ldr	r0, [pc, #84]	; (800c8a4 <MX_LWIP_Init+0x84>)
 800c850:	f001 f882 	bl	800d958 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800c854:	4813      	ldr	r0, [pc, #76]	; (800c8a4 <MX_LWIP_Init+0x84>)
 800c856:	f001 fa39 	bl	800dccc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800c85a:	4b12      	ldr	r3, [pc, #72]	; (800c8a4 <MX_LWIP_Init+0x84>)
 800c85c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c860:	089b      	lsrs	r3, r3, #2
 800c862:	f003 0301 	and.w	r3, r3, #1
 800c866:	b2db      	uxtb	r3, r3
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d003      	beq.n	800c874 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800c86c:	480d      	ldr	r0, [pc, #52]	; (800c8a4 <MX_LWIP_Init+0x84>)
 800c86e:	f001 fa3d 	bl	800dcec <netif_set_up>
 800c872:	e002      	b.n	800c87a <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800c874:	480b      	ldr	r0, [pc, #44]	; (800c8a4 <MX_LWIP_Init+0x84>)
 800c876:	f001 faa5 	bl	800ddc4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800c87a:	490b      	ldr	r1, [pc, #44]	; (800c8a8 <MX_LWIP_Init+0x88>)
 800c87c:	4809      	ldr	r0, [pc, #36]	; (800c8a4 <MX_LWIP_Init+0x84>)
 800c87e:	f001 fad3 	bl	800de28 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800c882:	4808      	ldr	r0, [pc, #32]	; (800c8a4 <MX_LWIP_Init+0x84>)
 800c884:	f008 fd12 	bl	80152ac <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800c888:	bf00      	nop
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	bf00      	nop
 800c890:	200006a8 	.word	0x200006a8
 800c894:	200006ac 	.word	0x200006ac
 800c898:	200006b0 	.word	0x200006b0
 800c89c:	08018c79 	.word	0x08018c79
 800c8a0:	0800ce39 	.word	0x0800ce39
 800c8a4:	20000138 	.word	0x20000138
 800c8a8:	0800cea5 	.word	0x0800cea5

0800c8ac <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b08e      	sub	sp, #56	; 0x38
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c8b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	601a      	str	r2, [r3, #0]
 800c8bc:	605a      	str	r2, [r3, #4]
 800c8be:	609a      	str	r2, [r3, #8]
 800c8c0:	60da      	str	r2, [r3, #12]
 800c8c2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4a46      	ldr	r2, [pc, #280]	; (800c9e4 <HAL_ETH_MspInit+0x138>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	f040 8085 	bne.w	800c9da <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	623b      	str	r3, [r7, #32]
 800c8d4:	4b44      	ldr	r3, [pc, #272]	; (800c9e8 <HAL_ETH_MspInit+0x13c>)
 800c8d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8d8:	4a43      	ldr	r2, [pc, #268]	; (800c9e8 <HAL_ETH_MspInit+0x13c>)
 800c8da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c8de:	6313      	str	r3, [r2, #48]	; 0x30
 800c8e0:	4b41      	ldr	r3, [pc, #260]	; (800c9e8 <HAL_ETH_MspInit+0x13c>)
 800c8e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8e8:	623b      	str	r3, [r7, #32]
 800c8ea:	6a3b      	ldr	r3, [r7, #32]
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	61fb      	str	r3, [r7, #28]
 800c8f0:	4b3d      	ldr	r3, [pc, #244]	; (800c9e8 <HAL_ETH_MspInit+0x13c>)
 800c8f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8f4:	4a3c      	ldr	r2, [pc, #240]	; (800c9e8 <HAL_ETH_MspInit+0x13c>)
 800c8f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c8fa:	6313      	str	r3, [r2, #48]	; 0x30
 800c8fc:	4b3a      	ldr	r3, [pc, #232]	; (800c9e8 <HAL_ETH_MspInit+0x13c>)
 800c8fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c900:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c904:	61fb      	str	r3, [r7, #28]
 800c906:	69fb      	ldr	r3, [r7, #28]
 800c908:	2300      	movs	r3, #0
 800c90a:	61bb      	str	r3, [r7, #24]
 800c90c:	4b36      	ldr	r3, [pc, #216]	; (800c9e8 <HAL_ETH_MspInit+0x13c>)
 800c90e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c910:	4a35      	ldr	r2, [pc, #212]	; (800c9e8 <HAL_ETH_MspInit+0x13c>)
 800c912:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c916:	6313      	str	r3, [r2, #48]	; 0x30
 800c918:	4b33      	ldr	r3, [pc, #204]	; (800c9e8 <HAL_ETH_MspInit+0x13c>)
 800c91a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c91c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c920:	61bb      	str	r3, [r7, #24]
 800c922:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c924:	2300      	movs	r3, #0
 800c926:	617b      	str	r3, [r7, #20]
 800c928:	4b2f      	ldr	r3, [pc, #188]	; (800c9e8 <HAL_ETH_MspInit+0x13c>)
 800c92a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c92c:	4a2e      	ldr	r2, [pc, #184]	; (800c9e8 <HAL_ETH_MspInit+0x13c>)
 800c92e:	f043 0304 	orr.w	r3, r3, #4
 800c932:	6313      	str	r3, [r2, #48]	; 0x30
 800c934:	4b2c      	ldr	r3, [pc, #176]	; (800c9e8 <HAL_ETH_MspInit+0x13c>)
 800c936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c938:	f003 0304 	and.w	r3, r3, #4
 800c93c:	617b      	str	r3, [r7, #20]
 800c93e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c940:	2300      	movs	r3, #0
 800c942:	613b      	str	r3, [r7, #16]
 800c944:	4b28      	ldr	r3, [pc, #160]	; (800c9e8 <HAL_ETH_MspInit+0x13c>)
 800c946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c948:	4a27      	ldr	r2, [pc, #156]	; (800c9e8 <HAL_ETH_MspInit+0x13c>)
 800c94a:	f043 0301 	orr.w	r3, r3, #1
 800c94e:	6313      	str	r3, [r2, #48]	; 0x30
 800c950:	4b25      	ldr	r3, [pc, #148]	; (800c9e8 <HAL_ETH_MspInit+0x13c>)
 800c952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c954:	f003 0301 	and.w	r3, r3, #1
 800c958:	613b      	str	r3, [r7, #16]
 800c95a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c95c:	2300      	movs	r3, #0
 800c95e:	60fb      	str	r3, [r7, #12]
 800c960:	4b21      	ldr	r3, [pc, #132]	; (800c9e8 <HAL_ETH_MspInit+0x13c>)
 800c962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c964:	4a20      	ldr	r2, [pc, #128]	; (800c9e8 <HAL_ETH_MspInit+0x13c>)
 800c966:	f043 0302 	orr.w	r3, r3, #2
 800c96a:	6313      	str	r3, [r2, #48]	; 0x30
 800c96c:	4b1e      	ldr	r3, [pc, #120]	; (800c9e8 <HAL_ETH_MspInit+0x13c>)
 800c96e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c970:	f003 0302 	and.w	r3, r3, #2
 800c974:	60fb      	str	r3, [r7, #12]
 800c976:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800c978:	2332      	movs	r3, #50	; 0x32
 800c97a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c97c:	2302      	movs	r3, #2
 800c97e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c980:	2300      	movs	r3, #0
 800c982:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c984:	2303      	movs	r3, #3
 800c986:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c988:	230b      	movs	r3, #11
 800c98a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c98c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c990:	4619      	mov	r1, r3
 800c992:	4816      	ldr	r0, [pc, #88]	; (800c9ec <HAL_ETH_MspInit+0x140>)
 800c994:	f7fd fddc 	bl	800a550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800c998:	2386      	movs	r3, #134	; 0x86
 800c99a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c99c:	2302      	movs	r3, #2
 800c99e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c9a4:	2303      	movs	r3, #3
 800c9a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c9a8:	230b      	movs	r3, #11
 800c9aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c9ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	480f      	ldr	r0, [pc, #60]	; (800c9f0 <HAL_ETH_MspInit+0x144>)
 800c9b4:	f7fd fdcc 	bl	800a550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800c9b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c9bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9be:	2302      	movs	r3, #2
 800c9c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c9c6:	2303      	movs	r3, #3
 800c9c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c9ca:	230b      	movs	r3, #11
 800c9cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c9ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9d2:	4619      	mov	r1, r3
 800c9d4:	4807      	ldr	r0, [pc, #28]	; (800c9f4 <HAL_ETH_MspInit+0x148>)
 800c9d6:	f7fd fdbb 	bl	800a550 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800c9da:	bf00      	nop
 800c9dc:	3738      	adds	r7, #56	; 0x38
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}
 800c9e2:	bf00      	nop
 800c9e4:	40028000 	.word	0x40028000
 800c9e8:	40023800 	.word	0x40023800
 800c9ec:	40020800 	.word	0x40020800
 800c9f0:	40020000 	.word	0x40020000
 800c9f4:	40020400 	.word	0x40020400

0800c9f8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b086      	sub	sp, #24
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800ca00:	2300      	movs	r3, #0
 800ca02:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800ca04:	4b4d      	ldr	r3, [pc, #308]	; (800cb3c <low_level_init+0x144>)
 800ca06:	4a4e      	ldr	r2, [pc, #312]	; (800cb40 <low_level_init+0x148>)
 800ca08:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800ca0a:	4b4c      	ldr	r3, [pc, #304]	; (800cb3c <low_level_init+0x144>)
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800ca10:	4b4a      	ldr	r3, [pc, #296]	; (800cb3c <low_level_init+0x144>)
 800ca12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ca16:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800ca18:	4b48      	ldr	r3, [pc, #288]	; (800cb3c <low_level_init+0x144>)
 800ca1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ca1e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800ca20:	4b46      	ldr	r3, [pc, #280]	; (800cb3c <low_level_init+0x144>)
 800ca22:	2201      	movs	r2, #1
 800ca24:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800ca26:	2300      	movs	r3, #0
 800ca28:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800ca2a:	2380      	movs	r3, #128	; 0x80
 800ca2c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800ca2e:	23e1      	movs	r3, #225	; 0xe1
 800ca30:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800ca32:	2300      	movs	r3, #0
 800ca34:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800ca36:	2300      	movs	r3, #0
 800ca38:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800ca3e:	4a3f      	ldr	r2, [pc, #252]	; (800cb3c <low_level_init+0x144>)
 800ca40:	f107 0308 	add.w	r3, r7, #8
 800ca44:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800ca46:	4b3d      	ldr	r3, [pc, #244]	; (800cb3c <low_level_init+0x144>)
 800ca48:	2200      	movs	r2, #0
 800ca4a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800ca4c:	4b3b      	ldr	r3, [pc, #236]	; (800cb3c <low_level_init+0x144>)
 800ca4e:	2200      	movs	r2, #0
 800ca50:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800ca52:	4b3a      	ldr	r3, [pc, #232]	; (800cb3c <low_level_init+0x144>)
 800ca54:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800ca58:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ca5a:	4838      	ldr	r0, [pc, #224]	; (800cb3c <low_level_init+0x144>)
 800ca5c:	f7fc f98a 	bl	8008d74 <HAL_ETH_Init>
 800ca60:	4603      	mov	r3, r0
 800ca62:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800ca64:	7dfb      	ldrb	r3, [r7, #23]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d108      	bne.n	800ca7c <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ca70:	f043 0304 	orr.w	r3, r3, #4
 800ca74:	b2da      	uxtb	r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800ca7c:	2304      	movs	r3, #4
 800ca7e:	4a31      	ldr	r2, [pc, #196]	; (800cb44 <low_level_init+0x14c>)
 800ca80:	4931      	ldr	r1, [pc, #196]	; (800cb48 <low_level_init+0x150>)
 800ca82:	482e      	ldr	r0, [pc, #184]	; (800cb3c <low_level_init+0x144>)
 800ca84:	f7fc fb12 	bl	80090ac <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800ca88:	2304      	movs	r3, #4
 800ca8a:	4a30      	ldr	r2, [pc, #192]	; (800cb4c <low_level_init+0x154>)
 800ca8c:	4930      	ldr	r1, [pc, #192]	; (800cb50 <low_level_init+0x158>)
 800ca8e:	482b      	ldr	r0, [pc, #172]	; (800cb3c <low_level_init+0x144>)
 800ca90:	f7fc fb75 	bl	800917e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2206      	movs	r2, #6
 800ca98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ca9c:	4b27      	ldr	r3, [pc, #156]	; (800cb3c <low_level_init+0x144>)
 800ca9e:	695b      	ldr	r3, [r3, #20]
 800caa0:	781a      	ldrb	r2, [r3, #0]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800caa8:	4b24      	ldr	r3, [pc, #144]	; (800cb3c <low_level_init+0x144>)
 800caaa:	695b      	ldr	r3, [r3, #20]
 800caac:	785a      	ldrb	r2, [r3, #1]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800cab4:	4b21      	ldr	r3, [pc, #132]	; (800cb3c <low_level_init+0x144>)
 800cab6:	695b      	ldr	r3, [r3, #20]
 800cab8:	789a      	ldrb	r2, [r3, #2]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800cac0:	4b1e      	ldr	r3, [pc, #120]	; (800cb3c <low_level_init+0x144>)
 800cac2:	695b      	ldr	r3, [r3, #20]
 800cac4:	78da      	ldrb	r2, [r3, #3]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800cacc:	4b1b      	ldr	r3, [pc, #108]	; (800cb3c <low_level_init+0x144>)
 800cace:	695b      	ldr	r3, [r3, #20]
 800cad0:	791a      	ldrb	r2, [r3, #4]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800cad8:	4b18      	ldr	r3, [pc, #96]	; (800cb3c <low_level_init+0x144>)
 800cada:	695b      	ldr	r3, [r3, #20]
 800cadc:	795a      	ldrb	r2, [r3, #5]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800caea:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800caf2:	f043 030a 	orr.w	r3, r3, #10
 800caf6:	b2da      	uxtb	r2, r3
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800cafe:	480f      	ldr	r0, [pc, #60]	; (800cb3c <low_level_init+0x144>)
 800cb00:	f7fc fde6 	bl	80096d0 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800cb04:	f107 0310 	add.w	r3, r7, #16
 800cb08:	461a      	mov	r2, r3
 800cb0a:	211d      	movs	r1, #29
 800cb0c:	480b      	ldr	r0, [pc, #44]	; (800cb3c <low_level_init+0x144>)
 800cb0e:	f7fc fd11 	bl	8009534 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	f043 030b 	orr.w	r3, r3, #11
 800cb18:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	211d      	movs	r1, #29
 800cb20:	4806      	ldr	r0, [pc, #24]	; (800cb3c <low_level_init+0x144>)
 800cb22:	f7fc fd6f 	bl	8009604 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800cb26:	f107 0310 	add.w	r3, r7, #16
 800cb2a:	461a      	mov	r2, r3
 800cb2c:	211d      	movs	r1, #29
 800cb2e:	4803      	ldr	r0, [pc, #12]	; (800cb3c <low_level_init+0x144>)
 800cb30:	f7fc fd00 	bl	8009534 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800cb34:	bf00      	nop
 800cb36:	3718      	adds	r7, #24
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}
 800cb3c:	20001f84 	.word	0x20001f84
 800cb40:	40028000 	.word	0x40028000
 800cb44:	20001fcc 	.word	0x20001fcc
 800cb48:	200006b4 	.word	0x200006b4
 800cb4c:	20000734 	.word	0x20000734
 800cb50:	20001f04 	.word	0x20001f04

0800cb54 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b08a      	sub	sp, #40	; 0x28
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800cb5e:	4b4b      	ldr	r3, [pc, #300]	; (800cc8c <low_level_output+0x138>)
 800cb60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb62:	689b      	ldr	r3, [r3, #8]
 800cb64:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800cb66:	2300      	movs	r3, #0
 800cb68:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800cb72:	2300      	movs	r3, #0
 800cb74:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800cb76:	4b45      	ldr	r3, [pc, #276]	; (800cc8c <low_level_output+0x138>)
 800cb78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb7a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	623b      	str	r3, [r7, #32]
 800cb84:	e05a      	b.n	800cc3c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800cb86:	69bb      	ldr	r3, [r7, #24]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	da03      	bge.n	800cb96 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800cb8e:	23f8      	movs	r3, #248	; 0xf8
 800cb90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800cb94:	e05c      	b.n	800cc50 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800cb96:	6a3b      	ldr	r3, [r7, #32]
 800cb98:	895b      	ldrh	r3, [r3, #10]
 800cb9a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800cba0:	e02f      	b.n	800cc02 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800cba2:	69fa      	ldr	r2, [r7, #28]
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	18d0      	adds	r0, r2, r3
 800cba8:	6a3b      	ldr	r3, [r7, #32]
 800cbaa:	685a      	ldr	r2, [r3, #4]
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	18d1      	adds	r1, r2, r3
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800cbb6:	3304      	adds	r3, #4
 800cbb8:	461a      	mov	r2, r3
 800cbba:	f00c fb6d 	bl	8019298 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800cbbe:	69bb      	ldr	r3, [r7, #24]
 800cbc0:	68db      	ldr	r3, [r3, #12]
 800cbc2:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800cbc4:	69bb      	ldr	r3, [r7, #24]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	da03      	bge.n	800cbd4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800cbcc:	23f8      	movs	r3, #248	; 0xf8
 800cbce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800cbd2:	e03d      	b.n	800cc50 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800cbd4:	69bb      	ldr	r3, [r7, #24]
 800cbd6:	689b      	ldr	r3, [r3, #8]
 800cbd8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800cbda:	693a      	ldr	r2, [r7, #16]
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	4413      	add	r3, r2
 800cbe0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800cbe4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800cbe6:	68ba      	ldr	r2, [r7, #8]
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	1ad3      	subs	r3, r2, r3
 800cbec:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800cbf0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800cbf2:	697a      	ldr	r2, [r7, #20]
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	1ad3      	subs	r3, r2, r3
 800cbf8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800cbfc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800cc02:	68fa      	ldr	r2, [r7, #12]
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	4413      	add	r3, r2
 800cc08:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d8c8      	bhi.n	800cba2 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800cc10:	69fa      	ldr	r2, [r7, #28]
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	18d0      	adds	r0, r2, r3
 800cc16:	6a3b      	ldr	r3, [r7, #32]
 800cc18:	685a      	ldr	r2, [r3, #4]
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	4413      	add	r3, r2
 800cc1e:	68fa      	ldr	r2, [r7, #12]
 800cc20:	4619      	mov	r1, r3
 800cc22:	f00c fb39 	bl	8019298 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800cc26:	693a      	ldr	r2, [r7, #16]
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	4413      	add	r3, r2
 800cc2c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800cc2e:	697a      	ldr	r2, [r7, #20]
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	4413      	add	r3, r2
 800cc34:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800cc36:	6a3b      	ldr	r3, [r7, #32]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	623b      	str	r3, [r7, #32]
 800cc3c:	6a3b      	ldr	r3, [r7, #32]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d1a1      	bne.n	800cb86 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800cc42:	6979      	ldr	r1, [r7, #20]
 800cc44:	4811      	ldr	r0, [pc, #68]	; (800cc8c <low_level_output+0x138>)
 800cc46:	f7fc fb07 	bl	8009258 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800cc50:	4b0e      	ldr	r3, [pc, #56]	; (800cc8c <low_level_output+0x138>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc58:	3314      	adds	r3, #20
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f003 0320 	and.w	r3, r3, #32
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d00d      	beq.n	800cc80 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800cc64:	4b09      	ldr	r3, [pc, #36]	; (800cc8c <low_level_output+0x138>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc6c:	3314      	adds	r3, #20
 800cc6e:	2220      	movs	r2, #32
 800cc70:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800cc72:	4b06      	ldr	r3, [pc, #24]	; (800cc8c <low_level_output+0x138>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cc7a:	3304      	adds	r3, #4
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800cc80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3728      	adds	r7, #40	; 0x28
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}
 800cc8c:	20001f84 	.word	0x20001f84

0800cc90 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b08c      	sub	sp, #48	; 0x30
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800cca0:	2300      	movs	r3, #0
 800cca2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800cca4:	2300      	movs	r3, #0
 800cca6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800ccac:	2300      	movs	r3, #0
 800ccae:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800ccb4:	484f      	ldr	r0, [pc, #316]	; (800cdf4 <low_level_input+0x164>)
 800ccb6:	f7fc fbb9 	bl	800942c <HAL_ETH_GetReceivedFrame>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d001      	beq.n	800ccc4 <low_level_input+0x34>

    return NULL;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	e092      	b.n	800cdea <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800ccc4:	4b4b      	ldr	r3, [pc, #300]	; (800cdf4 <low_level_input+0x164>)
 800ccc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccc8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800ccca:	4b4a      	ldr	r3, [pc, #296]	; (800cdf4 <low_level_input+0x164>)
 800cccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccce:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800ccd0:	89fb      	ldrh	r3, [r7, #14]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d007      	beq.n	800cce6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800ccd6:	89fb      	ldrh	r3, [r7, #14]
 800ccd8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800ccdc:	4619      	mov	r1, r3
 800ccde:	2000      	movs	r0, #0
 800cce0:	f001 f93e 	bl	800df60 <pbuf_alloc>
 800cce4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800cce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d04b      	beq.n	800cd84 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800ccec:	4b41      	ldr	r3, [pc, #260]	; (800cdf4 <low_level_input+0x164>)
 800ccee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccf0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800ccf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf8:	62bb      	str	r3, [r7, #40]	; 0x28
 800ccfa:	e040      	b.n	800cd7e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800ccfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccfe:	895b      	ldrh	r3, [r3, #10]
 800cd00:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800cd02:	2300      	movs	r3, #0
 800cd04:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800cd06:	e021      	b.n	800cd4c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800cd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd0a:	685a      	ldr	r2, [r3, #4]
 800cd0c:	69bb      	ldr	r3, [r7, #24]
 800cd0e:	18d0      	adds	r0, r2, r3
 800cd10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd12:	69fb      	ldr	r3, [r7, #28]
 800cd14:	18d1      	adds	r1, r2, r3
 800cd16:	69fb      	ldr	r3, [r7, #28]
 800cd18:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800cd1c:	3304      	adds	r3, #4
 800cd1e:	461a      	mov	r2, r3
 800cd20:	f00c faba 	bl	8019298 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800cd24:	6a3b      	ldr	r3, [r7, #32]
 800cd26:	68db      	ldr	r3, [r3, #12]
 800cd28:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800cd2a:	6a3b      	ldr	r3, [r7, #32]
 800cd2c:	689b      	ldr	r3, [r3, #8]
 800cd2e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800cd30:	69fa      	ldr	r2, [r7, #28]
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	4413      	add	r3, r2
 800cd36:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800cd3a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800cd3c:	69ba      	ldr	r2, [r7, #24]
 800cd3e:	69fb      	ldr	r3, [r7, #28]
 800cd40:	1ad3      	subs	r3, r2, r3
 800cd42:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800cd46:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800cd4c:	697a      	ldr	r2, [r7, #20]
 800cd4e:	69fb      	ldr	r3, [r7, #28]
 800cd50:	4413      	add	r3, r2
 800cd52:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d8d6      	bhi.n	800cd08 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800cd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd5c:	685a      	ldr	r2, [r3, #4]
 800cd5e:	69bb      	ldr	r3, [r7, #24]
 800cd60:	18d0      	adds	r0, r2, r3
 800cd62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd64:	69fb      	ldr	r3, [r7, #28]
 800cd66:	4413      	add	r3, r2
 800cd68:	697a      	ldr	r2, [r7, #20]
 800cd6a:	4619      	mov	r1, r3
 800cd6c:	f00c fa94 	bl	8019298 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800cd70:	69fa      	ldr	r2, [r7, #28]
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	4413      	add	r3, r2
 800cd76:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800cd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d1bb      	bne.n	800ccfc <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800cd84:	4b1b      	ldr	r3, [pc, #108]	; (800cdf4 <low_level_input+0x164>)
 800cd86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd88:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	613b      	str	r3, [r7, #16]
 800cd8e:	e00b      	b.n	800cda8 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800cd90:	6a3b      	ldr	r3, [r7, #32]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800cd98:	6a3b      	ldr	r3, [r7, #32]
 800cd9a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800cd9c:	6a3b      	ldr	r3, [r7, #32]
 800cd9e:	68db      	ldr	r3, [r3, #12]
 800cda0:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	3301      	adds	r3, #1
 800cda6:	613b      	str	r3, [r7, #16]
 800cda8:	4b12      	ldr	r3, [pc, #72]	; (800cdf4 <low_level_input+0x164>)
 800cdaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdac:	693a      	ldr	r2, [r7, #16]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d3ee      	bcc.n	800cd90 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800cdb2:	4b10      	ldr	r3, [pc, #64]	; (800cdf4 <low_level_input+0x164>)
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800cdb8:	4b0e      	ldr	r3, [pc, #56]	; (800cdf4 <low_level_input+0x164>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdc0:	3314      	adds	r3, #20
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d00d      	beq.n	800cde8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800cdcc:	4b09      	ldr	r3, [pc, #36]	; (800cdf4 <low_level_input+0x164>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdd4:	3314      	adds	r3, #20
 800cdd6:	2280      	movs	r2, #128	; 0x80
 800cdd8:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800cdda:	4b06      	ldr	r3, [pc, #24]	; (800cdf4 <low_level_input+0x164>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cde2:	3308      	adds	r3, #8
 800cde4:	2200      	movs	r2, #0
 800cde6:	601a      	str	r2, [r3, #0]
  }
  return p;
 800cde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3730      	adds	r7, #48	; 0x30
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}
 800cdf2:	bf00      	nop
 800cdf4:	20001f84 	.word	0x20001f84

0800cdf8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b084      	sub	sp, #16
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f7ff ff45 	bl	800cc90 <low_level_input>
 800ce06:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d010      	beq.n	800ce30 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	691b      	ldr	r3, [r3, #16]
 800ce12:	6879      	ldr	r1, [r7, #4]
 800ce14:	68f8      	ldr	r0, [r7, #12]
 800ce16:	4798      	blx	r3
 800ce18:	4603      	mov	r3, r0
 800ce1a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800ce1c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d006      	beq.n	800ce32 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800ce24:	68f8      	ldr	r0, [r7, #12]
 800ce26:	f001 fb7f 	bl	800e528 <pbuf_free>
    p = NULL;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	60fb      	str	r3, [r7, #12]
 800ce2e:	e000      	b.n	800ce32 <ethernetif_input+0x3a>
  if (p == NULL) return;
 800ce30:	bf00      	nop
  }
}
 800ce32:	3710      	adds	r7, #16
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d106      	bne.n	800ce54 <ethernetif_init+0x1c>
 800ce46:	4b0e      	ldr	r3, [pc, #56]	; (800ce80 <ethernetif_init+0x48>)
 800ce48:	f44f 7202 	mov.w	r2, #520	; 0x208
 800ce4c:	490d      	ldr	r1, [pc, #52]	; (800ce84 <ethernetif_init+0x4c>)
 800ce4e:	480e      	ldr	r0, [pc, #56]	; (800ce88 <ethernetif_init+0x50>)
 800ce50:	f00c fafc 	bl	801944c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2273      	movs	r2, #115	; 0x73
 800ce58:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2274      	movs	r2, #116	; 0x74
 800ce60:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	4a09      	ldr	r2, [pc, #36]	; (800ce8c <ethernetif_init+0x54>)
 800ce68:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	4a08      	ldr	r2, [pc, #32]	; (800ce90 <ethernetif_init+0x58>)
 800ce6e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f7ff fdc1 	bl	800c9f8 <low_level_init>

  return ERR_OK;
 800ce76:	2300      	movs	r3, #0
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3708      	adds	r7, #8
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}
 800ce80:	0801af24 	.word	0x0801af24
 800ce84:	0801af40 	.word	0x0801af40
 800ce88:	0801af50 	.word	0x0801af50
 800ce8c:	08017101 	.word	0x08017101
 800ce90:	0800cb55 	.word	0x0800cb55

0800ce94 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ce98:	f7fb faa0 	bl	80083dc <HAL_GetTick>
 800ce9c:	4603      	mov	r3, r0
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	bd80      	pop	{r7, pc}
	...

0800cea4 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800ceac:	2300      	movs	r3, #0
 800ceae:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ceba:	089b      	lsrs	r3, r3, #2
 800cebc:	f003 0301 	and.w	r3, r3, #1
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d05d      	beq.n	800cf82 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800cec6:	4b34      	ldr	r3, [pc, #208]	; (800cf98 <ethernetif_update_config+0xf4>)
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d03f      	beq.n	800cf4e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800cece:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ced2:	2100      	movs	r1, #0
 800ced4:	4830      	ldr	r0, [pc, #192]	; (800cf98 <ethernetif_update_config+0xf4>)
 800ced6:	f7fc fb95 	bl	8009604 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800ceda:	f7fb fa7f 	bl	80083dc <HAL_GetTick>
 800cede:	4603      	mov	r3, r0
 800cee0:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800cee2:	f107 0308 	add.w	r3, r7, #8
 800cee6:	461a      	mov	r2, r3
 800cee8:	2101      	movs	r1, #1
 800ceea:	482b      	ldr	r0, [pc, #172]	; (800cf98 <ethernetif_update_config+0xf4>)
 800ceec:	f7fc fb22 	bl	8009534 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800cef0:	f7fb fa74 	bl	80083dc <HAL_GetTick>
 800cef4:	4602      	mov	r2, r0
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	1ad3      	subs	r3, r2, r3
 800cefa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cefe:	d828      	bhi.n	800cf52 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	f003 0320 	and.w	r3, r3, #32
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d0eb      	beq.n	800cee2 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800cf0a:	f107 0308 	add.w	r3, r7, #8
 800cf0e:	461a      	mov	r2, r3
 800cf10:	2110      	movs	r1, #16
 800cf12:	4821      	ldr	r0, [pc, #132]	; (800cf98 <ethernetif_update_config+0xf4>)
 800cf14:	f7fc fb0e 	bl	8009534 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800cf18:	68bb      	ldr	r3, [r7, #8]
 800cf1a:	f003 0304 	and.w	r3, r3, #4
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d004      	beq.n	800cf2c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800cf22:	4b1d      	ldr	r3, [pc, #116]	; (800cf98 <ethernetif_update_config+0xf4>)
 800cf24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cf28:	60da      	str	r2, [r3, #12]
 800cf2a:	e002      	b.n	800cf32 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800cf2c:	4b1a      	ldr	r3, [pc, #104]	; (800cf98 <ethernetif_update_config+0xf4>)
 800cf2e:	2200      	movs	r2, #0
 800cf30:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	f003 0302 	and.w	r3, r3, #2
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d003      	beq.n	800cf44 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800cf3c:	4b16      	ldr	r3, [pc, #88]	; (800cf98 <ethernetif_update_config+0xf4>)
 800cf3e:	2200      	movs	r2, #0
 800cf40:	609a      	str	r2, [r3, #8]
 800cf42:	e016      	b.n	800cf72 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800cf44:	4b14      	ldr	r3, [pc, #80]	; (800cf98 <ethernetif_update_config+0xf4>)
 800cf46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800cf4a:	609a      	str	r2, [r3, #8]
 800cf4c:	e011      	b.n	800cf72 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800cf4e:	bf00      	nop
 800cf50:	e000      	b.n	800cf54 <ethernetif_update_config+0xb0>
          goto error;
 800cf52:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800cf54:	4b10      	ldr	r3, [pc, #64]	; (800cf98 <ethernetif_update_config+0xf4>)
 800cf56:	68db      	ldr	r3, [r3, #12]
 800cf58:	08db      	lsrs	r3, r3, #3
 800cf5a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800cf5c:	4b0e      	ldr	r3, [pc, #56]	; (800cf98 <ethernetif_update_config+0xf4>)
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	085b      	lsrs	r3, r3, #1
 800cf62:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800cf64:	4313      	orrs	r3, r2
 800cf66:	b29b      	uxth	r3, r3
 800cf68:	461a      	mov	r2, r3
 800cf6a:	2100      	movs	r1, #0
 800cf6c:	480a      	ldr	r0, [pc, #40]	; (800cf98 <ethernetif_update_config+0xf4>)
 800cf6e:	f7fc fb49 	bl	8009604 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800cf72:	2100      	movs	r1, #0
 800cf74:	4808      	ldr	r0, [pc, #32]	; (800cf98 <ethernetif_update_config+0xf4>)
 800cf76:	f7fc fc09 	bl	800978c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800cf7a:	4807      	ldr	r0, [pc, #28]	; (800cf98 <ethernetif_update_config+0xf4>)
 800cf7c:	f7fc fba8 	bl	80096d0 <HAL_ETH_Start>
 800cf80:	e002      	b.n	800cf88 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800cf82:	4805      	ldr	r0, [pc, #20]	; (800cf98 <ethernetif_update_config+0xf4>)
 800cf84:	f7fc fbd3 	bl	800972e <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 f807 	bl	800cf9c <ethernetif_notify_conn_changed>
}
 800cf8e:	bf00      	nop
 800cf90:	3710      	adds	r7, #16
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop
 800cf98:	20001f84 	.word	0x20001f84

0800cf9c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b083      	sub	sp, #12
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800cfa4:	bf00      	nop
 800cfa6:	370c      	adds	r7, #12
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr

0800cfb0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	b083      	sub	sp, #12
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800cfba:	88fb      	ldrh	r3, [r7, #6]
 800cfbc:	021b      	lsls	r3, r3, #8
 800cfbe:	b21a      	sxth	r2, r3
 800cfc0:	88fb      	ldrh	r3, [r7, #6]
 800cfc2:	0a1b      	lsrs	r3, r3, #8
 800cfc4:	b29b      	uxth	r3, r3
 800cfc6:	b21b      	sxth	r3, r3
 800cfc8:	4313      	orrs	r3, r2
 800cfca:	b21b      	sxth	r3, r3
 800cfcc:	b29b      	uxth	r3, r3
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	370c      	adds	r7, #12
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd8:	4770      	bx	lr

0800cfda <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800cfda:	b480      	push	{r7}
 800cfdc:	b083      	sub	sp, #12
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	061a      	lsls	r2, r3, #24
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	021b      	lsls	r3, r3, #8
 800cfea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cfee:	431a      	orrs	r2, r3
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	0a1b      	lsrs	r3, r3, #8
 800cff4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cff8:	431a      	orrs	r2, r3
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	0e1b      	lsrs	r3, r3, #24
 800cffe:	4313      	orrs	r3, r2
}
 800d000:	4618      	mov	r0, r3
 800d002:	370c      	adds	r7, #12
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr

0800d00c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d012:	2300      	movs	r3, #0
 800d014:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800d016:	f000 f8d5 	bl	800d1c4 <mem_init>
  memp_init();
 800d01a:	f000 fbdb 	bl	800d7d4 <memp_init>
  pbuf_init();
  netif_init();
 800d01e:	f000 fc93 	bl	800d948 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d022:	f007 f853 	bl	80140cc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d026:	f001 fdaf 	bl	800eb88 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d02a:	f006 ffc5 	bl	8013fb8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d02e:	bf00      	nop
 800d030:	3708      	adds	r7, #8
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
	...

0800d038 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d038:	b480      	push	{r7}
 800d03a:	b083      	sub	sp, #12
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	4603      	mov	r3, r0
 800d040:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d042:	4b05      	ldr	r3, [pc, #20]	; (800d058 <ptr_to_mem+0x20>)
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	88fb      	ldrh	r3, [r7, #6]
 800d048:	4413      	add	r3, r2
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	370c      	adds	r7, #12
 800d04e:	46bd      	mov	sp, r7
 800d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d054:	4770      	bx	lr
 800d056:	bf00      	nop
 800d058:	200004fc 	.word	0x200004fc

0800d05c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b083      	sub	sp, #12
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d064:	4b05      	ldr	r3, [pc, #20]	; (800d07c <mem_to_ptr+0x20>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	1ad3      	subs	r3, r2, r3
 800d06c:	b29b      	uxth	r3, r3
}
 800d06e:	4618      	mov	r0, r3
 800d070:	370c      	adds	r7, #12
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr
 800d07a:	bf00      	nop
 800d07c:	200004fc 	.word	0x200004fc

0800d080 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d080:	b590      	push	{r4, r7, lr}
 800d082:	b085      	sub	sp, #20
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d088:	4b45      	ldr	r3, [pc, #276]	; (800d1a0 <plug_holes+0x120>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	687a      	ldr	r2, [r7, #4]
 800d08e:	429a      	cmp	r2, r3
 800d090:	d206      	bcs.n	800d0a0 <plug_holes+0x20>
 800d092:	4b44      	ldr	r3, [pc, #272]	; (800d1a4 <plug_holes+0x124>)
 800d094:	f240 12df 	movw	r2, #479	; 0x1df
 800d098:	4943      	ldr	r1, [pc, #268]	; (800d1a8 <plug_holes+0x128>)
 800d09a:	4844      	ldr	r0, [pc, #272]	; (800d1ac <plug_holes+0x12c>)
 800d09c:	f00c f9d6 	bl	801944c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d0a0:	4b43      	ldr	r3, [pc, #268]	; (800d1b0 <plug_holes+0x130>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	687a      	ldr	r2, [r7, #4]
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d306      	bcc.n	800d0b8 <plug_holes+0x38>
 800d0aa:	4b3e      	ldr	r3, [pc, #248]	; (800d1a4 <plug_holes+0x124>)
 800d0ac:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d0b0:	4940      	ldr	r1, [pc, #256]	; (800d1b4 <plug_holes+0x134>)
 800d0b2:	483e      	ldr	r0, [pc, #248]	; (800d1ac <plug_holes+0x12c>)
 800d0b4:	f00c f9ca 	bl	801944c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	791b      	ldrb	r3, [r3, #4]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d006      	beq.n	800d0ce <plug_holes+0x4e>
 800d0c0:	4b38      	ldr	r3, [pc, #224]	; (800d1a4 <plug_holes+0x124>)
 800d0c2:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d0c6:	493c      	ldr	r1, [pc, #240]	; (800d1b8 <plug_holes+0x138>)
 800d0c8:	4838      	ldr	r0, [pc, #224]	; (800d1ac <plug_holes+0x12c>)
 800d0ca:	f00c f9bf 	bl	801944c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	881b      	ldrh	r3, [r3, #0]
 800d0d2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d0d6:	d906      	bls.n	800d0e6 <plug_holes+0x66>
 800d0d8:	4b32      	ldr	r3, [pc, #200]	; (800d1a4 <plug_holes+0x124>)
 800d0da:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d0de:	4937      	ldr	r1, [pc, #220]	; (800d1bc <plug_holes+0x13c>)
 800d0e0:	4832      	ldr	r0, [pc, #200]	; (800d1ac <plug_holes+0x12c>)
 800d0e2:	f00c f9b3 	bl	801944c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	881b      	ldrh	r3, [r3, #0]
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7ff ffa4 	bl	800d038 <ptr_to_mem>
 800d0f0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d0f2:	687a      	ldr	r2, [r7, #4]
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d024      	beq.n	800d144 <plug_holes+0xc4>
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	791b      	ldrb	r3, [r3, #4]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d120      	bne.n	800d144 <plug_holes+0xc4>
 800d102:	4b2b      	ldr	r3, [pc, #172]	; (800d1b0 <plug_holes+0x130>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	68fa      	ldr	r2, [r7, #12]
 800d108:	429a      	cmp	r2, r3
 800d10a:	d01b      	beq.n	800d144 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d10c:	4b2c      	ldr	r3, [pc, #176]	; (800d1c0 <plug_holes+0x140>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	68fa      	ldr	r2, [r7, #12]
 800d112:	429a      	cmp	r2, r3
 800d114:	d102      	bne.n	800d11c <plug_holes+0x9c>
      lfree = mem;
 800d116:	4a2a      	ldr	r2, [pc, #168]	; (800d1c0 <plug_holes+0x140>)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	881a      	ldrh	r2, [r3, #0]
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	881b      	ldrh	r3, [r3, #0]
 800d128:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d12c:	d00a      	beq.n	800d144 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	881b      	ldrh	r3, [r3, #0]
 800d132:	4618      	mov	r0, r3
 800d134:	f7ff ff80 	bl	800d038 <ptr_to_mem>
 800d138:	4604      	mov	r4, r0
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f7ff ff8e 	bl	800d05c <mem_to_ptr>
 800d140:	4603      	mov	r3, r0
 800d142:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	885b      	ldrh	r3, [r3, #2]
 800d148:	4618      	mov	r0, r3
 800d14a:	f7ff ff75 	bl	800d038 <ptr_to_mem>
 800d14e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d150:	68ba      	ldr	r2, [r7, #8]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	429a      	cmp	r2, r3
 800d156:	d01f      	beq.n	800d198 <plug_holes+0x118>
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	791b      	ldrb	r3, [r3, #4]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d11b      	bne.n	800d198 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d160:	4b17      	ldr	r3, [pc, #92]	; (800d1c0 <plug_holes+0x140>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	687a      	ldr	r2, [r7, #4]
 800d166:	429a      	cmp	r2, r3
 800d168:	d102      	bne.n	800d170 <plug_holes+0xf0>
      lfree = pmem;
 800d16a:	4a15      	ldr	r2, [pc, #84]	; (800d1c0 <plug_holes+0x140>)
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	881a      	ldrh	r2, [r3, #0]
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	881b      	ldrh	r3, [r3, #0]
 800d17c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d180:	d00a      	beq.n	800d198 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	881b      	ldrh	r3, [r3, #0]
 800d186:	4618      	mov	r0, r3
 800d188:	f7ff ff56 	bl	800d038 <ptr_to_mem>
 800d18c:	4604      	mov	r4, r0
 800d18e:	68b8      	ldr	r0, [r7, #8]
 800d190:	f7ff ff64 	bl	800d05c <mem_to_ptr>
 800d194:	4603      	mov	r3, r0
 800d196:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d198:	bf00      	nop
 800d19a:	3714      	adds	r7, #20
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd90      	pop	{r4, r7, pc}
 800d1a0:	200004fc 	.word	0x200004fc
 800d1a4:	0801af78 	.word	0x0801af78
 800d1a8:	0801afa8 	.word	0x0801afa8
 800d1ac:	0801afc0 	.word	0x0801afc0
 800d1b0:	20000500 	.word	0x20000500
 800d1b4:	0801afe8 	.word	0x0801afe8
 800d1b8:	0801b004 	.word	0x0801b004
 800d1bc:	0801b020 	.word	0x0801b020
 800d1c0:	20000504 	.word	0x20000504

0800d1c4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d1ca:	4b18      	ldr	r3, [pc, #96]	; (800d22c <mem_init+0x68>)
 800d1cc:	3303      	adds	r3, #3
 800d1ce:	f023 0303 	bic.w	r3, r3, #3
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	4b16      	ldr	r3, [pc, #88]	; (800d230 <mem_init+0x6c>)
 800d1d6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d1d8:	4b15      	ldr	r3, [pc, #84]	; (800d230 <mem_init+0x6c>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d1e4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d1f2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800d1f6:	f7ff ff1f 	bl	800d038 <ptr_to_mem>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	4a0d      	ldr	r2, [pc, #52]	; (800d234 <mem_init+0x70>)
 800d1fe:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d200:	4b0c      	ldr	r3, [pc, #48]	; (800d234 <mem_init+0x70>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	2201      	movs	r2, #1
 800d206:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d208:	4b0a      	ldr	r3, [pc, #40]	; (800d234 <mem_init+0x70>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d210:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d212:	4b08      	ldr	r3, [pc, #32]	; (800d234 <mem_init+0x70>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d21a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d21c:	4b04      	ldr	r3, [pc, #16]	; (800d230 <mem_init+0x6c>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	4a05      	ldr	r2, [pc, #20]	; (800d238 <mem_init+0x74>)
 800d222:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800d224:	bf00      	nop
 800d226:	3708      	adds	r7, #8
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}
 800d22c:	200037b4 	.word	0x200037b4
 800d230:	200004fc 	.word	0x200004fc
 800d234:	20000500 	.word	0x20000500
 800d238:	20000504 	.word	0x20000504

0800d23c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b086      	sub	sp, #24
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f7ff ff09 	bl	800d05c <mem_to_ptr>
 800d24a:	4603      	mov	r3, r0
 800d24c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	881b      	ldrh	r3, [r3, #0]
 800d252:	4618      	mov	r0, r3
 800d254:	f7ff fef0 	bl	800d038 <ptr_to_mem>
 800d258:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	885b      	ldrh	r3, [r3, #2]
 800d25e:	4618      	mov	r0, r3
 800d260:	f7ff feea 	bl	800d038 <ptr_to_mem>
 800d264:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	881b      	ldrh	r3, [r3, #0]
 800d26a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d26e:	d818      	bhi.n	800d2a2 <mem_link_valid+0x66>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	885b      	ldrh	r3, [r3, #2]
 800d274:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d278:	d813      	bhi.n	800d2a2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d27e:	8afa      	ldrh	r2, [r7, #22]
 800d280:	429a      	cmp	r2, r3
 800d282:	d004      	beq.n	800d28e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	881b      	ldrh	r3, [r3, #0]
 800d288:	8afa      	ldrh	r2, [r7, #22]
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d109      	bne.n	800d2a2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d28e:	4b08      	ldr	r3, [pc, #32]	; (800d2b0 <mem_link_valid+0x74>)
 800d290:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d292:	693a      	ldr	r2, [r7, #16]
 800d294:	429a      	cmp	r2, r3
 800d296:	d006      	beq.n	800d2a6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	885b      	ldrh	r3, [r3, #2]
 800d29c:	8afa      	ldrh	r2, [r7, #22]
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d001      	beq.n	800d2a6 <mem_link_valid+0x6a>
    return 0;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	e000      	b.n	800d2a8 <mem_link_valid+0x6c>
  }
  return 1;
 800d2a6:	2301      	movs	r3, #1
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3718      	adds	r7, #24
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	20000500 	.word	0x20000500

0800d2b4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b084      	sub	sp, #16
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d04c      	beq.n	800d35c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f003 0303 	and.w	r3, r3, #3
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d007      	beq.n	800d2dc <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d2cc:	4b25      	ldr	r3, [pc, #148]	; (800d364 <mem_free+0xb0>)
 800d2ce:	f240 2273 	movw	r2, #627	; 0x273
 800d2d2:	4925      	ldr	r1, [pc, #148]	; (800d368 <mem_free+0xb4>)
 800d2d4:	4825      	ldr	r0, [pc, #148]	; (800d36c <mem_free+0xb8>)
 800d2d6:	f00c f8b9 	bl	801944c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d2da:	e040      	b.n	800d35e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	3b08      	subs	r3, #8
 800d2e0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d2e2:	4b23      	ldr	r3, [pc, #140]	; (800d370 <mem_free+0xbc>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	68fa      	ldr	r2, [r7, #12]
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d306      	bcc.n	800d2fa <mem_free+0x46>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f103 020c 	add.w	r2, r3, #12
 800d2f2:	4b20      	ldr	r3, [pc, #128]	; (800d374 <mem_free+0xc0>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d907      	bls.n	800d30a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d2fa:	4b1a      	ldr	r3, [pc, #104]	; (800d364 <mem_free+0xb0>)
 800d2fc:	f240 227f 	movw	r2, #639	; 0x27f
 800d300:	491d      	ldr	r1, [pc, #116]	; (800d378 <mem_free+0xc4>)
 800d302:	481a      	ldr	r0, [pc, #104]	; (800d36c <mem_free+0xb8>)
 800d304:	f00c f8a2 	bl	801944c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d308:	e029      	b.n	800d35e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	791b      	ldrb	r3, [r3, #4]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d107      	bne.n	800d322 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d312:	4b14      	ldr	r3, [pc, #80]	; (800d364 <mem_free+0xb0>)
 800d314:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d318:	4918      	ldr	r1, [pc, #96]	; (800d37c <mem_free+0xc8>)
 800d31a:	4814      	ldr	r0, [pc, #80]	; (800d36c <mem_free+0xb8>)
 800d31c:	f00c f896 	bl	801944c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d320:	e01d      	b.n	800d35e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800d322:	68f8      	ldr	r0, [r7, #12]
 800d324:	f7ff ff8a 	bl	800d23c <mem_link_valid>
 800d328:	4603      	mov	r3, r0
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d107      	bne.n	800d33e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d32e:	4b0d      	ldr	r3, [pc, #52]	; (800d364 <mem_free+0xb0>)
 800d330:	f240 2295 	movw	r2, #661	; 0x295
 800d334:	4912      	ldr	r1, [pc, #72]	; (800d380 <mem_free+0xcc>)
 800d336:	480d      	ldr	r0, [pc, #52]	; (800d36c <mem_free+0xb8>)
 800d338:	f00c f888 	bl	801944c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d33c:	e00f      	b.n	800d35e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	2200      	movs	r2, #0
 800d342:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d344:	4b0f      	ldr	r3, [pc, #60]	; (800d384 <mem_free+0xd0>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	68fa      	ldr	r2, [r7, #12]
 800d34a:	429a      	cmp	r2, r3
 800d34c:	d202      	bcs.n	800d354 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d34e:	4a0d      	ldr	r2, [pc, #52]	; (800d384 <mem_free+0xd0>)
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d354:	68f8      	ldr	r0, [r7, #12]
 800d356:	f7ff fe93 	bl	800d080 <plug_holes>
 800d35a:	e000      	b.n	800d35e <mem_free+0xaa>
    return;
 800d35c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800d35e:	3710      	adds	r7, #16
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}
 800d364:	0801af78 	.word	0x0801af78
 800d368:	0801b04c 	.word	0x0801b04c
 800d36c:	0801afc0 	.word	0x0801afc0
 800d370:	200004fc 	.word	0x200004fc
 800d374:	20000500 	.word	0x20000500
 800d378:	0801b070 	.word	0x0801b070
 800d37c:	0801b08c 	.word	0x0801b08c
 800d380:	0801b0b4 	.word	0x0801b0b4
 800d384:	20000504 	.word	0x20000504

0800d388 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b088      	sub	sp, #32
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
 800d390:	460b      	mov	r3, r1
 800d392:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d394:	887b      	ldrh	r3, [r7, #2]
 800d396:	3303      	adds	r3, #3
 800d398:	b29b      	uxth	r3, r3
 800d39a:	f023 0303 	bic.w	r3, r3, #3
 800d39e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d3a0:	8bfb      	ldrh	r3, [r7, #30]
 800d3a2:	2b0b      	cmp	r3, #11
 800d3a4:	d801      	bhi.n	800d3aa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d3a6:	230c      	movs	r3, #12
 800d3a8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d3aa:	8bfb      	ldrh	r3, [r7, #30]
 800d3ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d3b0:	d803      	bhi.n	800d3ba <mem_trim+0x32>
 800d3b2:	8bfa      	ldrh	r2, [r7, #30]
 800d3b4:	887b      	ldrh	r3, [r7, #2]
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d201      	bcs.n	800d3be <mem_trim+0x36>
    return NULL;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	e0cc      	b.n	800d558 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d3be:	4b68      	ldr	r3, [pc, #416]	; (800d560 <mem_trim+0x1d8>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d304      	bcc.n	800d3d2 <mem_trim+0x4a>
 800d3c8:	4b66      	ldr	r3, [pc, #408]	; (800d564 <mem_trim+0x1dc>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	687a      	ldr	r2, [r7, #4]
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d306      	bcc.n	800d3e0 <mem_trim+0x58>
 800d3d2:	4b65      	ldr	r3, [pc, #404]	; (800d568 <mem_trim+0x1e0>)
 800d3d4:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d3d8:	4964      	ldr	r1, [pc, #400]	; (800d56c <mem_trim+0x1e4>)
 800d3da:	4865      	ldr	r0, [pc, #404]	; (800d570 <mem_trim+0x1e8>)
 800d3dc:	f00c f836 	bl	801944c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d3e0:	4b5f      	ldr	r3, [pc, #380]	; (800d560 <mem_trim+0x1d8>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	687a      	ldr	r2, [r7, #4]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d304      	bcc.n	800d3f4 <mem_trim+0x6c>
 800d3ea:	4b5e      	ldr	r3, [pc, #376]	; (800d564 <mem_trim+0x1dc>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	687a      	ldr	r2, [r7, #4]
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	d301      	bcc.n	800d3f8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	e0af      	b.n	800d558 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	3b08      	subs	r3, #8
 800d3fc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d3fe:	69b8      	ldr	r0, [r7, #24]
 800d400:	f7ff fe2c 	bl	800d05c <mem_to_ptr>
 800d404:	4603      	mov	r3, r0
 800d406:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d408:	69bb      	ldr	r3, [r7, #24]
 800d40a:	881a      	ldrh	r2, [r3, #0]
 800d40c:	8afb      	ldrh	r3, [r7, #22]
 800d40e:	1ad3      	subs	r3, r2, r3
 800d410:	b29b      	uxth	r3, r3
 800d412:	3b08      	subs	r3, #8
 800d414:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d416:	8bfa      	ldrh	r2, [r7, #30]
 800d418:	8abb      	ldrh	r3, [r7, #20]
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d906      	bls.n	800d42c <mem_trim+0xa4>
 800d41e:	4b52      	ldr	r3, [pc, #328]	; (800d568 <mem_trim+0x1e0>)
 800d420:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d424:	4953      	ldr	r1, [pc, #332]	; (800d574 <mem_trim+0x1ec>)
 800d426:	4852      	ldr	r0, [pc, #328]	; (800d570 <mem_trim+0x1e8>)
 800d428:	f00c f810 	bl	801944c <iprintf>
  if (newsize > size) {
 800d42c:	8bfa      	ldrh	r2, [r7, #30]
 800d42e:	8abb      	ldrh	r3, [r7, #20]
 800d430:	429a      	cmp	r2, r3
 800d432:	d901      	bls.n	800d438 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800d434:	2300      	movs	r3, #0
 800d436:	e08f      	b.n	800d558 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800d438:	8bfa      	ldrh	r2, [r7, #30]
 800d43a:	8abb      	ldrh	r3, [r7, #20]
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d101      	bne.n	800d444 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	e089      	b.n	800d558 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800d444:	69bb      	ldr	r3, [r7, #24]
 800d446:	881b      	ldrh	r3, [r3, #0]
 800d448:	4618      	mov	r0, r3
 800d44a:	f7ff fdf5 	bl	800d038 <ptr_to_mem>
 800d44e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	791b      	ldrb	r3, [r3, #4]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d13f      	bne.n	800d4d8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d458:	69bb      	ldr	r3, [r7, #24]
 800d45a:	881b      	ldrh	r3, [r3, #0]
 800d45c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d460:	d106      	bne.n	800d470 <mem_trim+0xe8>
 800d462:	4b41      	ldr	r3, [pc, #260]	; (800d568 <mem_trim+0x1e0>)
 800d464:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d468:	4943      	ldr	r1, [pc, #268]	; (800d578 <mem_trim+0x1f0>)
 800d46a:	4841      	ldr	r0, [pc, #260]	; (800d570 <mem_trim+0x1e8>)
 800d46c:	f00b ffee 	bl	801944c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	881b      	ldrh	r3, [r3, #0]
 800d474:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d476:	8afa      	ldrh	r2, [r7, #22]
 800d478:	8bfb      	ldrh	r3, [r7, #30]
 800d47a:	4413      	add	r3, r2
 800d47c:	b29b      	uxth	r3, r3
 800d47e:	3308      	adds	r3, #8
 800d480:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d482:	4b3e      	ldr	r3, [pc, #248]	; (800d57c <mem_trim+0x1f4>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	693a      	ldr	r2, [r7, #16]
 800d488:	429a      	cmp	r2, r3
 800d48a:	d106      	bne.n	800d49a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800d48c:	89fb      	ldrh	r3, [r7, #14]
 800d48e:	4618      	mov	r0, r3
 800d490:	f7ff fdd2 	bl	800d038 <ptr_to_mem>
 800d494:	4603      	mov	r3, r0
 800d496:	4a39      	ldr	r2, [pc, #228]	; (800d57c <mem_trim+0x1f4>)
 800d498:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d49a:	89fb      	ldrh	r3, [r7, #14]
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7ff fdcb 	bl	800d038 <ptr_to_mem>
 800d4a2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	89ba      	ldrh	r2, [r7, #12]
 800d4ae:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	8afa      	ldrh	r2, [r7, #22]
 800d4b4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d4b6:	69bb      	ldr	r3, [r7, #24]
 800d4b8:	89fa      	ldrh	r2, [r7, #14]
 800d4ba:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	881b      	ldrh	r3, [r3, #0]
 800d4c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d4c4:	d047      	beq.n	800d556 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	881b      	ldrh	r3, [r3, #0]
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7ff fdb4 	bl	800d038 <ptr_to_mem>
 800d4d0:	4602      	mov	r2, r0
 800d4d2:	89fb      	ldrh	r3, [r7, #14]
 800d4d4:	8053      	strh	r3, [r2, #2]
 800d4d6:	e03e      	b.n	800d556 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d4d8:	8bfb      	ldrh	r3, [r7, #30]
 800d4da:	f103 0214 	add.w	r2, r3, #20
 800d4de:	8abb      	ldrh	r3, [r7, #20]
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d838      	bhi.n	800d556 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d4e4:	8afa      	ldrh	r2, [r7, #22]
 800d4e6:	8bfb      	ldrh	r3, [r7, #30]
 800d4e8:	4413      	add	r3, r2
 800d4ea:	b29b      	uxth	r3, r3
 800d4ec:	3308      	adds	r3, #8
 800d4ee:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d4f0:	69bb      	ldr	r3, [r7, #24]
 800d4f2:	881b      	ldrh	r3, [r3, #0]
 800d4f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d4f8:	d106      	bne.n	800d508 <mem_trim+0x180>
 800d4fa:	4b1b      	ldr	r3, [pc, #108]	; (800d568 <mem_trim+0x1e0>)
 800d4fc:	f240 3216 	movw	r2, #790	; 0x316
 800d500:	491d      	ldr	r1, [pc, #116]	; (800d578 <mem_trim+0x1f0>)
 800d502:	481b      	ldr	r0, [pc, #108]	; (800d570 <mem_trim+0x1e8>)
 800d504:	f00b ffa2 	bl	801944c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d508:	89fb      	ldrh	r3, [r7, #14]
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7ff fd94 	bl	800d038 <ptr_to_mem>
 800d510:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d512:	4b1a      	ldr	r3, [pc, #104]	; (800d57c <mem_trim+0x1f4>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	693a      	ldr	r2, [r7, #16]
 800d518:	429a      	cmp	r2, r3
 800d51a:	d202      	bcs.n	800d522 <mem_trim+0x19a>
      lfree = mem2;
 800d51c:	4a17      	ldr	r2, [pc, #92]	; (800d57c <mem_trim+0x1f4>)
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d522:	693b      	ldr	r3, [r7, #16]
 800d524:	2200      	movs	r2, #0
 800d526:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d528:	69bb      	ldr	r3, [r7, #24]
 800d52a:	881a      	ldrh	r2, [r3, #0]
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	8afa      	ldrh	r2, [r7, #22]
 800d534:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d536:	69bb      	ldr	r3, [r7, #24]
 800d538:	89fa      	ldrh	r2, [r7, #14]
 800d53a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	881b      	ldrh	r3, [r3, #0]
 800d540:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d544:	d007      	beq.n	800d556 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	881b      	ldrh	r3, [r3, #0]
 800d54a:	4618      	mov	r0, r3
 800d54c:	f7ff fd74 	bl	800d038 <ptr_to_mem>
 800d550:	4602      	mov	r2, r0
 800d552:	89fb      	ldrh	r3, [r7, #14]
 800d554:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800d556:	687b      	ldr	r3, [r7, #4]
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3720      	adds	r7, #32
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	200004fc 	.word	0x200004fc
 800d564:	20000500 	.word	0x20000500
 800d568:	0801af78 	.word	0x0801af78
 800d56c:	0801b0e8 	.word	0x0801b0e8
 800d570:	0801afc0 	.word	0x0801afc0
 800d574:	0801b100 	.word	0x0801b100
 800d578:	0801b120 	.word	0x0801b120
 800d57c:	20000504 	.word	0x20000504

0800d580 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b088      	sub	sp, #32
 800d584:	af00      	add	r7, sp, #0
 800d586:	4603      	mov	r3, r0
 800d588:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d58a:	88fb      	ldrh	r3, [r7, #6]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d101      	bne.n	800d594 <mem_malloc+0x14>
    return NULL;
 800d590:	2300      	movs	r3, #0
 800d592:	e0d9      	b.n	800d748 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d594:	88fb      	ldrh	r3, [r7, #6]
 800d596:	3303      	adds	r3, #3
 800d598:	b29b      	uxth	r3, r3
 800d59a:	f023 0303 	bic.w	r3, r3, #3
 800d59e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d5a0:	8bbb      	ldrh	r3, [r7, #28]
 800d5a2:	2b0b      	cmp	r3, #11
 800d5a4:	d801      	bhi.n	800d5aa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d5a6:	230c      	movs	r3, #12
 800d5a8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d5aa:	8bbb      	ldrh	r3, [r7, #28]
 800d5ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d5b0:	d803      	bhi.n	800d5ba <mem_malloc+0x3a>
 800d5b2:	8bba      	ldrh	r2, [r7, #28]
 800d5b4:	88fb      	ldrh	r3, [r7, #6]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d201      	bcs.n	800d5be <mem_malloc+0x3e>
    return NULL;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	e0c4      	b.n	800d748 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d5be:	4b64      	ldr	r3, [pc, #400]	; (800d750 <mem_malloc+0x1d0>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7ff fd4a 	bl	800d05c <mem_to_ptr>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	83fb      	strh	r3, [r7, #30]
 800d5cc:	e0b4      	b.n	800d738 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d5ce:	8bfb      	ldrh	r3, [r7, #30]
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7ff fd31 	bl	800d038 <ptr_to_mem>
 800d5d6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	791b      	ldrb	r3, [r3, #4]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	f040 80a4 	bne.w	800d72a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	881b      	ldrh	r3, [r3, #0]
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	8bfb      	ldrh	r3, [r7, #30]
 800d5ea:	1ad3      	subs	r3, r2, r3
 800d5ec:	f1a3 0208 	sub.w	r2, r3, #8
 800d5f0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	f0c0 8099 	bcc.w	800d72a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	881b      	ldrh	r3, [r3, #0]
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	8bfb      	ldrh	r3, [r7, #30]
 800d600:	1ad3      	subs	r3, r2, r3
 800d602:	f1a3 0208 	sub.w	r2, r3, #8
 800d606:	8bbb      	ldrh	r3, [r7, #28]
 800d608:	3314      	adds	r3, #20
 800d60a:	429a      	cmp	r2, r3
 800d60c:	d333      	bcc.n	800d676 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d60e:	8bfa      	ldrh	r2, [r7, #30]
 800d610:	8bbb      	ldrh	r3, [r7, #28]
 800d612:	4413      	add	r3, r2
 800d614:	b29b      	uxth	r3, r3
 800d616:	3308      	adds	r3, #8
 800d618:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d61a:	8a7b      	ldrh	r3, [r7, #18]
 800d61c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d620:	d106      	bne.n	800d630 <mem_malloc+0xb0>
 800d622:	4b4c      	ldr	r3, [pc, #304]	; (800d754 <mem_malloc+0x1d4>)
 800d624:	f240 3287 	movw	r2, #903	; 0x387
 800d628:	494b      	ldr	r1, [pc, #300]	; (800d758 <mem_malloc+0x1d8>)
 800d62a:	484c      	ldr	r0, [pc, #304]	; (800d75c <mem_malloc+0x1dc>)
 800d62c:	f00b ff0e 	bl	801944c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d630:	8a7b      	ldrh	r3, [r7, #18]
 800d632:	4618      	mov	r0, r3
 800d634:	f7ff fd00 	bl	800d038 <ptr_to_mem>
 800d638:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	2200      	movs	r2, #0
 800d63e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	881a      	ldrh	r2, [r3, #0]
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	8bfa      	ldrh	r2, [r7, #30]
 800d64c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	8a7a      	ldrh	r2, [r7, #18]
 800d652:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	2201      	movs	r2, #1
 800d658:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	881b      	ldrh	r3, [r3, #0]
 800d65e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d662:	d00b      	beq.n	800d67c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	881b      	ldrh	r3, [r3, #0]
 800d668:	4618      	mov	r0, r3
 800d66a:	f7ff fce5 	bl	800d038 <ptr_to_mem>
 800d66e:	4602      	mov	r2, r0
 800d670:	8a7b      	ldrh	r3, [r7, #18]
 800d672:	8053      	strh	r3, [r2, #2]
 800d674:	e002      	b.n	800d67c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	2201      	movs	r2, #1
 800d67a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d67c:	4b34      	ldr	r3, [pc, #208]	; (800d750 <mem_malloc+0x1d0>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	697a      	ldr	r2, [r7, #20]
 800d682:	429a      	cmp	r2, r3
 800d684:	d127      	bne.n	800d6d6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800d686:	4b32      	ldr	r3, [pc, #200]	; (800d750 <mem_malloc+0x1d0>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d68c:	e005      	b.n	800d69a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d68e:	69bb      	ldr	r3, [r7, #24]
 800d690:	881b      	ldrh	r3, [r3, #0]
 800d692:	4618      	mov	r0, r3
 800d694:	f7ff fcd0 	bl	800d038 <ptr_to_mem>
 800d698:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d69a:	69bb      	ldr	r3, [r7, #24]
 800d69c:	791b      	ldrb	r3, [r3, #4]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d004      	beq.n	800d6ac <mem_malloc+0x12c>
 800d6a2:	4b2f      	ldr	r3, [pc, #188]	; (800d760 <mem_malloc+0x1e0>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	69ba      	ldr	r2, [r7, #24]
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d1f0      	bne.n	800d68e <mem_malloc+0x10e>
          }
          lfree = cur;
 800d6ac:	4a28      	ldr	r2, [pc, #160]	; (800d750 <mem_malloc+0x1d0>)
 800d6ae:	69bb      	ldr	r3, [r7, #24]
 800d6b0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d6b2:	4b27      	ldr	r3, [pc, #156]	; (800d750 <mem_malloc+0x1d0>)
 800d6b4:	681a      	ldr	r2, [r3, #0]
 800d6b6:	4b2a      	ldr	r3, [pc, #168]	; (800d760 <mem_malloc+0x1e0>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d00b      	beq.n	800d6d6 <mem_malloc+0x156>
 800d6be:	4b24      	ldr	r3, [pc, #144]	; (800d750 <mem_malloc+0x1d0>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	791b      	ldrb	r3, [r3, #4]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d006      	beq.n	800d6d6 <mem_malloc+0x156>
 800d6c8:	4b22      	ldr	r3, [pc, #136]	; (800d754 <mem_malloc+0x1d4>)
 800d6ca:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d6ce:	4925      	ldr	r1, [pc, #148]	; (800d764 <mem_malloc+0x1e4>)
 800d6d0:	4822      	ldr	r0, [pc, #136]	; (800d75c <mem_malloc+0x1dc>)
 800d6d2:	f00b febb 	bl	801944c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d6d6:	8bba      	ldrh	r2, [r7, #28]
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	4413      	add	r3, r2
 800d6dc:	3308      	adds	r3, #8
 800d6de:	4a20      	ldr	r2, [pc, #128]	; (800d760 <mem_malloc+0x1e0>)
 800d6e0:	6812      	ldr	r2, [r2, #0]
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d906      	bls.n	800d6f4 <mem_malloc+0x174>
 800d6e6:	4b1b      	ldr	r3, [pc, #108]	; (800d754 <mem_malloc+0x1d4>)
 800d6e8:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d6ec:	491e      	ldr	r1, [pc, #120]	; (800d768 <mem_malloc+0x1e8>)
 800d6ee:	481b      	ldr	r0, [pc, #108]	; (800d75c <mem_malloc+0x1dc>)
 800d6f0:	f00b feac 	bl	801944c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	f003 0303 	and.w	r3, r3, #3
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d006      	beq.n	800d70c <mem_malloc+0x18c>
 800d6fe:	4b15      	ldr	r3, [pc, #84]	; (800d754 <mem_malloc+0x1d4>)
 800d700:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d704:	4919      	ldr	r1, [pc, #100]	; (800d76c <mem_malloc+0x1ec>)
 800d706:	4815      	ldr	r0, [pc, #84]	; (800d75c <mem_malloc+0x1dc>)
 800d708:	f00b fea0 	bl	801944c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	f003 0303 	and.w	r3, r3, #3
 800d712:	2b00      	cmp	r3, #0
 800d714:	d006      	beq.n	800d724 <mem_malloc+0x1a4>
 800d716:	4b0f      	ldr	r3, [pc, #60]	; (800d754 <mem_malloc+0x1d4>)
 800d718:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d71c:	4914      	ldr	r1, [pc, #80]	; (800d770 <mem_malloc+0x1f0>)
 800d71e:	480f      	ldr	r0, [pc, #60]	; (800d75c <mem_malloc+0x1dc>)
 800d720:	f00b fe94 	bl	801944c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	3308      	adds	r3, #8
 800d728:	e00e      	b.n	800d748 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800d72a:	8bfb      	ldrh	r3, [r7, #30]
 800d72c:	4618      	mov	r0, r3
 800d72e:	f7ff fc83 	bl	800d038 <ptr_to_mem>
 800d732:	4603      	mov	r3, r0
 800d734:	881b      	ldrh	r3, [r3, #0]
 800d736:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d738:	8bfa      	ldrh	r2, [r7, #30]
 800d73a:	8bbb      	ldrh	r3, [r7, #28]
 800d73c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800d740:	429a      	cmp	r2, r3
 800d742:	f4ff af44 	bcc.w	800d5ce <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d746:	2300      	movs	r3, #0
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3720      	adds	r7, #32
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}
 800d750:	20000504 	.word	0x20000504
 800d754:	0801af78 	.word	0x0801af78
 800d758:	0801b120 	.word	0x0801b120
 800d75c:	0801afc0 	.word	0x0801afc0
 800d760:	20000500 	.word	0x20000500
 800d764:	0801b134 	.word	0x0801b134
 800d768:	0801b150 	.word	0x0801b150
 800d76c:	0801b180 	.word	0x0801b180
 800d770:	0801b1b0 	.word	0x0801b1b0

0800d774 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d774:	b480      	push	{r7}
 800d776:	b085      	sub	sp, #20
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	689b      	ldr	r3, [r3, #8]
 800d780:	2200      	movs	r2, #0
 800d782:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	3303      	adds	r3, #3
 800d78a:	f023 0303 	bic.w	r3, r3, #3
 800d78e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d790:	2300      	movs	r3, #0
 800d792:	60fb      	str	r3, [r7, #12]
 800d794:	e011      	b.n	800d7ba <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	689b      	ldr	r3, [r3, #8]
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	689b      	ldr	r3, [r3, #8]
 800d7a4:	68ba      	ldr	r2, [r7, #8]
 800d7a6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	881b      	ldrh	r3, [r3, #0]
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	4413      	add	r3, r2
 800d7b2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	60fb      	str	r3, [r7, #12]
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	885b      	ldrh	r3, [r3, #2]
 800d7be:	461a      	mov	r2, r3
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	4293      	cmp	r3, r2
 800d7c4:	dbe7      	blt.n	800d796 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d7c6:	bf00      	nop
 800d7c8:	bf00      	nop
 800d7ca:	3714      	adds	r7, #20
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr

0800d7d4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b082      	sub	sp, #8
 800d7d8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d7da:	2300      	movs	r3, #0
 800d7dc:	80fb      	strh	r3, [r7, #6]
 800d7de:	e009      	b.n	800d7f4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d7e0:	88fb      	ldrh	r3, [r7, #6]
 800d7e2:	4a08      	ldr	r2, [pc, #32]	; (800d804 <memp_init+0x30>)
 800d7e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7ff ffc3 	bl	800d774 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d7ee:	88fb      	ldrh	r3, [r7, #6]
 800d7f0:	3301      	adds	r3, #1
 800d7f2:	80fb      	strh	r3, [r7, #6]
 800d7f4:	88fb      	ldrh	r3, [r7, #6]
 800d7f6:	2b08      	cmp	r3, #8
 800d7f8:	d9f2      	bls.n	800d7e0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d7fa:	bf00      	nop
 800d7fc:	bf00      	nop
 800d7fe:	3708      	adds	r7, #8
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}
 800d804:	0801e068 	.word	0x0801e068

0800d808 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b084      	sub	sp, #16
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	689b      	ldr	r3, [r3, #8]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d012      	beq.n	800d844 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	689b      	ldr	r3, [r3, #8]
 800d822:	68fa      	ldr	r2, [r7, #12]
 800d824:	6812      	ldr	r2, [r2, #0]
 800d826:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	f003 0303 	and.w	r3, r3, #3
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d006      	beq.n	800d840 <do_memp_malloc_pool+0x38>
 800d832:	4b07      	ldr	r3, [pc, #28]	; (800d850 <do_memp_malloc_pool+0x48>)
 800d834:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d838:	4906      	ldr	r1, [pc, #24]	; (800d854 <do_memp_malloc_pool+0x4c>)
 800d83a:	4807      	ldr	r0, [pc, #28]	; (800d858 <do_memp_malloc_pool+0x50>)
 800d83c:	f00b fe06 	bl	801944c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	e000      	b.n	800d846 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d844:	2300      	movs	r3, #0
}
 800d846:	4618      	mov	r0, r3
 800d848:	3710      	adds	r7, #16
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}
 800d84e:	bf00      	nop
 800d850:	0801b1d4 	.word	0x0801b1d4
 800d854:	0801b204 	.word	0x0801b204
 800d858:	0801b228 	.word	0x0801b228

0800d85c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b084      	sub	sp, #16
 800d860:	af00      	add	r7, sp, #0
 800d862:	4603      	mov	r3, r0
 800d864:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d866:	79fb      	ldrb	r3, [r7, #7]
 800d868:	2b08      	cmp	r3, #8
 800d86a:	d908      	bls.n	800d87e <memp_malloc+0x22>
 800d86c:	4b0a      	ldr	r3, [pc, #40]	; (800d898 <memp_malloc+0x3c>)
 800d86e:	f240 1257 	movw	r2, #343	; 0x157
 800d872:	490a      	ldr	r1, [pc, #40]	; (800d89c <memp_malloc+0x40>)
 800d874:	480a      	ldr	r0, [pc, #40]	; (800d8a0 <memp_malloc+0x44>)
 800d876:	f00b fde9 	bl	801944c <iprintf>
 800d87a:	2300      	movs	r3, #0
 800d87c:	e008      	b.n	800d890 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d87e:	79fb      	ldrb	r3, [r7, #7]
 800d880:	4a08      	ldr	r2, [pc, #32]	; (800d8a4 <memp_malloc+0x48>)
 800d882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d886:	4618      	mov	r0, r3
 800d888:	f7ff ffbe 	bl	800d808 <do_memp_malloc_pool>
 800d88c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d88e:	68fb      	ldr	r3, [r7, #12]
}
 800d890:	4618      	mov	r0, r3
 800d892:	3710      	adds	r7, #16
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	0801b1d4 	.word	0x0801b1d4
 800d89c:	0801b264 	.word	0x0801b264
 800d8a0:	0801b228 	.word	0x0801b228
 800d8a4:	0801e068 	.word	0x0801e068

0800d8a8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b084      	sub	sp, #16
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
 800d8b0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	f003 0303 	and.w	r3, r3, #3
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d006      	beq.n	800d8ca <do_memp_free_pool+0x22>
 800d8bc:	4b0a      	ldr	r3, [pc, #40]	; (800d8e8 <do_memp_free_pool+0x40>)
 800d8be:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d8c2:	490a      	ldr	r1, [pc, #40]	; (800d8ec <do_memp_free_pool+0x44>)
 800d8c4:	480a      	ldr	r0, [pc, #40]	; (800d8f0 <do_memp_free_pool+0x48>)
 800d8c6:	f00b fdc1 	bl	801944c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	689b      	ldr	r3, [r3, #8]
 800d8d2:	681a      	ldr	r2, [r3, #0]
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	689b      	ldr	r3, [r3, #8]
 800d8dc:	68fa      	ldr	r2, [r7, #12]
 800d8de:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800d8e0:	bf00      	nop
 800d8e2:	3710      	adds	r7, #16
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}
 800d8e8:	0801b1d4 	.word	0x0801b1d4
 800d8ec:	0801b284 	.word	0x0801b284
 800d8f0:	0801b228 	.word	0x0801b228

0800d8f4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b082      	sub	sp, #8
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	6039      	str	r1, [r7, #0]
 800d8fe:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d900:	79fb      	ldrb	r3, [r7, #7]
 800d902:	2b08      	cmp	r3, #8
 800d904:	d907      	bls.n	800d916 <memp_free+0x22>
 800d906:	4b0c      	ldr	r3, [pc, #48]	; (800d938 <memp_free+0x44>)
 800d908:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d90c:	490b      	ldr	r1, [pc, #44]	; (800d93c <memp_free+0x48>)
 800d90e:	480c      	ldr	r0, [pc, #48]	; (800d940 <memp_free+0x4c>)
 800d910:	f00b fd9c 	bl	801944c <iprintf>
 800d914:	e00c      	b.n	800d930 <memp_free+0x3c>

  if (mem == NULL) {
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d008      	beq.n	800d92e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d91c:	79fb      	ldrb	r3, [r7, #7]
 800d91e:	4a09      	ldr	r2, [pc, #36]	; (800d944 <memp_free+0x50>)
 800d920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d924:	6839      	ldr	r1, [r7, #0]
 800d926:	4618      	mov	r0, r3
 800d928:	f7ff ffbe 	bl	800d8a8 <do_memp_free_pool>
 800d92c:	e000      	b.n	800d930 <memp_free+0x3c>
    return;
 800d92e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d930:	3708      	adds	r7, #8
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	0801b1d4 	.word	0x0801b1d4
 800d93c:	0801b2a4 	.word	0x0801b2a4
 800d940:	0801b228 	.word	0x0801b228
 800d944:	0801e068 	.word	0x0801e068

0800d948 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d948:	b480      	push	{r7}
 800d94a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d94c:	bf00      	nop
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr
	...

0800d958 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b086      	sub	sp, #24
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	60f8      	str	r0, [r7, #12]
 800d960:	60b9      	str	r1, [r7, #8]
 800d962:	607a      	str	r2, [r7, #4]
 800d964:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d108      	bne.n	800d97e <netif_add+0x26>
 800d96c:	4b5b      	ldr	r3, [pc, #364]	; (800dadc <netif_add+0x184>)
 800d96e:	f240 1227 	movw	r2, #295	; 0x127
 800d972:	495b      	ldr	r1, [pc, #364]	; (800dae0 <netif_add+0x188>)
 800d974:	485b      	ldr	r0, [pc, #364]	; (800dae4 <netif_add+0x18c>)
 800d976:	f00b fd69 	bl	801944c <iprintf>
 800d97a:	2300      	movs	r3, #0
 800d97c:	e0a9      	b.n	800dad2 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d980:	2b00      	cmp	r3, #0
 800d982:	d108      	bne.n	800d996 <netif_add+0x3e>
 800d984:	4b55      	ldr	r3, [pc, #340]	; (800dadc <netif_add+0x184>)
 800d986:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d98a:	4957      	ldr	r1, [pc, #348]	; (800dae8 <netif_add+0x190>)
 800d98c:	4855      	ldr	r0, [pc, #340]	; (800dae4 <netif_add+0x18c>)
 800d98e:	f00b fd5d 	bl	801944c <iprintf>
 800d992:	2300      	movs	r3, #0
 800d994:	e09d      	b.n	800dad2 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d101      	bne.n	800d9a0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d99c:	4b53      	ldr	r3, [pc, #332]	; (800daec <netif_add+0x194>)
 800d99e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d101      	bne.n	800d9aa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d9a6:	4b51      	ldr	r3, [pc, #324]	; (800daec <netif_add+0x194>)
 800d9a8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d101      	bne.n	800d9b4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d9b0:	4b4e      	ldr	r3, [pc, #312]	; (800daec <netif_add+0x194>)
 800d9b2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	2200      	movs	r2, #0
 800d9be:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	4a49      	ldr	r2, [pc, #292]	; (800daf0 <netif_add+0x198>)
 800d9ca:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	3324      	adds	r3, #36	; 0x24
 800d9de:	2204      	movs	r2, #4
 800d9e0:	2100      	movs	r1, #0
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f00b fc80 	bl	80192e8 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	6a3a      	ldr	r2, [r7, #32]
 800d9f2:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d9f4:	4b3f      	ldr	r3, [pc, #252]	; (800daf4 <netif_add+0x19c>)
 800d9f6:	781a      	ldrb	r2, [r3, #0]
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da02:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	687a      	ldr	r2, [r7, #4]
 800da08:	68b9      	ldr	r1, [r7, #8]
 800da0a:	68f8      	ldr	r0, [r7, #12]
 800da0c:	f000 f914 	bl	800dc38 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800da10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da12:	68f8      	ldr	r0, [r7, #12]
 800da14:	4798      	blx	r3
 800da16:	4603      	mov	r3, r0
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d001      	beq.n	800da20 <netif_add+0xc8>
    return NULL;
 800da1c:	2300      	movs	r3, #0
 800da1e:	e058      	b.n	800dad2 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800da26:	2bff      	cmp	r3, #255	; 0xff
 800da28:	d103      	bne.n	800da32 <netif_add+0xda>
        netif->num = 0;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	2200      	movs	r2, #0
 800da2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800da32:	2300      	movs	r3, #0
 800da34:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800da36:	4b30      	ldr	r3, [pc, #192]	; (800daf8 <netif_add+0x1a0>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	617b      	str	r3, [r7, #20]
 800da3c:	e02b      	b.n	800da96 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800da3e:	697a      	ldr	r2, [r7, #20]
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	429a      	cmp	r2, r3
 800da44:	d106      	bne.n	800da54 <netif_add+0xfc>
 800da46:	4b25      	ldr	r3, [pc, #148]	; (800dadc <netif_add+0x184>)
 800da48:	f240 128b 	movw	r2, #395	; 0x18b
 800da4c:	492b      	ldr	r1, [pc, #172]	; (800dafc <netif_add+0x1a4>)
 800da4e:	4825      	ldr	r0, [pc, #148]	; (800dae4 <netif_add+0x18c>)
 800da50:	f00b fcfc 	bl	801944c <iprintf>
        num_netifs++;
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	3301      	adds	r3, #1
 800da58:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	2bff      	cmp	r3, #255	; 0xff
 800da5e:	dd06      	ble.n	800da6e <netif_add+0x116>
 800da60:	4b1e      	ldr	r3, [pc, #120]	; (800dadc <netif_add+0x184>)
 800da62:	f240 128d 	movw	r2, #397	; 0x18d
 800da66:	4926      	ldr	r1, [pc, #152]	; (800db00 <netif_add+0x1a8>)
 800da68:	481e      	ldr	r0, [pc, #120]	; (800dae4 <netif_add+0x18c>)
 800da6a:	f00b fcef 	bl	801944c <iprintf>
        if (netif2->num == netif->num) {
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d108      	bne.n	800da90 <netif_add+0x138>
          netif->num++;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800da84:	3301      	adds	r3, #1
 800da86:	b2da      	uxtb	r2, r3
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800da8e:	e005      	b.n	800da9c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	617b      	str	r3, [r7, #20]
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d1d0      	bne.n	800da3e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d1be      	bne.n	800da20 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800daa8:	2bfe      	cmp	r3, #254	; 0xfe
 800daaa:	d103      	bne.n	800dab4 <netif_add+0x15c>
    netif_num = 0;
 800daac:	4b11      	ldr	r3, [pc, #68]	; (800daf4 <netif_add+0x19c>)
 800daae:	2200      	movs	r2, #0
 800dab0:	701a      	strb	r2, [r3, #0]
 800dab2:	e006      	b.n	800dac2 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800daba:	3301      	adds	r3, #1
 800dabc:	b2da      	uxtb	r2, r3
 800dabe:	4b0d      	ldr	r3, [pc, #52]	; (800daf4 <netif_add+0x19c>)
 800dac0:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800dac2:	4b0d      	ldr	r3, [pc, #52]	; (800daf8 <netif_add+0x1a0>)
 800dac4:	681a      	ldr	r2, [r3, #0]
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800daca:	4a0b      	ldr	r2, [pc, #44]	; (800daf8 <netif_add+0x1a0>)
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800dad0:	68fb      	ldr	r3, [r7, #12]
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3718      	adds	r7, #24
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	0801b2c0 	.word	0x0801b2c0
 800dae0:	0801b354 	.word	0x0801b354
 800dae4:	0801b310 	.word	0x0801b310
 800dae8:	0801b370 	.word	0x0801b370
 800daec:	0801e0dc 	.word	0x0801e0dc
 800daf0:	0800de4b 	.word	0x0800de4b
 800daf4:	2000052c 	.word	0x2000052c
 800daf8:	20006cf0 	.word	0x20006cf0
 800dafc:	0801b394 	.word	0x0801b394
 800db00:	0801b3a8 	.word	0x0801b3a8

0800db04 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b082      	sub	sp, #8
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800db0e:	6839      	ldr	r1, [r7, #0]
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f002 fb81 	bl	8010218 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800db16:	6839      	ldr	r1, [r7, #0]
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f007 f81b 	bl	8014b54 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800db1e:	bf00      	nop
 800db20:	3708      	adds	r7, #8
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
	...

0800db28 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b086      	sub	sp, #24
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	60f8      	str	r0, [r7, #12]
 800db30:	60b9      	str	r1, [r7, #8]
 800db32:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d106      	bne.n	800db48 <netif_do_set_ipaddr+0x20>
 800db3a:	4b1d      	ldr	r3, [pc, #116]	; (800dbb0 <netif_do_set_ipaddr+0x88>)
 800db3c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800db40:	491c      	ldr	r1, [pc, #112]	; (800dbb4 <netif_do_set_ipaddr+0x8c>)
 800db42:	481d      	ldr	r0, [pc, #116]	; (800dbb8 <netif_do_set_ipaddr+0x90>)
 800db44:	f00b fc82 	bl	801944c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d106      	bne.n	800db5c <netif_do_set_ipaddr+0x34>
 800db4e:	4b18      	ldr	r3, [pc, #96]	; (800dbb0 <netif_do_set_ipaddr+0x88>)
 800db50:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800db54:	4917      	ldr	r1, [pc, #92]	; (800dbb4 <netif_do_set_ipaddr+0x8c>)
 800db56:	4818      	ldr	r0, [pc, #96]	; (800dbb8 <netif_do_set_ipaddr+0x90>)
 800db58:	f00b fc78 	bl	801944c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	3304      	adds	r3, #4
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	429a      	cmp	r2, r3
 800db68:	d01c      	beq.n	800dba4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	3304      	adds	r3, #4
 800db74:	681a      	ldr	r2, [r3, #0]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800db7a:	f107 0314 	add.w	r3, r7, #20
 800db7e:	4619      	mov	r1, r3
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f7ff ffbf 	bl	800db04 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d002      	beq.n	800db92 <netif_do_set_ipaddr+0x6a>
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	e000      	b.n	800db94 <netif_do_set_ipaddr+0x6c>
 800db92:	2300      	movs	r3, #0
 800db94:	68fa      	ldr	r2, [r7, #12]
 800db96:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800db98:	2101      	movs	r1, #1
 800db9a:	68f8      	ldr	r0, [r7, #12]
 800db9c:	f000 f8d2 	bl	800dd44 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800dba0:	2301      	movs	r3, #1
 800dba2:	e000      	b.n	800dba6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800dba4:	2300      	movs	r3, #0
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	3718      	adds	r7, #24
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}
 800dbae:	bf00      	nop
 800dbb0:	0801b2c0 	.word	0x0801b2c0
 800dbb4:	0801b3d8 	.word	0x0801b3d8
 800dbb8:	0801b310 	.word	0x0801b310

0800dbbc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b085      	sub	sp, #20
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	60f8      	str	r0, [r7, #12]
 800dbc4:	60b9      	str	r1, [r7, #8]
 800dbc6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	681a      	ldr	r2, [r3, #0]
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	3308      	adds	r3, #8
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d00a      	beq.n	800dbec <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d002      	beq.n	800dbe2 <netif_do_set_netmask+0x26>
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	e000      	b.n	800dbe4 <netif_do_set_netmask+0x28>
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	68fa      	ldr	r2, [r7, #12]
 800dbe6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800dbe8:	2301      	movs	r3, #1
 800dbea:	e000      	b.n	800dbee <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800dbec:	2300      	movs	r3, #0
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3714      	adds	r7, #20
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf8:	4770      	bx	lr

0800dbfa <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800dbfa:	b480      	push	{r7}
 800dbfc:	b085      	sub	sp, #20
 800dbfe:	af00      	add	r7, sp, #0
 800dc00:	60f8      	str	r0, [r7, #12]
 800dc02:	60b9      	str	r1, [r7, #8]
 800dc04:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	681a      	ldr	r2, [r3, #0]
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	330c      	adds	r3, #12
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d00a      	beq.n	800dc2a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d002      	beq.n	800dc20 <netif_do_set_gw+0x26>
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	e000      	b.n	800dc22 <netif_do_set_gw+0x28>
 800dc20:	2300      	movs	r3, #0
 800dc22:	68fa      	ldr	r2, [r7, #12]
 800dc24:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800dc26:	2301      	movs	r3, #1
 800dc28:	e000      	b.n	800dc2c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800dc2a:	2300      	movs	r3, #0
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3714      	adds	r7, #20
 800dc30:	46bd      	mov	sp, r7
 800dc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc36:	4770      	bx	lr

0800dc38 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b088      	sub	sp, #32
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	60f8      	str	r0, [r7, #12]
 800dc40:	60b9      	str	r1, [r7, #8]
 800dc42:	607a      	str	r2, [r7, #4]
 800dc44:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800dc46:	2300      	movs	r3, #0
 800dc48:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d101      	bne.n	800dc58 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800dc54:	4b1c      	ldr	r3, [pc, #112]	; (800dcc8 <netif_set_addr+0x90>)
 800dc56:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d101      	bne.n	800dc62 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800dc5e:	4b1a      	ldr	r3, [pc, #104]	; (800dcc8 <netif_set_addr+0x90>)
 800dc60:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d101      	bne.n	800dc6c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800dc68:	4b17      	ldr	r3, [pc, #92]	; (800dcc8 <netif_set_addr+0x90>)
 800dc6a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d003      	beq.n	800dc7a <netif_set_addr+0x42>
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d101      	bne.n	800dc7e <netif_set_addr+0x46>
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	e000      	b.n	800dc80 <netif_set_addr+0x48>
 800dc7e:	2300      	movs	r3, #0
 800dc80:	617b      	str	r3, [r7, #20]
  if (remove) {
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d006      	beq.n	800dc96 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dc88:	f107 0310 	add.w	r3, r7, #16
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	68b9      	ldr	r1, [r7, #8]
 800dc90:	68f8      	ldr	r0, [r7, #12]
 800dc92:	f7ff ff49 	bl	800db28 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800dc96:	69fa      	ldr	r2, [r7, #28]
 800dc98:	6879      	ldr	r1, [r7, #4]
 800dc9a:	68f8      	ldr	r0, [r7, #12]
 800dc9c:	f7ff ff8e 	bl	800dbbc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800dca0:	69ba      	ldr	r2, [r7, #24]
 800dca2:	6839      	ldr	r1, [r7, #0]
 800dca4:	68f8      	ldr	r0, [r7, #12]
 800dca6:	f7ff ffa8 	bl	800dbfa <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d106      	bne.n	800dcbe <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dcb0:	f107 0310 	add.w	r3, r7, #16
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	68b9      	ldr	r1, [r7, #8]
 800dcb8:	68f8      	ldr	r0, [r7, #12]
 800dcba:	f7ff ff35 	bl	800db28 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800dcbe:	bf00      	nop
 800dcc0:	3720      	adds	r7, #32
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	0801e0dc 	.word	0x0801e0dc

0800dccc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b083      	sub	sp, #12
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800dcd4:	4a04      	ldr	r2, [pc, #16]	; (800dce8 <netif_set_default+0x1c>)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800dcda:	bf00      	nop
 800dcdc:	370c      	adds	r7, #12
 800dcde:	46bd      	mov	sp, r7
 800dce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce4:	4770      	bx	lr
 800dce6:	bf00      	nop
 800dce8:	20006cf4 	.word	0x20006cf4

0800dcec <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b082      	sub	sp, #8
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d107      	bne.n	800dd0a <netif_set_up+0x1e>
 800dcfa:	4b0f      	ldr	r3, [pc, #60]	; (800dd38 <netif_set_up+0x4c>)
 800dcfc:	f44f 7254 	mov.w	r2, #848	; 0x350
 800dd00:	490e      	ldr	r1, [pc, #56]	; (800dd3c <netif_set_up+0x50>)
 800dd02:	480f      	ldr	r0, [pc, #60]	; (800dd40 <netif_set_up+0x54>)
 800dd04:	f00b fba2 	bl	801944c <iprintf>
 800dd08:	e013      	b.n	800dd32 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dd10:	f003 0301 	and.w	r3, r3, #1
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d10c      	bne.n	800dd32 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dd1e:	f043 0301 	orr.w	r3, r3, #1
 800dd22:	b2da      	uxtb	r2, r3
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800dd2a:	2103      	movs	r1, #3
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f000 f809 	bl	800dd44 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800dd32:	3708      	adds	r7, #8
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}
 800dd38:	0801b2c0 	.word	0x0801b2c0
 800dd3c:	0801b448 	.word	0x0801b448
 800dd40:	0801b310 	.word	0x0801b310

0800dd44 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	460b      	mov	r3, r1
 800dd4e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d106      	bne.n	800dd64 <netif_issue_reports+0x20>
 800dd56:	4b18      	ldr	r3, [pc, #96]	; (800ddb8 <netif_issue_reports+0x74>)
 800dd58:	f240 326d 	movw	r2, #877	; 0x36d
 800dd5c:	4917      	ldr	r1, [pc, #92]	; (800ddbc <netif_issue_reports+0x78>)
 800dd5e:	4818      	ldr	r0, [pc, #96]	; (800ddc0 <netif_issue_reports+0x7c>)
 800dd60:	f00b fb74 	bl	801944c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dd6a:	f003 0304 	and.w	r3, r3, #4
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d01e      	beq.n	800ddb0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dd78:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d017      	beq.n	800ddb0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dd80:	78fb      	ldrb	r3, [r7, #3]
 800dd82:	f003 0301 	and.w	r3, r3, #1
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d013      	beq.n	800ddb2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	3304      	adds	r3, #4
 800dd8e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d00e      	beq.n	800ddb2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dd9a:	f003 0308 	and.w	r3, r3, #8
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d007      	beq.n	800ddb2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	3304      	adds	r3, #4
 800dda6:	4619      	mov	r1, r3
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f009 fc97 	bl	80176dc <etharp_request>
 800ddae:	e000      	b.n	800ddb2 <netif_issue_reports+0x6e>
    return;
 800ddb0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ddb2:	3708      	adds	r7, #8
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}
 800ddb8:	0801b2c0 	.word	0x0801b2c0
 800ddbc:	0801b464 	.word	0x0801b464
 800ddc0:	0801b310 	.word	0x0801b310

0800ddc4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d107      	bne.n	800dde2 <netif_set_down+0x1e>
 800ddd2:	4b12      	ldr	r3, [pc, #72]	; (800de1c <netif_set_down+0x58>)
 800ddd4:	f240 329b 	movw	r2, #923	; 0x39b
 800ddd8:	4911      	ldr	r1, [pc, #68]	; (800de20 <netif_set_down+0x5c>)
 800ddda:	4812      	ldr	r0, [pc, #72]	; (800de24 <netif_set_down+0x60>)
 800dddc:	f00b fb36 	bl	801944c <iprintf>
 800dde0:	e019      	b.n	800de16 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dde8:	f003 0301 	and.w	r3, r3, #1
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d012      	beq.n	800de16 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ddf6:	f023 0301 	bic.w	r3, r3, #1
 800ddfa:	b2da      	uxtb	r2, r3
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800de08:	f003 0308 	and.w	r3, r3, #8
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d002      	beq.n	800de16 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f009 f81d 	bl	8016e50 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800de16:	3708      	adds	r7, #8
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}
 800de1c:	0801b2c0 	.word	0x0801b2c0
 800de20:	0801b488 	.word	0x0801b488
 800de24:	0801b310 	.word	0x0801b310

0800de28 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800de28:	b480      	push	{r7}
 800de2a:	b083      	sub	sp, #12
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d002      	beq.n	800de3e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	683a      	ldr	r2, [r7, #0]
 800de3c:	61da      	str	r2, [r3, #28]
  }
}
 800de3e:	bf00      	nop
 800de40:	370c      	adds	r7, #12
 800de42:	46bd      	mov	sp, r7
 800de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de48:	4770      	bx	lr

0800de4a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800de4a:	b480      	push	{r7}
 800de4c:	b085      	sub	sp, #20
 800de4e:	af00      	add	r7, sp, #0
 800de50:	60f8      	str	r0, [r7, #12]
 800de52:	60b9      	str	r1, [r7, #8]
 800de54:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800de56:	f06f 030b 	mvn.w	r3, #11
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3714      	adds	r7, #20
 800de5e:	46bd      	mov	sp, r7
 800de60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de64:	4770      	bx	lr
	...

0800de68 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800de68:	b480      	push	{r7}
 800de6a:	b085      	sub	sp, #20
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	4603      	mov	r3, r0
 800de70:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800de72:	79fb      	ldrb	r3, [r7, #7]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d013      	beq.n	800dea0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800de78:	4b0d      	ldr	r3, [pc, #52]	; (800deb0 <netif_get_by_index+0x48>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	60fb      	str	r3, [r7, #12]
 800de7e:	e00c      	b.n	800de9a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800de86:	3301      	adds	r3, #1
 800de88:	b2db      	uxtb	r3, r3
 800de8a:	79fa      	ldrb	r2, [r7, #7]
 800de8c:	429a      	cmp	r2, r3
 800de8e:	d101      	bne.n	800de94 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	e006      	b.n	800dea2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	60fb      	str	r3, [r7, #12]
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d1ef      	bne.n	800de80 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800dea0:	2300      	movs	r3, #0
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	3714      	adds	r7, #20
 800dea6:	46bd      	mov	sp, r7
 800dea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deac:	4770      	bx	lr
 800deae:	bf00      	nop
 800deb0:	20006cf0 	.word	0x20006cf0

0800deb4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b082      	sub	sp, #8
 800deb8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800deba:	4b0c      	ldr	r3, [pc, #48]	; (800deec <pbuf_free_ooseq+0x38>)
 800debc:	2200      	movs	r2, #0
 800debe:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800dec0:	4b0b      	ldr	r3, [pc, #44]	; (800def0 <pbuf_free_ooseq+0x3c>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	607b      	str	r3, [r7, #4]
 800dec6:	e00a      	b.n	800dede <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800decc:	2b00      	cmp	r3, #0
 800dece:	d003      	beq.n	800ded8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f002 f9df 	bl	8010294 <tcp_free_ooseq>
      return;
 800ded6:	e005      	b.n	800dee4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	68db      	ldr	r3, [r3, #12]
 800dedc:	607b      	str	r3, [r7, #4]
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d1f1      	bne.n	800dec8 <pbuf_free_ooseq+0x14>
    }
  }
}
 800dee4:	3708      	adds	r7, #8
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	bf00      	nop
 800deec:	20006cf8 	.word	0x20006cf8
 800def0:	20006d00 	.word	0x20006d00

0800def4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800def4:	b480      	push	{r7}
 800def6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800def8:	4b03      	ldr	r3, [pc, #12]	; (800df08 <pbuf_pool_is_empty+0x14>)
 800defa:	2201      	movs	r2, #1
 800defc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800defe:	bf00      	nop
 800df00:	46bd      	mov	sp, r7
 800df02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df06:	4770      	bx	lr
 800df08:	20006cf8 	.word	0x20006cf8

0800df0c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b085      	sub	sp, #20
 800df10:	af00      	add	r7, sp, #0
 800df12:	60f8      	str	r0, [r7, #12]
 800df14:	60b9      	str	r1, [r7, #8]
 800df16:	4611      	mov	r1, r2
 800df18:	461a      	mov	r2, r3
 800df1a:	460b      	mov	r3, r1
 800df1c:	80fb      	strh	r3, [r7, #6]
 800df1e:	4613      	mov	r3, r2
 800df20:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	2200      	movs	r2, #0
 800df26:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	68ba      	ldr	r2, [r7, #8]
 800df2c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	88fa      	ldrh	r2, [r7, #6]
 800df32:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	88ba      	ldrh	r2, [r7, #4]
 800df38:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800df3a:	8b3b      	ldrh	r3, [r7, #24]
 800df3c:	b2da      	uxtb	r2, r3
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	7f3a      	ldrb	r2, [r7, #28]
 800df46:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	2201      	movs	r2, #1
 800df4c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	2200      	movs	r2, #0
 800df52:	73da      	strb	r2, [r3, #15]
}
 800df54:	bf00      	nop
 800df56:	3714      	adds	r7, #20
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr

0800df60 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b08c      	sub	sp, #48	; 0x30
 800df64:	af02      	add	r7, sp, #8
 800df66:	4603      	mov	r3, r0
 800df68:	71fb      	strb	r3, [r7, #7]
 800df6a:	460b      	mov	r3, r1
 800df6c:	80bb      	strh	r3, [r7, #4]
 800df6e:	4613      	mov	r3, r2
 800df70:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800df72:	79fb      	ldrb	r3, [r7, #7]
 800df74:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800df76:	887b      	ldrh	r3, [r7, #2]
 800df78:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800df7c:	d07f      	beq.n	800e07e <pbuf_alloc+0x11e>
 800df7e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800df82:	f300 80c8 	bgt.w	800e116 <pbuf_alloc+0x1b6>
 800df86:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800df8a:	d010      	beq.n	800dfae <pbuf_alloc+0x4e>
 800df8c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800df90:	f300 80c1 	bgt.w	800e116 <pbuf_alloc+0x1b6>
 800df94:	2b01      	cmp	r3, #1
 800df96:	d002      	beq.n	800df9e <pbuf_alloc+0x3e>
 800df98:	2b41      	cmp	r3, #65	; 0x41
 800df9a:	f040 80bc 	bne.w	800e116 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800df9e:	887a      	ldrh	r2, [r7, #2]
 800dfa0:	88bb      	ldrh	r3, [r7, #4]
 800dfa2:	4619      	mov	r1, r3
 800dfa4:	2000      	movs	r0, #0
 800dfa6:	f000 f8d1 	bl	800e14c <pbuf_alloc_reference>
 800dfaa:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800dfac:	e0bd      	b.n	800e12a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800dfb6:	88bb      	ldrh	r3, [r7, #4]
 800dfb8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800dfba:	2008      	movs	r0, #8
 800dfbc:	f7ff fc4e 	bl	800d85c <memp_malloc>
 800dfc0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800dfc2:	693b      	ldr	r3, [r7, #16]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d109      	bne.n	800dfdc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800dfc8:	f7ff ff94 	bl	800def4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800dfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d002      	beq.n	800dfd8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800dfd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dfd4:	f000 faa8 	bl	800e528 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	e0a7      	b.n	800e12c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800dfdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dfde:	3303      	adds	r3, #3
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	f023 0303 	bic.w	r3, r3, #3
 800dfe6:	b29b      	uxth	r3, r3
 800dfe8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800dfec:	b29b      	uxth	r3, r3
 800dfee:	8b7a      	ldrh	r2, [r7, #26]
 800dff0:	4293      	cmp	r3, r2
 800dff2:	bf28      	it	cs
 800dff4:	4613      	movcs	r3, r2
 800dff6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800dff8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dffa:	3310      	adds	r3, #16
 800dffc:	693a      	ldr	r2, [r7, #16]
 800dffe:	4413      	add	r3, r2
 800e000:	3303      	adds	r3, #3
 800e002:	f023 0303 	bic.w	r3, r3, #3
 800e006:	4618      	mov	r0, r3
 800e008:	89f9      	ldrh	r1, [r7, #14]
 800e00a:	8b7a      	ldrh	r2, [r7, #26]
 800e00c:	2300      	movs	r3, #0
 800e00e:	9301      	str	r3, [sp, #4]
 800e010:	887b      	ldrh	r3, [r7, #2]
 800e012:	9300      	str	r3, [sp, #0]
 800e014:	460b      	mov	r3, r1
 800e016:	4601      	mov	r1, r0
 800e018:	6938      	ldr	r0, [r7, #16]
 800e01a:	f7ff ff77 	bl	800df0c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	685b      	ldr	r3, [r3, #4]
 800e022:	f003 0303 	and.w	r3, r3, #3
 800e026:	2b00      	cmp	r3, #0
 800e028:	d006      	beq.n	800e038 <pbuf_alloc+0xd8>
 800e02a:	4b42      	ldr	r3, [pc, #264]	; (800e134 <pbuf_alloc+0x1d4>)
 800e02c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e030:	4941      	ldr	r1, [pc, #260]	; (800e138 <pbuf_alloc+0x1d8>)
 800e032:	4842      	ldr	r0, [pc, #264]	; (800e13c <pbuf_alloc+0x1dc>)
 800e034:	f00b fa0a 	bl	801944c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e038:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e03a:	3303      	adds	r3, #3
 800e03c:	f023 0303 	bic.w	r3, r3, #3
 800e040:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e044:	d106      	bne.n	800e054 <pbuf_alloc+0xf4>
 800e046:	4b3b      	ldr	r3, [pc, #236]	; (800e134 <pbuf_alloc+0x1d4>)
 800e048:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e04c:	493c      	ldr	r1, [pc, #240]	; (800e140 <pbuf_alloc+0x1e0>)
 800e04e:	483b      	ldr	r0, [pc, #236]	; (800e13c <pbuf_alloc+0x1dc>)
 800e050:	f00b f9fc 	bl	801944c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e056:	2b00      	cmp	r3, #0
 800e058:	d102      	bne.n	800e060 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e05a:	693b      	ldr	r3, [r7, #16]
 800e05c:	627b      	str	r3, [r7, #36]	; 0x24
 800e05e:	e002      	b.n	800e066 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e060:	69fb      	ldr	r3, [r7, #28]
 800e062:	693a      	ldr	r2, [r7, #16]
 800e064:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e066:	693b      	ldr	r3, [r7, #16]
 800e068:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e06a:	8b7a      	ldrh	r2, [r7, #26]
 800e06c:	89fb      	ldrh	r3, [r7, #14]
 800e06e:	1ad3      	subs	r3, r2, r3
 800e070:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e072:	2300      	movs	r3, #0
 800e074:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e076:	8b7b      	ldrh	r3, [r7, #26]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d19e      	bne.n	800dfba <pbuf_alloc+0x5a>
      break;
 800e07c:	e055      	b.n	800e12a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e07e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e080:	3303      	adds	r3, #3
 800e082:	b29b      	uxth	r3, r3
 800e084:	f023 0303 	bic.w	r3, r3, #3
 800e088:	b29a      	uxth	r2, r3
 800e08a:	88bb      	ldrh	r3, [r7, #4]
 800e08c:	3303      	adds	r3, #3
 800e08e:	b29b      	uxth	r3, r3
 800e090:	f023 0303 	bic.w	r3, r3, #3
 800e094:	b29b      	uxth	r3, r3
 800e096:	4413      	add	r3, r2
 800e098:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e09a:	8b3b      	ldrh	r3, [r7, #24]
 800e09c:	3310      	adds	r3, #16
 800e09e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e0a0:	8b3a      	ldrh	r2, [r7, #24]
 800e0a2:	88bb      	ldrh	r3, [r7, #4]
 800e0a4:	3303      	adds	r3, #3
 800e0a6:	f023 0303 	bic.w	r3, r3, #3
 800e0aa:	429a      	cmp	r2, r3
 800e0ac:	d306      	bcc.n	800e0bc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e0ae:	8afa      	ldrh	r2, [r7, #22]
 800e0b0:	88bb      	ldrh	r3, [r7, #4]
 800e0b2:	3303      	adds	r3, #3
 800e0b4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d201      	bcs.n	800e0c0 <pbuf_alloc+0x160>
        return NULL;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	e035      	b.n	800e12c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e0c0:	8afb      	ldrh	r3, [r7, #22]
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f7ff fa5c 	bl	800d580 <mem_malloc>
 800e0c8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d101      	bne.n	800e0d4 <pbuf_alloc+0x174>
        return NULL;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	e02b      	b.n	800e12c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e0d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e0d6:	3310      	adds	r3, #16
 800e0d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0da:	4413      	add	r3, r2
 800e0dc:	3303      	adds	r3, #3
 800e0de:	f023 0303 	bic.w	r3, r3, #3
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	88b9      	ldrh	r1, [r7, #4]
 800e0e6:	88ba      	ldrh	r2, [r7, #4]
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	9301      	str	r3, [sp, #4]
 800e0ec:	887b      	ldrh	r3, [r7, #2]
 800e0ee:	9300      	str	r3, [sp, #0]
 800e0f0:	460b      	mov	r3, r1
 800e0f2:	4601      	mov	r1, r0
 800e0f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0f6:	f7ff ff09 	bl	800df0c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fc:	685b      	ldr	r3, [r3, #4]
 800e0fe:	f003 0303 	and.w	r3, r3, #3
 800e102:	2b00      	cmp	r3, #0
 800e104:	d010      	beq.n	800e128 <pbuf_alloc+0x1c8>
 800e106:	4b0b      	ldr	r3, [pc, #44]	; (800e134 <pbuf_alloc+0x1d4>)
 800e108:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e10c:	490d      	ldr	r1, [pc, #52]	; (800e144 <pbuf_alloc+0x1e4>)
 800e10e:	480b      	ldr	r0, [pc, #44]	; (800e13c <pbuf_alloc+0x1dc>)
 800e110:	f00b f99c 	bl	801944c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e114:	e008      	b.n	800e128 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e116:	4b07      	ldr	r3, [pc, #28]	; (800e134 <pbuf_alloc+0x1d4>)
 800e118:	f240 1227 	movw	r2, #295	; 0x127
 800e11c:	490a      	ldr	r1, [pc, #40]	; (800e148 <pbuf_alloc+0x1e8>)
 800e11e:	4807      	ldr	r0, [pc, #28]	; (800e13c <pbuf_alloc+0x1dc>)
 800e120:	f00b f994 	bl	801944c <iprintf>
      return NULL;
 800e124:	2300      	movs	r3, #0
 800e126:	e001      	b.n	800e12c <pbuf_alloc+0x1cc>
      break;
 800e128:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3728      	adds	r7, #40	; 0x28
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}
 800e134:	0801b4f0 	.word	0x0801b4f0
 800e138:	0801b520 	.word	0x0801b520
 800e13c:	0801b550 	.word	0x0801b550
 800e140:	0801b578 	.word	0x0801b578
 800e144:	0801b5ac 	.word	0x0801b5ac
 800e148:	0801b5d8 	.word	0x0801b5d8

0800e14c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b086      	sub	sp, #24
 800e150:	af02      	add	r7, sp, #8
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	460b      	mov	r3, r1
 800e156:	807b      	strh	r3, [r7, #2]
 800e158:	4613      	mov	r3, r2
 800e15a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e15c:	883b      	ldrh	r3, [r7, #0]
 800e15e:	2b41      	cmp	r3, #65	; 0x41
 800e160:	d009      	beq.n	800e176 <pbuf_alloc_reference+0x2a>
 800e162:	883b      	ldrh	r3, [r7, #0]
 800e164:	2b01      	cmp	r3, #1
 800e166:	d006      	beq.n	800e176 <pbuf_alloc_reference+0x2a>
 800e168:	4b0f      	ldr	r3, [pc, #60]	; (800e1a8 <pbuf_alloc_reference+0x5c>)
 800e16a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e16e:	490f      	ldr	r1, [pc, #60]	; (800e1ac <pbuf_alloc_reference+0x60>)
 800e170:	480f      	ldr	r0, [pc, #60]	; (800e1b0 <pbuf_alloc_reference+0x64>)
 800e172:	f00b f96b 	bl	801944c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e176:	2007      	movs	r0, #7
 800e178:	f7ff fb70 	bl	800d85c <memp_malloc>
 800e17c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d101      	bne.n	800e188 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e184:	2300      	movs	r3, #0
 800e186:	e00b      	b.n	800e1a0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e188:	8879      	ldrh	r1, [r7, #2]
 800e18a:	887a      	ldrh	r2, [r7, #2]
 800e18c:	2300      	movs	r3, #0
 800e18e:	9301      	str	r3, [sp, #4]
 800e190:	883b      	ldrh	r3, [r7, #0]
 800e192:	9300      	str	r3, [sp, #0]
 800e194:	460b      	mov	r3, r1
 800e196:	6879      	ldr	r1, [r7, #4]
 800e198:	68f8      	ldr	r0, [r7, #12]
 800e19a:	f7ff feb7 	bl	800df0c <pbuf_init_alloced_pbuf>
  return p;
 800e19e:	68fb      	ldr	r3, [r7, #12]
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3710      	adds	r7, #16
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}
 800e1a8:	0801b4f0 	.word	0x0801b4f0
 800e1ac:	0801b5f4 	.word	0x0801b5f4
 800e1b0:	0801b550 	.word	0x0801b550

0800e1b4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b088      	sub	sp, #32
 800e1b8:	af02      	add	r7, sp, #8
 800e1ba:	607b      	str	r3, [r7, #4]
 800e1bc:	4603      	mov	r3, r0
 800e1be:	73fb      	strb	r3, [r7, #15]
 800e1c0:	460b      	mov	r3, r1
 800e1c2:	81bb      	strh	r3, [r7, #12]
 800e1c4:	4613      	mov	r3, r2
 800e1c6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e1c8:	7bfb      	ldrb	r3, [r7, #15]
 800e1ca:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e1cc:	8a7b      	ldrh	r3, [r7, #18]
 800e1ce:	3303      	adds	r3, #3
 800e1d0:	f023 0203 	bic.w	r2, r3, #3
 800e1d4:	89bb      	ldrh	r3, [r7, #12]
 800e1d6:	441a      	add	r2, r3
 800e1d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	d901      	bls.n	800e1e2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	e018      	b.n	800e214 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e1e2:	6a3b      	ldr	r3, [r7, #32]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d007      	beq.n	800e1f8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e1e8:	8a7b      	ldrh	r3, [r7, #18]
 800e1ea:	3303      	adds	r3, #3
 800e1ec:	f023 0303 	bic.w	r3, r3, #3
 800e1f0:	6a3a      	ldr	r2, [r7, #32]
 800e1f2:	4413      	add	r3, r2
 800e1f4:	617b      	str	r3, [r7, #20]
 800e1f6:	e001      	b.n	800e1fc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	89b9      	ldrh	r1, [r7, #12]
 800e200:	89ba      	ldrh	r2, [r7, #12]
 800e202:	2302      	movs	r3, #2
 800e204:	9301      	str	r3, [sp, #4]
 800e206:	897b      	ldrh	r3, [r7, #10]
 800e208:	9300      	str	r3, [sp, #0]
 800e20a:	460b      	mov	r3, r1
 800e20c:	6979      	ldr	r1, [r7, #20]
 800e20e:	f7ff fe7d 	bl	800df0c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e212:	687b      	ldr	r3, [r7, #4]
}
 800e214:	4618      	mov	r0, r3
 800e216:	3718      	adds	r7, #24
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}

0800e21c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b084      	sub	sp, #16
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
 800e224:	460b      	mov	r3, r1
 800e226:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d106      	bne.n	800e23c <pbuf_realloc+0x20>
 800e22e:	4b3a      	ldr	r3, [pc, #232]	; (800e318 <pbuf_realloc+0xfc>)
 800e230:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e234:	4939      	ldr	r1, [pc, #228]	; (800e31c <pbuf_realloc+0x100>)
 800e236:	483a      	ldr	r0, [pc, #232]	; (800e320 <pbuf_realloc+0x104>)
 800e238:	f00b f908 	bl	801944c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	891b      	ldrh	r3, [r3, #8]
 800e240:	887a      	ldrh	r2, [r7, #2]
 800e242:	429a      	cmp	r2, r3
 800e244:	d263      	bcs.n	800e30e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	891a      	ldrh	r2, [r3, #8]
 800e24a:	887b      	ldrh	r3, [r7, #2]
 800e24c:	1ad3      	subs	r3, r2, r3
 800e24e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e250:	887b      	ldrh	r3, [r7, #2]
 800e252:	817b      	strh	r3, [r7, #10]
  q = p;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e258:	e018      	b.n	800e28c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	895b      	ldrh	r3, [r3, #10]
 800e25e:	897a      	ldrh	r2, [r7, #10]
 800e260:	1ad3      	subs	r3, r2, r3
 800e262:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	891a      	ldrh	r2, [r3, #8]
 800e268:	893b      	ldrh	r3, [r7, #8]
 800e26a:	1ad3      	subs	r3, r2, r3
 800e26c:	b29a      	uxth	r2, r3
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d106      	bne.n	800e28c <pbuf_realloc+0x70>
 800e27e:	4b26      	ldr	r3, [pc, #152]	; (800e318 <pbuf_realloc+0xfc>)
 800e280:	f240 12af 	movw	r2, #431	; 0x1af
 800e284:	4927      	ldr	r1, [pc, #156]	; (800e324 <pbuf_realloc+0x108>)
 800e286:	4826      	ldr	r0, [pc, #152]	; (800e320 <pbuf_realloc+0x104>)
 800e288:	f00b f8e0 	bl	801944c <iprintf>
  while (rem_len > q->len) {
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	895b      	ldrh	r3, [r3, #10]
 800e290:	897a      	ldrh	r2, [r7, #10]
 800e292:	429a      	cmp	r2, r3
 800e294:	d8e1      	bhi.n	800e25a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	7b1b      	ldrb	r3, [r3, #12]
 800e29a:	f003 030f 	and.w	r3, r3, #15
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d121      	bne.n	800e2e6 <pbuf_realloc+0xca>
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	895b      	ldrh	r3, [r3, #10]
 800e2a6:	897a      	ldrh	r2, [r7, #10]
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d01c      	beq.n	800e2e6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	7b5b      	ldrb	r3, [r3, #13]
 800e2b0:	f003 0302 	and.w	r3, r3, #2
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d116      	bne.n	800e2e6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	685a      	ldr	r2, [r3, #4]
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	1ad3      	subs	r3, r2, r3
 800e2c0:	b29a      	uxth	r2, r3
 800e2c2:	897b      	ldrh	r3, [r7, #10]
 800e2c4:	4413      	add	r3, r2
 800e2c6:	b29b      	uxth	r3, r3
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	68f8      	ldr	r0, [r7, #12]
 800e2cc:	f7ff f85c 	bl	800d388 <mem_trim>
 800e2d0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d106      	bne.n	800e2e6 <pbuf_realloc+0xca>
 800e2d8:	4b0f      	ldr	r3, [pc, #60]	; (800e318 <pbuf_realloc+0xfc>)
 800e2da:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e2de:	4912      	ldr	r1, [pc, #72]	; (800e328 <pbuf_realloc+0x10c>)
 800e2e0:	480f      	ldr	r0, [pc, #60]	; (800e320 <pbuf_realloc+0x104>)
 800e2e2:	f00b f8b3 	bl	801944c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	897a      	ldrh	r2, [r7, #10]
 800e2ea:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	895a      	ldrh	r2, [r3, #10]
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d004      	beq.n	800e306 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4618      	mov	r0, r3
 800e302:	f000 f911 	bl	800e528 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	2200      	movs	r2, #0
 800e30a:	601a      	str	r2, [r3, #0]
 800e30c:	e000      	b.n	800e310 <pbuf_realloc+0xf4>
    return;
 800e30e:	bf00      	nop

}
 800e310:	3710      	adds	r7, #16
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
 800e316:	bf00      	nop
 800e318:	0801b4f0 	.word	0x0801b4f0
 800e31c:	0801b608 	.word	0x0801b608
 800e320:	0801b550 	.word	0x0801b550
 800e324:	0801b620 	.word	0x0801b620
 800e328:	0801b638 	.word	0x0801b638

0800e32c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b086      	sub	sp, #24
 800e330:	af00      	add	r7, sp, #0
 800e332:	60f8      	str	r0, [r7, #12]
 800e334:	60b9      	str	r1, [r7, #8]
 800e336:	4613      	mov	r3, r2
 800e338:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d106      	bne.n	800e34e <pbuf_add_header_impl+0x22>
 800e340:	4b2b      	ldr	r3, [pc, #172]	; (800e3f0 <pbuf_add_header_impl+0xc4>)
 800e342:	f240 12df 	movw	r2, #479	; 0x1df
 800e346:	492b      	ldr	r1, [pc, #172]	; (800e3f4 <pbuf_add_header_impl+0xc8>)
 800e348:	482b      	ldr	r0, [pc, #172]	; (800e3f8 <pbuf_add_header_impl+0xcc>)
 800e34a:	f00b f87f 	bl	801944c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d003      	beq.n	800e35c <pbuf_add_header_impl+0x30>
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e35a:	d301      	bcc.n	800e360 <pbuf_add_header_impl+0x34>
    return 1;
 800e35c:	2301      	movs	r3, #1
 800e35e:	e043      	b.n	800e3e8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d101      	bne.n	800e36a <pbuf_add_header_impl+0x3e>
    return 0;
 800e366:	2300      	movs	r3, #0
 800e368:	e03e      	b.n	800e3e8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	891a      	ldrh	r2, [r3, #8]
 800e372:	8a7b      	ldrh	r3, [r7, #18]
 800e374:	4413      	add	r3, r2
 800e376:	b29b      	uxth	r3, r3
 800e378:	8a7a      	ldrh	r2, [r7, #18]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	d901      	bls.n	800e382 <pbuf_add_header_impl+0x56>
    return 1;
 800e37e:	2301      	movs	r3, #1
 800e380:	e032      	b.n	800e3e8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	7b1b      	ldrb	r3, [r3, #12]
 800e386:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e388:	8a3b      	ldrh	r3, [r7, #16]
 800e38a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d00c      	beq.n	800e3ac <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	685a      	ldr	r2, [r3, #4]
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	425b      	negs	r3, r3
 800e39a:	4413      	add	r3, r2
 800e39c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	3310      	adds	r3, #16
 800e3a2:	697a      	ldr	r2, [r7, #20]
 800e3a4:	429a      	cmp	r2, r3
 800e3a6:	d20d      	bcs.n	800e3c4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	e01d      	b.n	800e3e8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e3ac:	79fb      	ldrb	r3, [r7, #7]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d006      	beq.n	800e3c0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	685a      	ldr	r2, [r3, #4]
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	425b      	negs	r3, r3
 800e3ba:	4413      	add	r3, r2
 800e3bc:	617b      	str	r3, [r7, #20]
 800e3be:	e001      	b.n	800e3c4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	e011      	b.n	800e3e8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	697a      	ldr	r2, [r7, #20]
 800e3c8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	895a      	ldrh	r2, [r3, #10]
 800e3ce:	8a7b      	ldrh	r3, [r7, #18]
 800e3d0:	4413      	add	r3, r2
 800e3d2:	b29a      	uxth	r2, r3
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	891a      	ldrh	r2, [r3, #8]
 800e3dc:	8a7b      	ldrh	r3, [r7, #18]
 800e3de:	4413      	add	r3, r2
 800e3e0:	b29a      	uxth	r2, r3
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	811a      	strh	r2, [r3, #8]


  return 0;
 800e3e6:	2300      	movs	r3, #0
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3718      	adds	r7, #24
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}
 800e3f0:	0801b4f0 	.word	0x0801b4f0
 800e3f4:	0801b654 	.word	0x0801b654
 800e3f8:	0801b550 	.word	0x0801b550

0800e3fc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b082      	sub	sp, #8
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e406:	2200      	movs	r2, #0
 800e408:	6839      	ldr	r1, [r7, #0]
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f7ff ff8e 	bl	800e32c <pbuf_add_header_impl>
 800e410:	4603      	mov	r3, r0
}
 800e412:	4618      	mov	r0, r3
 800e414:	3708      	adds	r7, #8
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
	...

0800e41c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b084      	sub	sp, #16
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d106      	bne.n	800e43a <pbuf_remove_header+0x1e>
 800e42c:	4b20      	ldr	r3, [pc, #128]	; (800e4b0 <pbuf_remove_header+0x94>)
 800e42e:	f240 224b 	movw	r2, #587	; 0x24b
 800e432:	4920      	ldr	r1, [pc, #128]	; (800e4b4 <pbuf_remove_header+0x98>)
 800e434:	4820      	ldr	r0, [pc, #128]	; (800e4b8 <pbuf_remove_header+0x9c>)
 800e436:	f00b f809 	bl	801944c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d003      	beq.n	800e448 <pbuf_remove_header+0x2c>
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e446:	d301      	bcc.n	800e44c <pbuf_remove_header+0x30>
    return 1;
 800e448:	2301      	movs	r3, #1
 800e44a:	e02c      	b.n	800e4a6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d101      	bne.n	800e456 <pbuf_remove_header+0x3a>
    return 0;
 800e452:	2300      	movs	r3, #0
 800e454:	e027      	b.n	800e4a6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	895b      	ldrh	r3, [r3, #10]
 800e45e:	89fa      	ldrh	r2, [r7, #14]
 800e460:	429a      	cmp	r2, r3
 800e462:	d908      	bls.n	800e476 <pbuf_remove_header+0x5a>
 800e464:	4b12      	ldr	r3, [pc, #72]	; (800e4b0 <pbuf_remove_header+0x94>)
 800e466:	f240 2255 	movw	r2, #597	; 0x255
 800e46a:	4914      	ldr	r1, [pc, #80]	; (800e4bc <pbuf_remove_header+0xa0>)
 800e46c:	4812      	ldr	r0, [pc, #72]	; (800e4b8 <pbuf_remove_header+0x9c>)
 800e46e:	f00a ffed 	bl	801944c <iprintf>
 800e472:	2301      	movs	r3, #1
 800e474:	e017      	b.n	800e4a6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	685a      	ldr	r2, [r3, #4]
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	441a      	add	r2, r3
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	895a      	ldrh	r2, [r3, #10]
 800e48c:	89fb      	ldrh	r3, [r7, #14]
 800e48e:	1ad3      	subs	r3, r2, r3
 800e490:	b29a      	uxth	r2, r3
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	891a      	ldrh	r2, [r3, #8]
 800e49a:	89fb      	ldrh	r3, [r7, #14]
 800e49c:	1ad3      	subs	r3, r2, r3
 800e49e:	b29a      	uxth	r2, r3
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e4a4:	2300      	movs	r3, #0
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3710      	adds	r7, #16
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}
 800e4ae:	bf00      	nop
 800e4b0:	0801b4f0 	.word	0x0801b4f0
 800e4b4:	0801b654 	.word	0x0801b654
 800e4b8:	0801b550 	.word	0x0801b550
 800e4bc:	0801b660 	.word	0x0801b660

0800e4c0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b082      	sub	sp, #8
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
 800e4c8:	460b      	mov	r3, r1
 800e4ca:	807b      	strh	r3, [r7, #2]
 800e4cc:	4613      	mov	r3, r2
 800e4ce:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e4d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	da08      	bge.n	800e4ea <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e4d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e4dc:	425b      	negs	r3, r3
 800e4de:	4619      	mov	r1, r3
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f7ff ff9b 	bl	800e41c <pbuf_remove_header>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	e007      	b.n	800e4fa <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e4ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e4ee:	787a      	ldrb	r2, [r7, #1]
 800e4f0:	4619      	mov	r1, r3
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f7ff ff1a 	bl	800e32c <pbuf_add_header_impl>
 800e4f8:	4603      	mov	r3, r0
  }
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	3708      	adds	r7, #8
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}

0800e502 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e502:	b580      	push	{r7, lr}
 800e504:	b082      	sub	sp, #8
 800e506:	af00      	add	r7, sp, #0
 800e508:	6078      	str	r0, [r7, #4]
 800e50a:	460b      	mov	r3, r1
 800e50c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e50e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e512:	2201      	movs	r2, #1
 800e514:	4619      	mov	r1, r3
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	f7ff ffd2 	bl	800e4c0 <pbuf_header_impl>
 800e51c:	4603      	mov	r3, r0
}
 800e51e:	4618      	mov	r0, r3
 800e520:	3708      	adds	r7, #8
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
	...

0800e528 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b086      	sub	sp, #24
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d10b      	bne.n	800e54e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d106      	bne.n	800e54a <pbuf_free+0x22>
 800e53c:	4b38      	ldr	r3, [pc, #224]	; (800e620 <pbuf_free+0xf8>)
 800e53e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e542:	4938      	ldr	r1, [pc, #224]	; (800e624 <pbuf_free+0xfc>)
 800e544:	4838      	ldr	r0, [pc, #224]	; (800e628 <pbuf_free+0x100>)
 800e546:	f00a ff81 	bl	801944c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e54a:	2300      	movs	r3, #0
 800e54c:	e063      	b.n	800e616 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e54e:	2300      	movs	r3, #0
 800e550:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e552:	e05c      	b.n	800e60e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	7b9b      	ldrb	r3, [r3, #14]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d106      	bne.n	800e56a <pbuf_free+0x42>
 800e55c:	4b30      	ldr	r3, [pc, #192]	; (800e620 <pbuf_free+0xf8>)
 800e55e:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e562:	4932      	ldr	r1, [pc, #200]	; (800e62c <pbuf_free+0x104>)
 800e564:	4830      	ldr	r0, [pc, #192]	; (800e628 <pbuf_free+0x100>)
 800e566:	f00a ff71 	bl	801944c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	7b9b      	ldrb	r3, [r3, #14]
 800e56e:	3b01      	subs	r3, #1
 800e570:	b2da      	uxtb	r2, r3
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	739a      	strb	r2, [r3, #14]
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	7b9b      	ldrb	r3, [r3, #14]
 800e57a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e57c:	7dbb      	ldrb	r3, [r7, #22]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d143      	bne.n	800e60a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	7b1b      	ldrb	r3, [r3, #12]
 800e58c:	f003 030f 	and.w	r3, r3, #15
 800e590:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	7b5b      	ldrb	r3, [r3, #13]
 800e596:	f003 0302 	and.w	r3, r3, #2
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d011      	beq.n	800e5c2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	691b      	ldr	r3, [r3, #16]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d106      	bne.n	800e5b8 <pbuf_free+0x90>
 800e5aa:	4b1d      	ldr	r3, [pc, #116]	; (800e620 <pbuf_free+0xf8>)
 800e5ac:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e5b0:	491f      	ldr	r1, [pc, #124]	; (800e630 <pbuf_free+0x108>)
 800e5b2:	481d      	ldr	r0, [pc, #116]	; (800e628 <pbuf_free+0x100>)
 800e5b4:	f00a ff4a 	bl	801944c <iprintf>
        pc->custom_free_function(p);
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	691b      	ldr	r3, [r3, #16]
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	4798      	blx	r3
 800e5c0:	e01d      	b.n	800e5fe <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e5c2:	7bfb      	ldrb	r3, [r7, #15]
 800e5c4:	2b02      	cmp	r3, #2
 800e5c6:	d104      	bne.n	800e5d2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800e5c8:	6879      	ldr	r1, [r7, #4]
 800e5ca:	2008      	movs	r0, #8
 800e5cc:	f7ff f992 	bl	800d8f4 <memp_free>
 800e5d0:	e015      	b.n	800e5fe <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e5d2:	7bfb      	ldrb	r3, [r7, #15]
 800e5d4:	2b01      	cmp	r3, #1
 800e5d6:	d104      	bne.n	800e5e2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800e5d8:	6879      	ldr	r1, [r7, #4]
 800e5da:	2007      	movs	r0, #7
 800e5dc:	f7ff f98a 	bl	800d8f4 <memp_free>
 800e5e0:	e00d      	b.n	800e5fe <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e5e2:	7bfb      	ldrb	r3, [r7, #15]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d103      	bne.n	800e5f0 <pbuf_free+0xc8>
          mem_free(p);
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f7fe fe63 	bl	800d2b4 <mem_free>
 800e5ee:	e006      	b.n	800e5fe <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e5f0:	4b0b      	ldr	r3, [pc, #44]	; (800e620 <pbuf_free+0xf8>)
 800e5f2:	f240 320f 	movw	r2, #783	; 0x30f
 800e5f6:	490f      	ldr	r1, [pc, #60]	; (800e634 <pbuf_free+0x10c>)
 800e5f8:	480b      	ldr	r0, [pc, #44]	; (800e628 <pbuf_free+0x100>)
 800e5fa:	f00a ff27 	bl	801944c <iprintf>
        }
      }
      count++;
 800e5fe:	7dfb      	ldrb	r3, [r7, #23]
 800e600:	3301      	adds	r3, #1
 800e602:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800e604:	693b      	ldr	r3, [r7, #16]
 800e606:	607b      	str	r3, [r7, #4]
 800e608:	e001      	b.n	800e60e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e60a:	2300      	movs	r3, #0
 800e60c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d19f      	bne.n	800e554 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e614:	7dfb      	ldrb	r3, [r7, #23]
}
 800e616:	4618      	mov	r0, r3
 800e618:	3718      	adds	r7, #24
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}
 800e61e:	bf00      	nop
 800e620:	0801b4f0 	.word	0x0801b4f0
 800e624:	0801b654 	.word	0x0801b654
 800e628:	0801b550 	.word	0x0801b550
 800e62c:	0801b680 	.word	0x0801b680
 800e630:	0801b698 	.word	0x0801b698
 800e634:	0801b6bc 	.word	0x0801b6bc

0800e638 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e638:	b480      	push	{r7}
 800e63a:	b085      	sub	sp, #20
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e640:	2300      	movs	r3, #0
 800e642:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e644:	e005      	b.n	800e652 <pbuf_clen+0x1a>
    ++len;
 800e646:	89fb      	ldrh	r3, [r7, #14]
 800e648:	3301      	adds	r3, #1
 800e64a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d1f6      	bne.n	800e646 <pbuf_clen+0xe>
  }
  return len;
 800e658:	89fb      	ldrh	r3, [r7, #14]
}
 800e65a:	4618      	mov	r0, r3
 800e65c:	3714      	adds	r7, #20
 800e65e:	46bd      	mov	sp, r7
 800e660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e664:	4770      	bx	lr
	...

0800e668 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b082      	sub	sp, #8
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d010      	beq.n	800e698 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	7b9b      	ldrb	r3, [r3, #14]
 800e67a:	3301      	adds	r3, #1
 800e67c:	b2da      	uxtb	r2, r3
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	7b9b      	ldrb	r3, [r3, #14]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d106      	bne.n	800e698 <pbuf_ref+0x30>
 800e68a:	4b05      	ldr	r3, [pc, #20]	; (800e6a0 <pbuf_ref+0x38>)
 800e68c:	f240 3242 	movw	r2, #834	; 0x342
 800e690:	4904      	ldr	r1, [pc, #16]	; (800e6a4 <pbuf_ref+0x3c>)
 800e692:	4805      	ldr	r0, [pc, #20]	; (800e6a8 <pbuf_ref+0x40>)
 800e694:	f00a feda 	bl	801944c <iprintf>
  }
}
 800e698:	bf00      	nop
 800e69a:	3708      	adds	r7, #8
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}
 800e6a0:	0801b4f0 	.word	0x0801b4f0
 800e6a4:	0801b6d0 	.word	0x0801b6d0
 800e6a8:	0801b550 	.word	0x0801b550

0800e6ac <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b084      	sub	sp, #16
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
 800e6b4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d002      	beq.n	800e6c2 <pbuf_cat+0x16>
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d107      	bne.n	800e6d2 <pbuf_cat+0x26>
 800e6c2:	4b20      	ldr	r3, [pc, #128]	; (800e744 <pbuf_cat+0x98>)
 800e6c4:	f240 3259 	movw	r2, #857	; 0x359
 800e6c8:	491f      	ldr	r1, [pc, #124]	; (800e748 <pbuf_cat+0x9c>)
 800e6ca:	4820      	ldr	r0, [pc, #128]	; (800e74c <pbuf_cat+0xa0>)
 800e6cc:	f00a febe 	bl	801944c <iprintf>
 800e6d0:	e034      	b.n	800e73c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	60fb      	str	r3, [r7, #12]
 800e6d6:	e00a      	b.n	800e6ee <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	891a      	ldrh	r2, [r3, #8]
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	891b      	ldrh	r3, [r3, #8]
 800e6e0:	4413      	add	r3, r2
 800e6e2:	b29a      	uxth	r2, r3
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	60fb      	str	r3, [r7, #12]
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d1f0      	bne.n	800e6d8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	891a      	ldrh	r2, [r3, #8]
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	895b      	ldrh	r3, [r3, #10]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d006      	beq.n	800e710 <pbuf_cat+0x64>
 800e702:	4b10      	ldr	r3, [pc, #64]	; (800e744 <pbuf_cat+0x98>)
 800e704:	f240 3262 	movw	r2, #866	; 0x362
 800e708:	4911      	ldr	r1, [pc, #68]	; (800e750 <pbuf_cat+0xa4>)
 800e70a:	4810      	ldr	r0, [pc, #64]	; (800e74c <pbuf_cat+0xa0>)
 800e70c:	f00a fe9e 	bl	801944c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d006      	beq.n	800e726 <pbuf_cat+0x7a>
 800e718:	4b0a      	ldr	r3, [pc, #40]	; (800e744 <pbuf_cat+0x98>)
 800e71a:	f240 3263 	movw	r2, #867	; 0x363
 800e71e:	490d      	ldr	r1, [pc, #52]	; (800e754 <pbuf_cat+0xa8>)
 800e720:	480a      	ldr	r0, [pc, #40]	; (800e74c <pbuf_cat+0xa0>)
 800e722:	f00a fe93 	bl	801944c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	891a      	ldrh	r2, [r3, #8]
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	891b      	ldrh	r3, [r3, #8]
 800e72e:	4413      	add	r3, r2
 800e730:	b29a      	uxth	r2, r3
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	683a      	ldr	r2, [r7, #0]
 800e73a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e73c:	3710      	adds	r7, #16
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}
 800e742:	bf00      	nop
 800e744:	0801b4f0 	.word	0x0801b4f0
 800e748:	0801b6e4 	.word	0x0801b6e4
 800e74c:	0801b550 	.word	0x0801b550
 800e750:	0801b71c 	.word	0x0801b71c
 800e754:	0801b74c 	.word	0x0801b74c

0800e758 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b082      	sub	sp, #8
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800e762:	6839      	ldr	r1, [r7, #0]
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f7ff ffa1 	bl	800e6ac <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800e76a:	6838      	ldr	r0, [r7, #0]
 800e76c:	f7ff ff7c 	bl	800e668 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800e770:	bf00      	nop
 800e772:	3708      	adds	r7, #8
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}

0800e778 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b086      	sub	sp, #24
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
 800e780:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e782:	2300      	movs	r3, #0
 800e784:	617b      	str	r3, [r7, #20]
 800e786:	2300      	movs	r3, #0
 800e788:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d008      	beq.n	800e7a2 <pbuf_copy+0x2a>
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d005      	beq.n	800e7a2 <pbuf_copy+0x2a>
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	891a      	ldrh	r2, [r3, #8]
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	891b      	ldrh	r3, [r3, #8]
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	d209      	bcs.n	800e7b6 <pbuf_copy+0x3e>
 800e7a2:	4b57      	ldr	r3, [pc, #348]	; (800e900 <pbuf_copy+0x188>)
 800e7a4:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e7a8:	4956      	ldr	r1, [pc, #344]	; (800e904 <pbuf_copy+0x18c>)
 800e7aa:	4857      	ldr	r0, [pc, #348]	; (800e908 <pbuf_copy+0x190>)
 800e7ac:	f00a fe4e 	bl	801944c <iprintf>
 800e7b0:	f06f 030f 	mvn.w	r3, #15
 800e7b4:	e09f      	b.n	800e8f6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	895b      	ldrh	r3, [r3, #10]
 800e7ba:	461a      	mov	r2, r3
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	1ad2      	subs	r2, r2, r3
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	895b      	ldrh	r3, [r3, #10]
 800e7c4:	4619      	mov	r1, r3
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	1acb      	subs	r3, r1, r3
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d306      	bcc.n	800e7dc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	895b      	ldrh	r3, [r3, #10]
 800e7d2:	461a      	mov	r2, r3
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	1ad3      	subs	r3, r2, r3
 800e7d8:	60fb      	str	r3, [r7, #12]
 800e7da:	e005      	b.n	800e7e8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	895b      	ldrh	r3, [r3, #10]
 800e7e0:	461a      	mov	r2, r3
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	1ad3      	subs	r3, r2, r3
 800e7e6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	685a      	ldr	r2, [r3, #4]
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	18d0      	adds	r0, r2, r3
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	685a      	ldr	r2, [r3, #4]
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	4413      	add	r3, r2
 800e7f8:	68fa      	ldr	r2, [r7, #12]
 800e7fa:	4619      	mov	r1, r3
 800e7fc:	f00a fd4c 	bl	8019298 <memcpy>
    offset_to += len;
 800e800:	697a      	ldr	r2, [r7, #20]
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	4413      	add	r3, r2
 800e806:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e808:	693a      	ldr	r2, [r7, #16]
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	4413      	add	r3, r2
 800e80e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	895b      	ldrh	r3, [r3, #10]
 800e814:	461a      	mov	r2, r3
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	4293      	cmp	r3, r2
 800e81a:	d906      	bls.n	800e82a <pbuf_copy+0xb2>
 800e81c:	4b38      	ldr	r3, [pc, #224]	; (800e900 <pbuf_copy+0x188>)
 800e81e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e822:	493a      	ldr	r1, [pc, #232]	; (800e90c <pbuf_copy+0x194>)
 800e824:	4838      	ldr	r0, [pc, #224]	; (800e908 <pbuf_copy+0x190>)
 800e826:	f00a fe11 	bl	801944c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	895b      	ldrh	r3, [r3, #10]
 800e82e:	461a      	mov	r2, r3
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	4293      	cmp	r3, r2
 800e834:	d906      	bls.n	800e844 <pbuf_copy+0xcc>
 800e836:	4b32      	ldr	r3, [pc, #200]	; (800e900 <pbuf_copy+0x188>)
 800e838:	f240 32da 	movw	r2, #986	; 0x3da
 800e83c:	4934      	ldr	r1, [pc, #208]	; (800e910 <pbuf_copy+0x198>)
 800e83e:	4832      	ldr	r0, [pc, #200]	; (800e908 <pbuf_copy+0x190>)
 800e840:	f00a fe04 	bl	801944c <iprintf>
    if (offset_from >= p_from->len) {
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	895b      	ldrh	r3, [r3, #10]
 800e848:	461a      	mov	r2, r3
 800e84a:	693b      	ldr	r3, [r7, #16]
 800e84c:	4293      	cmp	r3, r2
 800e84e:	d304      	bcc.n	800e85a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e850:	2300      	movs	r3, #0
 800e852:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	895b      	ldrh	r3, [r3, #10]
 800e85e:	461a      	mov	r2, r3
 800e860:	697b      	ldr	r3, [r7, #20]
 800e862:	4293      	cmp	r3, r2
 800e864:	d114      	bne.n	800e890 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e866:	2300      	movs	r3, #0
 800e868:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d10c      	bne.n	800e890 <pbuf_copy+0x118>
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d009      	beq.n	800e890 <pbuf_copy+0x118>
 800e87c:	4b20      	ldr	r3, [pc, #128]	; (800e900 <pbuf_copy+0x188>)
 800e87e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e882:	4924      	ldr	r1, [pc, #144]	; (800e914 <pbuf_copy+0x19c>)
 800e884:	4820      	ldr	r0, [pc, #128]	; (800e908 <pbuf_copy+0x190>)
 800e886:	f00a fde1 	bl	801944c <iprintf>
 800e88a:	f06f 030f 	mvn.w	r3, #15
 800e88e:	e032      	b.n	800e8f6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d013      	beq.n	800e8be <pbuf_copy+0x146>
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	895a      	ldrh	r2, [r3, #10]
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	891b      	ldrh	r3, [r3, #8]
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	d10d      	bne.n	800e8be <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d009      	beq.n	800e8be <pbuf_copy+0x146>
 800e8aa:	4b15      	ldr	r3, [pc, #84]	; (800e900 <pbuf_copy+0x188>)
 800e8ac:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e8b0:	4919      	ldr	r1, [pc, #100]	; (800e918 <pbuf_copy+0x1a0>)
 800e8b2:	4815      	ldr	r0, [pc, #84]	; (800e908 <pbuf_copy+0x190>)
 800e8b4:	f00a fdca 	bl	801944c <iprintf>
 800e8b8:	f06f 0305 	mvn.w	r3, #5
 800e8bc:	e01b      	b.n	800e8f6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d013      	beq.n	800e8ec <pbuf_copy+0x174>
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	895a      	ldrh	r2, [r3, #10]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	891b      	ldrh	r3, [r3, #8]
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d10d      	bne.n	800e8ec <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d009      	beq.n	800e8ec <pbuf_copy+0x174>
 800e8d8:	4b09      	ldr	r3, [pc, #36]	; (800e900 <pbuf_copy+0x188>)
 800e8da:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e8de:	490e      	ldr	r1, [pc, #56]	; (800e918 <pbuf_copy+0x1a0>)
 800e8e0:	4809      	ldr	r0, [pc, #36]	; (800e908 <pbuf_copy+0x190>)
 800e8e2:	f00a fdb3 	bl	801944c <iprintf>
 800e8e6:	f06f 0305 	mvn.w	r3, #5
 800e8ea:	e004      	b.n	800e8f6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	f47f af61 	bne.w	800e7b6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e8f4:	2300      	movs	r3, #0
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3718      	adds	r7, #24
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
 800e8fe:	bf00      	nop
 800e900:	0801b4f0 	.word	0x0801b4f0
 800e904:	0801b798 	.word	0x0801b798
 800e908:	0801b550 	.word	0x0801b550
 800e90c:	0801b7c8 	.word	0x0801b7c8
 800e910:	0801b7e0 	.word	0x0801b7e0
 800e914:	0801b7fc 	.word	0x0801b7fc
 800e918:	0801b80c 	.word	0x0801b80c

0800e91c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b088      	sub	sp, #32
 800e920:	af00      	add	r7, sp, #0
 800e922:	60f8      	str	r0, [r7, #12]
 800e924:	60b9      	str	r1, [r7, #8]
 800e926:	4611      	mov	r1, r2
 800e928:	461a      	mov	r2, r3
 800e92a:	460b      	mov	r3, r1
 800e92c:	80fb      	strh	r3, [r7, #6]
 800e92e:	4613      	mov	r3, r2
 800e930:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e932:	2300      	movs	r3, #0
 800e934:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e936:	2300      	movs	r3, #0
 800e938:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d108      	bne.n	800e952 <pbuf_copy_partial+0x36>
 800e940:	4b2b      	ldr	r3, [pc, #172]	; (800e9f0 <pbuf_copy_partial+0xd4>)
 800e942:	f240 420a 	movw	r2, #1034	; 0x40a
 800e946:	492b      	ldr	r1, [pc, #172]	; (800e9f4 <pbuf_copy_partial+0xd8>)
 800e948:	482b      	ldr	r0, [pc, #172]	; (800e9f8 <pbuf_copy_partial+0xdc>)
 800e94a:	f00a fd7f 	bl	801944c <iprintf>
 800e94e:	2300      	movs	r3, #0
 800e950:	e04a      	b.n	800e9e8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d108      	bne.n	800e96a <pbuf_copy_partial+0x4e>
 800e958:	4b25      	ldr	r3, [pc, #148]	; (800e9f0 <pbuf_copy_partial+0xd4>)
 800e95a:	f240 420b 	movw	r2, #1035	; 0x40b
 800e95e:	4927      	ldr	r1, [pc, #156]	; (800e9fc <pbuf_copy_partial+0xe0>)
 800e960:	4825      	ldr	r0, [pc, #148]	; (800e9f8 <pbuf_copy_partial+0xdc>)
 800e962:	f00a fd73 	bl	801944c <iprintf>
 800e966:	2300      	movs	r3, #0
 800e968:	e03e      	b.n	800e9e8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	61fb      	str	r3, [r7, #28]
 800e96e:	e034      	b.n	800e9da <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e970:	88bb      	ldrh	r3, [r7, #4]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d00a      	beq.n	800e98c <pbuf_copy_partial+0x70>
 800e976:	69fb      	ldr	r3, [r7, #28]
 800e978:	895b      	ldrh	r3, [r3, #10]
 800e97a:	88ba      	ldrh	r2, [r7, #4]
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d305      	bcc.n	800e98c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e980:	69fb      	ldr	r3, [r7, #28]
 800e982:	895b      	ldrh	r3, [r3, #10]
 800e984:	88ba      	ldrh	r2, [r7, #4]
 800e986:	1ad3      	subs	r3, r2, r3
 800e988:	80bb      	strh	r3, [r7, #4]
 800e98a:	e023      	b.n	800e9d4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e98c:	69fb      	ldr	r3, [r7, #28]
 800e98e:	895a      	ldrh	r2, [r3, #10]
 800e990:	88bb      	ldrh	r3, [r7, #4]
 800e992:	1ad3      	subs	r3, r2, r3
 800e994:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e996:	8b3a      	ldrh	r2, [r7, #24]
 800e998:	88fb      	ldrh	r3, [r7, #6]
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d901      	bls.n	800e9a2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e99e:	88fb      	ldrh	r3, [r7, #6]
 800e9a0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e9a2:	8b7b      	ldrh	r3, [r7, #26]
 800e9a4:	68ba      	ldr	r2, [r7, #8]
 800e9a6:	18d0      	adds	r0, r2, r3
 800e9a8:	69fb      	ldr	r3, [r7, #28]
 800e9aa:	685a      	ldr	r2, [r3, #4]
 800e9ac:	88bb      	ldrh	r3, [r7, #4]
 800e9ae:	4413      	add	r3, r2
 800e9b0:	8b3a      	ldrh	r2, [r7, #24]
 800e9b2:	4619      	mov	r1, r3
 800e9b4:	f00a fc70 	bl	8019298 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e9b8:	8afa      	ldrh	r2, [r7, #22]
 800e9ba:	8b3b      	ldrh	r3, [r7, #24]
 800e9bc:	4413      	add	r3, r2
 800e9be:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e9c0:	8b7a      	ldrh	r2, [r7, #26]
 800e9c2:	8b3b      	ldrh	r3, [r7, #24]
 800e9c4:	4413      	add	r3, r2
 800e9c6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e9c8:	88fa      	ldrh	r2, [r7, #6]
 800e9ca:	8b3b      	ldrh	r3, [r7, #24]
 800e9cc:	1ad3      	subs	r3, r2, r3
 800e9ce:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e9d4:	69fb      	ldr	r3, [r7, #28]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	61fb      	str	r3, [r7, #28]
 800e9da:	88fb      	ldrh	r3, [r7, #6]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d002      	beq.n	800e9e6 <pbuf_copy_partial+0xca>
 800e9e0:	69fb      	ldr	r3, [r7, #28]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d1c4      	bne.n	800e970 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e9e6:	8afb      	ldrh	r3, [r7, #22]
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	3720      	adds	r7, #32
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd80      	pop	{r7, pc}
 800e9f0:	0801b4f0 	.word	0x0801b4f0
 800e9f4:	0801b838 	.word	0x0801b838
 800e9f8:	0801b550 	.word	0x0801b550
 800e9fc:	0801b858 	.word	0x0801b858

0800ea00 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b088      	sub	sp, #32
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	60b9      	str	r1, [r7, #8]
 800ea0a:	4613      	mov	r3, r2
 800ea0c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800ea0e:	88fb      	ldrh	r3, [r7, #6]
 800ea10:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800ea12:	2300      	movs	r3, #0
 800ea14:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d109      	bne.n	800ea30 <pbuf_take+0x30>
 800ea1c:	4b3a      	ldr	r3, [pc, #232]	; (800eb08 <pbuf_take+0x108>)
 800ea1e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800ea22:	493a      	ldr	r1, [pc, #232]	; (800eb0c <pbuf_take+0x10c>)
 800ea24:	483a      	ldr	r0, [pc, #232]	; (800eb10 <pbuf_take+0x110>)
 800ea26:	f00a fd11 	bl	801944c <iprintf>
 800ea2a:	f06f 030f 	mvn.w	r3, #15
 800ea2e:	e067      	b.n	800eb00 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d109      	bne.n	800ea4a <pbuf_take+0x4a>
 800ea36:	4b34      	ldr	r3, [pc, #208]	; (800eb08 <pbuf_take+0x108>)
 800ea38:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800ea3c:	4935      	ldr	r1, [pc, #212]	; (800eb14 <pbuf_take+0x114>)
 800ea3e:	4834      	ldr	r0, [pc, #208]	; (800eb10 <pbuf_take+0x110>)
 800ea40:	f00a fd04 	bl	801944c <iprintf>
 800ea44:	f06f 030f 	mvn.w	r3, #15
 800ea48:	e05a      	b.n	800eb00 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	891b      	ldrh	r3, [r3, #8]
 800ea4e:	88fa      	ldrh	r2, [r7, #6]
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d909      	bls.n	800ea68 <pbuf_take+0x68>
 800ea54:	4b2c      	ldr	r3, [pc, #176]	; (800eb08 <pbuf_take+0x108>)
 800ea56:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800ea5a:	492f      	ldr	r1, [pc, #188]	; (800eb18 <pbuf_take+0x118>)
 800ea5c:	482c      	ldr	r0, [pc, #176]	; (800eb10 <pbuf_take+0x110>)
 800ea5e:	f00a fcf5 	bl	801944c <iprintf>
 800ea62:	f04f 33ff 	mov.w	r3, #4294967295
 800ea66:	e04b      	b.n	800eb00 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d007      	beq.n	800ea7e <pbuf_take+0x7e>
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d004      	beq.n	800ea7e <pbuf_take+0x7e>
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	891b      	ldrh	r3, [r3, #8]
 800ea78:	88fa      	ldrh	r2, [r7, #6]
 800ea7a:	429a      	cmp	r2, r3
 800ea7c:	d902      	bls.n	800ea84 <pbuf_take+0x84>
    return ERR_ARG;
 800ea7e:	f06f 030f 	mvn.w	r3, #15
 800ea82:	e03d      	b.n	800eb00 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	61fb      	str	r3, [r7, #28]
 800ea88:	e028      	b.n	800eadc <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800ea8a:	69fb      	ldr	r3, [r7, #28]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d106      	bne.n	800ea9e <pbuf_take+0x9e>
 800ea90:	4b1d      	ldr	r3, [pc, #116]	; (800eb08 <pbuf_take+0x108>)
 800ea92:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800ea96:	4921      	ldr	r1, [pc, #132]	; (800eb1c <pbuf_take+0x11c>)
 800ea98:	481d      	ldr	r0, [pc, #116]	; (800eb10 <pbuf_take+0x110>)
 800ea9a:	f00a fcd7 	bl	801944c <iprintf>
    buf_copy_len = total_copy_len;
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800eaa2:	69fb      	ldr	r3, [r7, #28]
 800eaa4:	895b      	ldrh	r3, [r3, #10]
 800eaa6:	461a      	mov	r2, r3
 800eaa8:	69bb      	ldr	r3, [r7, #24]
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	d902      	bls.n	800eab4 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800eaae:	69fb      	ldr	r3, [r7, #28]
 800eab0:	895b      	ldrh	r3, [r3, #10]
 800eab2:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800eab4:	69fb      	ldr	r3, [r7, #28]
 800eab6:	6858      	ldr	r0, [r3, #4]
 800eab8:	68ba      	ldr	r2, [r7, #8]
 800eaba:	693b      	ldr	r3, [r7, #16]
 800eabc:	4413      	add	r3, r2
 800eabe:	69ba      	ldr	r2, [r7, #24]
 800eac0:	4619      	mov	r1, r3
 800eac2:	f00a fbe9 	bl	8019298 <memcpy>
    total_copy_len -= buf_copy_len;
 800eac6:	697a      	ldr	r2, [r7, #20]
 800eac8:	69bb      	ldr	r3, [r7, #24]
 800eaca:	1ad3      	subs	r3, r2, r3
 800eacc:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800eace:	693a      	ldr	r2, [r7, #16]
 800ead0:	69bb      	ldr	r3, [r7, #24]
 800ead2:	4413      	add	r3, r2
 800ead4:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800ead6:	69fb      	ldr	r3, [r7, #28]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	61fb      	str	r3, [r7, #28]
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d1d3      	bne.n	800ea8a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d103      	bne.n	800eaf0 <pbuf_take+0xf0>
 800eae8:	88fb      	ldrh	r3, [r7, #6]
 800eaea:	693a      	ldr	r2, [r7, #16]
 800eaec:	429a      	cmp	r2, r3
 800eaee:	d006      	beq.n	800eafe <pbuf_take+0xfe>
 800eaf0:	4b05      	ldr	r3, [pc, #20]	; (800eb08 <pbuf_take+0x108>)
 800eaf2:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800eaf6:	490a      	ldr	r1, [pc, #40]	; (800eb20 <pbuf_take+0x120>)
 800eaf8:	4805      	ldr	r0, [pc, #20]	; (800eb10 <pbuf_take+0x110>)
 800eafa:	f00a fca7 	bl	801944c <iprintf>
  return ERR_OK;
 800eafe:	2300      	movs	r3, #0
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3720      	adds	r7, #32
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	0801b4f0 	.word	0x0801b4f0
 800eb0c:	0801b8c8 	.word	0x0801b8c8
 800eb10:	0801b550 	.word	0x0801b550
 800eb14:	0801b8e0 	.word	0x0801b8e0
 800eb18:	0801b8fc 	.word	0x0801b8fc
 800eb1c:	0801b91c 	.word	0x0801b91c
 800eb20:	0801b934 	.word	0x0801b934

0800eb24 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b084      	sub	sp, #16
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	603a      	str	r2, [r7, #0]
 800eb2e:	71fb      	strb	r3, [r7, #7]
 800eb30:	460b      	mov	r3, r1
 800eb32:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	8919      	ldrh	r1, [r3, #8]
 800eb38:	88ba      	ldrh	r2, [r7, #4]
 800eb3a:	79fb      	ldrb	r3, [r7, #7]
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f7ff fa0f 	bl	800df60 <pbuf_alloc>
 800eb42:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d101      	bne.n	800eb4e <pbuf_clone+0x2a>
    return NULL;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	e011      	b.n	800eb72 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800eb4e:	6839      	ldr	r1, [r7, #0]
 800eb50:	68f8      	ldr	r0, [r7, #12]
 800eb52:	f7ff fe11 	bl	800e778 <pbuf_copy>
 800eb56:	4603      	mov	r3, r0
 800eb58:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800eb5a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d006      	beq.n	800eb70 <pbuf_clone+0x4c>
 800eb62:	4b06      	ldr	r3, [pc, #24]	; (800eb7c <pbuf_clone+0x58>)
 800eb64:	f240 5224 	movw	r2, #1316	; 0x524
 800eb68:	4905      	ldr	r1, [pc, #20]	; (800eb80 <pbuf_clone+0x5c>)
 800eb6a:	4806      	ldr	r0, [pc, #24]	; (800eb84 <pbuf_clone+0x60>)
 800eb6c:	f00a fc6e 	bl	801944c <iprintf>
  return q;
 800eb70:	68fb      	ldr	r3, [r7, #12]
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	3710      	adds	r7, #16
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}
 800eb7a:	bf00      	nop
 800eb7c:	0801b4f0 	.word	0x0801b4f0
 800eb80:	0801b964 	.word	0x0801b964
 800eb84:	0801b550 	.word	0x0801b550

0800eb88 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800eb8c:	f00a fcec 	bl	8019568 <rand>
 800eb90:	4603      	mov	r3, r0
 800eb92:	b29b      	uxth	r3, r3
 800eb94:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800eb98:	b29b      	uxth	r3, r3
 800eb9a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800eb9e:	b29a      	uxth	r2, r3
 800eba0:	4b01      	ldr	r3, [pc, #4]	; (800eba8 <tcp_init+0x20>)
 800eba2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800eba4:	bf00      	nop
 800eba6:	bd80      	pop	{r7, pc}
 800eba8:	20000062 	.word	0x20000062

0800ebac <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b082      	sub	sp, #8
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	7d1b      	ldrb	r3, [r3, #20]
 800ebb8:	2b01      	cmp	r3, #1
 800ebba:	d105      	bne.n	800ebc8 <tcp_free+0x1c>
 800ebbc:	4b06      	ldr	r3, [pc, #24]	; (800ebd8 <tcp_free+0x2c>)
 800ebbe:	22d4      	movs	r2, #212	; 0xd4
 800ebc0:	4906      	ldr	r1, [pc, #24]	; (800ebdc <tcp_free+0x30>)
 800ebc2:	4807      	ldr	r0, [pc, #28]	; (800ebe0 <tcp_free+0x34>)
 800ebc4:	f00a fc42 	bl	801944c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ebc8:	6879      	ldr	r1, [r7, #4]
 800ebca:	2001      	movs	r0, #1
 800ebcc:	f7fe fe92 	bl	800d8f4 <memp_free>
}
 800ebd0:	bf00      	nop
 800ebd2:	3708      	adds	r7, #8
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}
 800ebd8:	0801b9f0 	.word	0x0801b9f0
 800ebdc:	0801ba20 	.word	0x0801ba20
 800ebe0:	0801ba34 	.word	0x0801ba34

0800ebe4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b082      	sub	sp, #8
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	7d1b      	ldrb	r3, [r3, #20]
 800ebf0:	2b01      	cmp	r3, #1
 800ebf2:	d105      	bne.n	800ec00 <tcp_free_listen+0x1c>
 800ebf4:	4b06      	ldr	r3, [pc, #24]	; (800ec10 <tcp_free_listen+0x2c>)
 800ebf6:	22df      	movs	r2, #223	; 0xdf
 800ebf8:	4906      	ldr	r1, [pc, #24]	; (800ec14 <tcp_free_listen+0x30>)
 800ebfa:	4807      	ldr	r0, [pc, #28]	; (800ec18 <tcp_free_listen+0x34>)
 800ebfc:	f00a fc26 	bl	801944c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ec00:	6879      	ldr	r1, [r7, #4]
 800ec02:	2002      	movs	r0, #2
 800ec04:	f7fe fe76 	bl	800d8f4 <memp_free>
}
 800ec08:	bf00      	nop
 800ec0a:	3708      	adds	r7, #8
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}
 800ec10:	0801b9f0 	.word	0x0801b9f0
 800ec14:	0801ba5c 	.word	0x0801ba5c
 800ec18:	0801ba34 	.word	0x0801ba34

0800ec1c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ec20:	f000 fea2 	bl	800f968 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ec24:	4b07      	ldr	r3, [pc, #28]	; (800ec44 <tcp_tmr+0x28>)
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	3301      	adds	r3, #1
 800ec2a:	b2da      	uxtb	r2, r3
 800ec2c:	4b05      	ldr	r3, [pc, #20]	; (800ec44 <tcp_tmr+0x28>)
 800ec2e:	701a      	strb	r2, [r3, #0]
 800ec30:	4b04      	ldr	r3, [pc, #16]	; (800ec44 <tcp_tmr+0x28>)
 800ec32:	781b      	ldrb	r3, [r3, #0]
 800ec34:	f003 0301 	and.w	r3, r3, #1
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d001      	beq.n	800ec40 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ec3c:	f000 fb54 	bl	800f2e8 <tcp_slowtmr>
  }
}
 800ec40:	bf00      	nop
 800ec42:	bd80      	pop	{r7, pc}
 800ec44:	2000052d 	.word	0x2000052d

0800ec48 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b084      	sub	sp, #16
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
 800ec50:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d105      	bne.n	800ec64 <tcp_remove_listener+0x1c>
 800ec58:	4b0d      	ldr	r3, [pc, #52]	; (800ec90 <tcp_remove_listener+0x48>)
 800ec5a:	22ff      	movs	r2, #255	; 0xff
 800ec5c:	490d      	ldr	r1, [pc, #52]	; (800ec94 <tcp_remove_listener+0x4c>)
 800ec5e:	480e      	ldr	r0, [pc, #56]	; (800ec98 <tcp_remove_listener+0x50>)
 800ec60:	f00a fbf4 	bl	801944c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	60fb      	str	r3, [r7, #12]
 800ec68:	e00a      	b.n	800ec80 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec6e:	683a      	ldr	r2, [r7, #0]
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d102      	bne.n	800ec7a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2200      	movs	r2, #0
 800ec78:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	68db      	ldr	r3, [r3, #12]
 800ec7e:	60fb      	str	r3, [r7, #12]
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d1f1      	bne.n	800ec6a <tcp_remove_listener+0x22>
    }
  }
}
 800ec86:	bf00      	nop
 800ec88:	bf00      	nop
 800ec8a:	3710      	adds	r7, #16
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}
 800ec90:	0801b9f0 	.word	0x0801b9f0
 800ec94:	0801ba78 	.word	0x0801ba78
 800ec98:	0801ba34 	.word	0x0801ba34

0800ec9c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b084      	sub	sp, #16
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d106      	bne.n	800ecb8 <tcp_listen_closed+0x1c>
 800ecaa:	4b14      	ldr	r3, [pc, #80]	; (800ecfc <tcp_listen_closed+0x60>)
 800ecac:	f240 1211 	movw	r2, #273	; 0x111
 800ecb0:	4913      	ldr	r1, [pc, #76]	; (800ed00 <tcp_listen_closed+0x64>)
 800ecb2:	4814      	ldr	r0, [pc, #80]	; (800ed04 <tcp_listen_closed+0x68>)
 800ecb4:	f00a fbca 	bl	801944c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	7d1b      	ldrb	r3, [r3, #20]
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d006      	beq.n	800ecce <tcp_listen_closed+0x32>
 800ecc0:	4b0e      	ldr	r3, [pc, #56]	; (800ecfc <tcp_listen_closed+0x60>)
 800ecc2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ecc6:	4910      	ldr	r1, [pc, #64]	; (800ed08 <tcp_listen_closed+0x6c>)
 800ecc8:	480e      	ldr	r0, [pc, #56]	; (800ed04 <tcp_listen_closed+0x68>)
 800ecca:	f00a fbbf 	bl	801944c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ecce:	2301      	movs	r3, #1
 800ecd0:	60fb      	str	r3, [r7, #12]
 800ecd2:	e00b      	b.n	800ecec <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ecd4:	4a0d      	ldr	r2, [pc, #52]	; (800ed0c <tcp_listen_closed+0x70>)
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	6879      	ldr	r1, [r7, #4]
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7ff ffb1 	bl	800ec48 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	3301      	adds	r3, #1
 800ecea:	60fb      	str	r3, [r7, #12]
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	2b03      	cmp	r3, #3
 800ecf0:	d9f0      	bls.n	800ecd4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ecf2:	bf00      	nop
 800ecf4:	bf00      	nop
 800ecf6:	3710      	adds	r7, #16
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}
 800ecfc:	0801b9f0 	.word	0x0801b9f0
 800ed00:	0801baa0 	.word	0x0801baa0
 800ed04:	0801ba34 	.word	0x0801ba34
 800ed08:	0801baac 	.word	0x0801baac
 800ed0c:	0801e0a4 	.word	0x0801e0a4

0800ed10 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ed10:	b5b0      	push	{r4, r5, r7, lr}
 800ed12:	b088      	sub	sp, #32
 800ed14:	af04      	add	r7, sp, #16
 800ed16:	6078      	str	r0, [r7, #4]
 800ed18:	460b      	mov	r3, r1
 800ed1a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d106      	bne.n	800ed30 <tcp_close_shutdown+0x20>
 800ed22:	4b63      	ldr	r3, [pc, #396]	; (800eeb0 <tcp_close_shutdown+0x1a0>)
 800ed24:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ed28:	4962      	ldr	r1, [pc, #392]	; (800eeb4 <tcp_close_shutdown+0x1a4>)
 800ed2a:	4863      	ldr	r0, [pc, #396]	; (800eeb8 <tcp_close_shutdown+0x1a8>)
 800ed2c:	f00a fb8e 	bl	801944c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ed30:	78fb      	ldrb	r3, [r7, #3]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d066      	beq.n	800ee04 <tcp_close_shutdown+0xf4>
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	7d1b      	ldrb	r3, [r3, #20]
 800ed3a:	2b04      	cmp	r3, #4
 800ed3c:	d003      	beq.n	800ed46 <tcp_close_shutdown+0x36>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	7d1b      	ldrb	r3, [r3, #20]
 800ed42:	2b07      	cmp	r3, #7
 800ed44:	d15e      	bne.n	800ee04 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d104      	bne.n	800ed58 <tcp_close_shutdown+0x48>
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed52:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ed56:	d055      	beq.n	800ee04 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	8b5b      	ldrh	r3, [r3, #26]
 800ed5c:	f003 0310 	and.w	r3, r3, #16
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d106      	bne.n	800ed72 <tcp_close_shutdown+0x62>
 800ed64:	4b52      	ldr	r3, [pc, #328]	; (800eeb0 <tcp_close_shutdown+0x1a0>)
 800ed66:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ed6a:	4954      	ldr	r1, [pc, #336]	; (800eebc <tcp_close_shutdown+0x1ac>)
 800ed6c:	4852      	ldr	r0, [pc, #328]	; (800eeb8 <tcp_close_shutdown+0x1a8>)
 800ed6e:	f00a fb6d 	bl	801944c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ed7a:	687d      	ldr	r5, [r7, #4]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	3304      	adds	r3, #4
 800ed80:	687a      	ldr	r2, [r7, #4]
 800ed82:	8ad2      	ldrh	r2, [r2, #22]
 800ed84:	6879      	ldr	r1, [r7, #4]
 800ed86:	8b09      	ldrh	r1, [r1, #24]
 800ed88:	9102      	str	r1, [sp, #8]
 800ed8a:	9201      	str	r2, [sp, #4]
 800ed8c:	9300      	str	r3, [sp, #0]
 800ed8e:	462b      	mov	r3, r5
 800ed90:	4622      	mov	r2, r4
 800ed92:	4601      	mov	r1, r0
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f004 fe8d 	bl	8013ab4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f001 f8c6 	bl	800ff2c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800eda0:	4b47      	ldr	r3, [pc, #284]	; (800eec0 <tcp_close_shutdown+0x1b0>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	687a      	ldr	r2, [r7, #4]
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d105      	bne.n	800edb6 <tcp_close_shutdown+0xa6>
 800edaa:	4b45      	ldr	r3, [pc, #276]	; (800eec0 <tcp_close_shutdown+0x1b0>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	68db      	ldr	r3, [r3, #12]
 800edb0:	4a43      	ldr	r2, [pc, #268]	; (800eec0 <tcp_close_shutdown+0x1b0>)
 800edb2:	6013      	str	r3, [r2, #0]
 800edb4:	e013      	b.n	800edde <tcp_close_shutdown+0xce>
 800edb6:	4b42      	ldr	r3, [pc, #264]	; (800eec0 <tcp_close_shutdown+0x1b0>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	60fb      	str	r3, [r7, #12]
 800edbc:	e00c      	b.n	800edd8 <tcp_close_shutdown+0xc8>
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	68db      	ldr	r3, [r3, #12]
 800edc2:	687a      	ldr	r2, [r7, #4]
 800edc4:	429a      	cmp	r2, r3
 800edc6:	d104      	bne.n	800edd2 <tcp_close_shutdown+0xc2>
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	68da      	ldr	r2, [r3, #12]
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	60da      	str	r2, [r3, #12]
 800edd0:	e005      	b.n	800edde <tcp_close_shutdown+0xce>
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	68db      	ldr	r3, [r3, #12]
 800edd6:	60fb      	str	r3, [r7, #12]
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d1ef      	bne.n	800edbe <tcp_close_shutdown+0xae>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2200      	movs	r2, #0
 800ede2:	60da      	str	r2, [r3, #12]
 800ede4:	4b37      	ldr	r3, [pc, #220]	; (800eec4 <tcp_close_shutdown+0x1b4>)
 800ede6:	2201      	movs	r2, #1
 800ede8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800edea:	4b37      	ldr	r3, [pc, #220]	; (800eec8 <tcp_close_shutdown+0x1b8>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	687a      	ldr	r2, [r7, #4]
 800edf0:	429a      	cmp	r2, r3
 800edf2:	d102      	bne.n	800edfa <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800edf4:	f003 fd5a 	bl	80128ac <tcp_trigger_input_pcb_close>
 800edf8:	e002      	b.n	800ee00 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	f7ff fed6 	bl	800ebac <tcp_free>
      }
      return ERR_OK;
 800ee00:	2300      	movs	r3, #0
 800ee02:	e050      	b.n	800eea6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	7d1b      	ldrb	r3, [r3, #20]
 800ee08:	2b02      	cmp	r3, #2
 800ee0a:	d03b      	beq.n	800ee84 <tcp_close_shutdown+0x174>
 800ee0c:	2b02      	cmp	r3, #2
 800ee0e:	dc44      	bgt.n	800ee9a <tcp_close_shutdown+0x18a>
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d002      	beq.n	800ee1a <tcp_close_shutdown+0x10a>
 800ee14:	2b01      	cmp	r3, #1
 800ee16:	d02a      	beq.n	800ee6e <tcp_close_shutdown+0x15e>
 800ee18:	e03f      	b.n	800ee9a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	8adb      	ldrh	r3, [r3, #22]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d021      	beq.n	800ee66 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ee22:	4b2a      	ldr	r3, [pc, #168]	; (800eecc <tcp_close_shutdown+0x1bc>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	687a      	ldr	r2, [r7, #4]
 800ee28:	429a      	cmp	r2, r3
 800ee2a:	d105      	bne.n	800ee38 <tcp_close_shutdown+0x128>
 800ee2c:	4b27      	ldr	r3, [pc, #156]	; (800eecc <tcp_close_shutdown+0x1bc>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	68db      	ldr	r3, [r3, #12]
 800ee32:	4a26      	ldr	r2, [pc, #152]	; (800eecc <tcp_close_shutdown+0x1bc>)
 800ee34:	6013      	str	r3, [r2, #0]
 800ee36:	e013      	b.n	800ee60 <tcp_close_shutdown+0x150>
 800ee38:	4b24      	ldr	r3, [pc, #144]	; (800eecc <tcp_close_shutdown+0x1bc>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	60bb      	str	r3, [r7, #8]
 800ee3e:	e00c      	b.n	800ee5a <tcp_close_shutdown+0x14a>
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	68db      	ldr	r3, [r3, #12]
 800ee44:	687a      	ldr	r2, [r7, #4]
 800ee46:	429a      	cmp	r2, r3
 800ee48:	d104      	bne.n	800ee54 <tcp_close_shutdown+0x144>
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	68da      	ldr	r2, [r3, #12]
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	60da      	str	r2, [r3, #12]
 800ee52:	e005      	b.n	800ee60 <tcp_close_shutdown+0x150>
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	68db      	ldr	r3, [r3, #12]
 800ee58:	60bb      	str	r3, [r7, #8]
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d1ef      	bne.n	800ee40 <tcp_close_shutdown+0x130>
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2200      	movs	r2, #0
 800ee64:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f7ff fea0 	bl	800ebac <tcp_free>
      break;
 800ee6c:	e01a      	b.n	800eea4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f7ff ff14 	bl	800ec9c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ee74:	6879      	ldr	r1, [r7, #4]
 800ee76:	4816      	ldr	r0, [pc, #88]	; (800eed0 <tcp_close_shutdown+0x1c0>)
 800ee78:	f001 f8a8 	bl	800ffcc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	f7ff feb1 	bl	800ebe4 <tcp_free_listen>
      break;
 800ee82:	e00f      	b.n	800eea4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ee84:	6879      	ldr	r1, [r7, #4]
 800ee86:	480e      	ldr	r0, [pc, #56]	; (800eec0 <tcp_close_shutdown+0x1b0>)
 800ee88:	f001 f8a0 	bl	800ffcc <tcp_pcb_remove>
 800ee8c:	4b0d      	ldr	r3, [pc, #52]	; (800eec4 <tcp_close_shutdown+0x1b4>)
 800ee8e:	2201      	movs	r2, #1
 800ee90:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f7ff fe8a 	bl	800ebac <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ee98:	e004      	b.n	800eea4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f000 f81a 	bl	800eed4 <tcp_close_shutdown_fin>
 800eea0:	4603      	mov	r3, r0
 800eea2:	e000      	b.n	800eea6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800eea4:	2300      	movs	r3, #0
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3710      	adds	r7, #16
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bdb0      	pop	{r4, r5, r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	0801b9f0 	.word	0x0801b9f0
 800eeb4:	0801bac4 	.word	0x0801bac4
 800eeb8:	0801ba34 	.word	0x0801ba34
 800eebc:	0801bae4 	.word	0x0801bae4
 800eec0:	20006d00 	.word	0x20006d00
 800eec4:	20006cfc 	.word	0x20006cfc
 800eec8:	20006d14 	.word	0x20006d14
 800eecc:	20006d0c 	.word	0x20006d0c
 800eed0:	20006d08 	.word	0x20006d08

0800eed4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b084      	sub	sp, #16
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d106      	bne.n	800eef0 <tcp_close_shutdown_fin+0x1c>
 800eee2:	4b2e      	ldr	r3, [pc, #184]	; (800ef9c <tcp_close_shutdown_fin+0xc8>)
 800eee4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800eee8:	492d      	ldr	r1, [pc, #180]	; (800efa0 <tcp_close_shutdown_fin+0xcc>)
 800eeea:	482e      	ldr	r0, [pc, #184]	; (800efa4 <tcp_close_shutdown_fin+0xd0>)
 800eeec:	f00a faae 	bl	801944c <iprintf>

  switch (pcb->state) {
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	7d1b      	ldrb	r3, [r3, #20]
 800eef4:	2b07      	cmp	r3, #7
 800eef6:	d020      	beq.n	800ef3a <tcp_close_shutdown_fin+0x66>
 800eef8:	2b07      	cmp	r3, #7
 800eefa:	dc2b      	bgt.n	800ef54 <tcp_close_shutdown_fin+0x80>
 800eefc:	2b03      	cmp	r3, #3
 800eefe:	d002      	beq.n	800ef06 <tcp_close_shutdown_fin+0x32>
 800ef00:	2b04      	cmp	r3, #4
 800ef02:	d00d      	beq.n	800ef20 <tcp_close_shutdown_fin+0x4c>
 800ef04:	e026      	b.n	800ef54 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f003 fee2 	bl	8012cd0 <tcp_send_fin>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ef10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d11f      	bne.n	800ef58 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2205      	movs	r2, #5
 800ef1c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ef1e:	e01b      	b.n	800ef58 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ef20:	6878      	ldr	r0, [r7, #4]
 800ef22:	f003 fed5 	bl	8012cd0 <tcp_send_fin>
 800ef26:	4603      	mov	r3, r0
 800ef28:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ef2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d114      	bne.n	800ef5c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2205      	movs	r2, #5
 800ef36:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ef38:	e010      	b.n	800ef5c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	f003 fec8 	bl	8012cd0 <tcp_send_fin>
 800ef40:	4603      	mov	r3, r0
 800ef42:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ef44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d109      	bne.n	800ef60 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2209      	movs	r2, #9
 800ef50:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ef52:	e005      	b.n	800ef60 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ef54:	2300      	movs	r3, #0
 800ef56:	e01c      	b.n	800ef92 <tcp_close_shutdown_fin+0xbe>
      break;
 800ef58:	bf00      	nop
 800ef5a:	e002      	b.n	800ef62 <tcp_close_shutdown_fin+0x8e>
      break;
 800ef5c:	bf00      	nop
 800ef5e:	e000      	b.n	800ef62 <tcp_close_shutdown_fin+0x8e>
      break;
 800ef60:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ef62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d103      	bne.n	800ef72 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	f003 ffee 	bl	8012f4c <tcp_output>
 800ef70:	e00d      	b.n	800ef8e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ef72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef7a:	d108      	bne.n	800ef8e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	8b5b      	ldrh	r3, [r3, #26]
 800ef80:	f043 0308 	orr.w	r3, r3, #8
 800ef84:	b29a      	uxth	r2, r3
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	e001      	b.n	800ef92 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ef8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3710      	adds	r7, #16
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
 800ef9a:	bf00      	nop
 800ef9c:	0801b9f0 	.word	0x0801b9f0
 800efa0:	0801baa0 	.word	0x0801baa0
 800efa4:	0801ba34 	.word	0x0801ba34

0800efa8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b082      	sub	sp, #8
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d109      	bne.n	800efca <tcp_close+0x22>
 800efb6:	4b0f      	ldr	r3, [pc, #60]	; (800eff4 <tcp_close+0x4c>)
 800efb8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800efbc:	490e      	ldr	r1, [pc, #56]	; (800eff8 <tcp_close+0x50>)
 800efbe:	480f      	ldr	r0, [pc, #60]	; (800effc <tcp_close+0x54>)
 800efc0:	f00a fa44 	bl	801944c <iprintf>
 800efc4:	f06f 030f 	mvn.w	r3, #15
 800efc8:	e00f      	b.n	800efea <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	7d1b      	ldrb	r3, [r3, #20]
 800efce:	2b01      	cmp	r3, #1
 800efd0:	d006      	beq.n	800efe0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	8b5b      	ldrh	r3, [r3, #26]
 800efd6:	f043 0310 	orr.w	r3, r3, #16
 800efda:	b29a      	uxth	r2, r3
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800efe0:	2101      	movs	r1, #1
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f7ff fe94 	bl	800ed10 <tcp_close_shutdown>
 800efe8:	4603      	mov	r3, r0
}
 800efea:	4618      	mov	r0, r3
 800efec:	3708      	adds	r7, #8
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}
 800eff2:	bf00      	nop
 800eff4:	0801b9f0 	.word	0x0801b9f0
 800eff8:	0801bb00 	.word	0x0801bb00
 800effc:	0801ba34 	.word	0x0801ba34

0800f000 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b08e      	sub	sp, #56	; 0x38
 800f004:	af04      	add	r7, sp, #16
 800f006:	6078      	str	r0, [r7, #4]
 800f008:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d107      	bne.n	800f020 <tcp_abandon+0x20>
 800f010:	4b52      	ldr	r3, [pc, #328]	; (800f15c <tcp_abandon+0x15c>)
 800f012:	f240 223d 	movw	r2, #573	; 0x23d
 800f016:	4952      	ldr	r1, [pc, #328]	; (800f160 <tcp_abandon+0x160>)
 800f018:	4852      	ldr	r0, [pc, #328]	; (800f164 <tcp_abandon+0x164>)
 800f01a:	f00a fa17 	bl	801944c <iprintf>
 800f01e:	e099      	b.n	800f154 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	7d1b      	ldrb	r3, [r3, #20]
 800f024:	2b01      	cmp	r3, #1
 800f026:	d106      	bne.n	800f036 <tcp_abandon+0x36>
 800f028:	4b4c      	ldr	r3, [pc, #304]	; (800f15c <tcp_abandon+0x15c>)
 800f02a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f02e:	494e      	ldr	r1, [pc, #312]	; (800f168 <tcp_abandon+0x168>)
 800f030:	484c      	ldr	r0, [pc, #304]	; (800f164 <tcp_abandon+0x164>)
 800f032:	f00a fa0b 	bl	801944c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	7d1b      	ldrb	r3, [r3, #20]
 800f03a:	2b0a      	cmp	r3, #10
 800f03c:	d107      	bne.n	800f04e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f03e:	6879      	ldr	r1, [r7, #4]
 800f040:	484a      	ldr	r0, [pc, #296]	; (800f16c <tcp_abandon+0x16c>)
 800f042:	f000 ffc3 	bl	800ffcc <tcp_pcb_remove>
    tcp_free(pcb);
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f7ff fdb0 	bl	800ebac <tcp_free>
 800f04c:	e082      	b.n	800f154 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f04e:	2300      	movs	r3, #0
 800f050:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f052:	2300      	movs	r3, #0
 800f054:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f05a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f060:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f068:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	691b      	ldr	r3, [r3, #16]
 800f06e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	7d1b      	ldrb	r3, [r3, #20]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d126      	bne.n	800f0c6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	8adb      	ldrh	r3, [r3, #22]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d02e      	beq.n	800f0de <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f080:	4b3b      	ldr	r3, [pc, #236]	; (800f170 <tcp_abandon+0x170>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	687a      	ldr	r2, [r7, #4]
 800f086:	429a      	cmp	r2, r3
 800f088:	d105      	bne.n	800f096 <tcp_abandon+0x96>
 800f08a:	4b39      	ldr	r3, [pc, #228]	; (800f170 <tcp_abandon+0x170>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	68db      	ldr	r3, [r3, #12]
 800f090:	4a37      	ldr	r2, [pc, #220]	; (800f170 <tcp_abandon+0x170>)
 800f092:	6013      	str	r3, [r2, #0]
 800f094:	e013      	b.n	800f0be <tcp_abandon+0xbe>
 800f096:	4b36      	ldr	r3, [pc, #216]	; (800f170 <tcp_abandon+0x170>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	61fb      	str	r3, [r7, #28]
 800f09c:	e00c      	b.n	800f0b8 <tcp_abandon+0xb8>
 800f09e:	69fb      	ldr	r3, [r7, #28]
 800f0a0:	68db      	ldr	r3, [r3, #12]
 800f0a2:	687a      	ldr	r2, [r7, #4]
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d104      	bne.n	800f0b2 <tcp_abandon+0xb2>
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	68da      	ldr	r2, [r3, #12]
 800f0ac:	69fb      	ldr	r3, [r7, #28]
 800f0ae:	60da      	str	r2, [r3, #12]
 800f0b0:	e005      	b.n	800f0be <tcp_abandon+0xbe>
 800f0b2:	69fb      	ldr	r3, [r7, #28]
 800f0b4:	68db      	ldr	r3, [r3, #12]
 800f0b6:	61fb      	str	r3, [r7, #28]
 800f0b8:	69fb      	ldr	r3, [r7, #28]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d1ef      	bne.n	800f09e <tcp_abandon+0x9e>
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	60da      	str	r2, [r3, #12]
 800f0c4:	e00b      	b.n	800f0de <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	8adb      	ldrh	r3, [r3, #22]
 800f0ce:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f0d0:	6879      	ldr	r1, [r7, #4]
 800f0d2:	4828      	ldr	r0, [pc, #160]	; (800f174 <tcp_abandon+0x174>)
 800f0d4:	f000 ff7a 	bl	800ffcc <tcp_pcb_remove>
 800f0d8:	4b27      	ldr	r3, [pc, #156]	; (800f178 <tcp_abandon+0x178>)
 800f0da:	2201      	movs	r2, #1
 800f0dc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d004      	beq.n	800f0f0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f000 fd1c 	bl	800fb28 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d004      	beq.n	800f102 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f000 fd13 	bl	800fb28 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f106:	2b00      	cmp	r3, #0
 800f108:	d004      	beq.n	800f114 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f10e:	4618      	mov	r0, r3
 800f110:	f000 fd0a 	bl	800fb28 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f116:	2b00      	cmp	r3, #0
 800f118:	d00e      	beq.n	800f138 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f11a:	6879      	ldr	r1, [r7, #4]
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	3304      	adds	r3, #4
 800f120:	687a      	ldr	r2, [r7, #4]
 800f122:	8b12      	ldrh	r2, [r2, #24]
 800f124:	9202      	str	r2, [sp, #8]
 800f126:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f128:	9201      	str	r2, [sp, #4]
 800f12a:	9300      	str	r3, [sp, #0]
 800f12c:	460b      	mov	r3, r1
 800f12e:	697a      	ldr	r2, [r7, #20]
 800f130:	69b9      	ldr	r1, [r7, #24]
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f004 fcbe 	bl	8013ab4 <tcp_rst>
    }
    last_state = pcb->state;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	7d1b      	ldrb	r3, [r3, #20]
 800f13c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f7ff fd34 	bl	800ebac <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f144:	693b      	ldr	r3, [r7, #16]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d004      	beq.n	800f154 <tcp_abandon+0x154>
 800f14a:	693b      	ldr	r3, [r7, #16]
 800f14c:	f06f 010c 	mvn.w	r1, #12
 800f150:	68f8      	ldr	r0, [r7, #12]
 800f152:	4798      	blx	r3
  }
}
 800f154:	3728      	adds	r7, #40	; 0x28
 800f156:	46bd      	mov	sp, r7
 800f158:	bd80      	pop	{r7, pc}
 800f15a:	bf00      	nop
 800f15c:	0801b9f0 	.word	0x0801b9f0
 800f160:	0801bb34 	.word	0x0801bb34
 800f164:	0801ba34 	.word	0x0801ba34
 800f168:	0801bb50 	.word	0x0801bb50
 800f16c:	20006d10 	.word	0x20006d10
 800f170:	20006d0c 	.word	0x20006d0c
 800f174:	20006d00 	.word	0x20006d00
 800f178:	20006cfc 	.word	0x20006cfc

0800f17c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b082      	sub	sp, #8
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f184:	2101      	movs	r1, #1
 800f186:	6878      	ldr	r0, [r7, #4]
 800f188:	f7ff ff3a 	bl	800f000 <tcp_abandon>
}
 800f18c:	bf00      	nop
 800f18e:	3708      	adds	r7, #8
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b084      	sub	sp, #16
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d106      	bne.n	800f1b0 <tcp_update_rcv_ann_wnd+0x1c>
 800f1a2:	4b25      	ldr	r3, [pc, #148]	; (800f238 <tcp_update_rcv_ann_wnd+0xa4>)
 800f1a4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f1a8:	4924      	ldr	r1, [pc, #144]	; (800f23c <tcp_update_rcv_ann_wnd+0xa8>)
 800f1aa:	4825      	ldr	r0, [pc, #148]	; (800f240 <tcp_update_rcv_ann_wnd+0xac>)
 800f1ac:	f00a f94e 	bl	801944c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1b4:	687a      	ldr	r2, [r7, #4]
 800f1b6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f1b8:	4413      	add	r3, r2
 800f1ba:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1c0:	687a      	ldr	r2, [r7, #4]
 800f1c2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f1c4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f1c8:	bf28      	it	cs
 800f1ca:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f1ce:	b292      	uxth	r2, r2
 800f1d0:	4413      	add	r3, r2
 800f1d2:	68fa      	ldr	r2, [r7, #12]
 800f1d4:	1ad3      	subs	r3, r2, r3
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	db08      	blt.n	800f1ec <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1e6:	68fa      	ldr	r2, [r7, #12]
 800f1e8:	1ad3      	subs	r3, r2, r3
 800f1ea:	e020      	b.n	800f22e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1f4:	1ad3      	subs	r3, r2, r3
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	dd03      	ble.n	800f202 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f200:	e014      	b.n	800f22c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f20a:	1ad3      	subs	r3, r2, r3
 800f20c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f214:	d306      	bcc.n	800f224 <tcp_update_rcv_ann_wnd+0x90>
 800f216:	4b08      	ldr	r3, [pc, #32]	; (800f238 <tcp_update_rcv_ann_wnd+0xa4>)
 800f218:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f21c:	4909      	ldr	r1, [pc, #36]	; (800f244 <tcp_update_rcv_ann_wnd+0xb0>)
 800f21e:	4808      	ldr	r0, [pc, #32]	; (800f240 <tcp_update_rcv_ann_wnd+0xac>)
 800f220:	f00a f914 	bl	801944c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	b29a      	uxth	r2, r3
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f22c:	2300      	movs	r3, #0
  }
}
 800f22e:	4618      	mov	r0, r3
 800f230:	3710      	adds	r7, #16
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}
 800f236:	bf00      	nop
 800f238:	0801b9f0 	.word	0x0801b9f0
 800f23c:	0801bc4c 	.word	0x0801bc4c
 800f240:	0801ba34 	.word	0x0801ba34
 800f244:	0801bc70 	.word	0x0801bc70

0800f248 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b084      	sub	sp, #16
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
 800f250:	460b      	mov	r3, r1
 800f252:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d107      	bne.n	800f26a <tcp_recved+0x22>
 800f25a:	4b1f      	ldr	r3, [pc, #124]	; (800f2d8 <tcp_recved+0x90>)
 800f25c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f260:	491e      	ldr	r1, [pc, #120]	; (800f2dc <tcp_recved+0x94>)
 800f262:	481f      	ldr	r0, [pc, #124]	; (800f2e0 <tcp_recved+0x98>)
 800f264:	f00a f8f2 	bl	801944c <iprintf>
 800f268:	e032      	b.n	800f2d0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	7d1b      	ldrb	r3, [r3, #20]
 800f26e:	2b01      	cmp	r3, #1
 800f270:	d106      	bne.n	800f280 <tcp_recved+0x38>
 800f272:	4b19      	ldr	r3, [pc, #100]	; (800f2d8 <tcp_recved+0x90>)
 800f274:	f240 32d2 	movw	r2, #978	; 0x3d2
 800f278:	491a      	ldr	r1, [pc, #104]	; (800f2e4 <tcp_recved+0x9c>)
 800f27a:	4819      	ldr	r0, [pc, #100]	; (800f2e0 <tcp_recved+0x98>)
 800f27c:	f00a f8e6 	bl	801944c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f284:	887b      	ldrh	r3, [r7, #2]
 800f286:	4413      	add	r3, r2
 800f288:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f28a:	89fb      	ldrh	r3, [r7, #14]
 800f28c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f290:	d804      	bhi.n	800f29c <tcp_recved+0x54>
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f296:	89fa      	ldrh	r2, [r7, #14]
 800f298:	429a      	cmp	r2, r3
 800f29a:	d204      	bcs.n	800f2a6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f2a2:	851a      	strh	r2, [r3, #40]	; 0x28
 800f2a4:	e002      	b.n	800f2ac <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	89fa      	ldrh	r2, [r7, #14]
 800f2aa:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	f7ff ff71 	bl	800f194 <tcp_update_rcv_ann_wnd>
 800f2b2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f2ba:	d309      	bcc.n	800f2d0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	8b5b      	ldrh	r3, [r3, #26]
 800f2c0:	f043 0302 	orr.w	r3, r3, #2
 800f2c4:	b29a      	uxth	r2, r3
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f003 fe3e 	bl	8012f4c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f2d0:	3710      	adds	r7, #16
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}
 800f2d6:	bf00      	nop
 800f2d8:	0801b9f0 	.word	0x0801b9f0
 800f2dc:	0801bc8c 	.word	0x0801bc8c
 800f2e0:	0801ba34 	.word	0x0801ba34
 800f2e4:	0801bca4 	.word	0x0801bca4

0800f2e8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f2e8:	b5b0      	push	{r4, r5, r7, lr}
 800f2ea:	b090      	sub	sp, #64	; 0x40
 800f2ec:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f2f4:	4b94      	ldr	r3, [pc, #592]	; (800f548 <tcp_slowtmr+0x260>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	3301      	adds	r3, #1
 800f2fa:	4a93      	ldr	r2, [pc, #588]	; (800f548 <tcp_slowtmr+0x260>)
 800f2fc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f2fe:	4b93      	ldr	r3, [pc, #588]	; (800f54c <tcp_slowtmr+0x264>)
 800f300:	781b      	ldrb	r3, [r3, #0]
 800f302:	3301      	adds	r3, #1
 800f304:	b2da      	uxtb	r2, r3
 800f306:	4b91      	ldr	r3, [pc, #580]	; (800f54c <tcp_slowtmr+0x264>)
 800f308:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f30a:	2300      	movs	r3, #0
 800f30c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f30e:	4b90      	ldr	r3, [pc, #576]	; (800f550 <tcp_slowtmr+0x268>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f314:	e29f      	b.n	800f856 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f318:	7d1b      	ldrb	r3, [r3, #20]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d106      	bne.n	800f32c <tcp_slowtmr+0x44>
 800f31e:	4b8d      	ldr	r3, [pc, #564]	; (800f554 <tcp_slowtmr+0x26c>)
 800f320:	f240 42be 	movw	r2, #1214	; 0x4be
 800f324:	498c      	ldr	r1, [pc, #560]	; (800f558 <tcp_slowtmr+0x270>)
 800f326:	488d      	ldr	r0, [pc, #564]	; (800f55c <tcp_slowtmr+0x274>)
 800f328:	f00a f890 	bl	801944c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32e:	7d1b      	ldrb	r3, [r3, #20]
 800f330:	2b01      	cmp	r3, #1
 800f332:	d106      	bne.n	800f342 <tcp_slowtmr+0x5a>
 800f334:	4b87      	ldr	r3, [pc, #540]	; (800f554 <tcp_slowtmr+0x26c>)
 800f336:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f33a:	4989      	ldr	r1, [pc, #548]	; (800f560 <tcp_slowtmr+0x278>)
 800f33c:	4887      	ldr	r0, [pc, #540]	; (800f55c <tcp_slowtmr+0x274>)
 800f33e:	f00a f885 	bl	801944c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f344:	7d1b      	ldrb	r3, [r3, #20]
 800f346:	2b0a      	cmp	r3, #10
 800f348:	d106      	bne.n	800f358 <tcp_slowtmr+0x70>
 800f34a:	4b82      	ldr	r3, [pc, #520]	; (800f554 <tcp_slowtmr+0x26c>)
 800f34c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f350:	4984      	ldr	r1, [pc, #528]	; (800f564 <tcp_slowtmr+0x27c>)
 800f352:	4882      	ldr	r0, [pc, #520]	; (800f55c <tcp_slowtmr+0x274>)
 800f354:	f00a f87a 	bl	801944c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f35a:	7f9a      	ldrb	r2, [r3, #30]
 800f35c:	4b7b      	ldr	r3, [pc, #492]	; (800f54c <tcp_slowtmr+0x264>)
 800f35e:	781b      	ldrb	r3, [r3, #0]
 800f360:	429a      	cmp	r2, r3
 800f362:	d105      	bne.n	800f370 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f366:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f36a:	68db      	ldr	r3, [r3, #12]
 800f36c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f36e:	e272      	b.n	800f856 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f370:	4b76      	ldr	r3, [pc, #472]	; (800f54c <tcp_slowtmr+0x264>)
 800f372:	781a      	ldrb	r2, [r3, #0]
 800f374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f376:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f378:	2300      	movs	r3, #0
 800f37a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f37e:	2300      	movs	r3, #0
 800f380:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f386:	7d1b      	ldrb	r3, [r3, #20]
 800f388:	2b02      	cmp	r3, #2
 800f38a:	d10a      	bne.n	800f3a2 <tcp_slowtmr+0xba>
 800f38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f38e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f392:	2b05      	cmp	r3, #5
 800f394:	d905      	bls.n	800f3a2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f39a:	3301      	adds	r3, #1
 800f39c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f3a0:	e11e      	b.n	800f5e0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f3a8:	2b0b      	cmp	r3, #11
 800f3aa:	d905      	bls.n	800f3b8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f3ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3b0:	3301      	adds	r3, #1
 800f3b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f3b6:	e113      	b.n	800f5e0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d075      	beq.n	800f4ae <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d006      	beq.n	800f3d8 <tcp_slowtmr+0xf0>
 800f3ca:	4b62      	ldr	r3, [pc, #392]	; (800f554 <tcp_slowtmr+0x26c>)
 800f3cc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f3d0:	4965      	ldr	r1, [pc, #404]	; (800f568 <tcp_slowtmr+0x280>)
 800f3d2:	4862      	ldr	r0, [pc, #392]	; (800f55c <tcp_slowtmr+0x274>)
 800f3d4:	f00a f83a 	bl	801944c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d106      	bne.n	800f3ee <tcp_slowtmr+0x106>
 800f3e0:	4b5c      	ldr	r3, [pc, #368]	; (800f554 <tcp_slowtmr+0x26c>)
 800f3e2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f3e6:	4961      	ldr	r1, [pc, #388]	; (800f56c <tcp_slowtmr+0x284>)
 800f3e8:	485c      	ldr	r0, [pc, #368]	; (800f55c <tcp_slowtmr+0x274>)
 800f3ea:	f00a f82f 	bl	801944c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f3f4:	2b0b      	cmp	r3, #11
 800f3f6:	d905      	bls.n	800f404 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f3f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3fc:	3301      	adds	r3, #1
 800f3fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f402:	e0ed      	b.n	800f5e0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f406:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f40a:	3b01      	subs	r3, #1
 800f40c:	4a58      	ldr	r2, [pc, #352]	; (800f570 <tcp_slowtmr+0x288>)
 800f40e:	5cd3      	ldrb	r3, [r2, r3]
 800f410:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f414:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f418:	7c7a      	ldrb	r2, [r7, #17]
 800f41a:	429a      	cmp	r2, r3
 800f41c:	d907      	bls.n	800f42e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f420:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f424:	3301      	adds	r3, #1
 800f426:	b2da      	uxtb	r2, r3
 800f428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f42a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f430:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f434:	7c7a      	ldrb	r2, [r7, #17]
 800f436:	429a      	cmp	r2, r3
 800f438:	f200 80d2 	bhi.w	800f5e0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f43c:	2301      	movs	r3, #1
 800f43e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f442:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f446:	2b00      	cmp	r3, #0
 800f448:	d108      	bne.n	800f45c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f44a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f44c:	f004 fc26 	bl	8013c9c <tcp_zero_window_probe>
 800f450:	4603      	mov	r3, r0
 800f452:	2b00      	cmp	r3, #0
 800f454:	d014      	beq.n	800f480 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f456:	2300      	movs	r3, #0
 800f458:	623b      	str	r3, [r7, #32]
 800f45a:	e011      	b.n	800f480 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f45e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f462:	4619      	mov	r1, r3
 800f464:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f466:	f003 faeb 	bl	8012a40 <tcp_split_unsent_seg>
 800f46a:	4603      	mov	r3, r0
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d107      	bne.n	800f480 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f470:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f472:	f003 fd6b 	bl	8012f4c <tcp_output>
 800f476:	4603      	mov	r3, r0
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d101      	bne.n	800f480 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f47c:	2300      	movs	r3, #0
 800f47e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f480:	6a3b      	ldr	r3, [r7, #32]
 800f482:	2b00      	cmp	r3, #0
 800f484:	f000 80ac 	beq.w	800f5e0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f48a:	2200      	movs	r2, #0
 800f48c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f492:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f496:	2b06      	cmp	r3, #6
 800f498:	f200 80a2 	bhi.w	800f5e0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f49e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f4a2:	3301      	adds	r3, #1
 800f4a4:	b2da      	uxtb	r2, r3
 800f4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f4ac:	e098      	b.n	800f5e0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	db0f      	blt.n	800f4d8 <tcp_slowtmr+0x1f0>
 800f4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ba:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f4be:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f4c2:	4293      	cmp	r3, r2
 800f4c4:	d008      	beq.n	800f4d8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f4cc:	b29b      	uxth	r3, r3
 800f4ce:	3301      	adds	r3, #1
 800f4d0:	b29b      	uxth	r3, r3
 800f4d2:	b21a      	sxth	r2, r3
 800f4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4da:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4e0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	db7b      	blt.n	800f5e0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f4e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4ea:	f004 f821 	bl	8013530 <tcp_rexmit_rto_prepare>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d007      	beq.n	800f504 <tcp_slowtmr+0x21c>
 800f4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d171      	bne.n	800f5e0 <tcp_slowtmr+0x2f8>
 800f4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f500:	2b00      	cmp	r3, #0
 800f502:	d06d      	beq.n	800f5e0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f506:	7d1b      	ldrb	r3, [r3, #20]
 800f508:	2b02      	cmp	r3, #2
 800f50a:	d03a      	beq.n	800f582 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f50e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f512:	2b0c      	cmp	r3, #12
 800f514:	bf28      	it	cs
 800f516:	230c      	movcs	r3, #12
 800f518:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f51c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f520:	10db      	asrs	r3, r3, #3
 800f522:	b21b      	sxth	r3, r3
 800f524:	461a      	mov	r2, r3
 800f526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f528:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f52c:	4413      	add	r3, r2
 800f52e:	7efa      	ldrb	r2, [r7, #27]
 800f530:	4910      	ldr	r1, [pc, #64]	; (800f574 <tcp_slowtmr+0x28c>)
 800f532:	5c8a      	ldrb	r2, [r1, r2]
 800f534:	4093      	lsls	r3, r2
 800f536:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f538:	697b      	ldr	r3, [r7, #20]
 800f53a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f53e:	4293      	cmp	r3, r2
 800f540:	dc1a      	bgt.n	800f578 <tcp_slowtmr+0x290>
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	b21a      	sxth	r2, r3
 800f546:	e019      	b.n	800f57c <tcp_slowtmr+0x294>
 800f548:	20006d04 	.word	0x20006d04
 800f54c:	2000052e 	.word	0x2000052e
 800f550:	20006d00 	.word	0x20006d00
 800f554:	0801b9f0 	.word	0x0801b9f0
 800f558:	0801bd34 	.word	0x0801bd34
 800f55c:	0801ba34 	.word	0x0801ba34
 800f560:	0801bd60 	.word	0x0801bd60
 800f564:	0801bd8c 	.word	0x0801bd8c
 800f568:	0801bdbc 	.word	0x0801bdbc
 800f56c:	0801bdf0 	.word	0x0801bdf0
 800f570:	0801e09c 	.word	0x0801e09c
 800f574:	0801e08c 	.word	0x0801e08c
 800f578:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f57e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f584:	2200      	movs	r2, #0
 800f586:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f58a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f590:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f594:	4293      	cmp	r3, r2
 800f596:	bf28      	it	cs
 800f598:	4613      	movcs	r3, r2
 800f59a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f59c:	8a7b      	ldrh	r3, [r7, #18]
 800f59e:	085b      	lsrs	r3, r3, #1
 800f5a0:	b29a      	uxth	r2, r3
 800f5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5a4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5aa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f5b2:	005b      	lsls	r3, r3, #1
 800f5b4:	b29b      	uxth	r3, r3
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d206      	bcs.n	800f5c8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f5be:	005b      	lsls	r3, r3, #1
 800f5c0:	b29a      	uxth	r2, r3
 800f5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5c4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ca:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f5da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f5dc:	f004 f818 	bl	8013610 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5e2:	7d1b      	ldrb	r3, [r3, #20]
 800f5e4:	2b06      	cmp	r3, #6
 800f5e6:	d111      	bne.n	800f60c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ea:	8b5b      	ldrh	r3, [r3, #26]
 800f5ec:	f003 0310 	and.w	r3, r3, #16
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d00b      	beq.n	800f60c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f5f4:	4b9d      	ldr	r3, [pc, #628]	; (800f86c <tcp_slowtmr+0x584>)
 800f5f6:	681a      	ldr	r2, [r3, #0]
 800f5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5fa:	6a1b      	ldr	r3, [r3, #32]
 800f5fc:	1ad3      	subs	r3, r2, r3
 800f5fe:	2b28      	cmp	r3, #40	; 0x28
 800f600:	d904      	bls.n	800f60c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f602:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f606:	3301      	adds	r3, #1
 800f608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f60e:	7a5b      	ldrb	r3, [r3, #9]
 800f610:	f003 0308 	and.w	r3, r3, #8
 800f614:	2b00      	cmp	r3, #0
 800f616:	d04c      	beq.n	800f6b2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800f618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f61a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f61c:	2b04      	cmp	r3, #4
 800f61e:	d003      	beq.n	800f628 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f622:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f624:	2b07      	cmp	r3, #7
 800f626:	d144      	bne.n	800f6b2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f628:	4b90      	ldr	r3, [pc, #576]	; (800f86c <tcp_slowtmr+0x584>)
 800f62a:	681a      	ldr	r2, [r3, #0]
 800f62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f62e:	6a1b      	ldr	r3, [r3, #32]
 800f630:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f638:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800f63c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800f640:	498b      	ldr	r1, [pc, #556]	; (800f870 <tcp_slowtmr+0x588>)
 800f642:	fba1 1303 	umull	r1, r3, r1, r3
 800f646:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f648:	429a      	cmp	r2, r3
 800f64a:	d90a      	bls.n	800f662 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f64c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f650:	3301      	adds	r3, #1
 800f652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f656:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f65a:	3301      	adds	r3, #1
 800f65c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f660:	e027      	b.n	800f6b2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f662:	4b82      	ldr	r3, [pc, #520]	; (800f86c <tcp_slowtmr+0x584>)
 800f664:	681a      	ldr	r2, [r3, #0]
 800f666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f668:	6a1b      	ldr	r3, [r3, #32]
 800f66a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f66e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f674:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f678:	4618      	mov	r0, r3
 800f67a:	4b7e      	ldr	r3, [pc, #504]	; (800f874 <tcp_slowtmr+0x58c>)
 800f67c:	fb03 f300 	mul.w	r3, r3, r0
 800f680:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f682:	497b      	ldr	r1, [pc, #492]	; (800f870 <tcp_slowtmr+0x588>)
 800f684:	fba1 1303 	umull	r1, r3, r1, r3
 800f688:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d911      	bls.n	800f6b2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800f68e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f690:	f004 fac4 	bl	8013c1c <tcp_keepalive>
 800f694:	4603      	mov	r3, r0
 800f696:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f69a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d107      	bne.n	800f6b2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800f6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f6a8:	3301      	adds	r3, #1
 800f6aa:	b2da      	uxtb	r2, r3
 800f6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ae:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d011      	beq.n	800f6de <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f6ba:	4b6c      	ldr	r3, [pc, #432]	; (800f86c <tcp_slowtmr+0x584>)
 800f6bc:	681a      	ldr	r2, [r3, #0]
 800f6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6c0:	6a1b      	ldr	r3, [r3, #32]
 800f6c2:	1ad2      	subs	r2, r2, r3
 800f6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6c6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f6ca:	4619      	mov	r1, r3
 800f6cc:	460b      	mov	r3, r1
 800f6ce:	005b      	lsls	r3, r3, #1
 800f6d0:	440b      	add	r3, r1
 800f6d2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f6d4:	429a      	cmp	r2, r3
 800f6d6:	d302      	bcc.n	800f6de <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f6d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6da:	f000 fddb 	bl	8010294 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6e0:	7d1b      	ldrb	r3, [r3, #20]
 800f6e2:	2b03      	cmp	r3, #3
 800f6e4:	d10b      	bne.n	800f6fe <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f6e6:	4b61      	ldr	r3, [pc, #388]	; (800f86c <tcp_slowtmr+0x584>)
 800f6e8:	681a      	ldr	r2, [r3, #0]
 800f6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ec:	6a1b      	ldr	r3, [r3, #32]
 800f6ee:	1ad3      	subs	r3, r2, r3
 800f6f0:	2b28      	cmp	r3, #40	; 0x28
 800f6f2:	d904      	bls.n	800f6fe <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f6f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6f8:	3301      	adds	r3, #1
 800f6fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f700:	7d1b      	ldrb	r3, [r3, #20]
 800f702:	2b09      	cmp	r3, #9
 800f704:	d10b      	bne.n	800f71e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f706:	4b59      	ldr	r3, [pc, #356]	; (800f86c <tcp_slowtmr+0x584>)
 800f708:	681a      	ldr	r2, [r3, #0]
 800f70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f70c:	6a1b      	ldr	r3, [r3, #32]
 800f70e:	1ad3      	subs	r3, r2, r3
 800f710:	2bf0      	cmp	r3, #240	; 0xf0
 800f712:	d904      	bls.n	800f71e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800f714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f718:	3301      	adds	r3, #1
 800f71a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f71e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f722:	2b00      	cmp	r3, #0
 800f724:	d060      	beq.n	800f7e8 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f72c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f72e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f730:	f000 fbfc 	bl	800ff2c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f736:	2b00      	cmp	r3, #0
 800f738:	d010      	beq.n	800f75c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f73a:	4b4f      	ldr	r3, [pc, #316]	; (800f878 <tcp_slowtmr+0x590>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f740:	429a      	cmp	r2, r3
 800f742:	d106      	bne.n	800f752 <tcp_slowtmr+0x46a>
 800f744:	4b4d      	ldr	r3, [pc, #308]	; (800f87c <tcp_slowtmr+0x594>)
 800f746:	f240 526d 	movw	r2, #1389	; 0x56d
 800f74a:	494d      	ldr	r1, [pc, #308]	; (800f880 <tcp_slowtmr+0x598>)
 800f74c:	484d      	ldr	r0, [pc, #308]	; (800f884 <tcp_slowtmr+0x59c>)
 800f74e:	f009 fe7d 	bl	801944c <iprintf>
        prev->next = pcb->next;
 800f752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f754:	68da      	ldr	r2, [r3, #12]
 800f756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f758:	60da      	str	r2, [r3, #12]
 800f75a:	e00f      	b.n	800f77c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f75c:	4b46      	ldr	r3, [pc, #280]	; (800f878 <tcp_slowtmr+0x590>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f762:	429a      	cmp	r2, r3
 800f764:	d006      	beq.n	800f774 <tcp_slowtmr+0x48c>
 800f766:	4b45      	ldr	r3, [pc, #276]	; (800f87c <tcp_slowtmr+0x594>)
 800f768:	f240 5271 	movw	r2, #1393	; 0x571
 800f76c:	4946      	ldr	r1, [pc, #280]	; (800f888 <tcp_slowtmr+0x5a0>)
 800f76e:	4845      	ldr	r0, [pc, #276]	; (800f884 <tcp_slowtmr+0x59c>)
 800f770:	f009 fe6c 	bl	801944c <iprintf>
        tcp_active_pcbs = pcb->next;
 800f774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f776:	68db      	ldr	r3, [r3, #12]
 800f778:	4a3f      	ldr	r2, [pc, #252]	; (800f878 <tcp_slowtmr+0x590>)
 800f77a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f77c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f780:	2b00      	cmp	r3, #0
 800f782:	d013      	beq.n	800f7ac <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f786:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f78a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f78c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f790:	3304      	adds	r3, #4
 800f792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f794:	8ad2      	ldrh	r2, [r2, #22]
 800f796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f798:	8b09      	ldrh	r1, [r1, #24]
 800f79a:	9102      	str	r1, [sp, #8]
 800f79c:	9201      	str	r2, [sp, #4]
 800f79e:	9300      	str	r3, [sp, #0]
 800f7a0:	462b      	mov	r3, r5
 800f7a2:	4622      	mov	r2, r4
 800f7a4:	4601      	mov	r1, r0
 800f7a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f7a8:	f004 f984 	bl	8013ab4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ae:	691b      	ldr	r3, [r3, #16]
 800f7b0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b4:	7d1b      	ldrb	r3, [r3, #20]
 800f7b6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ba:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7be:	68db      	ldr	r3, [r3, #12]
 800f7c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f7c2:	6838      	ldr	r0, [r7, #0]
 800f7c4:	f7ff f9f2 	bl	800ebac <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f7c8:	4b30      	ldr	r3, [pc, #192]	; (800f88c <tcp_slowtmr+0x5a4>)
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d004      	beq.n	800f7de <tcp_slowtmr+0x4f6>
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	f06f 010c 	mvn.w	r1, #12
 800f7da:	68b8      	ldr	r0, [r7, #8]
 800f7dc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f7de:	4b2b      	ldr	r3, [pc, #172]	; (800f88c <tcp_slowtmr+0x5a4>)
 800f7e0:	781b      	ldrb	r3, [r3, #0]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d037      	beq.n	800f856 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800f7e6:	e590      	b.n	800f30a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ea:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ee:	68db      	ldr	r3, [r3, #12]
 800f7f0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7f4:	7f1b      	ldrb	r3, [r3, #28]
 800f7f6:	3301      	adds	r3, #1
 800f7f8:	b2da      	uxtb	r2, r3
 800f7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7fc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f800:	7f1a      	ldrb	r2, [r3, #28]
 800f802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f804:	7f5b      	ldrb	r3, [r3, #29]
 800f806:	429a      	cmp	r2, r3
 800f808:	d325      	bcc.n	800f856 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800f80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f80c:	2200      	movs	r2, #0
 800f80e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f810:	4b1e      	ldr	r3, [pc, #120]	; (800f88c <tcp_slowtmr+0x5a4>)
 800f812:	2200      	movs	r2, #0
 800f814:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d00b      	beq.n	800f838 <tcp_slowtmr+0x550>
 800f820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f828:	6912      	ldr	r2, [r2, #16]
 800f82a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f82c:	4610      	mov	r0, r2
 800f82e:	4798      	blx	r3
 800f830:	4603      	mov	r3, r0
 800f832:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f836:	e002      	b.n	800f83e <tcp_slowtmr+0x556>
 800f838:	2300      	movs	r3, #0
 800f83a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f83e:	4b13      	ldr	r3, [pc, #76]	; (800f88c <tcp_slowtmr+0x5a4>)
 800f840:	781b      	ldrb	r3, [r3, #0]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d000      	beq.n	800f848 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800f846:	e560      	b.n	800f30a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f848:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d102      	bne.n	800f856 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800f850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f852:	f003 fb7b 	bl	8012f4c <tcp_output>
  while (pcb != NULL) {
 800f856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f858:	2b00      	cmp	r3, #0
 800f85a:	f47f ad5c 	bne.w	800f316 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f85e:	2300      	movs	r3, #0
 800f860:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f862:	4b0b      	ldr	r3, [pc, #44]	; (800f890 <tcp_slowtmr+0x5a8>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f868:	e067      	b.n	800f93a <tcp_slowtmr+0x652>
 800f86a:	bf00      	nop
 800f86c:	20006d04 	.word	0x20006d04
 800f870:	10624dd3 	.word	0x10624dd3
 800f874:	000124f8 	.word	0x000124f8
 800f878:	20006d00 	.word	0x20006d00
 800f87c:	0801b9f0 	.word	0x0801b9f0
 800f880:	0801be28 	.word	0x0801be28
 800f884:	0801ba34 	.word	0x0801ba34
 800f888:	0801be54 	.word	0x0801be54
 800f88c:	20006cfc 	.word	0x20006cfc
 800f890:	20006d10 	.word	0x20006d10
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f896:	7d1b      	ldrb	r3, [r3, #20]
 800f898:	2b0a      	cmp	r3, #10
 800f89a:	d006      	beq.n	800f8aa <tcp_slowtmr+0x5c2>
 800f89c:	4b2b      	ldr	r3, [pc, #172]	; (800f94c <tcp_slowtmr+0x664>)
 800f89e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f8a2:	492b      	ldr	r1, [pc, #172]	; (800f950 <tcp_slowtmr+0x668>)
 800f8a4:	482b      	ldr	r0, [pc, #172]	; (800f954 <tcp_slowtmr+0x66c>)
 800f8a6:	f009 fdd1 	bl	801944c <iprintf>
    pcb_remove = 0;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f8b0:	4b29      	ldr	r3, [pc, #164]	; (800f958 <tcp_slowtmr+0x670>)
 800f8b2:	681a      	ldr	r2, [r3, #0]
 800f8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8b6:	6a1b      	ldr	r3, [r3, #32]
 800f8b8:	1ad3      	subs	r3, r2, r3
 800f8ba:	2bf0      	cmp	r3, #240	; 0xf0
 800f8bc:	d904      	bls.n	800f8c8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f8be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8c2:	3301      	adds	r3, #1
 800f8c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f8c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d02f      	beq.n	800f930 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f8d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f8d2:	f000 fb2b 	bl	800ff2c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d010      	beq.n	800f8fe <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f8dc:	4b1f      	ldr	r3, [pc, #124]	; (800f95c <tcp_slowtmr+0x674>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	d106      	bne.n	800f8f4 <tcp_slowtmr+0x60c>
 800f8e6:	4b19      	ldr	r3, [pc, #100]	; (800f94c <tcp_slowtmr+0x664>)
 800f8e8:	f240 52af 	movw	r2, #1455	; 0x5af
 800f8ec:	491c      	ldr	r1, [pc, #112]	; (800f960 <tcp_slowtmr+0x678>)
 800f8ee:	4819      	ldr	r0, [pc, #100]	; (800f954 <tcp_slowtmr+0x66c>)
 800f8f0:	f009 fdac 	bl	801944c <iprintf>
        prev->next = pcb->next;
 800f8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f6:	68da      	ldr	r2, [r3, #12]
 800f8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8fa:	60da      	str	r2, [r3, #12]
 800f8fc:	e00f      	b.n	800f91e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f8fe:	4b17      	ldr	r3, [pc, #92]	; (800f95c <tcp_slowtmr+0x674>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f904:	429a      	cmp	r2, r3
 800f906:	d006      	beq.n	800f916 <tcp_slowtmr+0x62e>
 800f908:	4b10      	ldr	r3, [pc, #64]	; (800f94c <tcp_slowtmr+0x664>)
 800f90a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f90e:	4915      	ldr	r1, [pc, #84]	; (800f964 <tcp_slowtmr+0x67c>)
 800f910:	4810      	ldr	r0, [pc, #64]	; (800f954 <tcp_slowtmr+0x66c>)
 800f912:	f009 fd9b 	bl	801944c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f918:	68db      	ldr	r3, [r3, #12]
 800f91a:	4a10      	ldr	r2, [pc, #64]	; (800f95c <tcp_slowtmr+0x674>)
 800f91c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f920:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f924:	68db      	ldr	r3, [r3, #12]
 800f926:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f928:	69f8      	ldr	r0, [r7, #28]
 800f92a:	f7ff f93f 	bl	800ebac <tcp_free>
 800f92e:	e004      	b.n	800f93a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f932:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f936:	68db      	ldr	r3, [r3, #12]
 800f938:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d1a9      	bne.n	800f894 <tcp_slowtmr+0x5ac>
    }
  }
}
 800f940:	bf00      	nop
 800f942:	bf00      	nop
 800f944:	3730      	adds	r7, #48	; 0x30
 800f946:	46bd      	mov	sp, r7
 800f948:	bdb0      	pop	{r4, r5, r7, pc}
 800f94a:	bf00      	nop
 800f94c:	0801b9f0 	.word	0x0801b9f0
 800f950:	0801be80 	.word	0x0801be80
 800f954:	0801ba34 	.word	0x0801ba34
 800f958:	20006d04 	.word	0x20006d04
 800f95c:	20006d10 	.word	0x20006d10
 800f960:	0801beb0 	.word	0x0801beb0
 800f964:	0801bed8 	.word	0x0801bed8

0800f968 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b082      	sub	sp, #8
 800f96c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f96e:	4b2d      	ldr	r3, [pc, #180]	; (800fa24 <tcp_fasttmr+0xbc>)
 800f970:	781b      	ldrb	r3, [r3, #0]
 800f972:	3301      	adds	r3, #1
 800f974:	b2da      	uxtb	r2, r3
 800f976:	4b2b      	ldr	r3, [pc, #172]	; (800fa24 <tcp_fasttmr+0xbc>)
 800f978:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f97a:	4b2b      	ldr	r3, [pc, #172]	; (800fa28 <tcp_fasttmr+0xc0>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f980:	e048      	b.n	800fa14 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	7f9a      	ldrb	r2, [r3, #30]
 800f986:	4b27      	ldr	r3, [pc, #156]	; (800fa24 <tcp_fasttmr+0xbc>)
 800f988:	781b      	ldrb	r3, [r3, #0]
 800f98a:	429a      	cmp	r2, r3
 800f98c:	d03f      	beq.n	800fa0e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f98e:	4b25      	ldr	r3, [pc, #148]	; (800fa24 <tcp_fasttmr+0xbc>)
 800f990:	781a      	ldrb	r2, [r3, #0]
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	8b5b      	ldrh	r3, [r3, #26]
 800f99a:	f003 0301 	and.w	r3, r3, #1
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d010      	beq.n	800f9c4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	8b5b      	ldrh	r3, [r3, #26]
 800f9a6:	f043 0302 	orr.w	r3, r3, #2
 800f9aa:	b29a      	uxth	r2, r3
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f9b0:	6878      	ldr	r0, [r7, #4]
 800f9b2:	f003 facb 	bl	8012f4c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	8b5b      	ldrh	r3, [r3, #26]
 800f9ba:	f023 0303 	bic.w	r3, r3, #3
 800f9be:	b29a      	uxth	r2, r3
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	8b5b      	ldrh	r3, [r3, #26]
 800f9c8:	f003 0308 	and.w	r3, r3, #8
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d009      	beq.n	800f9e4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	8b5b      	ldrh	r3, [r3, #26]
 800f9d4:	f023 0308 	bic.w	r3, r3, #8
 800f9d8:	b29a      	uxth	r2, r3
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f7ff fa78 	bl	800eed4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	68db      	ldr	r3, [r3, #12]
 800f9e8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d00a      	beq.n	800fa08 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f9f2:	4b0e      	ldr	r3, [pc, #56]	; (800fa2c <tcp_fasttmr+0xc4>)
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f000 f819 	bl	800fa30 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f9fe:	4b0b      	ldr	r3, [pc, #44]	; (800fa2c <tcp_fasttmr+0xc4>)
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d000      	beq.n	800fa08 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800fa06:	e7b8      	b.n	800f97a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	607b      	str	r3, [r7, #4]
 800fa0c:	e002      	b.n	800fa14 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	68db      	ldr	r3, [r3, #12]
 800fa12:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d1b3      	bne.n	800f982 <tcp_fasttmr+0x1a>
    }
  }
}
 800fa1a:	bf00      	nop
 800fa1c:	bf00      	nop
 800fa1e:	3708      	adds	r7, #8
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bd80      	pop	{r7, pc}
 800fa24:	2000052e 	.word	0x2000052e
 800fa28:	20006d00 	.word	0x20006d00
 800fa2c:	20006cfc 	.word	0x20006cfc

0800fa30 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800fa30:	b590      	push	{r4, r7, lr}
 800fa32:	b085      	sub	sp, #20
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d109      	bne.n	800fa52 <tcp_process_refused_data+0x22>
 800fa3e:	4b37      	ldr	r3, [pc, #220]	; (800fb1c <tcp_process_refused_data+0xec>)
 800fa40:	f240 6209 	movw	r2, #1545	; 0x609
 800fa44:	4936      	ldr	r1, [pc, #216]	; (800fb20 <tcp_process_refused_data+0xf0>)
 800fa46:	4837      	ldr	r0, [pc, #220]	; (800fb24 <tcp_process_refused_data+0xf4>)
 800fa48:	f009 fd00 	bl	801944c <iprintf>
 800fa4c:	f06f 030f 	mvn.w	r3, #15
 800fa50:	e060      	b.n	800fb14 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa56:	7b5b      	ldrb	r3, [r3, #13]
 800fa58:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa5e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2200      	movs	r2, #0
 800fa64:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d00b      	beq.n	800fa88 <tcp_process_refused_data+0x58>
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	6918      	ldr	r0, [r3, #16]
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	68ba      	ldr	r2, [r7, #8]
 800fa7e:	6879      	ldr	r1, [r7, #4]
 800fa80:	47a0      	blx	r4
 800fa82:	4603      	mov	r3, r0
 800fa84:	73fb      	strb	r3, [r7, #15]
 800fa86:	e007      	b.n	800fa98 <tcp_process_refused_data+0x68>
 800fa88:	2300      	movs	r3, #0
 800fa8a:	68ba      	ldr	r2, [r7, #8]
 800fa8c:	6879      	ldr	r1, [r7, #4]
 800fa8e:	2000      	movs	r0, #0
 800fa90:	f000 f8a4 	bl	800fbdc <tcp_recv_null>
 800fa94:	4603      	mov	r3, r0
 800fa96:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800fa98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d12a      	bne.n	800faf6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800faa0:	7bbb      	ldrb	r3, [r7, #14]
 800faa2:	f003 0320 	and.w	r3, r3, #32
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d033      	beq.n	800fb12 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800faae:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fab2:	d005      	beq.n	800fac0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fab8:	3301      	adds	r3, #1
 800faba:	b29a      	uxth	r2, r3
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d00b      	beq.n	800fae2 <tcp_process_refused_data+0xb2>
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	6918      	ldr	r0, [r3, #16]
 800fad4:	2300      	movs	r3, #0
 800fad6:	2200      	movs	r2, #0
 800fad8:	6879      	ldr	r1, [r7, #4]
 800fada:	47a0      	blx	r4
 800fadc:	4603      	mov	r3, r0
 800fade:	73fb      	strb	r3, [r7, #15]
 800fae0:	e001      	b.n	800fae6 <tcp_process_refused_data+0xb6>
 800fae2:	2300      	movs	r3, #0
 800fae4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800fae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800faea:	f113 0f0d 	cmn.w	r3, #13
 800faee:	d110      	bne.n	800fb12 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800faf0:	f06f 030c 	mvn.w	r3, #12
 800faf4:	e00e      	b.n	800fb14 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800faf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fafa:	f113 0f0d 	cmn.w	r3, #13
 800fafe:	d102      	bne.n	800fb06 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800fb00:	f06f 030c 	mvn.w	r3, #12
 800fb04:	e006      	b.n	800fb14 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	68ba      	ldr	r2, [r7, #8]
 800fb0a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800fb0c:	f06f 0304 	mvn.w	r3, #4
 800fb10:	e000      	b.n	800fb14 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800fb12:	2300      	movs	r3, #0
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	3714      	adds	r7, #20
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd90      	pop	{r4, r7, pc}
 800fb1c:	0801b9f0 	.word	0x0801b9f0
 800fb20:	0801bf00 	.word	0x0801bf00
 800fb24:	0801ba34 	.word	0x0801ba34

0800fb28 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b084      	sub	sp, #16
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800fb30:	e007      	b.n	800fb42 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f000 f80a 	bl	800fb52 <tcp_seg_free>
    seg = next;
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d1f4      	bne.n	800fb32 <tcp_segs_free+0xa>
  }
}
 800fb48:	bf00      	nop
 800fb4a:	bf00      	nop
 800fb4c:	3710      	adds	r7, #16
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	bd80      	pop	{r7, pc}

0800fb52 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800fb52:	b580      	push	{r7, lr}
 800fb54:	b082      	sub	sp, #8
 800fb56:	af00      	add	r7, sp, #0
 800fb58:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d00c      	beq.n	800fb7a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	685b      	ldr	r3, [r3, #4]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d004      	beq.n	800fb72 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	685b      	ldr	r3, [r3, #4]
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f7fe fcdb 	bl	800e528 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800fb72:	6879      	ldr	r1, [r7, #4]
 800fb74:	2003      	movs	r0, #3
 800fb76:	f7fd febd 	bl	800d8f4 <memp_free>
  }
}
 800fb7a:	bf00      	nop
 800fb7c:	3708      	adds	r7, #8
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
	...

0800fb84 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b084      	sub	sp, #16
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d106      	bne.n	800fba0 <tcp_seg_copy+0x1c>
 800fb92:	4b0f      	ldr	r3, [pc, #60]	; (800fbd0 <tcp_seg_copy+0x4c>)
 800fb94:	f240 6282 	movw	r2, #1666	; 0x682
 800fb98:	490e      	ldr	r1, [pc, #56]	; (800fbd4 <tcp_seg_copy+0x50>)
 800fb9a:	480f      	ldr	r0, [pc, #60]	; (800fbd8 <tcp_seg_copy+0x54>)
 800fb9c:	f009 fc56 	bl	801944c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800fba0:	2003      	movs	r0, #3
 800fba2:	f7fd fe5b 	bl	800d85c <memp_malloc>
 800fba6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d101      	bne.n	800fbb2 <tcp_seg_copy+0x2e>
    return NULL;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	e00a      	b.n	800fbc8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800fbb2:	2210      	movs	r2, #16
 800fbb4:	6879      	ldr	r1, [r7, #4]
 800fbb6:	68f8      	ldr	r0, [r7, #12]
 800fbb8:	f009 fb6e 	bl	8019298 <memcpy>
  pbuf_ref(cseg->p);
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	685b      	ldr	r3, [r3, #4]
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f7fe fd51 	bl	800e668 <pbuf_ref>
  return cseg;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
}
 800fbc8:	4618      	mov	r0, r3
 800fbca:	3710      	adds	r7, #16
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}
 800fbd0:	0801b9f0 	.word	0x0801b9f0
 800fbd4:	0801bf44 	.word	0x0801bf44
 800fbd8:	0801ba34 	.word	0x0801ba34

0800fbdc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b084      	sub	sp, #16
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	60f8      	str	r0, [r7, #12]
 800fbe4:	60b9      	str	r1, [r7, #8]
 800fbe6:	607a      	str	r2, [r7, #4]
 800fbe8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800fbea:	68bb      	ldr	r3, [r7, #8]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d109      	bne.n	800fc04 <tcp_recv_null+0x28>
 800fbf0:	4b12      	ldr	r3, [pc, #72]	; (800fc3c <tcp_recv_null+0x60>)
 800fbf2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800fbf6:	4912      	ldr	r1, [pc, #72]	; (800fc40 <tcp_recv_null+0x64>)
 800fbf8:	4812      	ldr	r0, [pc, #72]	; (800fc44 <tcp_recv_null+0x68>)
 800fbfa:	f009 fc27 	bl	801944c <iprintf>
 800fbfe:	f06f 030f 	mvn.w	r3, #15
 800fc02:	e016      	b.n	800fc32 <tcp_recv_null+0x56>

  if (p != NULL) {
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d009      	beq.n	800fc1e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	891b      	ldrh	r3, [r3, #8]
 800fc0e:	4619      	mov	r1, r3
 800fc10:	68b8      	ldr	r0, [r7, #8]
 800fc12:	f7ff fb19 	bl	800f248 <tcp_recved>
    pbuf_free(p);
 800fc16:	6878      	ldr	r0, [r7, #4]
 800fc18:	f7fe fc86 	bl	800e528 <pbuf_free>
 800fc1c:	e008      	b.n	800fc30 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800fc1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d104      	bne.n	800fc30 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800fc26:	68b8      	ldr	r0, [r7, #8]
 800fc28:	f7ff f9be 	bl	800efa8 <tcp_close>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	e000      	b.n	800fc32 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800fc30:	2300      	movs	r3, #0
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	3710      	adds	r7, #16
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}
 800fc3a:	bf00      	nop
 800fc3c:	0801b9f0 	.word	0x0801b9f0
 800fc40:	0801bf60 	.word	0x0801bf60
 800fc44:	0801ba34 	.word	0x0801ba34

0800fc48 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b086      	sub	sp, #24
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	4603      	mov	r3, r0
 800fc50:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800fc52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	db01      	blt.n	800fc5e <tcp_kill_prio+0x16>
 800fc5a:	79fb      	ldrb	r3, [r7, #7]
 800fc5c:	e000      	b.n	800fc60 <tcp_kill_prio+0x18>
 800fc5e:	237f      	movs	r3, #127	; 0x7f
 800fc60:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800fc62:	7afb      	ldrb	r3, [r7, #11]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d034      	beq.n	800fcd2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800fc68:	7afb      	ldrb	r3, [r7, #11]
 800fc6a:	3b01      	subs	r3, #1
 800fc6c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800fc72:	2300      	movs	r3, #0
 800fc74:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc76:	4b19      	ldr	r3, [pc, #100]	; (800fcdc <tcp_kill_prio+0x94>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	617b      	str	r3, [r7, #20]
 800fc7c:	e01f      	b.n	800fcbe <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	7d5b      	ldrb	r3, [r3, #21]
 800fc82:	7afa      	ldrb	r2, [r7, #11]
 800fc84:	429a      	cmp	r2, r3
 800fc86:	d80c      	bhi.n	800fca2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800fc88:	697b      	ldr	r3, [r7, #20]
 800fc8a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800fc8c:	7afa      	ldrb	r2, [r7, #11]
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	d112      	bne.n	800fcb8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800fc92:	4b13      	ldr	r3, [pc, #76]	; (800fce0 <tcp_kill_prio+0x98>)
 800fc94:	681a      	ldr	r2, [r3, #0]
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	6a1b      	ldr	r3, [r3, #32]
 800fc9a:	1ad3      	subs	r3, r2, r3
 800fc9c:	68fa      	ldr	r2, [r7, #12]
 800fc9e:	429a      	cmp	r2, r3
 800fca0:	d80a      	bhi.n	800fcb8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800fca2:	4b0f      	ldr	r3, [pc, #60]	; (800fce0 <tcp_kill_prio+0x98>)
 800fca4:	681a      	ldr	r2, [r3, #0]
 800fca6:	697b      	ldr	r3, [r7, #20]
 800fca8:	6a1b      	ldr	r3, [r3, #32]
 800fcaa:	1ad3      	subs	r3, r2, r3
 800fcac:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800fcae:	697b      	ldr	r3, [r7, #20]
 800fcb0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800fcb2:	697b      	ldr	r3, [r7, #20]
 800fcb4:	7d5b      	ldrb	r3, [r3, #21]
 800fcb6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fcb8:	697b      	ldr	r3, [r7, #20]
 800fcba:	68db      	ldr	r3, [r3, #12]
 800fcbc:	617b      	str	r3, [r7, #20]
 800fcbe:	697b      	ldr	r3, [r7, #20]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d1dc      	bne.n	800fc7e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800fcc4:	693b      	ldr	r3, [r7, #16]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d004      	beq.n	800fcd4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fcca:	6938      	ldr	r0, [r7, #16]
 800fccc:	f7ff fa56 	bl	800f17c <tcp_abort>
 800fcd0:	e000      	b.n	800fcd4 <tcp_kill_prio+0x8c>
    return;
 800fcd2:	bf00      	nop
  }
}
 800fcd4:	3718      	adds	r7, #24
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}
 800fcda:	bf00      	nop
 800fcdc:	20006d00 	.word	0x20006d00
 800fce0:	20006d04 	.word	0x20006d04

0800fce4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b086      	sub	sp, #24
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	4603      	mov	r3, r0
 800fcec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800fcee:	79fb      	ldrb	r3, [r7, #7]
 800fcf0:	2b08      	cmp	r3, #8
 800fcf2:	d009      	beq.n	800fd08 <tcp_kill_state+0x24>
 800fcf4:	79fb      	ldrb	r3, [r7, #7]
 800fcf6:	2b09      	cmp	r3, #9
 800fcf8:	d006      	beq.n	800fd08 <tcp_kill_state+0x24>
 800fcfa:	4b1a      	ldr	r3, [pc, #104]	; (800fd64 <tcp_kill_state+0x80>)
 800fcfc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800fd00:	4919      	ldr	r1, [pc, #100]	; (800fd68 <tcp_kill_state+0x84>)
 800fd02:	481a      	ldr	r0, [pc, #104]	; (800fd6c <tcp_kill_state+0x88>)
 800fd04:	f009 fba2 	bl	801944c <iprintf>

  inactivity = 0;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd10:	4b17      	ldr	r3, [pc, #92]	; (800fd70 <tcp_kill_state+0x8c>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	617b      	str	r3, [r7, #20]
 800fd16:	e017      	b.n	800fd48 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800fd18:	697b      	ldr	r3, [r7, #20]
 800fd1a:	7d1b      	ldrb	r3, [r3, #20]
 800fd1c:	79fa      	ldrb	r2, [r7, #7]
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	d10f      	bne.n	800fd42 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fd22:	4b14      	ldr	r3, [pc, #80]	; (800fd74 <tcp_kill_state+0x90>)
 800fd24:	681a      	ldr	r2, [r3, #0]
 800fd26:	697b      	ldr	r3, [r7, #20]
 800fd28:	6a1b      	ldr	r3, [r3, #32]
 800fd2a:	1ad3      	subs	r3, r2, r3
 800fd2c:	68fa      	ldr	r2, [r7, #12]
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	d807      	bhi.n	800fd42 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800fd32:	4b10      	ldr	r3, [pc, #64]	; (800fd74 <tcp_kill_state+0x90>)
 800fd34:	681a      	ldr	r2, [r3, #0]
 800fd36:	697b      	ldr	r3, [r7, #20]
 800fd38:	6a1b      	ldr	r3, [r3, #32]
 800fd3a:	1ad3      	subs	r3, r2, r3
 800fd3c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800fd3e:	697b      	ldr	r3, [r7, #20]
 800fd40:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	68db      	ldr	r3, [r3, #12]
 800fd46:	617b      	str	r3, [r7, #20]
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d1e4      	bne.n	800fd18 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800fd4e:	693b      	ldr	r3, [r7, #16]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d003      	beq.n	800fd5c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800fd54:	2100      	movs	r1, #0
 800fd56:	6938      	ldr	r0, [r7, #16]
 800fd58:	f7ff f952 	bl	800f000 <tcp_abandon>
  }
}
 800fd5c:	bf00      	nop
 800fd5e:	3718      	adds	r7, #24
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}
 800fd64:	0801b9f0 	.word	0x0801b9f0
 800fd68:	0801bf7c 	.word	0x0801bf7c
 800fd6c:	0801ba34 	.word	0x0801ba34
 800fd70:	20006d00 	.word	0x20006d00
 800fd74:	20006d04 	.word	0x20006d04

0800fd78 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b084      	sub	sp, #16
 800fd7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800fd7e:	2300      	movs	r3, #0
 800fd80:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800fd82:	2300      	movs	r3, #0
 800fd84:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd86:	4b12      	ldr	r3, [pc, #72]	; (800fdd0 <tcp_kill_timewait+0x58>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	60fb      	str	r3, [r7, #12]
 800fd8c:	e012      	b.n	800fdb4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fd8e:	4b11      	ldr	r3, [pc, #68]	; (800fdd4 <tcp_kill_timewait+0x5c>)
 800fd90:	681a      	ldr	r2, [r3, #0]
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	6a1b      	ldr	r3, [r3, #32]
 800fd96:	1ad3      	subs	r3, r2, r3
 800fd98:	687a      	ldr	r2, [r7, #4]
 800fd9a:	429a      	cmp	r2, r3
 800fd9c:	d807      	bhi.n	800fdae <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800fd9e:	4b0d      	ldr	r3, [pc, #52]	; (800fdd4 <tcp_kill_timewait+0x5c>)
 800fda0:	681a      	ldr	r2, [r3, #0]
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	6a1b      	ldr	r3, [r3, #32]
 800fda6:	1ad3      	subs	r3, r2, r3
 800fda8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	68db      	ldr	r3, [r3, #12]
 800fdb2:	60fb      	str	r3, [r7, #12]
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d1e9      	bne.n	800fd8e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800fdba:	68bb      	ldr	r3, [r7, #8]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d002      	beq.n	800fdc6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fdc0:	68b8      	ldr	r0, [r7, #8]
 800fdc2:	f7ff f9db 	bl	800f17c <tcp_abort>
  }
}
 800fdc6:	bf00      	nop
 800fdc8:	3710      	adds	r7, #16
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}
 800fdce:	bf00      	nop
 800fdd0:	20006d10 	.word	0x20006d10
 800fdd4:	20006d04 	.word	0x20006d04

0800fdd8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b082      	sub	sp, #8
 800fddc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800fdde:	4b10      	ldr	r3, [pc, #64]	; (800fe20 <tcp_handle_closepend+0x48>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fde4:	e014      	b.n	800fe10 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	68db      	ldr	r3, [r3, #12]
 800fdea:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	8b5b      	ldrh	r3, [r3, #26]
 800fdf0:	f003 0308 	and.w	r3, r3, #8
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d009      	beq.n	800fe0c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	8b5b      	ldrh	r3, [r3, #26]
 800fdfc:	f023 0308 	bic.w	r3, r3, #8
 800fe00:	b29a      	uxth	r2, r3
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f7ff f864 	bl	800eed4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d1e7      	bne.n	800fde6 <tcp_handle_closepend+0xe>
  }
}
 800fe16:	bf00      	nop
 800fe18:	bf00      	nop
 800fe1a:	3708      	adds	r7, #8
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}
 800fe20:	20006d00 	.word	0x20006d00

0800fe24 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b084      	sub	sp, #16
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fe2e:	2001      	movs	r0, #1
 800fe30:	f7fd fd14 	bl	800d85c <memp_malloc>
 800fe34:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d126      	bne.n	800fe8a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800fe3c:	f7ff ffcc 	bl	800fdd8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800fe40:	f7ff ff9a 	bl	800fd78 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fe44:	2001      	movs	r0, #1
 800fe46:	f7fd fd09 	bl	800d85c <memp_malloc>
 800fe4a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d11b      	bne.n	800fe8a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800fe52:	2009      	movs	r0, #9
 800fe54:	f7ff ff46 	bl	800fce4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fe58:	2001      	movs	r0, #1
 800fe5a:	f7fd fcff 	bl	800d85c <memp_malloc>
 800fe5e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d111      	bne.n	800fe8a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800fe66:	2008      	movs	r0, #8
 800fe68:	f7ff ff3c 	bl	800fce4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fe6c:	2001      	movs	r0, #1
 800fe6e:	f7fd fcf5 	bl	800d85c <memp_malloc>
 800fe72:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d107      	bne.n	800fe8a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800fe7a:	79fb      	ldrb	r3, [r7, #7]
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	f7ff fee3 	bl	800fc48 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fe82:	2001      	movs	r0, #1
 800fe84:	f7fd fcea 	bl	800d85c <memp_malloc>
 800fe88:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d03f      	beq.n	800ff10 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800fe90:	229c      	movs	r2, #156	; 0x9c
 800fe92:	2100      	movs	r1, #0
 800fe94:	68f8      	ldr	r0, [r7, #12]
 800fe96:	f009 fa27 	bl	80192e8 <memset>
    pcb->prio = prio;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	79fa      	ldrb	r2, [r7, #7]
 800fe9e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fea6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800feb0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	22ff      	movs	r2, #255	; 0xff
 800febe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fec6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	2206      	movs	r2, #6
 800fecc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	2206      	movs	r2, #6
 800fed4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fedc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	2201      	movs	r2, #1
 800fee2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800fee6:	4b0d      	ldr	r3, [pc, #52]	; (800ff1c <tcp_alloc+0xf8>)
 800fee8:	681a      	ldr	r2, [r3, #0]
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800feee:	4b0c      	ldr	r3, [pc, #48]	; (800ff20 <tcp_alloc+0xfc>)
 800fef0:	781a      	ldrb	r2, [r3, #0]
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fefc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	4a08      	ldr	r2, [pc, #32]	; (800ff24 <tcp_alloc+0x100>)
 800ff04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	4a07      	ldr	r2, [pc, #28]	; (800ff28 <tcp_alloc+0x104>)
 800ff0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ff10:	68fb      	ldr	r3, [r7, #12]
}
 800ff12:	4618      	mov	r0, r3
 800ff14:	3710      	adds	r7, #16
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}
 800ff1a:	bf00      	nop
 800ff1c:	20006d04 	.word	0x20006d04
 800ff20:	2000052e 	.word	0x2000052e
 800ff24:	0800fbdd 	.word	0x0800fbdd
 800ff28:	006ddd00 	.word	0x006ddd00

0800ff2c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b082      	sub	sp, #8
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d107      	bne.n	800ff4a <tcp_pcb_purge+0x1e>
 800ff3a:	4b21      	ldr	r3, [pc, #132]	; (800ffc0 <tcp_pcb_purge+0x94>)
 800ff3c:	f640 0251 	movw	r2, #2129	; 0x851
 800ff40:	4920      	ldr	r1, [pc, #128]	; (800ffc4 <tcp_pcb_purge+0x98>)
 800ff42:	4821      	ldr	r0, [pc, #132]	; (800ffc8 <tcp_pcb_purge+0x9c>)
 800ff44:	f009 fa82 	bl	801944c <iprintf>
 800ff48:	e037      	b.n	800ffba <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	7d1b      	ldrb	r3, [r3, #20]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d033      	beq.n	800ffba <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ff56:	2b0a      	cmp	r3, #10
 800ff58:	d02f      	beq.n	800ffba <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ff5e:	2b01      	cmp	r3, #1
 800ff60:	d02b      	beq.n	800ffba <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d007      	beq.n	800ff7a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f7fe fada 	bl	800e528 <pbuf_free>
      pcb->refused_data = NULL;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	2200      	movs	r2, #0
 800ff78:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d002      	beq.n	800ff88 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ff82:	6878      	ldr	r0, [r7, #4]
 800ff84:	f000 f986 	bl	8010294 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ff8e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff94:	4618      	mov	r0, r3
 800ff96:	f7ff fdc7 	bl	800fb28 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f7ff fdc2 	bl	800fb28 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	66da      	str	r2, [r3, #108]	; 0x6c
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ffba:	3708      	adds	r7, #8
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}
 800ffc0:	0801b9f0 	.word	0x0801b9f0
 800ffc4:	0801c03c 	.word	0x0801c03c
 800ffc8:	0801ba34 	.word	0x0801ba34

0800ffcc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b084      	sub	sp, #16
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
 800ffd4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d106      	bne.n	800ffea <tcp_pcb_remove+0x1e>
 800ffdc:	4b3e      	ldr	r3, [pc, #248]	; (80100d8 <tcp_pcb_remove+0x10c>)
 800ffde:	f640 0283 	movw	r2, #2179	; 0x883
 800ffe2:	493e      	ldr	r1, [pc, #248]	; (80100dc <tcp_pcb_remove+0x110>)
 800ffe4:	483e      	ldr	r0, [pc, #248]	; (80100e0 <tcp_pcb_remove+0x114>)
 800ffe6:	f009 fa31 	bl	801944c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d106      	bne.n	800fffe <tcp_pcb_remove+0x32>
 800fff0:	4b39      	ldr	r3, [pc, #228]	; (80100d8 <tcp_pcb_remove+0x10c>)
 800fff2:	f640 0284 	movw	r2, #2180	; 0x884
 800fff6:	493b      	ldr	r1, [pc, #236]	; (80100e4 <tcp_pcb_remove+0x118>)
 800fff8:	4839      	ldr	r0, [pc, #228]	; (80100e0 <tcp_pcb_remove+0x114>)
 800fffa:	f009 fa27 	bl	801944c <iprintf>

  TCP_RMV(pcblist, pcb);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	683a      	ldr	r2, [r7, #0]
 8010004:	429a      	cmp	r2, r3
 8010006:	d105      	bne.n	8010014 <tcp_pcb_remove+0x48>
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	68da      	ldr	r2, [r3, #12]
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	601a      	str	r2, [r3, #0]
 8010012:	e013      	b.n	801003c <tcp_pcb_remove+0x70>
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	60fb      	str	r3, [r7, #12]
 801001a:	e00c      	b.n	8010036 <tcp_pcb_remove+0x6a>
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	68db      	ldr	r3, [r3, #12]
 8010020:	683a      	ldr	r2, [r7, #0]
 8010022:	429a      	cmp	r2, r3
 8010024:	d104      	bne.n	8010030 <tcp_pcb_remove+0x64>
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	68da      	ldr	r2, [r3, #12]
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	60da      	str	r2, [r3, #12]
 801002e:	e005      	b.n	801003c <tcp_pcb_remove+0x70>
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	68db      	ldr	r3, [r3, #12]
 8010034:	60fb      	str	r3, [r7, #12]
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d1ef      	bne.n	801001c <tcp_pcb_remove+0x50>
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	2200      	movs	r2, #0
 8010040:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010042:	6838      	ldr	r0, [r7, #0]
 8010044:	f7ff ff72 	bl	800ff2c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	7d1b      	ldrb	r3, [r3, #20]
 801004c:	2b0a      	cmp	r3, #10
 801004e:	d013      	beq.n	8010078 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010050:	683b      	ldr	r3, [r7, #0]
 8010052:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010054:	2b01      	cmp	r3, #1
 8010056:	d00f      	beq.n	8010078 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	8b5b      	ldrh	r3, [r3, #26]
 801005c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010060:	2b00      	cmp	r3, #0
 8010062:	d009      	beq.n	8010078 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010064:	683b      	ldr	r3, [r7, #0]
 8010066:	8b5b      	ldrh	r3, [r3, #26]
 8010068:	f043 0302 	orr.w	r3, r3, #2
 801006c:	b29a      	uxth	r2, r3
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010072:	6838      	ldr	r0, [r7, #0]
 8010074:	f002 ff6a 	bl	8012f4c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	7d1b      	ldrb	r3, [r3, #20]
 801007c:	2b01      	cmp	r3, #1
 801007e:	d020      	beq.n	80100c2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010084:	2b00      	cmp	r3, #0
 8010086:	d006      	beq.n	8010096 <tcp_pcb_remove+0xca>
 8010088:	4b13      	ldr	r3, [pc, #76]	; (80100d8 <tcp_pcb_remove+0x10c>)
 801008a:	f640 0293 	movw	r2, #2195	; 0x893
 801008e:	4916      	ldr	r1, [pc, #88]	; (80100e8 <tcp_pcb_remove+0x11c>)
 8010090:	4813      	ldr	r0, [pc, #76]	; (80100e0 <tcp_pcb_remove+0x114>)
 8010092:	f009 f9db 	bl	801944c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010096:	683b      	ldr	r3, [r7, #0]
 8010098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801009a:	2b00      	cmp	r3, #0
 801009c:	d006      	beq.n	80100ac <tcp_pcb_remove+0xe0>
 801009e:	4b0e      	ldr	r3, [pc, #56]	; (80100d8 <tcp_pcb_remove+0x10c>)
 80100a0:	f640 0294 	movw	r2, #2196	; 0x894
 80100a4:	4911      	ldr	r1, [pc, #68]	; (80100ec <tcp_pcb_remove+0x120>)
 80100a6:	480e      	ldr	r0, [pc, #56]	; (80100e0 <tcp_pcb_remove+0x114>)
 80100a8:	f009 f9d0 	bl	801944c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d006      	beq.n	80100c2 <tcp_pcb_remove+0xf6>
 80100b4:	4b08      	ldr	r3, [pc, #32]	; (80100d8 <tcp_pcb_remove+0x10c>)
 80100b6:	f640 0296 	movw	r2, #2198	; 0x896
 80100ba:	490d      	ldr	r1, [pc, #52]	; (80100f0 <tcp_pcb_remove+0x124>)
 80100bc:	4808      	ldr	r0, [pc, #32]	; (80100e0 <tcp_pcb_remove+0x114>)
 80100be:	f009 f9c5 	bl	801944c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	2200      	movs	r2, #0
 80100c6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80100c8:	683b      	ldr	r3, [r7, #0]
 80100ca:	2200      	movs	r2, #0
 80100cc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80100ce:	bf00      	nop
 80100d0:	3710      	adds	r7, #16
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}
 80100d6:	bf00      	nop
 80100d8:	0801b9f0 	.word	0x0801b9f0
 80100dc:	0801c058 	.word	0x0801c058
 80100e0:	0801ba34 	.word	0x0801ba34
 80100e4:	0801c074 	.word	0x0801c074
 80100e8:	0801c094 	.word	0x0801c094
 80100ec:	0801c0ac 	.word	0x0801c0ac
 80100f0:	0801c0c8 	.word	0x0801c0c8

080100f4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b082      	sub	sp, #8
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d106      	bne.n	8010110 <tcp_next_iss+0x1c>
 8010102:	4b0a      	ldr	r3, [pc, #40]	; (801012c <tcp_next_iss+0x38>)
 8010104:	f640 02af 	movw	r2, #2223	; 0x8af
 8010108:	4909      	ldr	r1, [pc, #36]	; (8010130 <tcp_next_iss+0x3c>)
 801010a:	480a      	ldr	r0, [pc, #40]	; (8010134 <tcp_next_iss+0x40>)
 801010c:	f009 f99e 	bl	801944c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010110:	4b09      	ldr	r3, [pc, #36]	; (8010138 <tcp_next_iss+0x44>)
 8010112:	681a      	ldr	r2, [r3, #0]
 8010114:	4b09      	ldr	r3, [pc, #36]	; (801013c <tcp_next_iss+0x48>)
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	4413      	add	r3, r2
 801011a:	4a07      	ldr	r2, [pc, #28]	; (8010138 <tcp_next_iss+0x44>)
 801011c:	6013      	str	r3, [r2, #0]
  return iss;
 801011e:	4b06      	ldr	r3, [pc, #24]	; (8010138 <tcp_next_iss+0x44>)
 8010120:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010122:	4618      	mov	r0, r3
 8010124:	3708      	adds	r7, #8
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}
 801012a:	bf00      	nop
 801012c:	0801b9f0 	.word	0x0801b9f0
 8010130:	0801c0e0 	.word	0x0801c0e0
 8010134:	0801ba34 	.word	0x0801ba34
 8010138:	20000064 	.word	0x20000064
 801013c:	20006d04 	.word	0x20006d04

08010140 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b086      	sub	sp, #24
 8010144:	af00      	add	r7, sp, #0
 8010146:	4603      	mov	r3, r0
 8010148:	60b9      	str	r1, [r7, #8]
 801014a:	607a      	str	r2, [r7, #4]
 801014c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d106      	bne.n	8010162 <tcp_eff_send_mss_netif+0x22>
 8010154:	4b14      	ldr	r3, [pc, #80]	; (80101a8 <tcp_eff_send_mss_netif+0x68>)
 8010156:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801015a:	4914      	ldr	r1, [pc, #80]	; (80101ac <tcp_eff_send_mss_netif+0x6c>)
 801015c:	4814      	ldr	r0, [pc, #80]	; (80101b0 <tcp_eff_send_mss_netif+0x70>)
 801015e:	f009 f975 	bl	801944c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010162:	68bb      	ldr	r3, [r7, #8]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d101      	bne.n	801016c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010168:	89fb      	ldrh	r3, [r7, #14]
 801016a:	e019      	b.n	80101a0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801016c:	68bb      	ldr	r3, [r7, #8]
 801016e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010170:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010172:	8afb      	ldrh	r3, [r7, #22]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d012      	beq.n	801019e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010178:	2328      	movs	r3, #40	; 0x28
 801017a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801017c:	8afa      	ldrh	r2, [r7, #22]
 801017e:	8abb      	ldrh	r3, [r7, #20]
 8010180:	429a      	cmp	r2, r3
 8010182:	d904      	bls.n	801018e <tcp_eff_send_mss_netif+0x4e>
 8010184:	8afa      	ldrh	r2, [r7, #22]
 8010186:	8abb      	ldrh	r3, [r7, #20]
 8010188:	1ad3      	subs	r3, r2, r3
 801018a:	b29b      	uxth	r3, r3
 801018c:	e000      	b.n	8010190 <tcp_eff_send_mss_netif+0x50>
 801018e:	2300      	movs	r3, #0
 8010190:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010192:	8a7a      	ldrh	r2, [r7, #18]
 8010194:	89fb      	ldrh	r3, [r7, #14]
 8010196:	4293      	cmp	r3, r2
 8010198:	bf28      	it	cs
 801019a:	4613      	movcs	r3, r2
 801019c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801019e:	89fb      	ldrh	r3, [r7, #14]
}
 80101a0:	4618      	mov	r0, r3
 80101a2:	3718      	adds	r7, #24
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}
 80101a8:	0801b9f0 	.word	0x0801b9f0
 80101ac:	0801c0fc 	.word	0x0801c0fc
 80101b0:	0801ba34 	.word	0x0801ba34

080101b4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b084      	sub	sp, #16
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
 80101bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d119      	bne.n	80101fc <tcp_netif_ip_addr_changed_pcblist+0x48>
 80101c8:	4b10      	ldr	r3, [pc, #64]	; (801020c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80101ca:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80101ce:	4910      	ldr	r1, [pc, #64]	; (8010210 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80101d0:	4810      	ldr	r0, [pc, #64]	; (8010214 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80101d2:	f009 f93b 	bl	801944c <iprintf>

  while (pcb != NULL) {
 80101d6:	e011      	b.n	80101fc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	681a      	ldr	r2, [r3, #0]
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	429a      	cmp	r2, r3
 80101e2:	d108      	bne.n	80101f6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	68db      	ldr	r3, [r3, #12]
 80101e8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80101ea:	68f8      	ldr	r0, [r7, #12]
 80101ec:	f7fe ffc6 	bl	800f17c <tcp_abort>
      pcb = next;
 80101f0:	68bb      	ldr	r3, [r7, #8]
 80101f2:	60fb      	str	r3, [r7, #12]
 80101f4:	e002      	b.n	80101fc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	68db      	ldr	r3, [r3, #12]
 80101fa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d1ea      	bne.n	80101d8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010202:	bf00      	nop
 8010204:	bf00      	nop
 8010206:	3710      	adds	r7, #16
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}
 801020c:	0801b9f0 	.word	0x0801b9f0
 8010210:	0801c124 	.word	0x0801c124
 8010214:	0801ba34 	.word	0x0801ba34

08010218 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b084      	sub	sp, #16
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
 8010220:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d02a      	beq.n	801027e <tcp_netif_ip_addr_changed+0x66>
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d026      	beq.n	801027e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010230:	4b15      	ldr	r3, [pc, #84]	; (8010288 <tcp_netif_ip_addr_changed+0x70>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	4619      	mov	r1, r3
 8010236:	6878      	ldr	r0, [r7, #4]
 8010238:	f7ff ffbc 	bl	80101b4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801023c:	4b13      	ldr	r3, [pc, #76]	; (801028c <tcp_netif_ip_addr_changed+0x74>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	4619      	mov	r1, r3
 8010242:	6878      	ldr	r0, [r7, #4]
 8010244:	f7ff ffb6 	bl	80101b4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d017      	beq.n	801027e <tcp_netif_ip_addr_changed+0x66>
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d013      	beq.n	801027e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010256:	4b0e      	ldr	r3, [pc, #56]	; (8010290 <tcp_netif_ip_addr_changed+0x78>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	60fb      	str	r3, [r7, #12]
 801025c:	e00c      	b.n	8010278 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	681a      	ldr	r2, [r3, #0]
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	429a      	cmp	r2, r3
 8010268:	d103      	bne.n	8010272 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	681a      	ldr	r2, [r3, #0]
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	68db      	ldr	r3, [r3, #12]
 8010276:	60fb      	str	r3, [r7, #12]
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d1ef      	bne.n	801025e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801027e:	bf00      	nop
 8010280:	3710      	adds	r7, #16
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}
 8010286:	bf00      	nop
 8010288:	20006d00 	.word	0x20006d00
 801028c:	20006d0c 	.word	0x20006d0c
 8010290:	20006d08 	.word	0x20006d08

08010294 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b082      	sub	sp, #8
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d007      	beq.n	80102b4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102a8:	4618      	mov	r0, r3
 80102aa:	f7ff fc3d 	bl	800fb28 <tcp_segs_free>
    pcb->ooseq = NULL;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	2200      	movs	r2, #0
 80102b2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80102b4:	bf00      	nop
 80102b6:	3708      	adds	r7, #8
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}

080102bc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80102bc:	b590      	push	{r4, r7, lr}
 80102be:	b08d      	sub	sp, #52	; 0x34
 80102c0:	af04      	add	r7, sp, #16
 80102c2:	6078      	str	r0, [r7, #4]
 80102c4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d105      	bne.n	80102d8 <tcp_input+0x1c>
 80102cc:	4b9b      	ldr	r3, [pc, #620]	; (801053c <tcp_input+0x280>)
 80102ce:	2283      	movs	r2, #131	; 0x83
 80102d0:	499b      	ldr	r1, [pc, #620]	; (8010540 <tcp_input+0x284>)
 80102d2:	489c      	ldr	r0, [pc, #624]	; (8010544 <tcp_input+0x288>)
 80102d4:	f009 f8ba 	bl	801944c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	685b      	ldr	r3, [r3, #4]
 80102dc:	4a9a      	ldr	r2, [pc, #616]	; (8010548 <tcp_input+0x28c>)
 80102de:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	895b      	ldrh	r3, [r3, #10]
 80102e4:	2b13      	cmp	r3, #19
 80102e6:	f240 83c4 	bls.w	8010a72 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80102ea:	4b98      	ldr	r3, [pc, #608]	; (801054c <tcp_input+0x290>)
 80102ec:	695b      	ldr	r3, [r3, #20]
 80102ee:	4a97      	ldr	r2, [pc, #604]	; (801054c <tcp_input+0x290>)
 80102f0:	6812      	ldr	r2, [r2, #0]
 80102f2:	4611      	mov	r1, r2
 80102f4:	4618      	mov	r0, r3
 80102f6:	f007 fe45 	bl	8017f84 <ip4_addr_isbroadcast_u32>
 80102fa:	4603      	mov	r3, r0
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	f040 83ba 	bne.w	8010a76 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010302:	4b92      	ldr	r3, [pc, #584]	; (801054c <tcp_input+0x290>)
 8010304:	695b      	ldr	r3, [r3, #20]
 8010306:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801030a:	2be0      	cmp	r3, #224	; 0xe0
 801030c:	f000 83b3 	beq.w	8010a76 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010310:	4b8d      	ldr	r3, [pc, #564]	; (8010548 <tcp_input+0x28c>)
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	899b      	ldrh	r3, [r3, #12]
 8010316:	b29b      	uxth	r3, r3
 8010318:	4618      	mov	r0, r3
 801031a:	f7fc fe49 	bl	800cfb0 <lwip_htons>
 801031e:	4603      	mov	r3, r0
 8010320:	0b1b      	lsrs	r3, r3, #12
 8010322:	b29b      	uxth	r3, r3
 8010324:	b2db      	uxtb	r3, r3
 8010326:	009b      	lsls	r3, r3, #2
 8010328:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801032a:	7cbb      	ldrb	r3, [r7, #18]
 801032c:	2b13      	cmp	r3, #19
 801032e:	f240 83a4 	bls.w	8010a7a <tcp_input+0x7be>
 8010332:	7cbb      	ldrb	r3, [r7, #18]
 8010334:	b29a      	uxth	r2, r3
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	891b      	ldrh	r3, [r3, #8]
 801033a:	429a      	cmp	r2, r3
 801033c:	f200 839d 	bhi.w	8010a7a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010340:	7cbb      	ldrb	r3, [r7, #18]
 8010342:	b29b      	uxth	r3, r3
 8010344:	3b14      	subs	r3, #20
 8010346:	b29a      	uxth	r2, r3
 8010348:	4b81      	ldr	r3, [pc, #516]	; (8010550 <tcp_input+0x294>)
 801034a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801034c:	4b81      	ldr	r3, [pc, #516]	; (8010554 <tcp_input+0x298>)
 801034e:	2200      	movs	r2, #0
 8010350:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	895a      	ldrh	r2, [r3, #10]
 8010356:	7cbb      	ldrb	r3, [r7, #18]
 8010358:	b29b      	uxth	r3, r3
 801035a:	429a      	cmp	r2, r3
 801035c:	d309      	bcc.n	8010372 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801035e:	4b7c      	ldr	r3, [pc, #496]	; (8010550 <tcp_input+0x294>)
 8010360:	881a      	ldrh	r2, [r3, #0]
 8010362:	4b7d      	ldr	r3, [pc, #500]	; (8010558 <tcp_input+0x29c>)
 8010364:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010366:	7cbb      	ldrb	r3, [r7, #18]
 8010368:	4619      	mov	r1, r3
 801036a:	6878      	ldr	r0, [r7, #4]
 801036c:	f7fe f856 	bl	800e41c <pbuf_remove_header>
 8010370:	e04e      	b.n	8010410 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d105      	bne.n	8010386 <tcp_input+0xca>
 801037a:	4b70      	ldr	r3, [pc, #448]	; (801053c <tcp_input+0x280>)
 801037c:	22c2      	movs	r2, #194	; 0xc2
 801037e:	4977      	ldr	r1, [pc, #476]	; (801055c <tcp_input+0x2a0>)
 8010380:	4870      	ldr	r0, [pc, #448]	; (8010544 <tcp_input+0x288>)
 8010382:	f009 f863 	bl	801944c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010386:	2114      	movs	r1, #20
 8010388:	6878      	ldr	r0, [r7, #4]
 801038a:	f7fe f847 	bl	800e41c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	895a      	ldrh	r2, [r3, #10]
 8010392:	4b71      	ldr	r3, [pc, #452]	; (8010558 <tcp_input+0x29c>)
 8010394:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010396:	4b6e      	ldr	r3, [pc, #440]	; (8010550 <tcp_input+0x294>)
 8010398:	881a      	ldrh	r2, [r3, #0]
 801039a:	4b6f      	ldr	r3, [pc, #444]	; (8010558 <tcp_input+0x29c>)
 801039c:	881b      	ldrh	r3, [r3, #0]
 801039e:	1ad3      	subs	r3, r2, r3
 80103a0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80103a2:	4b6d      	ldr	r3, [pc, #436]	; (8010558 <tcp_input+0x29c>)
 80103a4:	881b      	ldrh	r3, [r3, #0]
 80103a6:	4619      	mov	r1, r3
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f7fe f837 	bl	800e41c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	895b      	ldrh	r3, [r3, #10]
 80103b4:	8a3a      	ldrh	r2, [r7, #16]
 80103b6:	429a      	cmp	r2, r3
 80103b8:	f200 8361 	bhi.w	8010a7e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	685b      	ldr	r3, [r3, #4]
 80103c2:	4a64      	ldr	r2, [pc, #400]	; (8010554 <tcp_input+0x298>)
 80103c4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	8a3a      	ldrh	r2, [r7, #16]
 80103cc:	4611      	mov	r1, r2
 80103ce:	4618      	mov	r0, r3
 80103d0:	f7fe f824 	bl	800e41c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	891a      	ldrh	r2, [r3, #8]
 80103d8:	8a3b      	ldrh	r3, [r7, #16]
 80103da:	1ad3      	subs	r3, r2, r3
 80103dc:	b29a      	uxth	r2, r3
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	895b      	ldrh	r3, [r3, #10]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d005      	beq.n	80103f6 <tcp_input+0x13a>
 80103ea:	4b54      	ldr	r3, [pc, #336]	; (801053c <tcp_input+0x280>)
 80103ec:	22df      	movs	r2, #223	; 0xdf
 80103ee:	495c      	ldr	r1, [pc, #368]	; (8010560 <tcp_input+0x2a4>)
 80103f0:	4854      	ldr	r0, [pc, #336]	; (8010544 <tcp_input+0x288>)
 80103f2:	f009 f82b 	bl	801944c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	891a      	ldrh	r2, [r3, #8]
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	891b      	ldrh	r3, [r3, #8]
 8010400:	429a      	cmp	r2, r3
 8010402:	d005      	beq.n	8010410 <tcp_input+0x154>
 8010404:	4b4d      	ldr	r3, [pc, #308]	; (801053c <tcp_input+0x280>)
 8010406:	22e0      	movs	r2, #224	; 0xe0
 8010408:	4956      	ldr	r1, [pc, #344]	; (8010564 <tcp_input+0x2a8>)
 801040a:	484e      	ldr	r0, [pc, #312]	; (8010544 <tcp_input+0x288>)
 801040c:	f009 f81e 	bl	801944c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010410:	4b4d      	ldr	r3, [pc, #308]	; (8010548 <tcp_input+0x28c>)
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	881b      	ldrh	r3, [r3, #0]
 8010416:	b29b      	uxth	r3, r3
 8010418:	4a4b      	ldr	r2, [pc, #300]	; (8010548 <tcp_input+0x28c>)
 801041a:	6814      	ldr	r4, [r2, #0]
 801041c:	4618      	mov	r0, r3
 801041e:	f7fc fdc7 	bl	800cfb0 <lwip_htons>
 8010422:	4603      	mov	r3, r0
 8010424:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010426:	4b48      	ldr	r3, [pc, #288]	; (8010548 <tcp_input+0x28c>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	885b      	ldrh	r3, [r3, #2]
 801042c:	b29b      	uxth	r3, r3
 801042e:	4a46      	ldr	r2, [pc, #280]	; (8010548 <tcp_input+0x28c>)
 8010430:	6814      	ldr	r4, [r2, #0]
 8010432:	4618      	mov	r0, r3
 8010434:	f7fc fdbc 	bl	800cfb0 <lwip_htons>
 8010438:	4603      	mov	r3, r0
 801043a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801043c:	4b42      	ldr	r3, [pc, #264]	; (8010548 <tcp_input+0x28c>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	685b      	ldr	r3, [r3, #4]
 8010442:	4a41      	ldr	r2, [pc, #260]	; (8010548 <tcp_input+0x28c>)
 8010444:	6814      	ldr	r4, [r2, #0]
 8010446:	4618      	mov	r0, r3
 8010448:	f7fc fdc7 	bl	800cfda <lwip_htonl>
 801044c:	4603      	mov	r3, r0
 801044e:	6063      	str	r3, [r4, #4]
 8010450:	6863      	ldr	r3, [r4, #4]
 8010452:	4a45      	ldr	r2, [pc, #276]	; (8010568 <tcp_input+0x2ac>)
 8010454:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010456:	4b3c      	ldr	r3, [pc, #240]	; (8010548 <tcp_input+0x28c>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	689b      	ldr	r3, [r3, #8]
 801045c:	4a3a      	ldr	r2, [pc, #232]	; (8010548 <tcp_input+0x28c>)
 801045e:	6814      	ldr	r4, [r2, #0]
 8010460:	4618      	mov	r0, r3
 8010462:	f7fc fdba 	bl	800cfda <lwip_htonl>
 8010466:	4603      	mov	r3, r0
 8010468:	60a3      	str	r3, [r4, #8]
 801046a:	68a3      	ldr	r3, [r4, #8]
 801046c:	4a3f      	ldr	r2, [pc, #252]	; (801056c <tcp_input+0x2b0>)
 801046e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010470:	4b35      	ldr	r3, [pc, #212]	; (8010548 <tcp_input+0x28c>)
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	89db      	ldrh	r3, [r3, #14]
 8010476:	b29b      	uxth	r3, r3
 8010478:	4a33      	ldr	r2, [pc, #204]	; (8010548 <tcp_input+0x28c>)
 801047a:	6814      	ldr	r4, [r2, #0]
 801047c:	4618      	mov	r0, r3
 801047e:	f7fc fd97 	bl	800cfb0 <lwip_htons>
 8010482:	4603      	mov	r3, r0
 8010484:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010486:	4b30      	ldr	r3, [pc, #192]	; (8010548 <tcp_input+0x28c>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	899b      	ldrh	r3, [r3, #12]
 801048c:	b29b      	uxth	r3, r3
 801048e:	4618      	mov	r0, r3
 8010490:	f7fc fd8e 	bl	800cfb0 <lwip_htons>
 8010494:	4603      	mov	r3, r0
 8010496:	b2db      	uxtb	r3, r3
 8010498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801049c:	b2da      	uxtb	r2, r3
 801049e:	4b34      	ldr	r3, [pc, #208]	; (8010570 <tcp_input+0x2b4>)
 80104a0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	891a      	ldrh	r2, [r3, #8]
 80104a6:	4b33      	ldr	r3, [pc, #204]	; (8010574 <tcp_input+0x2b8>)
 80104a8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80104aa:	4b31      	ldr	r3, [pc, #196]	; (8010570 <tcp_input+0x2b4>)
 80104ac:	781b      	ldrb	r3, [r3, #0]
 80104ae:	f003 0303 	and.w	r3, r3, #3
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d00c      	beq.n	80104d0 <tcp_input+0x214>
    tcplen++;
 80104b6:	4b2f      	ldr	r3, [pc, #188]	; (8010574 <tcp_input+0x2b8>)
 80104b8:	881b      	ldrh	r3, [r3, #0]
 80104ba:	3301      	adds	r3, #1
 80104bc:	b29a      	uxth	r2, r3
 80104be:	4b2d      	ldr	r3, [pc, #180]	; (8010574 <tcp_input+0x2b8>)
 80104c0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	891a      	ldrh	r2, [r3, #8]
 80104c6:	4b2b      	ldr	r3, [pc, #172]	; (8010574 <tcp_input+0x2b8>)
 80104c8:	881b      	ldrh	r3, [r3, #0]
 80104ca:	429a      	cmp	r2, r3
 80104cc:	f200 82d9 	bhi.w	8010a82 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80104d0:	2300      	movs	r3, #0
 80104d2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80104d4:	4b28      	ldr	r3, [pc, #160]	; (8010578 <tcp_input+0x2bc>)
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	61fb      	str	r3, [r7, #28]
 80104da:	e09d      	b.n	8010618 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80104dc:	69fb      	ldr	r3, [r7, #28]
 80104de:	7d1b      	ldrb	r3, [r3, #20]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d105      	bne.n	80104f0 <tcp_input+0x234>
 80104e4:	4b15      	ldr	r3, [pc, #84]	; (801053c <tcp_input+0x280>)
 80104e6:	22fb      	movs	r2, #251	; 0xfb
 80104e8:	4924      	ldr	r1, [pc, #144]	; (801057c <tcp_input+0x2c0>)
 80104ea:	4816      	ldr	r0, [pc, #88]	; (8010544 <tcp_input+0x288>)
 80104ec:	f008 ffae 	bl	801944c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80104f0:	69fb      	ldr	r3, [r7, #28]
 80104f2:	7d1b      	ldrb	r3, [r3, #20]
 80104f4:	2b0a      	cmp	r3, #10
 80104f6:	d105      	bne.n	8010504 <tcp_input+0x248>
 80104f8:	4b10      	ldr	r3, [pc, #64]	; (801053c <tcp_input+0x280>)
 80104fa:	22fc      	movs	r2, #252	; 0xfc
 80104fc:	4920      	ldr	r1, [pc, #128]	; (8010580 <tcp_input+0x2c4>)
 80104fe:	4811      	ldr	r0, [pc, #68]	; (8010544 <tcp_input+0x288>)
 8010500:	f008 ffa4 	bl	801944c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010504:	69fb      	ldr	r3, [r7, #28]
 8010506:	7d1b      	ldrb	r3, [r3, #20]
 8010508:	2b01      	cmp	r3, #1
 801050a:	d105      	bne.n	8010518 <tcp_input+0x25c>
 801050c:	4b0b      	ldr	r3, [pc, #44]	; (801053c <tcp_input+0x280>)
 801050e:	22fd      	movs	r2, #253	; 0xfd
 8010510:	491c      	ldr	r1, [pc, #112]	; (8010584 <tcp_input+0x2c8>)
 8010512:	480c      	ldr	r0, [pc, #48]	; (8010544 <tcp_input+0x288>)
 8010514:	f008 ff9a 	bl	801944c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010518:	69fb      	ldr	r3, [r7, #28]
 801051a:	7a1b      	ldrb	r3, [r3, #8]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d033      	beq.n	8010588 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010520:	69fb      	ldr	r3, [r7, #28]
 8010522:	7a1a      	ldrb	r2, [r3, #8]
 8010524:	4b09      	ldr	r3, [pc, #36]	; (801054c <tcp_input+0x290>)
 8010526:	685b      	ldr	r3, [r3, #4]
 8010528:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801052c:	3301      	adds	r3, #1
 801052e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010530:	429a      	cmp	r2, r3
 8010532:	d029      	beq.n	8010588 <tcp_input+0x2cc>
      prev = pcb;
 8010534:	69fb      	ldr	r3, [r7, #28]
 8010536:	61bb      	str	r3, [r7, #24]
      continue;
 8010538:	e06b      	b.n	8010612 <tcp_input+0x356>
 801053a:	bf00      	nop
 801053c:	0801c158 	.word	0x0801c158
 8010540:	0801c18c 	.word	0x0801c18c
 8010544:	0801c1a4 	.word	0x0801c1a4
 8010548:	20000540 	.word	0x20000540
 801054c:	2000379c 	.word	0x2000379c
 8010550:	20000544 	.word	0x20000544
 8010554:	20000548 	.word	0x20000548
 8010558:	20000546 	.word	0x20000546
 801055c:	0801c1cc 	.word	0x0801c1cc
 8010560:	0801c1dc 	.word	0x0801c1dc
 8010564:	0801c1e8 	.word	0x0801c1e8
 8010568:	20000550 	.word	0x20000550
 801056c:	20000554 	.word	0x20000554
 8010570:	2000055c 	.word	0x2000055c
 8010574:	2000055a 	.word	0x2000055a
 8010578:	20006d00 	.word	0x20006d00
 801057c:	0801c208 	.word	0x0801c208
 8010580:	0801c230 	.word	0x0801c230
 8010584:	0801c25c 	.word	0x0801c25c
    }

    if (pcb->remote_port == tcphdr->src &&
 8010588:	69fb      	ldr	r3, [r7, #28]
 801058a:	8b1a      	ldrh	r2, [r3, #24]
 801058c:	4b94      	ldr	r3, [pc, #592]	; (80107e0 <tcp_input+0x524>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	881b      	ldrh	r3, [r3, #0]
 8010592:	b29b      	uxth	r3, r3
 8010594:	429a      	cmp	r2, r3
 8010596:	d13a      	bne.n	801060e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010598:	69fb      	ldr	r3, [r7, #28]
 801059a:	8ada      	ldrh	r2, [r3, #22]
 801059c:	4b90      	ldr	r3, [pc, #576]	; (80107e0 <tcp_input+0x524>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	885b      	ldrh	r3, [r3, #2]
 80105a2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80105a4:	429a      	cmp	r2, r3
 80105a6:	d132      	bne.n	801060e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80105a8:	69fb      	ldr	r3, [r7, #28]
 80105aa:	685a      	ldr	r2, [r3, #4]
 80105ac:	4b8d      	ldr	r3, [pc, #564]	; (80107e4 <tcp_input+0x528>)
 80105ae:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d12c      	bne.n	801060e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80105b4:	69fb      	ldr	r3, [r7, #28]
 80105b6:	681a      	ldr	r2, [r3, #0]
 80105b8:	4b8a      	ldr	r3, [pc, #552]	; (80107e4 <tcp_input+0x528>)
 80105ba:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80105bc:	429a      	cmp	r2, r3
 80105be:	d126      	bne.n	801060e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80105c0:	69fb      	ldr	r3, [r7, #28]
 80105c2:	68db      	ldr	r3, [r3, #12]
 80105c4:	69fa      	ldr	r2, [r7, #28]
 80105c6:	429a      	cmp	r2, r3
 80105c8:	d106      	bne.n	80105d8 <tcp_input+0x31c>
 80105ca:	4b87      	ldr	r3, [pc, #540]	; (80107e8 <tcp_input+0x52c>)
 80105cc:	f240 120d 	movw	r2, #269	; 0x10d
 80105d0:	4986      	ldr	r1, [pc, #536]	; (80107ec <tcp_input+0x530>)
 80105d2:	4887      	ldr	r0, [pc, #540]	; (80107f0 <tcp_input+0x534>)
 80105d4:	f008 ff3a 	bl	801944c <iprintf>
      if (prev != NULL) {
 80105d8:	69bb      	ldr	r3, [r7, #24]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d00a      	beq.n	80105f4 <tcp_input+0x338>
        prev->next = pcb->next;
 80105de:	69fb      	ldr	r3, [r7, #28]
 80105e0:	68da      	ldr	r2, [r3, #12]
 80105e2:	69bb      	ldr	r3, [r7, #24]
 80105e4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80105e6:	4b83      	ldr	r3, [pc, #524]	; (80107f4 <tcp_input+0x538>)
 80105e8:	681a      	ldr	r2, [r3, #0]
 80105ea:	69fb      	ldr	r3, [r7, #28]
 80105ec:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80105ee:	4a81      	ldr	r2, [pc, #516]	; (80107f4 <tcp_input+0x538>)
 80105f0:	69fb      	ldr	r3, [r7, #28]
 80105f2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80105f4:	69fb      	ldr	r3, [r7, #28]
 80105f6:	68db      	ldr	r3, [r3, #12]
 80105f8:	69fa      	ldr	r2, [r7, #28]
 80105fa:	429a      	cmp	r2, r3
 80105fc:	d111      	bne.n	8010622 <tcp_input+0x366>
 80105fe:	4b7a      	ldr	r3, [pc, #488]	; (80107e8 <tcp_input+0x52c>)
 8010600:	f240 1215 	movw	r2, #277	; 0x115
 8010604:	497c      	ldr	r1, [pc, #496]	; (80107f8 <tcp_input+0x53c>)
 8010606:	487a      	ldr	r0, [pc, #488]	; (80107f0 <tcp_input+0x534>)
 8010608:	f008 ff20 	bl	801944c <iprintf>
      break;
 801060c:	e009      	b.n	8010622 <tcp_input+0x366>
    }
    prev = pcb;
 801060e:	69fb      	ldr	r3, [r7, #28]
 8010610:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010612:	69fb      	ldr	r3, [r7, #28]
 8010614:	68db      	ldr	r3, [r3, #12]
 8010616:	61fb      	str	r3, [r7, #28]
 8010618:	69fb      	ldr	r3, [r7, #28]
 801061a:	2b00      	cmp	r3, #0
 801061c:	f47f af5e 	bne.w	80104dc <tcp_input+0x220>
 8010620:	e000      	b.n	8010624 <tcp_input+0x368>
      break;
 8010622:	bf00      	nop
  }

  if (pcb == NULL) {
 8010624:	69fb      	ldr	r3, [r7, #28]
 8010626:	2b00      	cmp	r3, #0
 8010628:	f040 8095 	bne.w	8010756 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801062c:	4b73      	ldr	r3, [pc, #460]	; (80107fc <tcp_input+0x540>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	61fb      	str	r3, [r7, #28]
 8010632:	e03f      	b.n	80106b4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010634:	69fb      	ldr	r3, [r7, #28]
 8010636:	7d1b      	ldrb	r3, [r3, #20]
 8010638:	2b0a      	cmp	r3, #10
 801063a:	d006      	beq.n	801064a <tcp_input+0x38e>
 801063c:	4b6a      	ldr	r3, [pc, #424]	; (80107e8 <tcp_input+0x52c>)
 801063e:	f240 121f 	movw	r2, #287	; 0x11f
 8010642:	496f      	ldr	r1, [pc, #444]	; (8010800 <tcp_input+0x544>)
 8010644:	486a      	ldr	r0, [pc, #424]	; (80107f0 <tcp_input+0x534>)
 8010646:	f008 ff01 	bl	801944c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801064a:	69fb      	ldr	r3, [r7, #28]
 801064c:	7a1b      	ldrb	r3, [r3, #8]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d009      	beq.n	8010666 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010652:	69fb      	ldr	r3, [r7, #28]
 8010654:	7a1a      	ldrb	r2, [r3, #8]
 8010656:	4b63      	ldr	r3, [pc, #396]	; (80107e4 <tcp_input+0x528>)
 8010658:	685b      	ldr	r3, [r3, #4]
 801065a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801065e:	3301      	adds	r3, #1
 8010660:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010662:	429a      	cmp	r2, r3
 8010664:	d122      	bne.n	80106ac <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010666:	69fb      	ldr	r3, [r7, #28]
 8010668:	8b1a      	ldrh	r2, [r3, #24]
 801066a:	4b5d      	ldr	r3, [pc, #372]	; (80107e0 <tcp_input+0x524>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	881b      	ldrh	r3, [r3, #0]
 8010670:	b29b      	uxth	r3, r3
 8010672:	429a      	cmp	r2, r3
 8010674:	d11b      	bne.n	80106ae <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010676:	69fb      	ldr	r3, [r7, #28]
 8010678:	8ada      	ldrh	r2, [r3, #22]
 801067a:	4b59      	ldr	r3, [pc, #356]	; (80107e0 <tcp_input+0x524>)
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	885b      	ldrh	r3, [r3, #2]
 8010680:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010682:	429a      	cmp	r2, r3
 8010684:	d113      	bne.n	80106ae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010686:	69fb      	ldr	r3, [r7, #28]
 8010688:	685a      	ldr	r2, [r3, #4]
 801068a:	4b56      	ldr	r3, [pc, #344]	; (80107e4 <tcp_input+0x528>)
 801068c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801068e:	429a      	cmp	r2, r3
 8010690:	d10d      	bne.n	80106ae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010692:	69fb      	ldr	r3, [r7, #28]
 8010694:	681a      	ldr	r2, [r3, #0]
 8010696:	4b53      	ldr	r3, [pc, #332]	; (80107e4 <tcp_input+0x528>)
 8010698:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801069a:	429a      	cmp	r2, r3
 801069c:	d107      	bne.n	80106ae <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801069e:	69f8      	ldr	r0, [r7, #28]
 80106a0:	f000 fb54 	bl	8010d4c <tcp_timewait_input>
        }
        pbuf_free(p);
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	f7fd ff3f 	bl	800e528 <pbuf_free>
        return;
 80106aa:	e1f0      	b.n	8010a8e <tcp_input+0x7d2>
        continue;
 80106ac:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80106ae:	69fb      	ldr	r3, [r7, #28]
 80106b0:	68db      	ldr	r3, [r3, #12]
 80106b2:	61fb      	str	r3, [r7, #28]
 80106b4:	69fb      	ldr	r3, [r7, #28]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d1bc      	bne.n	8010634 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80106ba:	2300      	movs	r3, #0
 80106bc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80106be:	4b51      	ldr	r3, [pc, #324]	; (8010804 <tcp_input+0x548>)
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	617b      	str	r3, [r7, #20]
 80106c4:	e02a      	b.n	801071c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80106c6:	697b      	ldr	r3, [r7, #20]
 80106c8:	7a1b      	ldrb	r3, [r3, #8]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d00c      	beq.n	80106e8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	7a1a      	ldrb	r2, [r3, #8]
 80106d2:	4b44      	ldr	r3, [pc, #272]	; (80107e4 <tcp_input+0x528>)
 80106d4:	685b      	ldr	r3, [r3, #4]
 80106d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80106da:	3301      	adds	r3, #1
 80106dc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80106de:	429a      	cmp	r2, r3
 80106e0:	d002      	beq.n	80106e8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	61bb      	str	r3, [r7, #24]
        continue;
 80106e6:	e016      	b.n	8010716 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	8ada      	ldrh	r2, [r3, #22]
 80106ec:	4b3c      	ldr	r3, [pc, #240]	; (80107e0 <tcp_input+0x524>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	885b      	ldrh	r3, [r3, #2]
 80106f2:	b29b      	uxth	r3, r3
 80106f4:	429a      	cmp	r2, r3
 80106f6:	d10c      	bne.n	8010712 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80106f8:	697b      	ldr	r3, [r7, #20]
 80106fa:	681a      	ldr	r2, [r3, #0]
 80106fc:	4b39      	ldr	r3, [pc, #228]	; (80107e4 <tcp_input+0x528>)
 80106fe:	695b      	ldr	r3, [r3, #20]
 8010700:	429a      	cmp	r2, r3
 8010702:	d00f      	beq.n	8010724 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d00d      	beq.n	8010726 <tcp_input+0x46a>
 801070a:	697b      	ldr	r3, [r7, #20]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d009      	beq.n	8010726 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010712:	697b      	ldr	r3, [r7, #20]
 8010714:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010716:	697b      	ldr	r3, [r7, #20]
 8010718:	68db      	ldr	r3, [r3, #12]
 801071a:	617b      	str	r3, [r7, #20]
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d1d1      	bne.n	80106c6 <tcp_input+0x40a>
 8010722:	e000      	b.n	8010726 <tcp_input+0x46a>
            break;
 8010724:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010726:	697b      	ldr	r3, [r7, #20]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d014      	beq.n	8010756 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801072c:	69bb      	ldr	r3, [r7, #24]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d00a      	beq.n	8010748 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	68da      	ldr	r2, [r3, #12]
 8010736:	69bb      	ldr	r3, [r7, #24]
 8010738:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801073a:	4b32      	ldr	r3, [pc, #200]	; (8010804 <tcp_input+0x548>)
 801073c:	681a      	ldr	r2, [r3, #0]
 801073e:	697b      	ldr	r3, [r7, #20]
 8010740:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010742:	4a30      	ldr	r2, [pc, #192]	; (8010804 <tcp_input+0x548>)
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010748:	6978      	ldr	r0, [r7, #20]
 801074a:	f000 fa01 	bl	8010b50 <tcp_listen_input>
      }
      pbuf_free(p);
 801074e:	6878      	ldr	r0, [r7, #4]
 8010750:	f7fd feea 	bl	800e528 <pbuf_free>
      return;
 8010754:	e19b      	b.n	8010a8e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010756:	69fb      	ldr	r3, [r7, #28]
 8010758:	2b00      	cmp	r3, #0
 801075a:	f000 8160 	beq.w	8010a1e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801075e:	4b2a      	ldr	r3, [pc, #168]	; (8010808 <tcp_input+0x54c>)
 8010760:	2200      	movs	r2, #0
 8010762:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	891a      	ldrh	r2, [r3, #8]
 8010768:	4b27      	ldr	r3, [pc, #156]	; (8010808 <tcp_input+0x54c>)
 801076a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801076c:	4a26      	ldr	r2, [pc, #152]	; (8010808 <tcp_input+0x54c>)
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010772:	4b1b      	ldr	r3, [pc, #108]	; (80107e0 <tcp_input+0x524>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	4a24      	ldr	r2, [pc, #144]	; (8010808 <tcp_input+0x54c>)
 8010778:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801077a:	4b24      	ldr	r3, [pc, #144]	; (801080c <tcp_input+0x550>)
 801077c:	2200      	movs	r2, #0
 801077e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010780:	4b23      	ldr	r3, [pc, #140]	; (8010810 <tcp_input+0x554>)
 8010782:	2200      	movs	r2, #0
 8010784:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010786:	4b23      	ldr	r3, [pc, #140]	; (8010814 <tcp_input+0x558>)
 8010788:	2200      	movs	r2, #0
 801078a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801078c:	4b22      	ldr	r3, [pc, #136]	; (8010818 <tcp_input+0x55c>)
 801078e:	781b      	ldrb	r3, [r3, #0]
 8010790:	f003 0308 	and.w	r3, r3, #8
 8010794:	2b00      	cmp	r3, #0
 8010796:	d006      	beq.n	80107a6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	7b5b      	ldrb	r3, [r3, #13]
 801079c:	f043 0301 	orr.w	r3, r3, #1
 80107a0:	b2da      	uxtb	r2, r3
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80107a6:	69fb      	ldr	r3, [r7, #28]
 80107a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d038      	beq.n	8010820 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80107ae:	69f8      	ldr	r0, [r7, #28]
 80107b0:	f7ff f93e 	bl	800fa30 <tcp_process_refused_data>
 80107b4:	4603      	mov	r3, r0
 80107b6:	f113 0f0d 	cmn.w	r3, #13
 80107ba:	d007      	beq.n	80107cc <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80107bc:	69fb      	ldr	r3, [r7, #28]
 80107be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d02d      	beq.n	8010820 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80107c4:	4b15      	ldr	r3, [pc, #84]	; (801081c <tcp_input+0x560>)
 80107c6:	881b      	ldrh	r3, [r3, #0]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d029      	beq.n	8010820 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80107cc:	69fb      	ldr	r3, [r7, #28]
 80107ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	f040 8104 	bne.w	80109de <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80107d6:	69f8      	ldr	r0, [r7, #28]
 80107d8:	f003 f9be 	bl	8013b58 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80107dc:	e0ff      	b.n	80109de <tcp_input+0x722>
 80107de:	bf00      	nop
 80107e0:	20000540 	.word	0x20000540
 80107e4:	2000379c 	.word	0x2000379c
 80107e8:	0801c158 	.word	0x0801c158
 80107ec:	0801c284 	.word	0x0801c284
 80107f0:	0801c1a4 	.word	0x0801c1a4
 80107f4:	20006d00 	.word	0x20006d00
 80107f8:	0801c2b0 	.word	0x0801c2b0
 80107fc:	20006d10 	.word	0x20006d10
 8010800:	0801c2dc 	.word	0x0801c2dc
 8010804:	20006d08 	.word	0x20006d08
 8010808:	20000530 	.word	0x20000530
 801080c:	20000560 	.word	0x20000560
 8010810:	2000055d 	.word	0x2000055d
 8010814:	20000558 	.word	0x20000558
 8010818:	2000055c 	.word	0x2000055c
 801081c:	2000055a 	.word	0x2000055a
      }
    }
    tcp_input_pcb = pcb;
 8010820:	4a9c      	ldr	r2, [pc, #624]	; (8010a94 <tcp_input+0x7d8>)
 8010822:	69fb      	ldr	r3, [r7, #28]
 8010824:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010826:	69f8      	ldr	r0, [r7, #28]
 8010828:	f000 fb0a 	bl	8010e40 <tcp_process>
 801082c:	4603      	mov	r3, r0
 801082e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010830:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010834:	f113 0f0d 	cmn.w	r3, #13
 8010838:	f000 80d3 	beq.w	80109e2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 801083c:	4b96      	ldr	r3, [pc, #600]	; (8010a98 <tcp_input+0x7dc>)
 801083e:	781b      	ldrb	r3, [r3, #0]
 8010840:	f003 0308 	and.w	r3, r3, #8
 8010844:	2b00      	cmp	r3, #0
 8010846:	d015      	beq.n	8010874 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010848:	69fb      	ldr	r3, [r7, #28]
 801084a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801084e:	2b00      	cmp	r3, #0
 8010850:	d008      	beq.n	8010864 <tcp_input+0x5a8>
 8010852:	69fb      	ldr	r3, [r7, #28]
 8010854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010858:	69fa      	ldr	r2, [r7, #28]
 801085a:	6912      	ldr	r2, [r2, #16]
 801085c:	f06f 010d 	mvn.w	r1, #13
 8010860:	4610      	mov	r0, r2
 8010862:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010864:	69f9      	ldr	r1, [r7, #28]
 8010866:	488d      	ldr	r0, [pc, #564]	; (8010a9c <tcp_input+0x7e0>)
 8010868:	f7ff fbb0 	bl	800ffcc <tcp_pcb_remove>
        tcp_free(pcb);
 801086c:	69f8      	ldr	r0, [r7, #28]
 801086e:	f7fe f99d 	bl	800ebac <tcp_free>
 8010872:	e0c1      	b.n	80109f8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8010874:	2300      	movs	r3, #0
 8010876:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010878:	4b89      	ldr	r3, [pc, #548]	; (8010aa0 <tcp_input+0x7e4>)
 801087a:	881b      	ldrh	r3, [r3, #0]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d01d      	beq.n	80108bc <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010880:	4b87      	ldr	r3, [pc, #540]	; (8010aa0 <tcp_input+0x7e4>)
 8010882:	881b      	ldrh	r3, [r3, #0]
 8010884:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010886:	69fb      	ldr	r3, [r7, #28]
 8010888:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801088c:	2b00      	cmp	r3, #0
 801088e:	d00a      	beq.n	80108a6 <tcp_input+0x5ea>
 8010890:	69fb      	ldr	r3, [r7, #28]
 8010892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010896:	69fa      	ldr	r2, [r7, #28]
 8010898:	6910      	ldr	r0, [r2, #16]
 801089a:	89fa      	ldrh	r2, [r7, #14]
 801089c:	69f9      	ldr	r1, [r7, #28]
 801089e:	4798      	blx	r3
 80108a0:	4603      	mov	r3, r0
 80108a2:	74fb      	strb	r3, [r7, #19]
 80108a4:	e001      	b.n	80108aa <tcp_input+0x5ee>
 80108a6:	2300      	movs	r3, #0
 80108a8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80108aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80108ae:	f113 0f0d 	cmn.w	r3, #13
 80108b2:	f000 8098 	beq.w	80109e6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80108b6:	4b7a      	ldr	r3, [pc, #488]	; (8010aa0 <tcp_input+0x7e4>)
 80108b8:	2200      	movs	r2, #0
 80108ba:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80108bc:	69f8      	ldr	r0, [r7, #28]
 80108be:	f000 f907 	bl	8010ad0 <tcp_input_delayed_close>
 80108c2:	4603      	mov	r3, r0
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	f040 8090 	bne.w	80109ea <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80108ca:	4b76      	ldr	r3, [pc, #472]	; (8010aa4 <tcp_input+0x7e8>)
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d041      	beq.n	8010956 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80108d2:	69fb      	ldr	r3, [r7, #28]
 80108d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d006      	beq.n	80108e8 <tcp_input+0x62c>
 80108da:	4b73      	ldr	r3, [pc, #460]	; (8010aa8 <tcp_input+0x7ec>)
 80108dc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80108e0:	4972      	ldr	r1, [pc, #456]	; (8010aac <tcp_input+0x7f0>)
 80108e2:	4873      	ldr	r0, [pc, #460]	; (8010ab0 <tcp_input+0x7f4>)
 80108e4:	f008 fdb2 	bl	801944c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80108e8:	69fb      	ldr	r3, [r7, #28]
 80108ea:	8b5b      	ldrh	r3, [r3, #26]
 80108ec:	f003 0310 	and.w	r3, r3, #16
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d008      	beq.n	8010906 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80108f4:	4b6b      	ldr	r3, [pc, #428]	; (8010aa4 <tcp_input+0x7e8>)
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	4618      	mov	r0, r3
 80108fa:	f7fd fe15 	bl	800e528 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80108fe:	69f8      	ldr	r0, [r7, #28]
 8010900:	f7fe fc3c 	bl	800f17c <tcp_abort>
            goto aborted;
 8010904:	e078      	b.n	80109f8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010906:	69fb      	ldr	r3, [r7, #28]
 8010908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801090c:	2b00      	cmp	r3, #0
 801090e:	d00c      	beq.n	801092a <tcp_input+0x66e>
 8010910:	69fb      	ldr	r3, [r7, #28]
 8010912:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010916:	69fb      	ldr	r3, [r7, #28]
 8010918:	6918      	ldr	r0, [r3, #16]
 801091a:	4b62      	ldr	r3, [pc, #392]	; (8010aa4 <tcp_input+0x7e8>)
 801091c:	681a      	ldr	r2, [r3, #0]
 801091e:	2300      	movs	r3, #0
 8010920:	69f9      	ldr	r1, [r7, #28]
 8010922:	47a0      	blx	r4
 8010924:	4603      	mov	r3, r0
 8010926:	74fb      	strb	r3, [r7, #19]
 8010928:	e008      	b.n	801093c <tcp_input+0x680>
 801092a:	4b5e      	ldr	r3, [pc, #376]	; (8010aa4 <tcp_input+0x7e8>)
 801092c:	681a      	ldr	r2, [r3, #0]
 801092e:	2300      	movs	r3, #0
 8010930:	69f9      	ldr	r1, [r7, #28]
 8010932:	2000      	movs	r0, #0
 8010934:	f7ff f952 	bl	800fbdc <tcp_recv_null>
 8010938:	4603      	mov	r3, r0
 801093a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801093c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010940:	f113 0f0d 	cmn.w	r3, #13
 8010944:	d053      	beq.n	80109ee <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010946:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d003      	beq.n	8010956 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801094e:	4b55      	ldr	r3, [pc, #340]	; (8010aa4 <tcp_input+0x7e8>)
 8010950:	681a      	ldr	r2, [r3, #0]
 8010952:	69fb      	ldr	r3, [r7, #28]
 8010954:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010956:	4b50      	ldr	r3, [pc, #320]	; (8010a98 <tcp_input+0x7dc>)
 8010958:	781b      	ldrb	r3, [r3, #0]
 801095a:	f003 0320 	and.w	r3, r3, #32
 801095e:	2b00      	cmp	r3, #0
 8010960:	d030      	beq.n	80109c4 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8010962:	69fb      	ldr	r3, [r7, #28]
 8010964:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010966:	2b00      	cmp	r3, #0
 8010968:	d009      	beq.n	801097e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801096a:	69fb      	ldr	r3, [r7, #28]
 801096c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801096e:	7b5a      	ldrb	r2, [r3, #13]
 8010970:	69fb      	ldr	r3, [r7, #28]
 8010972:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010974:	f042 0220 	orr.w	r2, r2, #32
 8010978:	b2d2      	uxtb	r2, r2
 801097a:	735a      	strb	r2, [r3, #13]
 801097c:	e022      	b.n	80109c4 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801097e:	69fb      	ldr	r3, [r7, #28]
 8010980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010982:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010986:	d005      	beq.n	8010994 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8010988:	69fb      	ldr	r3, [r7, #28]
 801098a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801098c:	3301      	adds	r3, #1
 801098e:	b29a      	uxth	r2, r3
 8010990:	69fb      	ldr	r3, [r7, #28]
 8010992:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010994:	69fb      	ldr	r3, [r7, #28]
 8010996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801099a:	2b00      	cmp	r3, #0
 801099c:	d00b      	beq.n	80109b6 <tcp_input+0x6fa>
 801099e:	69fb      	ldr	r3, [r7, #28]
 80109a0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80109a4:	69fb      	ldr	r3, [r7, #28]
 80109a6:	6918      	ldr	r0, [r3, #16]
 80109a8:	2300      	movs	r3, #0
 80109aa:	2200      	movs	r2, #0
 80109ac:	69f9      	ldr	r1, [r7, #28]
 80109ae:	47a0      	blx	r4
 80109b0:	4603      	mov	r3, r0
 80109b2:	74fb      	strb	r3, [r7, #19]
 80109b4:	e001      	b.n	80109ba <tcp_input+0x6fe>
 80109b6:	2300      	movs	r3, #0
 80109b8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80109ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80109be:	f113 0f0d 	cmn.w	r3, #13
 80109c2:	d016      	beq.n	80109f2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80109c4:	4b33      	ldr	r3, [pc, #204]	; (8010a94 <tcp_input+0x7d8>)
 80109c6:	2200      	movs	r2, #0
 80109c8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80109ca:	69f8      	ldr	r0, [r7, #28]
 80109cc:	f000 f880 	bl	8010ad0 <tcp_input_delayed_close>
 80109d0:	4603      	mov	r3, r0
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d10f      	bne.n	80109f6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80109d6:	69f8      	ldr	r0, [r7, #28]
 80109d8:	f002 fab8 	bl	8012f4c <tcp_output>
 80109dc:	e00c      	b.n	80109f8 <tcp_input+0x73c>
        goto aborted;
 80109de:	bf00      	nop
 80109e0:	e00a      	b.n	80109f8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80109e2:	bf00      	nop
 80109e4:	e008      	b.n	80109f8 <tcp_input+0x73c>
              goto aborted;
 80109e6:	bf00      	nop
 80109e8:	e006      	b.n	80109f8 <tcp_input+0x73c>
          goto aborted;
 80109ea:	bf00      	nop
 80109ec:	e004      	b.n	80109f8 <tcp_input+0x73c>
            goto aborted;
 80109ee:	bf00      	nop
 80109f0:	e002      	b.n	80109f8 <tcp_input+0x73c>
              goto aborted;
 80109f2:	bf00      	nop
 80109f4:	e000      	b.n	80109f8 <tcp_input+0x73c>
          goto aborted;
 80109f6:	bf00      	nop
    tcp_input_pcb = NULL;
 80109f8:	4b26      	ldr	r3, [pc, #152]	; (8010a94 <tcp_input+0x7d8>)
 80109fa:	2200      	movs	r2, #0
 80109fc:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80109fe:	4b29      	ldr	r3, [pc, #164]	; (8010aa4 <tcp_input+0x7e8>)
 8010a00:	2200      	movs	r2, #0
 8010a02:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010a04:	4b2b      	ldr	r3, [pc, #172]	; (8010ab4 <tcp_input+0x7f8>)
 8010a06:	685b      	ldr	r3, [r3, #4]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d03f      	beq.n	8010a8c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8010a0c:	4b29      	ldr	r3, [pc, #164]	; (8010ab4 <tcp_input+0x7f8>)
 8010a0e:	685b      	ldr	r3, [r3, #4]
 8010a10:	4618      	mov	r0, r3
 8010a12:	f7fd fd89 	bl	800e528 <pbuf_free>
      inseg.p = NULL;
 8010a16:	4b27      	ldr	r3, [pc, #156]	; (8010ab4 <tcp_input+0x7f8>)
 8010a18:	2200      	movs	r2, #0
 8010a1a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010a1c:	e036      	b.n	8010a8c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010a1e:	4b26      	ldr	r3, [pc, #152]	; (8010ab8 <tcp_input+0x7fc>)
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	899b      	ldrh	r3, [r3, #12]
 8010a24:	b29b      	uxth	r3, r3
 8010a26:	4618      	mov	r0, r3
 8010a28:	f7fc fac2 	bl	800cfb0 <lwip_htons>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	b2db      	uxtb	r3, r3
 8010a30:	f003 0304 	and.w	r3, r3, #4
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d118      	bne.n	8010a6a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a38:	4b20      	ldr	r3, [pc, #128]	; (8010abc <tcp_input+0x800>)
 8010a3a:	6819      	ldr	r1, [r3, #0]
 8010a3c:	4b20      	ldr	r3, [pc, #128]	; (8010ac0 <tcp_input+0x804>)
 8010a3e:	881b      	ldrh	r3, [r3, #0]
 8010a40:	461a      	mov	r2, r3
 8010a42:	4b20      	ldr	r3, [pc, #128]	; (8010ac4 <tcp_input+0x808>)
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a48:	4b1b      	ldr	r3, [pc, #108]	; (8010ab8 <tcp_input+0x7fc>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a4c:	885b      	ldrh	r3, [r3, #2]
 8010a4e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a50:	4a19      	ldr	r2, [pc, #100]	; (8010ab8 <tcp_input+0x7fc>)
 8010a52:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a54:	8812      	ldrh	r2, [r2, #0]
 8010a56:	b292      	uxth	r2, r2
 8010a58:	9202      	str	r2, [sp, #8]
 8010a5a:	9301      	str	r3, [sp, #4]
 8010a5c:	4b1a      	ldr	r3, [pc, #104]	; (8010ac8 <tcp_input+0x80c>)
 8010a5e:	9300      	str	r3, [sp, #0]
 8010a60:	4b1a      	ldr	r3, [pc, #104]	; (8010acc <tcp_input+0x810>)
 8010a62:	4602      	mov	r2, r0
 8010a64:	2000      	movs	r0, #0
 8010a66:	f003 f825 	bl	8013ab4 <tcp_rst>
    pbuf_free(p);
 8010a6a:	6878      	ldr	r0, [r7, #4]
 8010a6c:	f7fd fd5c 	bl	800e528 <pbuf_free>
  return;
 8010a70:	e00c      	b.n	8010a8c <tcp_input+0x7d0>
    goto dropped;
 8010a72:	bf00      	nop
 8010a74:	e006      	b.n	8010a84 <tcp_input+0x7c8>
    goto dropped;
 8010a76:	bf00      	nop
 8010a78:	e004      	b.n	8010a84 <tcp_input+0x7c8>
    goto dropped;
 8010a7a:	bf00      	nop
 8010a7c:	e002      	b.n	8010a84 <tcp_input+0x7c8>
      goto dropped;
 8010a7e:	bf00      	nop
 8010a80:	e000      	b.n	8010a84 <tcp_input+0x7c8>
      goto dropped;
 8010a82:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	f7fd fd4f 	bl	800e528 <pbuf_free>
 8010a8a:	e000      	b.n	8010a8e <tcp_input+0x7d2>
  return;
 8010a8c:	bf00      	nop
}
 8010a8e:	3724      	adds	r7, #36	; 0x24
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd90      	pop	{r4, r7, pc}
 8010a94:	20006d14 	.word	0x20006d14
 8010a98:	2000055d 	.word	0x2000055d
 8010a9c:	20006d00 	.word	0x20006d00
 8010aa0:	20000558 	.word	0x20000558
 8010aa4:	20000560 	.word	0x20000560
 8010aa8:	0801c158 	.word	0x0801c158
 8010aac:	0801c30c 	.word	0x0801c30c
 8010ab0:	0801c1a4 	.word	0x0801c1a4
 8010ab4:	20000530 	.word	0x20000530
 8010ab8:	20000540 	.word	0x20000540
 8010abc:	20000554 	.word	0x20000554
 8010ac0:	2000055a 	.word	0x2000055a
 8010ac4:	20000550 	.word	0x20000550
 8010ac8:	200037ac 	.word	0x200037ac
 8010acc:	200037b0 	.word	0x200037b0

08010ad0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b082      	sub	sp, #8
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d106      	bne.n	8010aec <tcp_input_delayed_close+0x1c>
 8010ade:	4b17      	ldr	r3, [pc, #92]	; (8010b3c <tcp_input_delayed_close+0x6c>)
 8010ae0:	f240 225a 	movw	r2, #602	; 0x25a
 8010ae4:	4916      	ldr	r1, [pc, #88]	; (8010b40 <tcp_input_delayed_close+0x70>)
 8010ae6:	4817      	ldr	r0, [pc, #92]	; (8010b44 <tcp_input_delayed_close+0x74>)
 8010ae8:	f008 fcb0 	bl	801944c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010aec:	4b16      	ldr	r3, [pc, #88]	; (8010b48 <tcp_input_delayed_close+0x78>)
 8010aee:	781b      	ldrb	r3, [r3, #0]
 8010af0:	f003 0310 	and.w	r3, r3, #16
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d01c      	beq.n	8010b32 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	8b5b      	ldrh	r3, [r3, #26]
 8010afc:	f003 0310 	and.w	r3, r3, #16
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d10d      	bne.n	8010b20 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d008      	beq.n	8010b20 <tcp_input_delayed_close+0x50>
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b14:	687a      	ldr	r2, [r7, #4]
 8010b16:	6912      	ldr	r2, [r2, #16]
 8010b18:	f06f 010e 	mvn.w	r1, #14
 8010b1c:	4610      	mov	r0, r2
 8010b1e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010b20:	6879      	ldr	r1, [r7, #4]
 8010b22:	480a      	ldr	r0, [pc, #40]	; (8010b4c <tcp_input_delayed_close+0x7c>)
 8010b24:	f7ff fa52 	bl	800ffcc <tcp_pcb_remove>
    tcp_free(pcb);
 8010b28:	6878      	ldr	r0, [r7, #4]
 8010b2a:	f7fe f83f 	bl	800ebac <tcp_free>
    return 1;
 8010b2e:	2301      	movs	r3, #1
 8010b30:	e000      	b.n	8010b34 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010b32:	2300      	movs	r3, #0
}
 8010b34:	4618      	mov	r0, r3
 8010b36:	3708      	adds	r7, #8
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	bd80      	pop	{r7, pc}
 8010b3c:	0801c158 	.word	0x0801c158
 8010b40:	0801c328 	.word	0x0801c328
 8010b44:	0801c1a4 	.word	0x0801c1a4
 8010b48:	2000055d 	.word	0x2000055d
 8010b4c:	20006d00 	.word	0x20006d00

08010b50 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010b50:	b590      	push	{r4, r7, lr}
 8010b52:	b08b      	sub	sp, #44	; 0x2c
 8010b54:	af04      	add	r7, sp, #16
 8010b56:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010b58:	4b6f      	ldr	r3, [pc, #444]	; (8010d18 <tcp_listen_input+0x1c8>)
 8010b5a:	781b      	ldrb	r3, [r3, #0]
 8010b5c:	f003 0304 	and.w	r3, r3, #4
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	f040 80d2 	bne.w	8010d0a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d106      	bne.n	8010b7a <tcp_listen_input+0x2a>
 8010b6c:	4b6b      	ldr	r3, [pc, #428]	; (8010d1c <tcp_listen_input+0x1cc>)
 8010b6e:	f240 2281 	movw	r2, #641	; 0x281
 8010b72:	496b      	ldr	r1, [pc, #428]	; (8010d20 <tcp_listen_input+0x1d0>)
 8010b74:	486b      	ldr	r0, [pc, #428]	; (8010d24 <tcp_listen_input+0x1d4>)
 8010b76:	f008 fc69 	bl	801944c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010b7a:	4b67      	ldr	r3, [pc, #412]	; (8010d18 <tcp_listen_input+0x1c8>)
 8010b7c:	781b      	ldrb	r3, [r3, #0]
 8010b7e:	f003 0310 	and.w	r3, r3, #16
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d019      	beq.n	8010bba <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b86:	4b68      	ldr	r3, [pc, #416]	; (8010d28 <tcp_listen_input+0x1d8>)
 8010b88:	6819      	ldr	r1, [r3, #0]
 8010b8a:	4b68      	ldr	r3, [pc, #416]	; (8010d2c <tcp_listen_input+0x1dc>)
 8010b8c:	881b      	ldrh	r3, [r3, #0]
 8010b8e:	461a      	mov	r2, r3
 8010b90:	4b67      	ldr	r3, [pc, #412]	; (8010d30 <tcp_listen_input+0x1e0>)
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010b96:	4b67      	ldr	r3, [pc, #412]	; (8010d34 <tcp_listen_input+0x1e4>)
 8010b98:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b9a:	885b      	ldrh	r3, [r3, #2]
 8010b9c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010b9e:	4a65      	ldr	r2, [pc, #404]	; (8010d34 <tcp_listen_input+0x1e4>)
 8010ba0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ba2:	8812      	ldrh	r2, [r2, #0]
 8010ba4:	b292      	uxth	r2, r2
 8010ba6:	9202      	str	r2, [sp, #8]
 8010ba8:	9301      	str	r3, [sp, #4]
 8010baa:	4b63      	ldr	r3, [pc, #396]	; (8010d38 <tcp_listen_input+0x1e8>)
 8010bac:	9300      	str	r3, [sp, #0]
 8010bae:	4b63      	ldr	r3, [pc, #396]	; (8010d3c <tcp_listen_input+0x1ec>)
 8010bb0:	4602      	mov	r2, r0
 8010bb2:	6878      	ldr	r0, [r7, #4]
 8010bb4:	f002 ff7e 	bl	8013ab4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010bb8:	e0a9      	b.n	8010d0e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8010bba:	4b57      	ldr	r3, [pc, #348]	; (8010d18 <tcp_listen_input+0x1c8>)
 8010bbc:	781b      	ldrb	r3, [r3, #0]
 8010bbe:	f003 0302 	and.w	r3, r3, #2
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	f000 80a3 	beq.w	8010d0e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	7d5b      	ldrb	r3, [r3, #21]
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f7ff f929 	bl	800fe24 <tcp_alloc>
 8010bd2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d111      	bne.n	8010bfe <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	699b      	ldr	r3, [r3, #24]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d00a      	beq.n	8010bf8 <tcp_listen_input+0xa8>
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	699b      	ldr	r3, [r3, #24]
 8010be6:	687a      	ldr	r2, [r7, #4]
 8010be8:	6910      	ldr	r0, [r2, #16]
 8010bea:	f04f 32ff 	mov.w	r2, #4294967295
 8010bee:	2100      	movs	r1, #0
 8010bf0:	4798      	blx	r3
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	73bb      	strb	r3, [r7, #14]
      return;
 8010bf6:	e08b      	b.n	8010d10 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010bf8:	23f0      	movs	r3, #240	; 0xf0
 8010bfa:	73bb      	strb	r3, [r7, #14]
      return;
 8010bfc:	e088      	b.n	8010d10 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010bfe:	4b50      	ldr	r3, [pc, #320]	; (8010d40 <tcp_listen_input+0x1f0>)
 8010c00:	695a      	ldr	r2, [r3, #20]
 8010c02:	697b      	ldr	r3, [r7, #20]
 8010c04:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010c06:	4b4e      	ldr	r3, [pc, #312]	; (8010d40 <tcp_listen_input+0x1f0>)
 8010c08:	691a      	ldr	r2, [r3, #16]
 8010c0a:	697b      	ldr	r3, [r7, #20]
 8010c0c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	8ada      	ldrh	r2, [r3, #22]
 8010c12:	697b      	ldr	r3, [r7, #20]
 8010c14:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010c16:	4b47      	ldr	r3, [pc, #284]	; (8010d34 <tcp_listen_input+0x1e4>)
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	881b      	ldrh	r3, [r3, #0]
 8010c1c:	b29a      	uxth	r2, r3
 8010c1e:	697b      	ldr	r3, [r7, #20]
 8010c20:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010c22:	697b      	ldr	r3, [r7, #20]
 8010c24:	2203      	movs	r2, #3
 8010c26:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010c28:	4b41      	ldr	r3, [pc, #260]	; (8010d30 <tcp_listen_input+0x1e0>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	1c5a      	adds	r2, r3, #1
 8010c2e:	697b      	ldr	r3, [r7, #20]
 8010c30:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010c32:	697b      	ldr	r3, [r7, #20]
 8010c34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8010c3a:	6978      	ldr	r0, [r7, #20]
 8010c3c:	f7ff fa5a 	bl	80100f4 <tcp_next_iss>
 8010c40:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010c42:	697b      	ldr	r3, [r7, #20]
 8010c44:	693a      	ldr	r2, [r7, #16]
 8010c46:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010c48:	697b      	ldr	r3, [r7, #20]
 8010c4a:	693a      	ldr	r2, [r7, #16]
 8010c4c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	693a      	ldr	r2, [r7, #16]
 8010c52:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	693a      	ldr	r2, [r7, #16]
 8010c58:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010c5a:	4b35      	ldr	r3, [pc, #212]	; (8010d30 <tcp_listen_input+0x1e0>)
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	1e5a      	subs	r2, r3, #1
 8010c60:	697b      	ldr	r3, [r7, #20]
 8010c62:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	691a      	ldr	r2, [r3, #16]
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010c6c:	697b      	ldr	r3, [r7, #20]
 8010c6e:	687a      	ldr	r2, [r7, #4]
 8010c70:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	7a5b      	ldrb	r3, [r3, #9]
 8010c76:	f003 030c 	and.w	r3, r3, #12
 8010c7a:	b2da      	uxtb	r2, r3
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	7a1a      	ldrb	r2, [r3, #8]
 8010c84:	697b      	ldr	r3, [r7, #20]
 8010c86:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010c88:	4b2e      	ldr	r3, [pc, #184]	; (8010d44 <tcp_listen_input+0x1f4>)
 8010c8a:	681a      	ldr	r2, [r3, #0]
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	60da      	str	r2, [r3, #12]
 8010c90:	4a2c      	ldr	r2, [pc, #176]	; (8010d44 <tcp_listen_input+0x1f4>)
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	6013      	str	r3, [r2, #0]
 8010c96:	f003 f8cf 	bl	8013e38 <tcp_timer_needed>
 8010c9a:	4b2b      	ldr	r3, [pc, #172]	; (8010d48 <tcp_listen_input+0x1f8>)
 8010c9c:	2201      	movs	r2, #1
 8010c9e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010ca0:	6978      	ldr	r0, [r7, #20]
 8010ca2:	f001 fd8d 	bl	80127c0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010ca6:	4b23      	ldr	r3, [pc, #140]	; (8010d34 <tcp_listen_input+0x1e4>)
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	89db      	ldrh	r3, [r3, #14]
 8010cac:	b29a      	uxth	r2, r3
 8010cae:	697b      	ldr	r3, [r7, #20]
 8010cb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010cba:	697b      	ldr	r3, [r7, #20]
 8010cbc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010cc0:	697b      	ldr	r3, [r7, #20]
 8010cc2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010cc4:	697b      	ldr	r3, [r7, #20]
 8010cc6:	3304      	adds	r3, #4
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f006 fea7 	bl	8017a1c <ip4_route>
 8010cce:	4601      	mov	r1, r0
 8010cd0:	697b      	ldr	r3, [r7, #20]
 8010cd2:	3304      	adds	r3, #4
 8010cd4:	461a      	mov	r2, r3
 8010cd6:	4620      	mov	r0, r4
 8010cd8:	f7ff fa32 	bl	8010140 <tcp_eff_send_mss_netif>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	461a      	mov	r2, r3
 8010ce0:	697b      	ldr	r3, [r7, #20]
 8010ce2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010ce4:	2112      	movs	r1, #18
 8010ce6:	6978      	ldr	r0, [r7, #20]
 8010ce8:	f002 f842 	bl	8012d70 <tcp_enqueue_flags>
 8010cec:	4603      	mov	r3, r0
 8010cee:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d004      	beq.n	8010d02 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010cf8:	2100      	movs	r1, #0
 8010cfa:	6978      	ldr	r0, [r7, #20]
 8010cfc:	f7fe f980 	bl	800f000 <tcp_abandon>
      return;
 8010d00:	e006      	b.n	8010d10 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010d02:	6978      	ldr	r0, [r7, #20]
 8010d04:	f002 f922 	bl	8012f4c <tcp_output>
  return;
 8010d08:	e001      	b.n	8010d0e <tcp_listen_input+0x1be>
    return;
 8010d0a:	bf00      	nop
 8010d0c:	e000      	b.n	8010d10 <tcp_listen_input+0x1c0>
  return;
 8010d0e:	bf00      	nop
}
 8010d10:	371c      	adds	r7, #28
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd90      	pop	{r4, r7, pc}
 8010d16:	bf00      	nop
 8010d18:	2000055c 	.word	0x2000055c
 8010d1c:	0801c158 	.word	0x0801c158
 8010d20:	0801c350 	.word	0x0801c350
 8010d24:	0801c1a4 	.word	0x0801c1a4
 8010d28:	20000554 	.word	0x20000554
 8010d2c:	2000055a 	.word	0x2000055a
 8010d30:	20000550 	.word	0x20000550
 8010d34:	20000540 	.word	0x20000540
 8010d38:	200037ac 	.word	0x200037ac
 8010d3c:	200037b0 	.word	0x200037b0
 8010d40:	2000379c 	.word	0x2000379c
 8010d44:	20006d00 	.word	0x20006d00
 8010d48:	20006cfc 	.word	0x20006cfc

08010d4c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b086      	sub	sp, #24
 8010d50:	af04      	add	r7, sp, #16
 8010d52:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010d54:	4b2f      	ldr	r3, [pc, #188]	; (8010e14 <tcp_timewait_input+0xc8>)
 8010d56:	781b      	ldrb	r3, [r3, #0]
 8010d58:	f003 0304 	and.w	r3, r3, #4
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d153      	bne.n	8010e08 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d106      	bne.n	8010d74 <tcp_timewait_input+0x28>
 8010d66:	4b2c      	ldr	r3, [pc, #176]	; (8010e18 <tcp_timewait_input+0xcc>)
 8010d68:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010d6c:	492b      	ldr	r1, [pc, #172]	; (8010e1c <tcp_timewait_input+0xd0>)
 8010d6e:	482c      	ldr	r0, [pc, #176]	; (8010e20 <tcp_timewait_input+0xd4>)
 8010d70:	f008 fb6c 	bl	801944c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010d74:	4b27      	ldr	r3, [pc, #156]	; (8010e14 <tcp_timewait_input+0xc8>)
 8010d76:	781b      	ldrb	r3, [r3, #0]
 8010d78:	f003 0302 	and.w	r3, r3, #2
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d02a      	beq.n	8010dd6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010d80:	4b28      	ldr	r3, [pc, #160]	; (8010e24 <tcp_timewait_input+0xd8>)
 8010d82:	681a      	ldr	r2, [r3, #0]
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d88:	1ad3      	subs	r3, r2, r3
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	db2d      	blt.n	8010dea <tcp_timewait_input+0x9e>
 8010d8e:	4b25      	ldr	r3, [pc, #148]	; (8010e24 <tcp_timewait_input+0xd8>)
 8010d90:	681a      	ldr	r2, [r3, #0]
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d96:	6879      	ldr	r1, [r7, #4]
 8010d98:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010d9a:	440b      	add	r3, r1
 8010d9c:	1ad3      	subs	r3, r2, r3
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	dc23      	bgt.n	8010dea <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010da2:	4b21      	ldr	r3, [pc, #132]	; (8010e28 <tcp_timewait_input+0xdc>)
 8010da4:	6819      	ldr	r1, [r3, #0]
 8010da6:	4b21      	ldr	r3, [pc, #132]	; (8010e2c <tcp_timewait_input+0xe0>)
 8010da8:	881b      	ldrh	r3, [r3, #0]
 8010daa:	461a      	mov	r2, r3
 8010dac:	4b1d      	ldr	r3, [pc, #116]	; (8010e24 <tcp_timewait_input+0xd8>)
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010db2:	4b1f      	ldr	r3, [pc, #124]	; (8010e30 <tcp_timewait_input+0xe4>)
 8010db4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010db6:	885b      	ldrh	r3, [r3, #2]
 8010db8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010dba:	4a1d      	ldr	r2, [pc, #116]	; (8010e30 <tcp_timewait_input+0xe4>)
 8010dbc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010dbe:	8812      	ldrh	r2, [r2, #0]
 8010dc0:	b292      	uxth	r2, r2
 8010dc2:	9202      	str	r2, [sp, #8]
 8010dc4:	9301      	str	r3, [sp, #4]
 8010dc6:	4b1b      	ldr	r3, [pc, #108]	; (8010e34 <tcp_timewait_input+0xe8>)
 8010dc8:	9300      	str	r3, [sp, #0]
 8010dca:	4b1b      	ldr	r3, [pc, #108]	; (8010e38 <tcp_timewait_input+0xec>)
 8010dcc:	4602      	mov	r2, r0
 8010dce:	6878      	ldr	r0, [r7, #4]
 8010dd0:	f002 fe70 	bl	8013ab4 <tcp_rst>
      return;
 8010dd4:	e01b      	b.n	8010e0e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010dd6:	4b0f      	ldr	r3, [pc, #60]	; (8010e14 <tcp_timewait_input+0xc8>)
 8010dd8:	781b      	ldrb	r3, [r3, #0]
 8010dda:	f003 0301 	and.w	r3, r3, #1
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d003      	beq.n	8010dea <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010de2:	4b16      	ldr	r3, [pc, #88]	; (8010e3c <tcp_timewait_input+0xf0>)
 8010de4:	681a      	ldr	r2, [r3, #0]
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010dea:	4b10      	ldr	r3, [pc, #64]	; (8010e2c <tcp_timewait_input+0xe0>)
 8010dec:	881b      	ldrh	r3, [r3, #0]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d00c      	beq.n	8010e0c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	8b5b      	ldrh	r3, [r3, #26]
 8010df6:	f043 0302 	orr.w	r3, r3, #2
 8010dfa:	b29a      	uxth	r2, r3
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010e00:	6878      	ldr	r0, [r7, #4]
 8010e02:	f002 f8a3 	bl	8012f4c <tcp_output>
  }
  return;
 8010e06:	e001      	b.n	8010e0c <tcp_timewait_input+0xc0>
    return;
 8010e08:	bf00      	nop
 8010e0a:	e000      	b.n	8010e0e <tcp_timewait_input+0xc2>
  return;
 8010e0c:	bf00      	nop
}
 8010e0e:	3708      	adds	r7, #8
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}
 8010e14:	2000055c 	.word	0x2000055c
 8010e18:	0801c158 	.word	0x0801c158
 8010e1c:	0801c370 	.word	0x0801c370
 8010e20:	0801c1a4 	.word	0x0801c1a4
 8010e24:	20000550 	.word	0x20000550
 8010e28:	20000554 	.word	0x20000554
 8010e2c:	2000055a 	.word	0x2000055a
 8010e30:	20000540 	.word	0x20000540
 8010e34:	200037ac 	.word	0x200037ac
 8010e38:	200037b0 	.word	0x200037b0
 8010e3c:	20006d04 	.word	0x20006d04

08010e40 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010e40:	b590      	push	{r4, r7, lr}
 8010e42:	b08d      	sub	sp, #52	; 0x34
 8010e44:	af04      	add	r7, sp, #16
 8010e46:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010e48:	2300      	movs	r3, #0
 8010e4a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d106      	bne.n	8010e64 <tcp_process+0x24>
 8010e56:	4ba5      	ldr	r3, [pc, #660]	; (80110ec <tcp_process+0x2ac>)
 8010e58:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010e5c:	49a4      	ldr	r1, [pc, #656]	; (80110f0 <tcp_process+0x2b0>)
 8010e5e:	48a5      	ldr	r0, [pc, #660]	; (80110f4 <tcp_process+0x2b4>)
 8010e60:	f008 faf4 	bl	801944c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010e64:	4ba4      	ldr	r3, [pc, #656]	; (80110f8 <tcp_process+0x2b8>)
 8010e66:	781b      	ldrb	r3, [r3, #0]
 8010e68:	f003 0304 	and.w	r3, r3, #4
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d04e      	beq.n	8010f0e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	7d1b      	ldrb	r3, [r3, #20]
 8010e74:	2b02      	cmp	r3, #2
 8010e76:	d108      	bne.n	8010e8a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010e7c:	4b9f      	ldr	r3, [pc, #636]	; (80110fc <tcp_process+0x2bc>)
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	429a      	cmp	r2, r3
 8010e82:	d123      	bne.n	8010ecc <tcp_process+0x8c>
        acceptable = 1;
 8010e84:	2301      	movs	r3, #1
 8010e86:	76fb      	strb	r3, [r7, #27]
 8010e88:	e020      	b.n	8010ecc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e8e:	4b9c      	ldr	r3, [pc, #624]	; (8011100 <tcp_process+0x2c0>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	429a      	cmp	r2, r3
 8010e94:	d102      	bne.n	8010e9c <tcp_process+0x5c>
        acceptable = 1;
 8010e96:	2301      	movs	r3, #1
 8010e98:	76fb      	strb	r3, [r7, #27]
 8010e9a:	e017      	b.n	8010ecc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010e9c:	4b98      	ldr	r3, [pc, #608]	; (8011100 <tcp_process+0x2c0>)
 8010e9e:	681a      	ldr	r2, [r3, #0]
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ea4:	1ad3      	subs	r3, r2, r3
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	db10      	blt.n	8010ecc <tcp_process+0x8c>
 8010eaa:	4b95      	ldr	r3, [pc, #596]	; (8011100 <tcp_process+0x2c0>)
 8010eac:	681a      	ldr	r2, [r3, #0]
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010eb2:	6879      	ldr	r1, [r7, #4]
 8010eb4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010eb6:	440b      	add	r3, r1
 8010eb8:	1ad3      	subs	r3, r2, r3
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	dc06      	bgt.n	8010ecc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	8b5b      	ldrh	r3, [r3, #26]
 8010ec2:	f043 0302 	orr.w	r3, r3, #2
 8010ec6:	b29a      	uxth	r2, r3
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010ecc:	7efb      	ldrb	r3, [r7, #27]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d01b      	beq.n	8010f0a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	7d1b      	ldrb	r3, [r3, #20]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d106      	bne.n	8010ee8 <tcp_process+0xa8>
 8010eda:	4b84      	ldr	r3, [pc, #528]	; (80110ec <tcp_process+0x2ac>)
 8010edc:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010ee0:	4988      	ldr	r1, [pc, #544]	; (8011104 <tcp_process+0x2c4>)
 8010ee2:	4884      	ldr	r0, [pc, #528]	; (80110f4 <tcp_process+0x2b4>)
 8010ee4:	f008 fab2 	bl	801944c <iprintf>
      recv_flags |= TF_RESET;
 8010ee8:	4b87      	ldr	r3, [pc, #540]	; (8011108 <tcp_process+0x2c8>)
 8010eea:	781b      	ldrb	r3, [r3, #0]
 8010eec:	f043 0308 	orr.w	r3, r3, #8
 8010ef0:	b2da      	uxtb	r2, r3
 8010ef2:	4b85      	ldr	r3, [pc, #532]	; (8011108 <tcp_process+0x2c8>)
 8010ef4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	8b5b      	ldrh	r3, [r3, #26]
 8010efa:	f023 0301 	bic.w	r3, r3, #1
 8010efe:	b29a      	uxth	r2, r3
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010f04:	f06f 030d 	mvn.w	r3, #13
 8010f08:	e37a      	b.n	8011600 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	e378      	b.n	8011600 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010f0e:	4b7a      	ldr	r3, [pc, #488]	; (80110f8 <tcp_process+0x2b8>)
 8010f10:	781b      	ldrb	r3, [r3, #0]
 8010f12:	f003 0302 	and.w	r3, r3, #2
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d010      	beq.n	8010f3c <tcp_process+0xfc>
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	7d1b      	ldrb	r3, [r3, #20]
 8010f1e:	2b02      	cmp	r3, #2
 8010f20:	d00c      	beq.n	8010f3c <tcp_process+0xfc>
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	7d1b      	ldrb	r3, [r3, #20]
 8010f26:	2b03      	cmp	r3, #3
 8010f28:	d008      	beq.n	8010f3c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	8b5b      	ldrh	r3, [r3, #26]
 8010f2e:	f043 0302 	orr.w	r3, r3, #2
 8010f32:	b29a      	uxth	r2, r3
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010f38:	2300      	movs	r3, #0
 8010f3a:	e361      	b.n	8011600 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	8b5b      	ldrh	r3, [r3, #26]
 8010f40:	f003 0310 	and.w	r3, r3, #16
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d103      	bne.n	8010f50 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010f48:	4b70      	ldr	r3, [pc, #448]	; (801110c <tcp_process+0x2cc>)
 8010f4a:	681a      	ldr	r2, [r3, #0]
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2200      	movs	r2, #0
 8010f54:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010f60:	6878      	ldr	r0, [r7, #4]
 8010f62:	f001 fc2d 	bl	80127c0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	7d1b      	ldrb	r3, [r3, #20]
 8010f6a:	3b02      	subs	r3, #2
 8010f6c:	2b07      	cmp	r3, #7
 8010f6e:	f200 8337 	bhi.w	80115e0 <tcp_process+0x7a0>
 8010f72:	a201      	add	r2, pc, #4	; (adr r2, 8010f78 <tcp_process+0x138>)
 8010f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f78:	08010f99 	.word	0x08010f99
 8010f7c:	080111c9 	.word	0x080111c9
 8010f80:	08011341 	.word	0x08011341
 8010f84:	0801136b 	.word	0x0801136b
 8010f88:	0801148f 	.word	0x0801148f
 8010f8c:	08011341 	.word	0x08011341
 8010f90:	0801151b 	.word	0x0801151b
 8010f94:	080115ab 	.word	0x080115ab
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010f98:	4b57      	ldr	r3, [pc, #348]	; (80110f8 <tcp_process+0x2b8>)
 8010f9a:	781b      	ldrb	r3, [r3, #0]
 8010f9c:	f003 0310 	and.w	r3, r3, #16
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	f000 80e4 	beq.w	801116e <tcp_process+0x32e>
 8010fa6:	4b54      	ldr	r3, [pc, #336]	; (80110f8 <tcp_process+0x2b8>)
 8010fa8:	781b      	ldrb	r3, [r3, #0]
 8010faa:	f003 0302 	and.w	r3, r3, #2
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	f000 80dd 	beq.w	801116e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fb8:	1c5a      	adds	r2, r3, #1
 8010fba:	4b50      	ldr	r3, [pc, #320]	; (80110fc <tcp_process+0x2bc>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	f040 80d5 	bne.w	801116e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010fc4:	4b4e      	ldr	r3, [pc, #312]	; (8011100 <tcp_process+0x2c0>)
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	1c5a      	adds	r2, r3, #1
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010fd6:	4b49      	ldr	r3, [pc, #292]	; (80110fc <tcp_process+0x2bc>)
 8010fd8:	681a      	ldr	r2, [r3, #0]
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010fde:	4b4c      	ldr	r3, [pc, #304]	; (8011110 <tcp_process+0x2d0>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	89db      	ldrh	r3, [r3, #14]
 8010fe4:	b29a      	uxth	r2, r3
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010ff8:	4b41      	ldr	r3, [pc, #260]	; (8011100 <tcp_process+0x2c0>)
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	1e5a      	subs	r2, r3, #1
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	2204      	movs	r2, #4
 8011006:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	3304      	adds	r3, #4
 8011010:	4618      	mov	r0, r3
 8011012:	f006 fd03 	bl	8017a1c <ip4_route>
 8011016:	4601      	mov	r1, r0
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	3304      	adds	r3, #4
 801101c:	461a      	mov	r2, r3
 801101e:	4620      	mov	r0, r4
 8011020:	f7ff f88e 	bl	8010140 <tcp_eff_send_mss_netif>
 8011024:	4603      	mov	r3, r0
 8011026:	461a      	mov	r2, r3
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011030:	009a      	lsls	r2, r3, #2
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011036:	005b      	lsls	r3, r3, #1
 8011038:	f241 111c 	movw	r1, #4380	; 0x111c
 801103c:	428b      	cmp	r3, r1
 801103e:	bf38      	it	cc
 8011040:	460b      	movcc	r3, r1
 8011042:	429a      	cmp	r2, r3
 8011044:	d204      	bcs.n	8011050 <tcp_process+0x210>
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801104a:	009b      	lsls	r3, r3, #2
 801104c:	b29b      	uxth	r3, r3
 801104e:	e00d      	b.n	801106c <tcp_process+0x22c>
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011054:	005b      	lsls	r3, r3, #1
 8011056:	f241 121c 	movw	r2, #4380	; 0x111c
 801105a:	4293      	cmp	r3, r2
 801105c:	d904      	bls.n	8011068 <tcp_process+0x228>
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011062:	005b      	lsls	r3, r3, #1
 8011064:	b29b      	uxth	r3, r3
 8011066:	e001      	b.n	801106c <tcp_process+0x22c>
 8011068:	f241 131c 	movw	r3, #4380	; 0x111c
 801106c:	687a      	ldr	r2, [r7, #4]
 801106e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011078:	2b00      	cmp	r3, #0
 801107a:	d106      	bne.n	801108a <tcp_process+0x24a>
 801107c:	4b1b      	ldr	r3, [pc, #108]	; (80110ec <tcp_process+0x2ac>)
 801107e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8011082:	4924      	ldr	r1, [pc, #144]	; (8011114 <tcp_process+0x2d4>)
 8011084:	481b      	ldr	r0, [pc, #108]	; (80110f4 <tcp_process+0x2b4>)
 8011086:	f008 f9e1 	bl	801944c <iprintf>
        --pcb->snd_queuelen;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011090:	3b01      	subs	r3, #1
 8011092:	b29a      	uxth	r2, r3
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801109e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80110a0:	69fb      	ldr	r3, [r7, #28]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d111      	bne.n	80110ca <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110aa:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80110ac:	69fb      	ldr	r3, [r7, #28]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d106      	bne.n	80110c0 <tcp_process+0x280>
 80110b2:	4b0e      	ldr	r3, [pc, #56]	; (80110ec <tcp_process+0x2ac>)
 80110b4:	f44f 725d 	mov.w	r2, #884	; 0x374
 80110b8:	4917      	ldr	r1, [pc, #92]	; (8011118 <tcp_process+0x2d8>)
 80110ba:	480e      	ldr	r0, [pc, #56]	; (80110f4 <tcp_process+0x2b4>)
 80110bc:	f008 f9c6 	bl	801944c <iprintf>
          pcb->unsent = rseg->next;
 80110c0:	69fb      	ldr	r3, [r7, #28]
 80110c2:	681a      	ldr	r2, [r3, #0]
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	66da      	str	r2, [r3, #108]	; 0x6c
 80110c8:	e003      	b.n	80110d2 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80110ca:	69fb      	ldr	r3, [r7, #28]
 80110cc:	681a      	ldr	r2, [r3, #0]
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80110d2:	69f8      	ldr	r0, [r7, #28]
 80110d4:	f7fe fd3d 	bl	800fb52 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d11d      	bne.n	801111c <tcp_process+0x2dc>
          pcb->rtime = -1;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80110e6:	861a      	strh	r2, [r3, #48]	; 0x30
 80110e8:	e01f      	b.n	801112a <tcp_process+0x2ea>
 80110ea:	bf00      	nop
 80110ec:	0801c158 	.word	0x0801c158
 80110f0:	0801c390 	.word	0x0801c390
 80110f4:	0801c1a4 	.word	0x0801c1a4
 80110f8:	2000055c 	.word	0x2000055c
 80110fc:	20000554 	.word	0x20000554
 8011100:	20000550 	.word	0x20000550
 8011104:	0801c3ac 	.word	0x0801c3ac
 8011108:	2000055d 	.word	0x2000055d
 801110c:	20006d04 	.word	0x20006d04
 8011110:	20000540 	.word	0x20000540
 8011114:	0801c3cc 	.word	0x0801c3cc
 8011118:	0801c3e4 	.word	0x0801c3e4
        } else {
          pcb->rtime = 0;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	2200      	movs	r2, #0
 8011120:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	2200      	movs	r2, #0
 8011126:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011130:	2b00      	cmp	r3, #0
 8011132:	d00a      	beq.n	801114a <tcp_process+0x30a>
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801113a:	687a      	ldr	r2, [r7, #4]
 801113c:	6910      	ldr	r0, [r2, #16]
 801113e:	2200      	movs	r2, #0
 8011140:	6879      	ldr	r1, [r7, #4]
 8011142:	4798      	blx	r3
 8011144:	4603      	mov	r3, r0
 8011146:	76bb      	strb	r3, [r7, #26]
 8011148:	e001      	b.n	801114e <tcp_process+0x30e>
 801114a:	2300      	movs	r3, #0
 801114c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801114e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011152:	f113 0f0d 	cmn.w	r3, #13
 8011156:	d102      	bne.n	801115e <tcp_process+0x31e>
          return ERR_ABRT;
 8011158:	f06f 030c 	mvn.w	r3, #12
 801115c:	e250      	b.n	8011600 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	8b5b      	ldrh	r3, [r3, #26]
 8011162:	f043 0302 	orr.w	r3, r3, #2
 8011166:	b29a      	uxth	r2, r3
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801116c:	e23a      	b.n	80115e4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801116e:	4b9d      	ldr	r3, [pc, #628]	; (80113e4 <tcp_process+0x5a4>)
 8011170:	781b      	ldrb	r3, [r3, #0]
 8011172:	f003 0310 	and.w	r3, r3, #16
 8011176:	2b00      	cmp	r3, #0
 8011178:	f000 8234 	beq.w	80115e4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801117c:	4b9a      	ldr	r3, [pc, #616]	; (80113e8 <tcp_process+0x5a8>)
 801117e:	6819      	ldr	r1, [r3, #0]
 8011180:	4b9a      	ldr	r3, [pc, #616]	; (80113ec <tcp_process+0x5ac>)
 8011182:	881b      	ldrh	r3, [r3, #0]
 8011184:	461a      	mov	r2, r3
 8011186:	4b9a      	ldr	r3, [pc, #616]	; (80113f0 <tcp_process+0x5b0>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801118c:	4b99      	ldr	r3, [pc, #612]	; (80113f4 <tcp_process+0x5b4>)
 801118e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011190:	885b      	ldrh	r3, [r3, #2]
 8011192:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011194:	4a97      	ldr	r2, [pc, #604]	; (80113f4 <tcp_process+0x5b4>)
 8011196:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011198:	8812      	ldrh	r2, [r2, #0]
 801119a:	b292      	uxth	r2, r2
 801119c:	9202      	str	r2, [sp, #8]
 801119e:	9301      	str	r3, [sp, #4]
 80111a0:	4b95      	ldr	r3, [pc, #596]	; (80113f8 <tcp_process+0x5b8>)
 80111a2:	9300      	str	r3, [sp, #0]
 80111a4:	4b95      	ldr	r3, [pc, #596]	; (80113fc <tcp_process+0x5bc>)
 80111a6:	4602      	mov	r2, r0
 80111a8:	6878      	ldr	r0, [r7, #4]
 80111aa:	f002 fc83 	bl	8013ab4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80111b4:	2b05      	cmp	r3, #5
 80111b6:	f200 8215 	bhi.w	80115e4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	2200      	movs	r2, #0
 80111be:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80111c0:	6878      	ldr	r0, [r7, #4]
 80111c2:	f002 fa4d 	bl	8013660 <tcp_rexmit_rto>
      break;
 80111c6:	e20d      	b.n	80115e4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80111c8:	4b86      	ldr	r3, [pc, #536]	; (80113e4 <tcp_process+0x5a4>)
 80111ca:	781b      	ldrb	r3, [r3, #0]
 80111cc:	f003 0310 	and.w	r3, r3, #16
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	f000 80a1 	beq.w	8011318 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80111d6:	4b84      	ldr	r3, [pc, #528]	; (80113e8 <tcp_process+0x5a8>)
 80111d8:	681a      	ldr	r2, [r3, #0]
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111de:	1ad3      	subs	r3, r2, r3
 80111e0:	3b01      	subs	r3, #1
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	db7e      	blt.n	80112e4 <tcp_process+0x4a4>
 80111e6:	4b80      	ldr	r3, [pc, #512]	; (80113e8 <tcp_process+0x5a8>)
 80111e8:	681a      	ldr	r2, [r3, #0]
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80111ee:	1ad3      	subs	r3, r2, r3
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	dc77      	bgt.n	80112e4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	2204      	movs	r2, #4
 80111f8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d102      	bne.n	8011208 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011202:	23fa      	movs	r3, #250	; 0xfa
 8011204:	76bb      	strb	r3, [r7, #26]
 8011206:	e01d      	b.n	8011244 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801120c:	699b      	ldr	r3, [r3, #24]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d106      	bne.n	8011220 <tcp_process+0x3e0>
 8011212:	4b7b      	ldr	r3, [pc, #492]	; (8011400 <tcp_process+0x5c0>)
 8011214:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011218:	497a      	ldr	r1, [pc, #488]	; (8011404 <tcp_process+0x5c4>)
 801121a:	487b      	ldr	r0, [pc, #492]	; (8011408 <tcp_process+0x5c8>)
 801121c:	f008 f916 	bl	801944c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011224:	699b      	ldr	r3, [r3, #24]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d00a      	beq.n	8011240 <tcp_process+0x400>
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801122e:	699b      	ldr	r3, [r3, #24]
 8011230:	687a      	ldr	r2, [r7, #4]
 8011232:	6910      	ldr	r0, [r2, #16]
 8011234:	2200      	movs	r2, #0
 8011236:	6879      	ldr	r1, [r7, #4]
 8011238:	4798      	blx	r3
 801123a:	4603      	mov	r3, r0
 801123c:	76bb      	strb	r3, [r7, #26]
 801123e:	e001      	b.n	8011244 <tcp_process+0x404>
 8011240:	23f0      	movs	r3, #240	; 0xf0
 8011242:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011244:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d00a      	beq.n	8011262 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801124c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011250:	f113 0f0d 	cmn.w	r3, #13
 8011254:	d002      	beq.n	801125c <tcp_process+0x41c>
              tcp_abort(pcb);
 8011256:	6878      	ldr	r0, [r7, #4]
 8011258:	f7fd ff90 	bl	800f17c <tcp_abort>
            }
            return ERR_ABRT;
 801125c:	f06f 030c 	mvn.w	r3, #12
 8011260:	e1ce      	b.n	8011600 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011262:	6878      	ldr	r0, [r7, #4]
 8011264:	f000 fae0 	bl	8011828 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011268:	4b68      	ldr	r3, [pc, #416]	; (801140c <tcp_process+0x5cc>)
 801126a:	881b      	ldrh	r3, [r3, #0]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d005      	beq.n	801127c <tcp_process+0x43c>
            recv_acked--;
 8011270:	4b66      	ldr	r3, [pc, #408]	; (801140c <tcp_process+0x5cc>)
 8011272:	881b      	ldrh	r3, [r3, #0]
 8011274:	3b01      	subs	r3, #1
 8011276:	b29a      	uxth	r2, r3
 8011278:	4b64      	ldr	r3, [pc, #400]	; (801140c <tcp_process+0x5cc>)
 801127a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011280:	009a      	lsls	r2, r3, #2
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011286:	005b      	lsls	r3, r3, #1
 8011288:	f241 111c 	movw	r1, #4380	; 0x111c
 801128c:	428b      	cmp	r3, r1
 801128e:	bf38      	it	cc
 8011290:	460b      	movcc	r3, r1
 8011292:	429a      	cmp	r2, r3
 8011294:	d204      	bcs.n	80112a0 <tcp_process+0x460>
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801129a:	009b      	lsls	r3, r3, #2
 801129c:	b29b      	uxth	r3, r3
 801129e:	e00d      	b.n	80112bc <tcp_process+0x47c>
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80112a4:	005b      	lsls	r3, r3, #1
 80112a6:	f241 121c 	movw	r2, #4380	; 0x111c
 80112aa:	4293      	cmp	r3, r2
 80112ac:	d904      	bls.n	80112b8 <tcp_process+0x478>
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80112b2:	005b      	lsls	r3, r3, #1
 80112b4:	b29b      	uxth	r3, r3
 80112b6:	e001      	b.n	80112bc <tcp_process+0x47c>
 80112b8:	f241 131c 	movw	r3, #4380	; 0x111c
 80112bc:	687a      	ldr	r2, [r7, #4]
 80112be:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80112c2:	4b53      	ldr	r3, [pc, #332]	; (8011410 <tcp_process+0x5d0>)
 80112c4:	781b      	ldrb	r3, [r3, #0]
 80112c6:	f003 0320 	and.w	r3, r3, #32
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d037      	beq.n	801133e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	8b5b      	ldrh	r3, [r3, #26]
 80112d2:	f043 0302 	orr.w	r3, r3, #2
 80112d6:	b29a      	uxth	r2, r3
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	2207      	movs	r2, #7
 80112e0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80112e2:	e02c      	b.n	801133e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112e4:	4b40      	ldr	r3, [pc, #256]	; (80113e8 <tcp_process+0x5a8>)
 80112e6:	6819      	ldr	r1, [r3, #0]
 80112e8:	4b40      	ldr	r3, [pc, #256]	; (80113ec <tcp_process+0x5ac>)
 80112ea:	881b      	ldrh	r3, [r3, #0]
 80112ec:	461a      	mov	r2, r3
 80112ee:	4b40      	ldr	r3, [pc, #256]	; (80113f0 <tcp_process+0x5b0>)
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80112f4:	4b3f      	ldr	r3, [pc, #252]	; (80113f4 <tcp_process+0x5b4>)
 80112f6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112f8:	885b      	ldrh	r3, [r3, #2]
 80112fa:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80112fc:	4a3d      	ldr	r2, [pc, #244]	; (80113f4 <tcp_process+0x5b4>)
 80112fe:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011300:	8812      	ldrh	r2, [r2, #0]
 8011302:	b292      	uxth	r2, r2
 8011304:	9202      	str	r2, [sp, #8]
 8011306:	9301      	str	r3, [sp, #4]
 8011308:	4b3b      	ldr	r3, [pc, #236]	; (80113f8 <tcp_process+0x5b8>)
 801130a:	9300      	str	r3, [sp, #0]
 801130c:	4b3b      	ldr	r3, [pc, #236]	; (80113fc <tcp_process+0x5bc>)
 801130e:	4602      	mov	r2, r0
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f002 fbcf 	bl	8013ab4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011316:	e167      	b.n	80115e8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011318:	4b32      	ldr	r3, [pc, #200]	; (80113e4 <tcp_process+0x5a4>)
 801131a:	781b      	ldrb	r3, [r3, #0]
 801131c:	f003 0302 	and.w	r3, r3, #2
 8011320:	2b00      	cmp	r3, #0
 8011322:	f000 8161 	beq.w	80115e8 <tcp_process+0x7a8>
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801132a:	1e5a      	subs	r2, r3, #1
 801132c:	4b30      	ldr	r3, [pc, #192]	; (80113f0 <tcp_process+0x5b0>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	429a      	cmp	r2, r3
 8011332:	f040 8159 	bne.w	80115e8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011336:	6878      	ldr	r0, [r7, #4]
 8011338:	f002 f9b4 	bl	80136a4 <tcp_rexmit>
      break;
 801133c:	e154      	b.n	80115e8 <tcp_process+0x7a8>
 801133e:	e153      	b.n	80115e8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011340:	6878      	ldr	r0, [r7, #4]
 8011342:	f000 fa71 	bl	8011828 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011346:	4b32      	ldr	r3, [pc, #200]	; (8011410 <tcp_process+0x5d0>)
 8011348:	781b      	ldrb	r3, [r3, #0]
 801134a:	f003 0320 	and.w	r3, r3, #32
 801134e:	2b00      	cmp	r3, #0
 8011350:	f000 814c 	beq.w	80115ec <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	8b5b      	ldrh	r3, [r3, #26]
 8011358:	f043 0302 	orr.w	r3, r3, #2
 801135c:	b29a      	uxth	r2, r3
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	2207      	movs	r2, #7
 8011366:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011368:	e140      	b.n	80115ec <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801136a:	6878      	ldr	r0, [r7, #4]
 801136c:	f000 fa5c 	bl	8011828 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011370:	4b27      	ldr	r3, [pc, #156]	; (8011410 <tcp_process+0x5d0>)
 8011372:	781b      	ldrb	r3, [r3, #0]
 8011374:	f003 0320 	and.w	r3, r3, #32
 8011378:	2b00      	cmp	r3, #0
 801137a:	d071      	beq.n	8011460 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801137c:	4b19      	ldr	r3, [pc, #100]	; (80113e4 <tcp_process+0x5a4>)
 801137e:	781b      	ldrb	r3, [r3, #0]
 8011380:	f003 0310 	and.w	r3, r3, #16
 8011384:	2b00      	cmp	r3, #0
 8011386:	d060      	beq.n	801144a <tcp_process+0x60a>
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801138c:	4b16      	ldr	r3, [pc, #88]	; (80113e8 <tcp_process+0x5a8>)
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	429a      	cmp	r2, r3
 8011392:	d15a      	bne.n	801144a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011398:	2b00      	cmp	r3, #0
 801139a:	d156      	bne.n	801144a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	8b5b      	ldrh	r3, [r3, #26]
 80113a0:	f043 0302 	orr.w	r3, r3, #2
 80113a4:	b29a      	uxth	r2, r3
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80113aa:	6878      	ldr	r0, [r7, #4]
 80113ac:	f7fe fdbe 	bl	800ff2c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80113b0:	4b18      	ldr	r3, [pc, #96]	; (8011414 <tcp_process+0x5d4>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	687a      	ldr	r2, [r7, #4]
 80113b6:	429a      	cmp	r2, r3
 80113b8:	d105      	bne.n	80113c6 <tcp_process+0x586>
 80113ba:	4b16      	ldr	r3, [pc, #88]	; (8011414 <tcp_process+0x5d4>)
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	68db      	ldr	r3, [r3, #12]
 80113c0:	4a14      	ldr	r2, [pc, #80]	; (8011414 <tcp_process+0x5d4>)
 80113c2:	6013      	str	r3, [r2, #0]
 80113c4:	e02e      	b.n	8011424 <tcp_process+0x5e4>
 80113c6:	4b13      	ldr	r3, [pc, #76]	; (8011414 <tcp_process+0x5d4>)
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	617b      	str	r3, [r7, #20]
 80113cc:	e027      	b.n	801141e <tcp_process+0x5de>
 80113ce:	697b      	ldr	r3, [r7, #20]
 80113d0:	68db      	ldr	r3, [r3, #12]
 80113d2:	687a      	ldr	r2, [r7, #4]
 80113d4:	429a      	cmp	r2, r3
 80113d6:	d11f      	bne.n	8011418 <tcp_process+0x5d8>
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	68da      	ldr	r2, [r3, #12]
 80113dc:	697b      	ldr	r3, [r7, #20]
 80113de:	60da      	str	r2, [r3, #12]
 80113e0:	e020      	b.n	8011424 <tcp_process+0x5e4>
 80113e2:	bf00      	nop
 80113e4:	2000055c 	.word	0x2000055c
 80113e8:	20000554 	.word	0x20000554
 80113ec:	2000055a 	.word	0x2000055a
 80113f0:	20000550 	.word	0x20000550
 80113f4:	20000540 	.word	0x20000540
 80113f8:	200037ac 	.word	0x200037ac
 80113fc:	200037b0 	.word	0x200037b0
 8011400:	0801c158 	.word	0x0801c158
 8011404:	0801c3f8 	.word	0x0801c3f8
 8011408:	0801c1a4 	.word	0x0801c1a4
 801140c:	20000558 	.word	0x20000558
 8011410:	2000055d 	.word	0x2000055d
 8011414:	20006d00 	.word	0x20006d00
 8011418:	697b      	ldr	r3, [r7, #20]
 801141a:	68db      	ldr	r3, [r3, #12]
 801141c:	617b      	str	r3, [r7, #20]
 801141e:	697b      	ldr	r3, [r7, #20]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d1d4      	bne.n	80113ce <tcp_process+0x58e>
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	2200      	movs	r2, #0
 8011428:	60da      	str	r2, [r3, #12]
 801142a:	4b77      	ldr	r3, [pc, #476]	; (8011608 <tcp_process+0x7c8>)
 801142c:	2201      	movs	r2, #1
 801142e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	220a      	movs	r2, #10
 8011434:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011436:	4b75      	ldr	r3, [pc, #468]	; (801160c <tcp_process+0x7cc>)
 8011438:	681a      	ldr	r2, [r3, #0]
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	60da      	str	r2, [r3, #12]
 801143e:	4a73      	ldr	r2, [pc, #460]	; (801160c <tcp_process+0x7cc>)
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	6013      	str	r3, [r2, #0]
 8011444:	f002 fcf8 	bl	8013e38 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011448:	e0d2      	b.n	80115f0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	8b5b      	ldrh	r3, [r3, #26]
 801144e:	f043 0302 	orr.w	r3, r3, #2
 8011452:	b29a      	uxth	r2, r3
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	2208      	movs	r2, #8
 801145c:	751a      	strb	r2, [r3, #20]
      break;
 801145e:	e0c7      	b.n	80115f0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011460:	4b6b      	ldr	r3, [pc, #428]	; (8011610 <tcp_process+0x7d0>)
 8011462:	781b      	ldrb	r3, [r3, #0]
 8011464:	f003 0310 	and.w	r3, r3, #16
 8011468:	2b00      	cmp	r3, #0
 801146a:	f000 80c1 	beq.w	80115f0 <tcp_process+0x7b0>
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011472:	4b68      	ldr	r3, [pc, #416]	; (8011614 <tcp_process+0x7d4>)
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	429a      	cmp	r2, r3
 8011478:	f040 80ba 	bne.w	80115f0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011480:	2b00      	cmp	r3, #0
 8011482:	f040 80b5 	bne.w	80115f0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	2206      	movs	r2, #6
 801148a:	751a      	strb	r2, [r3, #20]
      break;
 801148c:	e0b0      	b.n	80115f0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801148e:	6878      	ldr	r0, [r7, #4]
 8011490:	f000 f9ca 	bl	8011828 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011494:	4b60      	ldr	r3, [pc, #384]	; (8011618 <tcp_process+0x7d8>)
 8011496:	781b      	ldrb	r3, [r3, #0]
 8011498:	f003 0320 	and.w	r3, r3, #32
 801149c:	2b00      	cmp	r3, #0
 801149e:	f000 80a9 	beq.w	80115f4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	8b5b      	ldrh	r3, [r3, #26]
 80114a6:	f043 0302 	orr.w	r3, r3, #2
 80114aa:	b29a      	uxth	r2, r3
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80114b0:	6878      	ldr	r0, [r7, #4]
 80114b2:	f7fe fd3b 	bl	800ff2c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80114b6:	4b59      	ldr	r3, [pc, #356]	; (801161c <tcp_process+0x7dc>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	687a      	ldr	r2, [r7, #4]
 80114bc:	429a      	cmp	r2, r3
 80114be:	d105      	bne.n	80114cc <tcp_process+0x68c>
 80114c0:	4b56      	ldr	r3, [pc, #344]	; (801161c <tcp_process+0x7dc>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	68db      	ldr	r3, [r3, #12]
 80114c6:	4a55      	ldr	r2, [pc, #340]	; (801161c <tcp_process+0x7dc>)
 80114c8:	6013      	str	r3, [r2, #0]
 80114ca:	e013      	b.n	80114f4 <tcp_process+0x6b4>
 80114cc:	4b53      	ldr	r3, [pc, #332]	; (801161c <tcp_process+0x7dc>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	613b      	str	r3, [r7, #16]
 80114d2:	e00c      	b.n	80114ee <tcp_process+0x6ae>
 80114d4:	693b      	ldr	r3, [r7, #16]
 80114d6:	68db      	ldr	r3, [r3, #12]
 80114d8:	687a      	ldr	r2, [r7, #4]
 80114da:	429a      	cmp	r2, r3
 80114dc:	d104      	bne.n	80114e8 <tcp_process+0x6a8>
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	68da      	ldr	r2, [r3, #12]
 80114e2:	693b      	ldr	r3, [r7, #16]
 80114e4:	60da      	str	r2, [r3, #12]
 80114e6:	e005      	b.n	80114f4 <tcp_process+0x6b4>
 80114e8:	693b      	ldr	r3, [r7, #16]
 80114ea:	68db      	ldr	r3, [r3, #12]
 80114ec:	613b      	str	r3, [r7, #16]
 80114ee:	693b      	ldr	r3, [r7, #16]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d1ef      	bne.n	80114d4 <tcp_process+0x694>
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	2200      	movs	r2, #0
 80114f8:	60da      	str	r2, [r3, #12]
 80114fa:	4b43      	ldr	r3, [pc, #268]	; (8011608 <tcp_process+0x7c8>)
 80114fc:	2201      	movs	r2, #1
 80114fe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	220a      	movs	r2, #10
 8011504:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011506:	4b41      	ldr	r3, [pc, #260]	; (801160c <tcp_process+0x7cc>)
 8011508:	681a      	ldr	r2, [r3, #0]
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	60da      	str	r2, [r3, #12]
 801150e:	4a3f      	ldr	r2, [pc, #252]	; (801160c <tcp_process+0x7cc>)
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	6013      	str	r3, [r2, #0]
 8011514:	f002 fc90 	bl	8013e38 <tcp_timer_needed>
      }
      break;
 8011518:	e06c      	b.n	80115f4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	f000 f984 	bl	8011828 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011520:	4b3b      	ldr	r3, [pc, #236]	; (8011610 <tcp_process+0x7d0>)
 8011522:	781b      	ldrb	r3, [r3, #0]
 8011524:	f003 0310 	and.w	r3, r3, #16
 8011528:	2b00      	cmp	r3, #0
 801152a:	d065      	beq.n	80115f8 <tcp_process+0x7b8>
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011530:	4b38      	ldr	r3, [pc, #224]	; (8011614 <tcp_process+0x7d4>)
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	429a      	cmp	r2, r3
 8011536:	d15f      	bne.n	80115f8 <tcp_process+0x7b8>
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801153c:	2b00      	cmp	r3, #0
 801153e:	d15b      	bne.n	80115f8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011540:	6878      	ldr	r0, [r7, #4]
 8011542:	f7fe fcf3 	bl	800ff2c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011546:	4b35      	ldr	r3, [pc, #212]	; (801161c <tcp_process+0x7dc>)
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	687a      	ldr	r2, [r7, #4]
 801154c:	429a      	cmp	r2, r3
 801154e:	d105      	bne.n	801155c <tcp_process+0x71c>
 8011550:	4b32      	ldr	r3, [pc, #200]	; (801161c <tcp_process+0x7dc>)
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	68db      	ldr	r3, [r3, #12]
 8011556:	4a31      	ldr	r2, [pc, #196]	; (801161c <tcp_process+0x7dc>)
 8011558:	6013      	str	r3, [r2, #0]
 801155a:	e013      	b.n	8011584 <tcp_process+0x744>
 801155c:	4b2f      	ldr	r3, [pc, #188]	; (801161c <tcp_process+0x7dc>)
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	60fb      	str	r3, [r7, #12]
 8011562:	e00c      	b.n	801157e <tcp_process+0x73e>
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	68db      	ldr	r3, [r3, #12]
 8011568:	687a      	ldr	r2, [r7, #4]
 801156a:	429a      	cmp	r2, r3
 801156c:	d104      	bne.n	8011578 <tcp_process+0x738>
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	68da      	ldr	r2, [r3, #12]
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	60da      	str	r2, [r3, #12]
 8011576:	e005      	b.n	8011584 <tcp_process+0x744>
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	68db      	ldr	r3, [r3, #12]
 801157c:	60fb      	str	r3, [r7, #12]
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d1ef      	bne.n	8011564 <tcp_process+0x724>
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	2200      	movs	r2, #0
 8011588:	60da      	str	r2, [r3, #12]
 801158a:	4b1f      	ldr	r3, [pc, #124]	; (8011608 <tcp_process+0x7c8>)
 801158c:	2201      	movs	r2, #1
 801158e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	220a      	movs	r2, #10
 8011594:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011596:	4b1d      	ldr	r3, [pc, #116]	; (801160c <tcp_process+0x7cc>)
 8011598:	681a      	ldr	r2, [r3, #0]
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	60da      	str	r2, [r3, #12]
 801159e:	4a1b      	ldr	r2, [pc, #108]	; (801160c <tcp_process+0x7cc>)
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	6013      	str	r3, [r2, #0]
 80115a4:	f002 fc48 	bl	8013e38 <tcp_timer_needed>
      }
      break;
 80115a8:	e026      	b.n	80115f8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80115aa:	6878      	ldr	r0, [r7, #4]
 80115ac:	f000 f93c 	bl	8011828 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80115b0:	4b17      	ldr	r3, [pc, #92]	; (8011610 <tcp_process+0x7d0>)
 80115b2:	781b      	ldrb	r3, [r3, #0]
 80115b4:	f003 0310 	and.w	r3, r3, #16
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d01f      	beq.n	80115fc <tcp_process+0x7bc>
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80115c0:	4b14      	ldr	r3, [pc, #80]	; (8011614 <tcp_process+0x7d4>)
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	429a      	cmp	r2, r3
 80115c6:	d119      	bne.n	80115fc <tcp_process+0x7bc>
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d115      	bne.n	80115fc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80115d0:	4b11      	ldr	r3, [pc, #68]	; (8011618 <tcp_process+0x7d8>)
 80115d2:	781b      	ldrb	r3, [r3, #0]
 80115d4:	f043 0310 	orr.w	r3, r3, #16
 80115d8:	b2da      	uxtb	r2, r3
 80115da:	4b0f      	ldr	r3, [pc, #60]	; (8011618 <tcp_process+0x7d8>)
 80115dc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80115de:	e00d      	b.n	80115fc <tcp_process+0x7bc>
    default:
      break;
 80115e0:	bf00      	nop
 80115e2:	e00c      	b.n	80115fe <tcp_process+0x7be>
      break;
 80115e4:	bf00      	nop
 80115e6:	e00a      	b.n	80115fe <tcp_process+0x7be>
      break;
 80115e8:	bf00      	nop
 80115ea:	e008      	b.n	80115fe <tcp_process+0x7be>
      break;
 80115ec:	bf00      	nop
 80115ee:	e006      	b.n	80115fe <tcp_process+0x7be>
      break;
 80115f0:	bf00      	nop
 80115f2:	e004      	b.n	80115fe <tcp_process+0x7be>
      break;
 80115f4:	bf00      	nop
 80115f6:	e002      	b.n	80115fe <tcp_process+0x7be>
      break;
 80115f8:	bf00      	nop
 80115fa:	e000      	b.n	80115fe <tcp_process+0x7be>
      break;
 80115fc:	bf00      	nop
  }
  return ERR_OK;
 80115fe:	2300      	movs	r3, #0
}
 8011600:	4618      	mov	r0, r3
 8011602:	3724      	adds	r7, #36	; 0x24
 8011604:	46bd      	mov	sp, r7
 8011606:	bd90      	pop	{r4, r7, pc}
 8011608:	20006cfc 	.word	0x20006cfc
 801160c:	20006d10 	.word	0x20006d10
 8011610:	2000055c 	.word	0x2000055c
 8011614:	20000554 	.word	0x20000554
 8011618:	2000055d 	.word	0x2000055d
 801161c:	20006d00 	.word	0x20006d00

08011620 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011620:	b590      	push	{r4, r7, lr}
 8011622:	b085      	sub	sp, #20
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
 8011628:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d106      	bne.n	801163e <tcp_oos_insert_segment+0x1e>
 8011630:	4b3b      	ldr	r3, [pc, #236]	; (8011720 <tcp_oos_insert_segment+0x100>)
 8011632:	f240 421f 	movw	r2, #1055	; 0x41f
 8011636:	493b      	ldr	r1, [pc, #236]	; (8011724 <tcp_oos_insert_segment+0x104>)
 8011638:	483b      	ldr	r0, [pc, #236]	; (8011728 <tcp_oos_insert_segment+0x108>)
 801163a:	f007 ff07 	bl	801944c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	68db      	ldr	r3, [r3, #12]
 8011642:	899b      	ldrh	r3, [r3, #12]
 8011644:	b29b      	uxth	r3, r3
 8011646:	4618      	mov	r0, r3
 8011648:	f7fb fcb2 	bl	800cfb0 <lwip_htons>
 801164c:	4603      	mov	r3, r0
 801164e:	b2db      	uxtb	r3, r3
 8011650:	f003 0301 	and.w	r3, r3, #1
 8011654:	2b00      	cmp	r3, #0
 8011656:	d028      	beq.n	80116aa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011658:	6838      	ldr	r0, [r7, #0]
 801165a:	f7fe fa65 	bl	800fb28 <tcp_segs_free>
    next = NULL;
 801165e:	2300      	movs	r3, #0
 8011660:	603b      	str	r3, [r7, #0]
 8011662:	e056      	b.n	8011712 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011664:	683b      	ldr	r3, [r7, #0]
 8011666:	68db      	ldr	r3, [r3, #12]
 8011668:	899b      	ldrh	r3, [r3, #12]
 801166a:	b29b      	uxth	r3, r3
 801166c:	4618      	mov	r0, r3
 801166e:	f7fb fc9f 	bl	800cfb0 <lwip_htons>
 8011672:	4603      	mov	r3, r0
 8011674:	b2db      	uxtb	r3, r3
 8011676:	f003 0301 	and.w	r3, r3, #1
 801167a:	2b00      	cmp	r3, #0
 801167c:	d00d      	beq.n	801169a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	68db      	ldr	r3, [r3, #12]
 8011682:	899b      	ldrh	r3, [r3, #12]
 8011684:	b29c      	uxth	r4, r3
 8011686:	2001      	movs	r0, #1
 8011688:	f7fb fc92 	bl	800cfb0 <lwip_htons>
 801168c:	4603      	mov	r3, r0
 801168e:	461a      	mov	r2, r3
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	68db      	ldr	r3, [r3, #12]
 8011694:	4322      	orrs	r2, r4
 8011696:	b292      	uxth	r2, r2
 8011698:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80116a4:	68f8      	ldr	r0, [r7, #12]
 80116a6:	f7fe fa54 	bl	800fb52 <tcp_seg_free>
    while (next &&
 80116aa:	683b      	ldr	r3, [r7, #0]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d00e      	beq.n	80116ce <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	891b      	ldrh	r3, [r3, #8]
 80116b4:	461a      	mov	r2, r3
 80116b6:	4b1d      	ldr	r3, [pc, #116]	; (801172c <tcp_oos_insert_segment+0x10c>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	441a      	add	r2, r3
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	68db      	ldr	r3, [r3, #12]
 80116c0:	685b      	ldr	r3, [r3, #4]
 80116c2:	6839      	ldr	r1, [r7, #0]
 80116c4:	8909      	ldrh	r1, [r1, #8]
 80116c6:	440b      	add	r3, r1
 80116c8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	daca      	bge.n	8011664 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80116ce:	683b      	ldr	r3, [r7, #0]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d01e      	beq.n	8011712 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	891b      	ldrh	r3, [r3, #8]
 80116d8:	461a      	mov	r2, r3
 80116da:	4b14      	ldr	r3, [pc, #80]	; (801172c <tcp_oos_insert_segment+0x10c>)
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	441a      	add	r2, r3
 80116e0:	683b      	ldr	r3, [r7, #0]
 80116e2:	68db      	ldr	r3, [r3, #12]
 80116e4:	685b      	ldr	r3, [r3, #4]
 80116e6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	dd12      	ble.n	8011712 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	68db      	ldr	r3, [r3, #12]
 80116f0:	685b      	ldr	r3, [r3, #4]
 80116f2:	b29a      	uxth	r2, r3
 80116f4:	4b0d      	ldr	r3, [pc, #52]	; (801172c <tcp_oos_insert_segment+0x10c>)
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	b29b      	uxth	r3, r3
 80116fa:	1ad3      	subs	r3, r2, r3
 80116fc:	b29a      	uxth	r2, r3
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	685a      	ldr	r2, [r3, #4]
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	891b      	ldrh	r3, [r3, #8]
 801170a:	4619      	mov	r1, r3
 801170c:	4610      	mov	r0, r2
 801170e:	f7fc fd85 	bl	800e21c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	683a      	ldr	r2, [r7, #0]
 8011716:	601a      	str	r2, [r3, #0]
}
 8011718:	bf00      	nop
 801171a:	3714      	adds	r7, #20
 801171c:	46bd      	mov	sp, r7
 801171e:	bd90      	pop	{r4, r7, pc}
 8011720:	0801c158 	.word	0x0801c158
 8011724:	0801c418 	.word	0x0801c418
 8011728:	0801c1a4 	.word	0x0801c1a4
 801172c:	20000550 	.word	0x20000550

08011730 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011730:	b5b0      	push	{r4, r5, r7, lr}
 8011732:	b086      	sub	sp, #24
 8011734:	af00      	add	r7, sp, #0
 8011736:	60f8      	str	r0, [r7, #12]
 8011738:	60b9      	str	r1, [r7, #8]
 801173a:	607a      	str	r2, [r7, #4]
 801173c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801173e:	e03e      	b.n	80117be <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011740:	68bb      	ldr	r3, [r7, #8]
 8011742:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011744:	68bb      	ldr	r3, [r7, #8]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801174a:	697b      	ldr	r3, [r7, #20]
 801174c:	685b      	ldr	r3, [r3, #4]
 801174e:	4618      	mov	r0, r3
 8011750:	f7fc ff72 	bl	800e638 <pbuf_clen>
 8011754:	4603      	mov	r3, r0
 8011756:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801175e:	8a7a      	ldrh	r2, [r7, #18]
 8011760:	429a      	cmp	r2, r3
 8011762:	d906      	bls.n	8011772 <tcp_free_acked_segments+0x42>
 8011764:	4b2a      	ldr	r3, [pc, #168]	; (8011810 <tcp_free_acked_segments+0xe0>)
 8011766:	f240 4257 	movw	r2, #1111	; 0x457
 801176a:	492a      	ldr	r1, [pc, #168]	; (8011814 <tcp_free_acked_segments+0xe4>)
 801176c:	482a      	ldr	r0, [pc, #168]	; (8011818 <tcp_free_acked_segments+0xe8>)
 801176e:	f007 fe6d 	bl	801944c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011778:	8a7b      	ldrh	r3, [r7, #18]
 801177a:	1ad3      	subs	r3, r2, r3
 801177c:	b29a      	uxth	r2, r3
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011784:	697b      	ldr	r3, [r7, #20]
 8011786:	891a      	ldrh	r2, [r3, #8]
 8011788:	4b24      	ldr	r3, [pc, #144]	; (801181c <tcp_free_acked_segments+0xec>)
 801178a:	881b      	ldrh	r3, [r3, #0]
 801178c:	4413      	add	r3, r2
 801178e:	b29a      	uxth	r2, r3
 8011790:	4b22      	ldr	r3, [pc, #136]	; (801181c <tcp_free_acked_segments+0xec>)
 8011792:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011794:	6978      	ldr	r0, [r7, #20]
 8011796:	f7fe f9dc 	bl	800fb52 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d00c      	beq.n	80117be <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80117a4:	68bb      	ldr	r3, [r7, #8]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d109      	bne.n	80117be <tcp_free_acked_segments+0x8e>
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d106      	bne.n	80117be <tcp_free_acked_segments+0x8e>
 80117b0:	4b17      	ldr	r3, [pc, #92]	; (8011810 <tcp_free_acked_segments+0xe0>)
 80117b2:	f240 4261 	movw	r2, #1121	; 0x461
 80117b6:	491a      	ldr	r1, [pc, #104]	; (8011820 <tcp_free_acked_segments+0xf0>)
 80117b8:	4817      	ldr	r0, [pc, #92]	; (8011818 <tcp_free_acked_segments+0xe8>)
 80117ba:	f007 fe47 	bl	801944c <iprintf>
  while (seg_list != NULL &&
 80117be:	68bb      	ldr	r3, [r7, #8]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d020      	beq.n	8011806 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80117c4:	68bb      	ldr	r3, [r7, #8]
 80117c6:	68db      	ldr	r3, [r3, #12]
 80117c8:	685b      	ldr	r3, [r3, #4]
 80117ca:	4618      	mov	r0, r3
 80117cc:	f7fb fc05 	bl	800cfda <lwip_htonl>
 80117d0:	4604      	mov	r4, r0
 80117d2:	68bb      	ldr	r3, [r7, #8]
 80117d4:	891b      	ldrh	r3, [r3, #8]
 80117d6:	461d      	mov	r5, r3
 80117d8:	68bb      	ldr	r3, [r7, #8]
 80117da:	68db      	ldr	r3, [r3, #12]
 80117dc:	899b      	ldrh	r3, [r3, #12]
 80117de:	b29b      	uxth	r3, r3
 80117e0:	4618      	mov	r0, r3
 80117e2:	f7fb fbe5 	bl	800cfb0 <lwip_htons>
 80117e6:	4603      	mov	r3, r0
 80117e8:	b2db      	uxtb	r3, r3
 80117ea:	f003 0303 	and.w	r3, r3, #3
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d001      	beq.n	80117f6 <tcp_free_acked_segments+0xc6>
 80117f2:	2301      	movs	r3, #1
 80117f4:	e000      	b.n	80117f8 <tcp_free_acked_segments+0xc8>
 80117f6:	2300      	movs	r3, #0
 80117f8:	442b      	add	r3, r5
 80117fa:	18e2      	adds	r2, r4, r3
 80117fc:	4b09      	ldr	r3, [pc, #36]	; (8011824 <tcp_free_acked_segments+0xf4>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011802:	2b00      	cmp	r3, #0
 8011804:	dd9c      	ble.n	8011740 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011806:	68bb      	ldr	r3, [r7, #8]
}
 8011808:	4618      	mov	r0, r3
 801180a:	3718      	adds	r7, #24
 801180c:	46bd      	mov	sp, r7
 801180e:	bdb0      	pop	{r4, r5, r7, pc}
 8011810:	0801c158 	.word	0x0801c158
 8011814:	0801c440 	.word	0x0801c440
 8011818:	0801c1a4 	.word	0x0801c1a4
 801181c:	20000558 	.word	0x20000558
 8011820:	0801c468 	.word	0x0801c468
 8011824:	20000554 	.word	0x20000554

08011828 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011828:	b5b0      	push	{r4, r5, r7, lr}
 801182a:	b094      	sub	sp, #80	; 0x50
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011830:	2300      	movs	r3, #0
 8011832:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d106      	bne.n	8011848 <tcp_receive+0x20>
 801183a:	4ba6      	ldr	r3, [pc, #664]	; (8011ad4 <tcp_receive+0x2ac>)
 801183c:	f240 427b 	movw	r2, #1147	; 0x47b
 8011840:	49a5      	ldr	r1, [pc, #660]	; (8011ad8 <tcp_receive+0x2b0>)
 8011842:	48a6      	ldr	r0, [pc, #664]	; (8011adc <tcp_receive+0x2b4>)
 8011844:	f007 fe02 	bl	801944c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	7d1b      	ldrb	r3, [r3, #20]
 801184c:	2b03      	cmp	r3, #3
 801184e:	d806      	bhi.n	801185e <tcp_receive+0x36>
 8011850:	4ba0      	ldr	r3, [pc, #640]	; (8011ad4 <tcp_receive+0x2ac>)
 8011852:	f240 427c 	movw	r2, #1148	; 0x47c
 8011856:	49a2      	ldr	r1, [pc, #648]	; (8011ae0 <tcp_receive+0x2b8>)
 8011858:	48a0      	ldr	r0, [pc, #640]	; (8011adc <tcp_receive+0x2b4>)
 801185a:	f007 fdf7 	bl	801944c <iprintf>

  if (flags & TCP_ACK) {
 801185e:	4ba1      	ldr	r3, [pc, #644]	; (8011ae4 <tcp_receive+0x2bc>)
 8011860:	781b      	ldrb	r3, [r3, #0]
 8011862:	f003 0310 	and.w	r3, r3, #16
 8011866:	2b00      	cmp	r3, #0
 8011868:	f000 8263 	beq.w	8011d32 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011872:	461a      	mov	r2, r3
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011878:	4413      	add	r3, r2
 801187a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011880:	4b99      	ldr	r3, [pc, #612]	; (8011ae8 <tcp_receive+0x2c0>)
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	1ad3      	subs	r3, r2, r3
 8011886:	2b00      	cmp	r3, #0
 8011888:	db1b      	blt.n	80118c2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801188e:	4b96      	ldr	r3, [pc, #600]	; (8011ae8 <tcp_receive+0x2c0>)
 8011890:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011892:	429a      	cmp	r2, r3
 8011894:	d106      	bne.n	80118a4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801189a:	4b94      	ldr	r3, [pc, #592]	; (8011aec <tcp_receive+0x2c4>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	1ad3      	subs	r3, r2, r3
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	db0e      	blt.n	80118c2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80118a8:	4b90      	ldr	r3, [pc, #576]	; (8011aec <tcp_receive+0x2c4>)
 80118aa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80118ac:	429a      	cmp	r2, r3
 80118ae:	d125      	bne.n	80118fc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80118b0:	4b8f      	ldr	r3, [pc, #572]	; (8011af0 <tcp_receive+0x2c8>)
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	89db      	ldrh	r3, [r3, #14]
 80118b6:	b29a      	uxth	r2, r3
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80118be:	429a      	cmp	r2, r3
 80118c0:	d91c      	bls.n	80118fc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80118c2:	4b8b      	ldr	r3, [pc, #556]	; (8011af0 <tcp_receive+0x2c8>)
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	89db      	ldrh	r3, [r3, #14]
 80118c8:	b29a      	uxth	r2, r3
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80118dc:	429a      	cmp	r2, r3
 80118de:	d205      	bcs.n	80118ec <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80118ec:	4b7e      	ldr	r3, [pc, #504]	; (8011ae8 <tcp_receive+0x2c0>)
 80118ee:	681a      	ldr	r2, [r3, #0]
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80118f4:	4b7d      	ldr	r3, [pc, #500]	; (8011aec <tcp_receive+0x2c4>)
 80118f6:	681a      	ldr	r2, [r3, #0]
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80118fc:	4b7b      	ldr	r3, [pc, #492]	; (8011aec <tcp_receive+0x2c4>)
 80118fe:	681a      	ldr	r2, [r3, #0]
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011904:	1ad3      	subs	r3, r2, r3
 8011906:	2b00      	cmp	r3, #0
 8011908:	dc58      	bgt.n	80119bc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801190a:	4b7a      	ldr	r3, [pc, #488]	; (8011af4 <tcp_receive+0x2cc>)
 801190c:	881b      	ldrh	r3, [r3, #0]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d14b      	bne.n	80119aa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011916:	687a      	ldr	r2, [r7, #4]
 8011918:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801191c:	4413      	add	r3, r2
 801191e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011920:	429a      	cmp	r2, r3
 8011922:	d142      	bne.n	80119aa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801192a:	2b00      	cmp	r3, #0
 801192c:	db3d      	blt.n	80119aa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011932:	4b6e      	ldr	r3, [pc, #440]	; (8011aec <tcp_receive+0x2c4>)
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	429a      	cmp	r2, r3
 8011938:	d137      	bne.n	80119aa <tcp_receive+0x182>
              found_dupack = 1;
 801193a:	2301      	movs	r3, #1
 801193c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011944:	2bff      	cmp	r3, #255	; 0xff
 8011946:	d007      	beq.n	8011958 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801194e:	3301      	adds	r3, #1
 8011950:	b2da      	uxtb	r2, r3
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801195e:	2b03      	cmp	r3, #3
 8011960:	d91b      	bls.n	801199a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801196c:	4413      	add	r3, r2
 801196e:	b29a      	uxth	r2, r3
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011976:	429a      	cmp	r2, r3
 8011978:	d30a      	bcc.n	8011990 <tcp_receive+0x168>
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011984:	4413      	add	r3, r2
 8011986:	b29a      	uxth	r2, r3
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801198e:	e004      	b.n	801199a <tcp_receive+0x172>
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011996:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80119a0:	2b02      	cmp	r3, #2
 80119a2:	d902      	bls.n	80119aa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80119a4:	6878      	ldr	r0, [r7, #4]
 80119a6:	f001 fee9 	bl	801377c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80119aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	f040 8160 	bne.w	8011c72 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	2200      	movs	r2, #0
 80119b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80119ba:	e15a      	b.n	8011c72 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80119bc:	4b4b      	ldr	r3, [pc, #300]	; (8011aec <tcp_receive+0x2c4>)
 80119be:	681a      	ldr	r2, [r3, #0]
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119c4:	1ad3      	subs	r3, r2, r3
 80119c6:	3b01      	subs	r3, #1
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	f2c0 814d 	blt.w	8011c68 <tcp_receive+0x440>
 80119ce:	4b47      	ldr	r3, [pc, #284]	; (8011aec <tcp_receive+0x2c4>)
 80119d0:	681a      	ldr	r2, [r3, #0]
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119d6:	1ad3      	subs	r3, r2, r3
 80119d8:	2b00      	cmp	r3, #0
 80119da:	f300 8145 	bgt.w	8011c68 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	8b5b      	ldrh	r3, [r3, #26]
 80119e2:	f003 0304 	and.w	r3, r3, #4
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d010      	beq.n	8011a0c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	8b5b      	ldrh	r3, [r3, #26]
 80119ee:	f023 0304 	bic.w	r3, r3, #4
 80119f2:	b29a      	uxth	r2, r3
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	2200      	movs	r2, #0
 8011a08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2200      	movs	r2, #0
 8011a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011a1a:	10db      	asrs	r3, r3, #3
 8011a1c:	b21b      	sxth	r3, r3
 8011a1e:	b29a      	uxth	r2, r3
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011a26:	b29b      	uxth	r3, r3
 8011a28:	4413      	add	r3, r2
 8011a2a:	b29b      	uxth	r3, r3
 8011a2c:	b21a      	sxth	r2, r3
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011a34:	4b2d      	ldr	r3, [pc, #180]	; (8011aec <tcp_receive+0x2c4>)
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	b29a      	uxth	r2, r3
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a3e:	b29b      	uxth	r3, r3
 8011a40:	1ad3      	subs	r3, r2, r3
 8011a42:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2200      	movs	r2, #0
 8011a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011a4c:	4b27      	ldr	r3, [pc, #156]	; (8011aec <tcp_receive+0x2c4>)
 8011a4e:	681a      	ldr	r2, [r3, #0]
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	7d1b      	ldrb	r3, [r3, #20]
 8011a58:	2b03      	cmp	r3, #3
 8011a5a:	f240 8096 	bls.w	8011b8a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011a6a:	429a      	cmp	r2, r3
 8011a6c:	d244      	bcs.n	8011af8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	8b5b      	ldrh	r3, [r3, #26]
 8011a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d001      	beq.n	8011a7e <tcp_receive+0x256>
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	e000      	b.n	8011a80 <tcp_receive+0x258>
 8011a7e:	2302      	movs	r3, #2
 8011a80:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011a84:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011a88:	b29a      	uxth	r2, r3
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a8e:	fb12 f303 	smulbb	r3, r2, r3
 8011a92:	b29b      	uxth	r3, r3
 8011a94:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011a96:	4293      	cmp	r3, r2
 8011a98:	bf28      	it	cs
 8011a9a:	4613      	movcs	r3, r2
 8011a9c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011aa4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011aa6:	4413      	add	r3, r2
 8011aa8:	b29a      	uxth	r2, r3
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011ab0:	429a      	cmp	r2, r3
 8011ab2:	d309      	bcc.n	8011ac8 <tcp_receive+0x2a0>
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011aba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011abc:	4413      	add	r3, r2
 8011abe:	b29a      	uxth	r2, r3
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011ac6:	e060      	b.n	8011b8a <tcp_receive+0x362>
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ace:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011ad2:	e05a      	b.n	8011b8a <tcp_receive+0x362>
 8011ad4:	0801c158 	.word	0x0801c158
 8011ad8:	0801c488 	.word	0x0801c488
 8011adc:	0801c1a4 	.word	0x0801c1a4
 8011ae0:	0801c4a4 	.word	0x0801c4a4
 8011ae4:	2000055c 	.word	0x2000055c
 8011ae8:	20000550 	.word	0x20000550
 8011aec:	20000554 	.word	0x20000554
 8011af0:	20000540 	.word	0x20000540
 8011af4:	2000055a 	.word	0x2000055a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011afe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011b00:	4413      	add	r3, r2
 8011b02:	b29a      	uxth	r2, r3
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011b0a:	429a      	cmp	r2, r3
 8011b0c:	d309      	bcc.n	8011b22 <tcp_receive+0x2fa>
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011b14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011b16:	4413      	add	r3, r2
 8011b18:	b29a      	uxth	r2, r3
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011b20:	e004      	b.n	8011b2c <tcp_receive+0x304>
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011b38:	429a      	cmp	r2, r3
 8011b3a:	d326      	bcc.n	8011b8a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011b48:	1ad3      	subs	r3, r2, r3
 8011b4a:	b29a      	uxth	r2, r3
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b5c:	4413      	add	r3, r2
 8011b5e:	b29a      	uxth	r2, r3
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011b66:	429a      	cmp	r2, r3
 8011b68:	d30a      	bcc.n	8011b80 <tcp_receive+0x358>
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b74:	4413      	add	r3, r2
 8011b76:	b29a      	uxth	r2, r3
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011b7e:	e004      	b.n	8011b8a <tcp_receive+0x362>
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b86:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b92:	4a98      	ldr	r2, [pc, #608]	; (8011df4 <tcp_receive+0x5cc>)
 8011b94:	6878      	ldr	r0, [r7, #4]
 8011b96:	f7ff fdcb 	bl	8011730 <tcp_free_acked_segments>
 8011b9a:	4602      	mov	r2, r0
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ba8:	4a93      	ldr	r2, [pc, #588]	; (8011df8 <tcp_receive+0x5d0>)
 8011baa:	6878      	ldr	r0, [r7, #4]
 8011bac:	f7ff fdc0 	bl	8011730 <tcp_free_acked_segments>
 8011bb0:	4602      	mov	r2, r0
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d104      	bne.n	8011bc8 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011bc4:	861a      	strh	r2, [r3, #48]	; 0x30
 8011bc6:	e002      	b.n	8011bce <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	2200      	movs	r2, #0
 8011bcc:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d103      	bne.n	8011be4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	2200      	movs	r2, #0
 8011be0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011bea:	4b84      	ldr	r3, [pc, #528]	; (8011dfc <tcp_receive+0x5d4>)
 8011bec:	881b      	ldrh	r3, [r3, #0]
 8011bee:	4413      	add	r3, r2
 8011bf0:	b29a      	uxth	r2, r3
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	8b5b      	ldrh	r3, [r3, #26]
 8011bfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d035      	beq.n	8011c70 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d118      	bne.n	8011c3e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d00c      	beq.n	8011c2e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c1c:	68db      	ldr	r3, [r3, #12]
 8011c1e:	685b      	ldr	r3, [r3, #4]
 8011c20:	4618      	mov	r0, r3
 8011c22:	f7fb f9da 	bl	800cfda <lwip_htonl>
 8011c26:	4603      	mov	r3, r0
 8011c28:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	dc20      	bgt.n	8011c70 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	8b5b      	ldrh	r3, [r3, #26]
 8011c32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011c36:	b29a      	uxth	r2, r3
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011c3c:	e018      	b.n	8011c70 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c46:	68db      	ldr	r3, [r3, #12]
 8011c48:	685b      	ldr	r3, [r3, #4]
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	f7fb f9c5 	bl	800cfda <lwip_htonl>
 8011c50:	4603      	mov	r3, r0
 8011c52:	1ae3      	subs	r3, r4, r3
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	dc0b      	bgt.n	8011c70 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	8b5b      	ldrh	r3, [r3, #26]
 8011c5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011c60:	b29a      	uxth	r2, r3
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011c66:	e003      	b.n	8011c70 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011c68:	6878      	ldr	r0, [r7, #4]
 8011c6a:	f001 ff75 	bl	8013b58 <tcp_send_empty_ack>
 8011c6e:	e000      	b.n	8011c72 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011c70:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d05b      	beq.n	8011d32 <tcp_receive+0x50a>
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011c7e:	4b60      	ldr	r3, [pc, #384]	; (8011e00 <tcp_receive+0x5d8>)
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	1ad3      	subs	r3, r2, r3
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	da54      	bge.n	8011d32 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011c88:	4b5e      	ldr	r3, [pc, #376]	; (8011e04 <tcp_receive+0x5dc>)
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	b29a      	uxth	r2, r3
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c92:	b29b      	uxth	r3, r3
 8011c94:	1ad3      	subs	r3, r2, r3
 8011c96:	b29b      	uxth	r3, r3
 8011c98:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011c9c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011ca6:	10db      	asrs	r3, r3, #3
 8011ca8:	b21b      	sxth	r3, r3
 8011caa:	b29b      	uxth	r3, r3
 8011cac:	1ad3      	subs	r3, r2, r3
 8011cae:	b29b      	uxth	r3, r3
 8011cb0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011cba:	b29a      	uxth	r2, r3
 8011cbc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011cc0:	4413      	add	r3, r2
 8011cc2:	b29b      	uxth	r3, r3
 8011cc4:	b21a      	sxth	r2, r3
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8011cca:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	da05      	bge.n	8011cde <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8011cd2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011cd6:	425b      	negs	r3, r3
 8011cd8:	b29b      	uxth	r3, r3
 8011cda:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011cde:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011ce8:	109b      	asrs	r3, r3, #2
 8011cea:	b21b      	sxth	r3, r3
 8011cec:	b29b      	uxth	r3, r3
 8011cee:	1ad3      	subs	r3, r2, r3
 8011cf0:	b29b      	uxth	r3, r3
 8011cf2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011cfc:	b29a      	uxth	r2, r3
 8011cfe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011d02:	4413      	add	r3, r2
 8011d04:	b29b      	uxth	r3, r3
 8011d06:	b21a      	sxth	r2, r3
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011d12:	10db      	asrs	r3, r3, #3
 8011d14:	b21b      	sxth	r3, r3
 8011d16:	b29a      	uxth	r2, r3
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011d1e:	b29b      	uxth	r3, r3
 8011d20:	4413      	add	r3, r2
 8011d22:	b29b      	uxth	r3, r3
 8011d24:	b21a      	sxth	r2, r3
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	2200      	movs	r2, #0
 8011d30:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011d32:	4b35      	ldr	r3, [pc, #212]	; (8011e08 <tcp_receive+0x5e0>)
 8011d34:	881b      	ldrh	r3, [r3, #0]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	f000 84e1 	beq.w	80126fe <tcp_receive+0xed6>
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	7d1b      	ldrb	r3, [r3, #20]
 8011d40:	2b06      	cmp	r3, #6
 8011d42:	f200 84dc 	bhi.w	80126fe <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d4a:	4b30      	ldr	r3, [pc, #192]	; (8011e0c <tcp_receive+0x5e4>)
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	1ad3      	subs	r3, r2, r3
 8011d50:	3b01      	subs	r3, #1
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	f2c0 808e 	blt.w	8011e74 <tcp_receive+0x64c>
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d5c:	4b2a      	ldr	r3, [pc, #168]	; (8011e08 <tcp_receive+0x5e0>)
 8011d5e:	881b      	ldrh	r3, [r3, #0]
 8011d60:	4619      	mov	r1, r3
 8011d62:	4b2a      	ldr	r3, [pc, #168]	; (8011e0c <tcp_receive+0x5e4>)
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	440b      	add	r3, r1
 8011d68:	1ad3      	subs	r3, r2, r3
 8011d6a:	3301      	adds	r3, #1
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	f300 8081 	bgt.w	8011e74 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011d72:	4b27      	ldr	r3, [pc, #156]	; (8011e10 <tcp_receive+0x5e8>)
 8011d74:	685b      	ldr	r3, [r3, #4]
 8011d76:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d7c:	4b23      	ldr	r3, [pc, #140]	; (8011e0c <tcp_receive+0x5e4>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	1ad3      	subs	r3, r2, r3
 8011d82:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011d84:	4b22      	ldr	r3, [pc, #136]	; (8011e10 <tcp_receive+0x5e8>)
 8011d86:	685b      	ldr	r3, [r3, #4]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d106      	bne.n	8011d9a <tcp_receive+0x572>
 8011d8c:	4b21      	ldr	r3, [pc, #132]	; (8011e14 <tcp_receive+0x5ec>)
 8011d8e:	f240 5294 	movw	r2, #1428	; 0x594
 8011d92:	4921      	ldr	r1, [pc, #132]	; (8011e18 <tcp_receive+0x5f0>)
 8011d94:	4821      	ldr	r0, [pc, #132]	; (8011e1c <tcp_receive+0x5f4>)
 8011d96:	f007 fb59 	bl	801944c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011da0:	4293      	cmp	r3, r2
 8011da2:	d906      	bls.n	8011db2 <tcp_receive+0x58a>
 8011da4:	4b1b      	ldr	r3, [pc, #108]	; (8011e14 <tcp_receive+0x5ec>)
 8011da6:	f240 5295 	movw	r2, #1429	; 0x595
 8011daa:	491d      	ldr	r1, [pc, #116]	; (8011e20 <tcp_receive+0x5f8>)
 8011dac:	481b      	ldr	r0, [pc, #108]	; (8011e1c <tcp_receive+0x5f4>)
 8011dae:	f007 fb4d 	bl	801944c <iprintf>
      off = (u16_t)off32;
 8011db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011db4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011db8:	4b15      	ldr	r3, [pc, #84]	; (8011e10 <tcp_receive+0x5e8>)
 8011dba:	685b      	ldr	r3, [r3, #4]
 8011dbc:	891b      	ldrh	r3, [r3, #8]
 8011dbe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011dc2:	429a      	cmp	r2, r3
 8011dc4:	d906      	bls.n	8011dd4 <tcp_receive+0x5ac>
 8011dc6:	4b13      	ldr	r3, [pc, #76]	; (8011e14 <tcp_receive+0x5ec>)
 8011dc8:	f240 5297 	movw	r2, #1431	; 0x597
 8011dcc:	4915      	ldr	r1, [pc, #84]	; (8011e24 <tcp_receive+0x5fc>)
 8011dce:	4813      	ldr	r0, [pc, #76]	; (8011e1c <tcp_receive+0x5f4>)
 8011dd0:	f007 fb3c 	bl	801944c <iprintf>
      inseg.len -= off;
 8011dd4:	4b0e      	ldr	r3, [pc, #56]	; (8011e10 <tcp_receive+0x5e8>)
 8011dd6:	891a      	ldrh	r2, [r3, #8]
 8011dd8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011ddc:	1ad3      	subs	r3, r2, r3
 8011dde:	b29a      	uxth	r2, r3
 8011de0:	4b0b      	ldr	r3, [pc, #44]	; (8011e10 <tcp_receive+0x5e8>)
 8011de2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011de4:	4b0a      	ldr	r3, [pc, #40]	; (8011e10 <tcp_receive+0x5e8>)
 8011de6:	685b      	ldr	r3, [r3, #4]
 8011de8:	891a      	ldrh	r2, [r3, #8]
 8011dea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011dee:	1ad3      	subs	r3, r2, r3
 8011df0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011df2:	e029      	b.n	8011e48 <tcp_receive+0x620>
 8011df4:	0801c4c0 	.word	0x0801c4c0
 8011df8:	0801c4c8 	.word	0x0801c4c8
 8011dfc:	20000558 	.word	0x20000558
 8011e00:	20000554 	.word	0x20000554
 8011e04:	20006d04 	.word	0x20006d04
 8011e08:	2000055a 	.word	0x2000055a
 8011e0c:	20000550 	.word	0x20000550
 8011e10:	20000530 	.word	0x20000530
 8011e14:	0801c158 	.word	0x0801c158
 8011e18:	0801c4d0 	.word	0x0801c4d0
 8011e1c:	0801c1a4 	.word	0x0801c1a4
 8011e20:	0801c4e0 	.word	0x0801c4e0
 8011e24:	0801c4f0 	.word	0x0801c4f0
        off -= p->len;
 8011e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e2a:	895b      	ldrh	r3, [r3, #10]
 8011e2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011e30:	1ad3      	subs	r3, r2, r3
 8011e32:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e38:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011e3a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e3e:	2200      	movs	r2, #0
 8011e40:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e4a:	895b      	ldrh	r3, [r3, #10]
 8011e4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011e50:	429a      	cmp	r2, r3
 8011e52:	d8e9      	bhi.n	8011e28 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011e54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011e58:	4619      	mov	r1, r3
 8011e5a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011e5c:	f7fc fade 	bl	800e41c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e64:	4a91      	ldr	r2, [pc, #580]	; (80120ac <tcp_receive+0x884>)
 8011e66:	6013      	str	r3, [r2, #0]
 8011e68:	4b91      	ldr	r3, [pc, #580]	; (80120b0 <tcp_receive+0x888>)
 8011e6a:	68db      	ldr	r3, [r3, #12]
 8011e6c:	4a8f      	ldr	r2, [pc, #572]	; (80120ac <tcp_receive+0x884>)
 8011e6e:	6812      	ldr	r2, [r2, #0]
 8011e70:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011e72:	e00d      	b.n	8011e90 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011e74:	4b8d      	ldr	r3, [pc, #564]	; (80120ac <tcp_receive+0x884>)
 8011e76:	681a      	ldr	r2, [r3, #0]
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e7c:	1ad3      	subs	r3, r2, r3
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	da06      	bge.n	8011e90 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	8b5b      	ldrh	r3, [r3, #26]
 8011e86:	f043 0302 	orr.w	r3, r3, #2
 8011e8a:	b29a      	uxth	r2, r3
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011e90:	4b86      	ldr	r3, [pc, #536]	; (80120ac <tcp_receive+0x884>)
 8011e92:	681a      	ldr	r2, [r3, #0]
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e98:	1ad3      	subs	r3, r2, r3
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	f2c0 842a 	blt.w	80126f4 <tcp_receive+0xecc>
 8011ea0:	4b82      	ldr	r3, [pc, #520]	; (80120ac <tcp_receive+0x884>)
 8011ea2:	681a      	ldr	r2, [r3, #0]
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ea8:	6879      	ldr	r1, [r7, #4]
 8011eaa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011eac:	440b      	add	r3, r1
 8011eae:	1ad3      	subs	r3, r2, r3
 8011eb0:	3301      	adds	r3, #1
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	f300 841e 	bgt.w	80126f4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ebc:	4b7b      	ldr	r3, [pc, #492]	; (80120ac <tcp_receive+0x884>)
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	429a      	cmp	r2, r3
 8011ec2:	f040 829a 	bne.w	80123fa <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011ec6:	4b7a      	ldr	r3, [pc, #488]	; (80120b0 <tcp_receive+0x888>)
 8011ec8:	891c      	ldrh	r4, [r3, #8]
 8011eca:	4b79      	ldr	r3, [pc, #484]	; (80120b0 <tcp_receive+0x888>)
 8011ecc:	68db      	ldr	r3, [r3, #12]
 8011ece:	899b      	ldrh	r3, [r3, #12]
 8011ed0:	b29b      	uxth	r3, r3
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f7fb f86c 	bl	800cfb0 <lwip_htons>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	b2db      	uxtb	r3, r3
 8011edc:	f003 0303 	and.w	r3, r3, #3
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d001      	beq.n	8011ee8 <tcp_receive+0x6c0>
 8011ee4:	2301      	movs	r3, #1
 8011ee6:	e000      	b.n	8011eea <tcp_receive+0x6c2>
 8011ee8:	2300      	movs	r3, #0
 8011eea:	4423      	add	r3, r4
 8011eec:	b29a      	uxth	r2, r3
 8011eee:	4b71      	ldr	r3, [pc, #452]	; (80120b4 <tcp_receive+0x88c>)
 8011ef0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011ef6:	4b6f      	ldr	r3, [pc, #444]	; (80120b4 <tcp_receive+0x88c>)
 8011ef8:	881b      	ldrh	r3, [r3, #0]
 8011efa:	429a      	cmp	r2, r3
 8011efc:	d275      	bcs.n	8011fea <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011efe:	4b6c      	ldr	r3, [pc, #432]	; (80120b0 <tcp_receive+0x888>)
 8011f00:	68db      	ldr	r3, [r3, #12]
 8011f02:	899b      	ldrh	r3, [r3, #12]
 8011f04:	b29b      	uxth	r3, r3
 8011f06:	4618      	mov	r0, r3
 8011f08:	f7fb f852 	bl	800cfb0 <lwip_htons>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	b2db      	uxtb	r3, r3
 8011f10:	f003 0301 	and.w	r3, r3, #1
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d01f      	beq.n	8011f58 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011f18:	4b65      	ldr	r3, [pc, #404]	; (80120b0 <tcp_receive+0x888>)
 8011f1a:	68db      	ldr	r3, [r3, #12]
 8011f1c:	899b      	ldrh	r3, [r3, #12]
 8011f1e:	b29b      	uxth	r3, r3
 8011f20:	b21b      	sxth	r3, r3
 8011f22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011f26:	b21c      	sxth	r4, r3
 8011f28:	4b61      	ldr	r3, [pc, #388]	; (80120b0 <tcp_receive+0x888>)
 8011f2a:	68db      	ldr	r3, [r3, #12]
 8011f2c:	899b      	ldrh	r3, [r3, #12]
 8011f2e:	b29b      	uxth	r3, r3
 8011f30:	4618      	mov	r0, r3
 8011f32:	f7fb f83d 	bl	800cfb0 <lwip_htons>
 8011f36:	4603      	mov	r3, r0
 8011f38:	b2db      	uxtb	r3, r3
 8011f3a:	b29b      	uxth	r3, r3
 8011f3c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011f40:	b29b      	uxth	r3, r3
 8011f42:	4618      	mov	r0, r3
 8011f44:	f7fb f834 	bl	800cfb0 <lwip_htons>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	b21b      	sxth	r3, r3
 8011f4c:	4323      	orrs	r3, r4
 8011f4e:	b21a      	sxth	r2, r3
 8011f50:	4b57      	ldr	r3, [pc, #348]	; (80120b0 <tcp_receive+0x888>)
 8011f52:	68db      	ldr	r3, [r3, #12]
 8011f54:	b292      	uxth	r2, r2
 8011f56:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011f5c:	4b54      	ldr	r3, [pc, #336]	; (80120b0 <tcp_receive+0x888>)
 8011f5e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011f60:	4b53      	ldr	r3, [pc, #332]	; (80120b0 <tcp_receive+0x888>)
 8011f62:	68db      	ldr	r3, [r3, #12]
 8011f64:	899b      	ldrh	r3, [r3, #12]
 8011f66:	b29b      	uxth	r3, r3
 8011f68:	4618      	mov	r0, r3
 8011f6a:	f7fb f821 	bl	800cfb0 <lwip_htons>
 8011f6e:	4603      	mov	r3, r0
 8011f70:	b2db      	uxtb	r3, r3
 8011f72:	f003 0302 	and.w	r3, r3, #2
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d005      	beq.n	8011f86 <tcp_receive+0x75e>
            inseg.len -= 1;
 8011f7a:	4b4d      	ldr	r3, [pc, #308]	; (80120b0 <tcp_receive+0x888>)
 8011f7c:	891b      	ldrh	r3, [r3, #8]
 8011f7e:	3b01      	subs	r3, #1
 8011f80:	b29a      	uxth	r2, r3
 8011f82:	4b4b      	ldr	r3, [pc, #300]	; (80120b0 <tcp_receive+0x888>)
 8011f84:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011f86:	4b4a      	ldr	r3, [pc, #296]	; (80120b0 <tcp_receive+0x888>)
 8011f88:	685b      	ldr	r3, [r3, #4]
 8011f8a:	4a49      	ldr	r2, [pc, #292]	; (80120b0 <tcp_receive+0x888>)
 8011f8c:	8912      	ldrh	r2, [r2, #8]
 8011f8e:	4611      	mov	r1, r2
 8011f90:	4618      	mov	r0, r3
 8011f92:	f7fc f943 	bl	800e21c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011f96:	4b46      	ldr	r3, [pc, #280]	; (80120b0 <tcp_receive+0x888>)
 8011f98:	891c      	ldrh	r4, [r3, #8]
 8011f9a:	4b45      	ldr	r3, [pc, #276]	; (80120b0 <tcp_receive+0x888>)
 8011f9c:	68db      	ldr	r3, [r3, #12]
 8011f9e:	899b      	ldrh	r3, [r3, #12]
 8011fa0:	b29b      	uxth	r3, r3
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f7fb f804 	bl	800cfb0 <lwip_htons>
 8011fa8:	4603      	mov	r3, r0
 8011faa:	b2db      	uxtb	r3, r3
 8011fac:	f003 0303 	and.w	r3, r3, #3
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d001      	beq.n	8011fb8 <tcp_receive+0x790>
 8011fb4:	2301      	movs	r3, #1
 8011fb6:	e000      	b.n	8011fba <tcp_receive+0x792>
 8011fb8:	2300      	movs	r3, #0
 8011fba:	4423      	add	r3, r4
 8011fbc:	b29a      	uxth	r2, r3
 8011fbe:	4b3d      	ldr	r3, [pc, #244]	; (80120b4 <tcp_receive+0x88c>)
 8011fc0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011fc2:	4b3c      	ldr	r3, [pc, #240]	; (80120b4 <tcp_receive+0x88c>)
 8011fc4:	881b      	ldrh	r3, [r3, #0]
 8011fc6:	461a      	mov	r2, r3
 8011fc8:	4b38      	ldr	r3, [pc, #224]	; (80120ac <tcp_receive+0x884>)
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	441a      	add	r2, r3
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fd2:	6879      	ldr	r1, [r7, #4]
 8011fd4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011fd6:	440b      	add	r3, r1
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	d006      	beq.n	8011fea <tcp_receive+0x7c2>
 8011fdc:	4b36      	ldr	r3, [pc, #216]	; (80120b8 <tcp_receive+0x890>)
 8011fde:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011fe2:	4936      	ldr	r1, [pc, #216]	; (80120bc <tcp_receive+0x894>)
 8011fe4:	4836      	ldr	r0, [pc, #216]	; (80120c0 <tcp_receive+0x898>)
 8011fe6:	f007 fa31 	bl	801944c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	f000 80e7 	beq.w	80121c2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011ff4:	4b2e      	ldr	r3, [pc, #184]	; (80120b0 <tcp_receive+0x888>)
 8011ff6:	68db      	ldr	r3, [r3, #12]
 8011ff8:	899b      	ldrh	r3, [r3, #12]
 8011ffa:	b29b      	uxth	r3, r3
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	f7fa ffd7 	bl	800cfb0 <lwip_htons>
 8012002:	4603      	mov	r3, r0
 8012004:	b2db      	uxtb	r3, r3
 8012006:	f003 0301 	and.w	r3, r3, #1
 801200a:	2b00      	cmp	r3, #0
 801200c:	d010      	beq.n	8012030 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801200e:	e00a      	b.n	8012026 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012014:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801201a:	681a      	ldr	r2, [r3, #0]
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012020:	68f8      	ldr	r0, [r7, #12]
 8012022:	f7fd fd96 	bl	800fb52 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801202a:	2b00      	cmp	r3, #0
 801202c:	d1f0      	bne.n	8012010 <tcp_receive+0x7e8>
 801202e:	e0c8      	b.n	80121c2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012034:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012036:	e052      	b.n	80120de <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801203a:	68db      	ldr	r3, [r3, #12]
 801203c:	899b      	ldrh	r3, [r3, #12]
 801203e:	b29b      	uxth	r3, r3
 8012040:	4618      	mov	r0, r3
 8012042:	f7fa ffb5 	bl	800cfb0 <lwip_htons>
 8012046:	4603      	mov	r3, r0
 8012048:	b2db      	uxtb	r3, r3
 801204a:	f003 0301 	and.w	r3, r3, #1
 801204e:	2b00      	cmp	r3, #0
 8012050:	d03d      	beq.n	80120ce <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012052:	4b17      	ldr	r3, [pc, #92]	; (80120b0 <tcp_receive+0x888>)
 8012054:	68db      	ldr	r3, [r3, #12]
 8012056:	899b      	ldrh	r3, [r3, #12]
 8012058:	b29b      	uxth	r3, r3
 801205a:	4618      	mov	r0, r3
 801205c:	f7fa ffa8 	bl	800cfb0 <lwip_htons>
 8012060:	4603      	mov	r3, r0
 8012062:	b2db      	uxtb	r3, r3
 8012064:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012068:	2b00      	cmp	r3, #0
 801206a:	d130      	bne.n	80120ce <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801206c:	4b10      	ldr	r3, [pc, #64]	; (80120b0 <tcp_receive+0x888>)
 801206e:	68db      	ldr	r3, [r3, #12]
 8012070:	899b      	ldrh	r3, [r3, #12]
 8012072:	b29c      	uxth	r4, r3
 8012074:	2001      	movs	r0, #1
 8012076:	f7fa ff9b 	bl	800cfb0 <lwip_htons>
 801207a:	4603      	mov	r3, r0
 801207c:	461a      	mov	r2, r3
 801207e:	4b0c      	ldr	r3, [pc, #48]	; (80120b0 <tcp_receive+0x888>)
 8012080:	68db      	ldr	r3, [r3, #12]
 8012082:	4322      	orrs	r2, r4
 8012084:	b292      	uxth	r2, r2
 8012086:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012088:	4b09      	ldr	r3, [pc, #36]	; (80120b0 <tcp_receive+0x888>)
 801208a:	891c      	ldrh	r4, [r3, #8]
 801208c:	4b08      	ldr	r3, [pc, #32]	; (80120b0 <tcp_receive+0x888>)
 801208e:	68db      	ldr	r3, [r3, #12]
 8012090:	899b      	ldrh	r3, [r3, #12]
 8012092:	b29b      	uxth	r3, r3
 8012094:	4618      	mov	r0, r3
 8012096:	f7fa ff8b 	bl	800cfb0 <lwip_htons>
 801209a:	4603      	mov	r3, r0
 801209c:	b2db      	uxtb	r3, r3
 801209e:	f003 0303 	and.w	r3, r3, #3
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d00e      	beq.n	80120c4 <tcp_receive+0x89c>
 80120a6:	2301      	movs	r3, #1
 80120a8:	e00d      	b.n	80120c6 <tcp_receive+0x89e>
 80120aa:	bf00      	nop
 80120ac:	20000550 	.word	0x20000550
 80120b0:	20000530 	.word	0x20000530
 80120b4:	2000055a 	.word	0x2000055a
 80120b8:	0801c158 	.word	0x0801c158
 80120bc:	0801c500 	.word	0x0801c500
 80120c0:	0801c1a4 	.word	0x0801c1a4
 80120c4:	2300      	movs	r3, #0
 80120c6:	4423      	add	r3, r4
 80120c8:	b29a      	uxth	r2, r3
 80120ca:	4b98      	ldr	r3, [pc, #608]	; (801232c <tcp_receive+0xb04>)
 80120cc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80120ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120d0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80120d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80120d8:	6938      	ldr	r0, [r7, #16]
 80120da:	f7fd fd3a 	bl	800fb52 <tcp_seg_free>
            while (next &&
 80120de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d00e      	beq.n	8012102 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80120e4:	4b91      	ldr	r3, [pc, #580]	; (801232c <tcp_receive+0xb04>)
 80120e6:	881b      	ldrh	r3, [r3, #0]
 80120e8:	461a      	mov	r2, r3
 80120ea:	4b91      	ldr	r3, [pc, #580]	; (8012330 <tcp_receive+0xb08>)
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	441a      	add	r2, r3
 80120f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120f2:	68db      	ldr	r3, [r3, #12]
 80120f4:	685b      	ldr	r3, [r3, #4]
 80120f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80120f8:	8909      	ldrh	r1, [r1, #8]
 80120fa:	440b      	add	r3, r1
 80120fc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80120fe:	2b00      	cmp	r3, #0
 8012100:	da9a      	bge.n	8012038 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012104:	2b00      	cmp	r3, #0
 8012106:	d059      	beq.n	80121bc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8012108:	4b88      	ldr	r3, [pc, #544]	; (801232c <tcp_receive+0xb04>)
 801210a:	881b      	ldrh	r3, [r3, #0]
 801210c:	461a      	mov	r2, r3
 801210e:	4b88      	ldr	r3, [pc, #544]	; (8012330 <tcp_receive+0xb08>)
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	441a      	add	r2, r3
 8012114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012116:	68db      	ldr	r3, [r3, #12]
 8012118:	685b      	ldr	r3, [r3, #4]
 801211a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801211c:	2b00      	cmp	r3, #0
 801211e:	dd4d      	ble.n	80121bc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012122:	68db      	ldr	r3, [r3, #12]
 8012124:	685b      	ldr	r3, [r3, #4]
 8012126:	b29a      	uxth	r2, r3
 8012128:	4b81      	ldr	r3, [pc, #516]	; (8012330 <tcp_receive+0xb08>)
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	b29b      	uxth	r3, r3
 801212e:	1ad3      	subs	r3, r2, r3
 8012130:	b29a      	uxth	r2, r3
 8012132:	4b80      	ldr	r3, [pc, #512]	; (8012334 <tcp_receive+0xb0c>)
 8012134:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012136:	4b7f      	ldr	r3, [pc, #508]	; (8012334 <tcp_receive+0xb0c>)
 8012138:	68db      	ldr	r3, [r3, #12]
 801213a:	899b      	ldrh	r3, [r3, #12]
 801213c:	b29b      	uxth	r3, r3
 801213e:	4618      	mov	r0, r3
 8012140:	f7fa ff36 	bl	800cfb0 <lwip_htons>
 8012144:	4603      	mov	r3, r0
 8012146:	b2db      	uxtb	r3, r3
 8012148:	f003 0302 	and.w	r3, r3, #2
 801214c:	2b00      	cmp	r3, #0
 801214e:	d005      	beq.n	801215c <tcp_receive+0x934>
                inseg.len -= 1;
 8012150:	4b78      	ldr	r3, [pc, #480]	; (8012334 <tcp_receive+0xb0c>)
 8012152:	891b      	ldrh	r3, [r3, #8]
 8012154:	3b01      	subs	r3, #1
 8012156:	b29a      	uxth	r2, r3
 8012158:	4b76      	ldr	r3, [pc, #472]	; (8012334 <tcp_receive+0xb0c>)
 801215a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801215c:	4b75      	ldr	r3, [pc, #468]	; (8012334 <tcp_receive+0xb0c>)
 801215e:	685b      	ldr	r3, [r3, #4]
 8012160:	4a74      	ldr	r2, [pc, #464]	; (8012334 <tcp_receive+0xb0c>)
 8012162:	8912      	ldrh	r2, [r2, #8]
 8012164:	4611      	mov	r1, r2
 8012166:	4618      	mov	r0, r3
 8012168:	f7fc f858 	bl	800e21c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801216c:	4b71      	ldr	r3, [pc, #452]	; (8012334 <tcp_receive+0xb0c>)
 801216e:	891c      	ldrh	r4, [r3, #8]
 8012170:	4b70      	ldr	r3, [pc, #448]	; (8012334 <tcp_receive+0xb0c>)
 8012172:	68db      	ldr	r3, [r3, #12]
 8012174:	899b      	ldrh	r3, [r3, #12]
 8012176:	b29b      	uxth	r3, r3
 8012178:	4618      	mov	r0, r3
 801217a:	f7fa ff19 	bl	800cfb0 <lwip_htons>
 801217e:	4603      	mov	r3, r0
 8012180:	b2db      	uxtb	r3, r3
 8012182:	f003 0303 	and.w	r3, r3, #3
 8012186:	2b00      	cmp	r3, #0
 8012188:	d001      	beq.n	801218e <tcp_receive+0x966>
 801218a:	2301      	movs	r3, #1
 801218c:	e000      	b.n	8012190 <tcp_receive+0x968>
 801218e:	2300      	movs	r3, #0
 8012190:	4423      	add	r3, r4
 8012192:	b29a      	uxth	r2, r3
 8012194:	4b65      	ldr	r3, [pc, #404]	; (801232c <tcp_receive+0xb04>)
 8012196:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012198:	4b64      	ldr	r3, [pc, #400]	; (801232c <tcp_receive+0xb04>)
 801219a:	881b      	ldrh	r3, [r3, #0]
 801219c:	461a      	mov	r2, r3
 801219e:	4b64      	ldr	r3, [pc, #400]	; (8012330 <tcp_receive+0xb08>)
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	441a      	add	r2, r3
 80121a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121a6:	68db      	ldr	r3, [r3, #12]
 80121a8:	685b      	ldr	r3, [r3, #4]
 80121aa:	429a      	cmp	r2, r3
 80121ac:	d006      	beq.n	80121bc <tcp_receive+0x994>
 80121ae:	4b62      	ldr	r3, [pc, #392]	; (8012338 <tcp_receive+0xb10>)
 80121b0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80121b4:	4961      	ldr	r1, [pc, #388]	; (801233c <tcp_receive+0xb14>)
 80121b6:	4862      	ldr	r0, [pc, #392]	; (8012340 <tcp_receive+0xb18>)
 80121b8:	f007 f948 	bl	801944c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80121c0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80121c2:	4b5a      	ldr	r3, [pc, #360]	; (801232c <tcp_receive+0xb04>)
 80121c4:	881b      	ldrh	r3, [r3, #0]
 80121c6:	461a      	mov	r2, r3
 80121c8:	4b59      	ldr	r3, [pc, #356]	; (8012330 <tcp_receive+0xb08>)
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	441a      	add	r2, r3
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80121d6:	4b55      	ldr	r3, [pc, #340]	; (801232c <tcp_receive+0xb04>)
 80121d8:	881b      	ldrh	r3, [r3, #0]
 80121da:	429a      	cmp	r2, r3
 80121dc:	d206      	bcs.n	80121ec <tcp_receive+0x9c4>
 80121de:	4b56      	ldr	r3, [pc, #344]	; (8012338 <tcp_receive+0xb10>)
 80121e0:	f240 6207 	movw	r2, #1543	; 0x607
 80121e4:	4957      	ldr	r1, [pc, #348]	; (8012344 <tcp_receive+0xb1c>)
 80121e6:	4856      	ldr	r0, [pc, #344]	; (8012340 <tcp_receive+0xb18>)
 80121e8:	f007 f930 	bl	801944c <iprintf>
        pcb->rcv_wnd -= tcplen;
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80121f0:	4b4e      	ldr	r3, [pc, #312]	; (801232c <tcp_receive+0xb04>)
 80121f2:	881b      	ldrh	r3, [r3, #0]
 80121f4:	1ad3      	subs	r3, r2, r3
 80121f6:	b29a      	uxth	r2, r3
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80121fc:	6878      	ldr	r0, [r7, #4]
 80121fe:	f7fc ffc9 	bl	800f194 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012202:	4b4c      	ldr	r3, [pc, #304]	; (8012334 <tcp_receive+0xb0c>)
 8012204:	685b      	ldr	r3, [r3, #4]
 8012206:	891b      	ldrh	r3, [r3, #8]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d006      	beq.n	801221a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801220c:	4b49      	ldr	r3, [pc, #292]	; (8012334 <tcp_receive+0xb0c>)
 801220e:	685b      	ldr	r3, [r3, #4]
 8012210:	4a4d      	ldr	r2, [pc, #308]	; (8012348 <tcp_receive+0xb20>)
 8012212:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012214:	4b47      	ldr	r3, [pc, #284]	; (8012334 <tcp_receive+0xb0c>)
 8012216:	2200      	movs	r2, #0
 8012218:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801221a:	4b46      	ldr	r3, [pc, #280]	; (8012334 <tcp_receive+0xb0c>)
 801221c:	68db      	ldr	r3, [r3, #12]
 801221e:	899b      	ldrh	r3, [r3, #12]
 8012220:	b29b      	uxth	r3, r3
 8012222:	4618      	mov	r0, r3
 8012224:	f7fa fec4 	bl	800cfb0 <lwip_htons>
 8012228:	4603      	mov	r3, r0
 801222a:	b2db      	uxtb	r3, r3
 801222c:	f003 0301 	and.w	r3, r3, #1
 8012230:	2b00      	cmp	r3, #0
 8012232:	f000 80b8 	beq.w	80123a6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012236:	4b45      	ldr	r3, [pc, #276]	; (801234c <tcp_receive+0xb24>)
 8012238:	781b      	ldrb	r3, [r3, #0]
 801223a:	f043 0320 	orr.w	r3, r3, #32
 801223e:	b2da      	uxtb	r2, r3
 8012240:	4b42      	ldr	r3, [pc, #264]	; (801234c <tcp_receive+0xb24>)
 8012242:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012244:	e0af      	b.n	80123a6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801224a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012250:	68db      	ldr	r3, [r3, #12]
 8012252:	685b      	ldr	r3, [r3, #4]
 8012254:	4a36      	ldr	r2, [pc, #216]	; (8012330 <tcp_receive+0xb08>)
 8012256:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012258:	68bb      	ldr	r3, [r7, #8]
 801225a:	891b      	ldrh	r3, [r3, #8]
 801225c:	461c      	mov	r4, r3
 801225e:	68bb      	ldr	r3, [r7, #8]
 8012260:	68db      	ldr	r3, [r3, #12]
 8012262:	899b      	ldrh	r3, [r3, #12]
 8012264:	b29b      	uxth	r3, r3
 8012266:	4618      	mov	r0, r3
 8012268:	f7fa fea2 	bl	800cfb0 <lwip_htons>
 801226c:	4603      	mov	r3, r0
 801226e:	b2db      	uxtb	r3, r3
 8012270:	f003 0303 	and.w	r3, r3, #3
 8012274:	2b00      	cmp	r3, #0
 8012276:	d001      	beq.n	801227c <tcp_receive+0xa54>
 8012278:	2301      	movs	r3, #1
 801227a:	e000      	b.n	801227e <tcp_receive+0xa56>
 801227c:	2300      	movs	r3, #0
 801227e:	191a      	adds	r2, r3, r4
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012284:	441a      	add	r2, r3
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801228e:	461c      	mov	r4, r3
 8012290:	68bb      	ldr	r3, [r7, #8]
 8012292:	891b      	ldrh	r3, [r3, #8]
 8012294:	461d      	mov	r5, r3
 8012296:	68bb      	ldr	r3, [r7, #8]
 8012298:	68db      	ldr	r3, [r3, #12]
 801229a:	899b      	ldrh	r3, [r3, #12]
 801229c:	b29b      	uxth	r3, r3
 801229e:	4618      	mov	r0, r3
 80122a0:	f7fa fe86 	bl	800cfb0 <lwip_htons>
 80122a4:	4603      	mov	r3, r0
 80122a6:	b2db      	uxtb	r3, r3
 80122a8:	f003 0303 	and.w	r3, r3, #3
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d001      	beq.n	80122b4 <tcp_receive+0xa8c>
 80122b0:	2301      	movs	r3, #1
 80122b2:	e000      	b.n	80122b6 <tcp_receive+0xa8e>
 80122b4:	2300      	movs	r3, #0
 80122b6:	442b      	add	r3, r5
 80122b8:	429c      	cmp	r4, r3
 80122ba:	d206      	bcs.n	80122ca <tcp_receive+0xaa2>
 80122bc:	4b1e      	ldr	r3, [pc, #120]	; (8012338 <tcp_receive+0xb10>)
 80122be:	f240 622b 	movw	r2, #1579	; 0x62b
 80122c2:	4923      	ldr	r1, [pc, #140]	; (8012350 <tcp_receive+0xb28>)
 80122c4:	481e      	ldr	r0, [pc, #120]	; (8012340 <tcp_receive+0xb18>)
 80122c6:	f007 f8c1 	bl	801944c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80122ca:	68bb      	ldr	r3, [r7, #8]
 80122cc:	891b      	ldrh	r3, [r3, #8]
 80122ce:	461c      	mov	r4, r3
 80122d0:	68bb      	ldr	r3, [r7, #8]
 80122d2:	68db      	ldr	r3, [r3, #12]
 80122d4:	899b      	ldrh	r3, [r3, #12]
 80122d6:	b29b      	uxth	r3, r3
 80122d8:	4618      	mov	r0, r3
 80122da:	f7fa fe69 	bl	800cfb0 <lwip_htons>
 80122de:	4603      	mov	r3, r0
 80122e0:	b2db      	uxtb	r3, r3
 80122e2:	f003 0303 	and.w	r3, r3, #3
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d001      	beq.n	80122ee <tcp_receive+0xac6>
 80122ea:	2301      	movs	r3, #1
 80122ec:	e000      	b.n	80122f0 <tcp_receive+0xac8>
 80122ee:	2300      	movs	r3, #0
 80122f0:	1919      	adds	r1, r3, r4
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80122f6:	b28b      	uxth	r3, r1
 80122f8:	1ad3      	subs	r3, r2, r3
 80122fa:	b29a      	uxth	r2, r3
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012300:	6878      	ldr	r0, [r7, #4]
 8012302:	f7fc ff47 	bl	800f194 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012306:	68bb      	ldr	r3, [r7, #8]
 8012308:	685b      	ldr	r3, [r3, #4]
 801230a:	891b      	ldrh	r3, [r3, #8]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d028      	beq.n	8012362 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012310:	4b0d      	ldr	r3, [pc, #52]	; (8012348 <tcp_receive+0xb20>)
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d01d      	beq.n	8012354 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012318:	4b0b      	ldr	r3, [pc, #44]	; (8012348 <tcp_receive+0xb20>)
 801231a:	681a      	ldr	r2, [r3, #0]
 801231c:	68bb      	ldr	r3, [r7, #8]
 801231e:	685b      	ldr	r3, [r3, #4]
 8012320:	4619      	mov	r1, r3
 8012322:	4610      	mov	r0, r2
 8012324:	f7fc f9c2 	bl	800e6ac <pbuf_cat>
 8012328:	e018      	b.n	801235c <tcp_receive+0xb34>
 801232a:	bf00      	nop
 801232c:	2000055a 	.word	0x2000055a
 8012330:	20000550 	.word	0x20000550
 8012334:	20000530 	.word	0x20000530
 8012338:	0801c158 	.word	0x0801c158
 801233c:	0801c538 	.word	0x0801c538
 8012340:	0801c1a4 	.word	0x0801c1a4
 8012344:	0801c574 	.word	0x0801c574
 8012348:	20000560 	.word	0x20000560
 801234c:	2000055d 	.word	0x2000055d
 8012350:	0801c594 	.word	0x0801c594
            } else {
              recv_data = cseg->p;
 8012354:	68bb      	ldr	r3, [r7, #8]
 8012356:	685b      	ldr	r3, [r3, #4]
 8012358:	4a70      	ldr	r2, [pc, #448]	; (801251c <tcp_receive+0xcf4>)
 801235a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	2200      	movs	r2, #0
 8012360:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012362:	68bb      	ldr	r3, [r7, #8]
 8012364:	68db      	ldr	r3, [r3, #12]
 8012366:	899b      	ldrh	r3, [r3, #12]
 8012368:	b29b      	uxth	r3, r3
 801236a:	4618      	mov	r0, r3
 801236c:	f7fa fe20 	bl	800cfb0 <lwip_htons>
 8012370:	4603      	mov	r3, r0
 8012372:	b2db      	uxtb	r3, r3
 8012374:	f003 0301 	and.w	r3, r3, #1
 8012378:	2b00      	cmp	r3, #0
 801237a:	d00d      	beq.n	8012398 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801237c:	4b68      	ldr	r3, [pc, #416]	; (8012520 <tcp_receive+0xcf8>)
 801237e:	781b      	ldrb	r3, [r3, #0]
 8012380:	f043 0320 	orr.w	r3, r3, #32
 8012384:	b2da      	uxtb	r2, r3
 8012386:	4b66      	ldr	r3, [pc, #408]	; (8012520 <tcp_receive+0xcf8>)
 8012388:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	7d1b      	ldrb	r3, [r3, #20]
 801238e:	2b04      	cmp	r3, #4
 8012390:	d102      	bne.n	8012398 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	2207      	movs	r2, #7
 8012396:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012398:	68bb      	ldr	r3, [r7, #8]
 801239a:	681a      	ldr	r2, [r3, #0]
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80123a0:	68b8      	ldr	r0, [r7, #8]
 80123a2:	f7fd fbd6 	bl	800fb52 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d008      	beq.n	80123c0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123b2:	68db      	ldr	r3, [r3, #12]
 80123b4:	685a      	ldr	r2, [r3, #4]
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80123ba:	429a      	cmp	r2, r3
 80123bc:	f43f af43 	beq.w	8012246 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	8b5b      	ldrh	r3, [r3, #26]
 80123c4:	f003 0301 	and.w	r3, r3, #1
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d00e      	beq.n	80123ea <tcp_receive+0xbc2>
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	8b5b      	ldrh	r3, [r3, #26]
 80123d0:	f023 0301 	bic.w	r3, r3, #1
 80123d4:	b29a      	uxth	r2, r3
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	835a      	strh	r2, [r3, #26]
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	8b5b      	ldrh	r3, [r3, #26]
 80123de:	f043 0302 	orr.w	r3, r3, #2
 80123e2:	b29a      	uxth	r2, r3
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80123e8:	e188      	b.n	80126fc <tcp_receive+0xed4>
        tcp_ack(pcb);
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	8b5b      	ldrh	r3, [r3, #26]
 80123ee:	f043 0301 	orr.w	r3, r3, #1
 80123f2:	b29a      	uxth	r2, r3
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80123f8:	e180      	b.n	80126fc <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d106      	bne.n	8012410 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012402:	4848      	ldr	r0, [pc, #288]	; (8012524 <tcp_receive+0xcfc>)
 8012404:	f7fd fbbe 	bl	800fb84 <tcp_seg_copy>
 8012408:	4602      	mov	r2, r0
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	675a      	str	r2, [r3, #116]	; 0x74
 801240e:	e16d      	b.n	80126ec <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012410:	2300      	movs	r3, #0
 8012412:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012418:	63bb      	str	r3, [r7, #56]	; 0x38
 801241a:	e157      	b.n	80126cc <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801241c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801241e:	68db      	ldr	r3, [r3, #12]
 8012420:	685a      	ldr	r2, [r3, #4]
 8012422:	4b41      	ldr	r3, [pc, #260]	; (8012528 <tcp_receive+0xd00>)
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	429a      	cmp	r2, r3
 8012428:	d11d      	bne.n	8012466 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801242a:	4b3e      	ldr	r3, [pc, #248]	; (8012524 <tcp_receive+0xcfc>)
 801242c:	891a      	ldrh	r2, [r3, #8]
 801242e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012430:	891b      	ldrh	r3, [r3, #8]
 8012432:	429a      	cmp	r2, r3
 8012434:	f240 814f 	bls.w	80126d6 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012438:	483a      	ldr	r0, [pc, #232]	; (8012524 <tcp_receive+0xcfc>)
 801243a:	f7fd fba3 	bl	800fb84 <tcp_seg_copy>
 801243e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012440:	697b      	ldr	r3, [r7, #20]
 8012442:	2b00      	cmp	r3, #0
 8012444:	f000 8149 	beq.w	80126da <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8012448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801244a:	2b00      	cmp	r3, #0
 801244c:	d003      	beq.n	8012456 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801244e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012450:	697a      	ldr	r2, [r7, #20]
 8012452:	601a      	str	r2, [r3, #0]
 8012454:	e002      	b.n	801245c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	697a      	ldr	r2, [r7, #20]
 801245a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801245c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801245e:	6978      	ldr	r0, [r7, #20]
 8012460:	f7ff f8de 	bl	8011620 <tcp_oos_insert_segment>
                }
                break;
 8012464:	e139      	b.n	80126da <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012468:	2b00      	cmp	r3, #0
 801246a:	d117      	bne.n	801249c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801246c:	4b2e      	ldr	r3, [pc, #184]	; (8012528 <tcp_receive+0xd00>)
 801246e:	681a      	ldr	r2, [r3, #0]
 8012470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012472:	68db      	ldr	r3, [r3, #12]
 8012474:	685b      	ldr	r3, [r3, #4]
 8012476:	1ad3      	subs	r3, r2, r3
 8012478:	2b00      	cmp	r3, #0
 801247a:	da57      	bge.n	801252c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801247c:	4829      	ldr	r0, [pc, #164]	; (8012524 <tcp_receive+0xcfc>)
 801247e:	f7fd fb81 	bl	800fb84 <tcp_seg_copy>
 8012482:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012484:	69bb      	ldr	r3, [r7, #24]
 8012486:	2b00      	cmp	r3, #0
 8012488:	f000 8129 	beq.w	80126de <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	69ba      	ldr	r2, [r7, #24]
 8012490:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012492:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012494:	69b8      	ldr	r0, [r7, #24]
 8012496:	f7ff f8c3 	bl	8011620 <tcp_oos_insert_segment>
                  }
                  break;
 801249a:	e120      	b.n	80126de <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801249c:	4b22      	ldr	r3, [pc, #136]	; (8012528 <tcp_receive+0xd00>)
 801249e:	681a      	ldr	r2, [r3, #0]
 80124a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124a2:	68db      	ldr	r3, [r3, #12]
 80124a4:	685b      	ldr	r3, [r3, #4]
 80124a6:	1ad3      	subs	r3, r2, r3
 80124a8:	3b01      	subs	r3, #1
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	db3e      	blt.n	801252c <tcp_receive+0xd04>
 80124ae:	4b1e      	ldr	r3, [pc, #120]	; (8012528 <tcp_receive+0xd00>)
 80124b0:	681a      	ldr	r2, [r3, #0]
 80124b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124b4:	68db      	ldr	r3, [r3, #12]
 80124b6:	685b      	ldr	r3, [r3, #4]
 80124b8:	1ad3      	subs	r3, r2, r3
 80124ba:	3301      	adds	r3, #1
 80124bc:	2b00      	cmp	r3, #0
 80124be:	dc35      	bgt.n	801252c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80124c0:	4818      	ldr	r0, [pc, #96]	; (8012524 <tcp_receive+0xcfc>)
 80124c2:	f7fd fb5f 	bl	800fb84 <tcp_seg_copy>
 80124c6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80124c8:	69fb      	ldr	r3, [r7, #28]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	f000 8109 	beq.w	80126e2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80124d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124d2:	68db      	ldr	r3, [r3, #12]
 80124d4:	685b      	ldr	r3, [r3, #4]
 80124d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80124d8:	8912      	ldrh	r2, [r2, #8]
 80124da:	441a      	add	r2, r3
 80124dc:	4b12      	ldr	r3, [pc, #72]	; (8012528 <tcp_receive+0xd00>)
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	1ad3      	subs	r3, r2, r3
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	dd12      	ble.n	801250c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80124e6:	4b10      	ldr	r3, [pc, #64]	; (8012528 <tcp_receive+0xd00>)
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	b29a      	uxth	r2, r3
 80124ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124ee:	68db      	ldr	r3, [r3, #12]
 80124f0:	685b      	ldr	r3, [r3, #4]
 80124f2:	b29b      	uxth	r3, r3
 80124f4:	1ad3      	subs	r3, r2, r3
 80124f6:	b29a      	uxth	r2, r3
 80124f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124fa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80124fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124fe:	685a      	ldr	r2, [r3, #4]
 8012500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012502:	891b      	ldrh	r3, [r3, #8]
 8012504:	4619      	mov	r1, r3
 8012506:	4610      	mov	r0, r2
 8012508:	f7fb fe88 	bl	800e21c <pbuf_realloc>
                    }
                    prev->next = cseg;
 801250c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801250e:	69fa      	ldr	r2, [r7, #28]
 8012510:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012512:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012514:	69f8      	ldr	r0, [r7, #28]
 8012516:	f7ff f883 	bl	8011620 <tcp_oos_insert_segment>
                  }
                  break;
 801251a:	e0e2      	b.n	80126e2 <tcp_receive+0xeba>
 801251c:	20000560 	.word	0x20000560
 8012520:	2000055d 	.word	0x2000055d
 8012524:	20000530 	.word	0x20000530
 8012528:	20000550 	.word	0x20000550
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801252c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801252e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	2b00      	cmp	r3, #0
 8012536:	f040 80c6 	bne.w	80126c6 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801253a:	4b80      	ldr	r3, [pc, #512]	; (801273c <tcp_receive+0xf14>)
 801253c:	681a      	ldr	r2, [r3, #0]
 801253e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012540:	68db      	ldr	r3, [r3, #12]
 8012542:	685b      	ldr	r3, [r3, #4]
 8012544:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012546:	2b00      	cmp	r3, #0
 8012548:	f340 80bd 	ble.w	80126c6 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801254c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801254e:	68db      	ldr	r3, [r3, #12]
 8012550:	899b      	ldrh	r3, [r3, #12]
 8012552:	b29b      	uxth	r3, r3
 8012554:	4618      	mov	r0, r3
 8012556:	f7fa fd2b 	bl	800cfb0 <lwip_htons>
 801255a:	4603      	mov	r3, r0
 801255c:	b2db      	uxtb	r3, r3
 801255e:	f003 0301 	and.w	r3, r3, #1
 8012562:	2b00      	cmp	r3, #0
 8012564:	f040 80bf 	bne.w	80126e6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012568:	4875      	ldr	r0, [pc, #468]	; (8012740 <tcp_receive+0xf18>)
 801256a:	f7fd fb0b 	bl	800fb84 <tcp_seg_copy>
 801256e:	4602      	mov	r2, r0
 8012570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012572:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	2b00      	cmp	r3, #0
 801257a:	f000 80b6 	beq.w	80126ea <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801257e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012580:	68db      	ldr	r3, [r3, #12]
 8012582:	685b      	ldr	r3, [r3, #4]
 8012584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012586:	8912      	ldrh	r2, [r2, #8]
 8012588:	441a      	add	r2, r3
 801258a:	4b6c      	ldr	r3, [pc, #432]	; (801273c <tcp_receive+0xf14>)
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	1ad3      	subs	r3, r2, r3
 8012590:	2b00      	cmp	r3, #0
 8012592:	dd12      	ble.n	80125ba <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012594:	4b69      	ldr	r3, [pc, #420]	; (801273c <tcp_receive+0xf14>)
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	b29a      	uxth	r2, r3
 801259a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801259c:	68db      	ldr	r3, [r3, #12]
 801259e:	685b      	ldr	r3, [r3, #4]
 80125a0:	b29b      	uxth	r3, r3
 80125a2:	1ad3      	subs	r3, r2, r3
 80125a4:	b29a      	uxth	r2, r3
 80125a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125a8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80125aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ac:	685a      	ldr	r2, [r3, #4]
 80125ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125b0:	891b      	ldrh	r3, [r3, #8]
 80125b2:	4619      	mov	r1, r3
 80125b4:	4610      	mov	r0, r2
 80125b6:	f7fb fe31 	bl	800e21c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80125ba:	4b62      	ldr	r3, [pc, #392]	; (8012744 <tcp_receive+0xf1c>)
 80125bc:	881b      	ldrh	r3, [r3, #0]
 80125be:	461a      	mov	r2, r3
 80125c0:	4b5e      	ldr	r3, [pc, #376]	; (801273c <tcp_receive+0xf14>)
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	441a      	add	r2, r3
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125ca:	6879      	ldr	r1, [r7, #4]
 80125cc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80125ce:	440b      	add	r3, r1
 80125d0:	1ad3      	subs	r3, r2, r3
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	f340 8089 	ble.w	80126ea <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80125d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	68db      	ldr	r3, [r3, #12]
 80125de:	899b      	ldrh	r3, [r3, #12]
 80125e0:	b29b      	uxth	r3, r3
 80125e2:	4618      	mov	r0, r3
 80125e4:	f7fa fce4 	bl	800cfb0 <lwip_htons>
 80125e8:	4603      	mov	r3, r0
 80125ea:	b2db      	uxtb	r3, r3
 80125ec:	f003 0301 	and.w	r3, r3, #1
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d022      	beq.n	801263a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80125f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	68db      	ldr	r3, [r3, #12]
 80125fa:	899b      	ldrh	r3, [r3, #12]
 80125fc:	b29b      	uxth	r3, r3
 80125fe:	b21b      	sxth	r3, r3
 8012600:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012604:	b21c      	sxth	r4, r3
 8012606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	68db      	ldr	r3, [r3, #12]
 801260c:	899b      	ldrh	r3, [r3, #12]
 801260e:	b29b      	uxth	r3, r3
 8012610:	4618      	mov	r0, r3
 8012612:	f7fa fccd 	bl	800cfb0 <lwip_htons>
 8012616:	4603      	mov	r3, r0
 8012618:	b2db      	uxtb	r3, r3
 801261a:	b29b      	uxth	r3, r3
 801261c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012620:	b29b      	uxth	r3, r3
 8012622:	4618      	mov	r0, r3
 8012624:	f7fa fcc4 	bl	800cfb0 <lwip_htons>
 8012628:	4603      	mov	r3, r0
 801262a:	b21b      	sxth	r3, r3
 801262c:	4323      	orrs	r3, r4
 801262e:	b21a      	sxth	r2, r3
 8012630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	68db      	ldr	r3, [r3, #12]
 8012636:	b292      	uxth	r2, r2
 8012638:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801263e:	b29a      	uxth	r2, r3
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012644:	4413      	add	r3, r2
 8012646:	b299      	uxth	r1, r3
 8012648:	4b3c      	ldr	r3, [pc, #240]	; (801273c <tcp_receive+0xf14>)
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	b29a      	uxth	r2, r3
 801264e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	1a8a      	subs	r2, r1, r2
 8012654:	b292      	uxth	r2, r2
 8012656:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	685a      	ldr	r2, [r3, #4]
 801265e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	891b      	ldrh	r3, [r3, #8]
 8012664:	4619      	mov	r1, r3
 8012666:	4610      	mov	r0, r2
 8012668:	f7fb fdd8 	bl	800e21c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801266c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	891c      	ldrh	r4, [r3, #8]
 8012672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	68db      	ldr	r3, [r3, #12]
 8012678:	899b      	ldrh	r3, [r3, #12]
 801267a:	b29b      	uxth	r3, r3
 801267c:	4618      	mov	r0, r3
 801267e:	f7fa fc97 	bl	800cfb0 <lwip_htons>
 8012682:	4603      	mov	r3, r0
 8012684:	b2db      	uxtb	r3, r3
 8012686:	f003 0303 	and.w	r3, r3, #3
 801268a:	2b00      	cmp	r3, #0
 801268c:	d001      	beq.n	8012692 <tcp_receive+0xe6a>
 801268e:	2301      	movs	r3, #1
 8012690:	e000      	b.n	8012694 <tcp_receive+0xe6c>
 8012692:	2300      	movs	r3, #0
 8012694:	4423      	add	r3, r4
 8012696:	b29a      	uxth	r2, r3
 8012698:	4b2a      	ldr	r3, [pc, #168]	; (8012744 <tcp_receive+0xf1c>)
 801269a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801269c:	4b29      	ldr	r3, [pc, #164]	; (8012744 <tcp_receive+0xf1c>)
 801269e:	881b      	ldrh	r3, [r3, #0]
 80126a0:	461a      	mov	r2, r3
 80126a2:	4b26      	ldr	r3, [pc, #152]	; (801273c <tcp_receive+0xf14>)
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	441a      	add	r2, r3
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126ac:	6879      	ldr	r1, [r7, #4]
 80126ae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80126b0:	440b      	add	r3, r1
 80126b2:	429a      	cmp	r2, r3
 80126b4:	d019      	beq.n	80126ea <tcp_receive+0xec2>
 80126b6:	4b24      	ldr	r3, [pc, #144]	; (8012748 <tcp_receive+0xf20>)
 80126b8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80126bc:	4923      	ldr	r1, [pc, #140]	; (801274c <tcp_receive+0xf24>)
 80126be:	4824      	ldr	r0, [pc, #144]	; (8012750 <tcp_receive+0xf28>)
 80126c0:	f006 fec4 	bl	801944c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80126c4:	e011      	b.n	80126ea <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80126c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80126cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	f47f aea4 	bne.w	801241c <tcp_receive+0xbf4>
 80126d4:	e00a      	b.n	80126ec <tcp_receive+0xec4>
                break;
 80126d6:	bf00      	nop
 80126d8:	e008      	b.n	80126ec <tcp_receive+0xec4>
                break;
 80126da:	bf00      	nop
 80126dc:	e006      	b.n	80126ec <tcp_receive+0xec4>
                  break;
 80126de:	bf00      	nop
 80126e0:	e004      	b.n	80126ec <tcp_receive+0xec4>
                  break;
 80126e2:	bf00      	nop
 80126e4:	e002      	b.n	80126ec <tcp_receive+0xec4>
                  break;
 80126e6:	bf00      	nop
 80126e8:	e000      	b.n	80126ec <tcp_receive+0xec4>
                break;
 80126ea:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80126ec:	6878      	ldr	r0, [r7, #4]
 80126ee:	f001 fa33 	bl	8013b58 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80126f2:	e003      	b.n	80126fc <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80126f4:	6878      	ldr	r0, [r7, #4]
 80126f6:	f001 fa2f 	bl	8013b58 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80126fa:	e01a      	b.n	8012732 <tcp_receive+0xf0a>
 80126fc:	e019      	b.n	8012732 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80126fe:	4b0f      	ldr	r3, [pc, #60]	; (801273c <tcp_receive+0xf14>)
 8012700:	681a      	ldr	r2, [r3, #0]
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012706:	1ad3      	subs	r3, r2, r3
 8012708:	2b00      	cmp	r3, #0
 801270a:	db0a      	blt.n	8012722 <tcp_receive+0xefa>
 801270c:	4b0b      	ldr	r3, [pc, #44]	; (801273c <tcp_receive+0xf14>)
 801270e:	681a      	ldr	r2, [r3, #0]
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012714:	6879      	ldr	r1, [r7, #4]
 8012716:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012718:	440b      	add	r3, r1
 801271a:	1ad3      	subs	r3, r2, r3
 801271c:	3301      	adds	r3, #1
 801271e:	2b00      	cmp	r3, #0
 8012720:	dd07      	ble.n	8012732 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	8b5b      	ldrh	r3, [r3, #26]
 8012726:	f043 0302 	orr.w	r3, r3, #2
 801272a:	b29a      	uxth	r2, r3
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012730:	e7ff      	b.n	8012732 <tcp_receive+0xf0a>
 8012732:	bf00      	nop
 8012734:	3750      	adds	r7, #80	; 0x50
 8012736:	46bd      	mov	sp, r7
 8012738:	bdb0      	pop	{r4, r5, r7, pc}
 801273a:	bf00      	nop
 801273c:	20000550 	.word	0x20000550
 8012740:	20000530 	.word	0x20000530
 8012744:	2000055a 	.word	0x2000055a
 8012748:	0801c158 	.word	0x0801c158
 801274c:	0801c500 	.word	0x0801c500
 8012750:	0801c1a4 	.word	0x0801c1a4

08012754 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012754:	b480      	push	{r7}
 8012756:	b083      	sub	sp, #12
 8012758:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801275a:	4b15      	ldr	r3, [pc, #84]	; (80127b0 <tcp_get_next_optbyte+0x5c>)
 801275c:	881b      	ldrh	r3, [r3, #0]
 801275e:	1c5a      	adds	r2, r3, #1
 8012760:	b291      	uxth	r1, r2
 8012762:	4a13      	ldr	r2, [pc, #76]	; (80127b0 <tcp_get_next_optbyte+0x5c>)
 8012764:	8011      	strh	r1, [r2, #0]
 8012766:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012768:	4b12      	ldr	r3, [pc, #72]	; (80127b4 <tcp_get_next_optbyte+0x60>)
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d004      	beq.n	801277a <tcp_get_next_optbyte+0x26>
 8012770:	4b11      	ldr	r3, [pc, #68]	; (80127b8 <tcp_get_next_optbyte+0x64>)
 8012772:	881b      	ldrh	r3, [r3, #0]
 8012774:	88fa      	ldrh	r2, [r7, #6]
 8012776:	429a      	cmp	r2, r3
 8012778:	d208      	bcs.n	801278c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801277a:	4b10      	ldr	r3, [pc, #64]	; (80127bc <tcp_get_next_optbyte+0x68>)
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	3314      	adds	r3, #20
 8012780:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012782:	88fb      	ldrh	r3, [r7, #6]
 8012784:	683a      	ldr	r2, [r7, #0]
 8012786:	4413      	add	r3, r2
 8012788:	781b      	ldrb	r3, [r3, #0]
 801278a:	e00b      	b.n	80127a4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801278c:	88fb      	ldrh	r3, [r7, #6]
 801278e:	b2da      	uxtb	r2, r3
 8012790:	4b09      	ldr	r3, [pc, #36]	; (80127b8 <tcp_get_next_optbyte+0x64>)
 8012792:	881b      	ldrh	r3, [r3, #0]
 8012794:	b2db      	uxtb	r3, r3
 8012796:	1ad3      	subs	r3, r2, r3
 8012798:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801279a:	4b06      	ldr	r3, [pc, #24]	; (80127b4 <tcp_get_next_optbyte+0x60>)
 801279c:	681a      	ldr	r2, [r3, #0]
 801279e:	797b      	ldrb	r3, [r7, #5]
 80127a0:	4413      	add	r3, r2
 80127a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80127a4:	4618      	mov	r0, r3
 80127a6:	370c      	adds	r7, #12
 80127a8:	46bd      	mov	sp, r7
 80127aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ae:	4770      	bx	lr
 80127b0:	2000054c 	.word	0x2000054c
 80127b4:	20000548 	.word	0x20000548
 80127b8:	20000546 	.word	0x20000546
 80127bc:	20000540 	.word	0x20000540

080127c0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b084      	sub	sp, #16
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d106      	bne.n	80127dc <tcp_parseopt+0x1c>
 80127ce:	4b32      	ldr	r3, [pc, #200]	; (8012898 <tcp_parseopt+0xd8>)
 80127d0:	f240 727d 	movw	r2, #1917	; 0x77d
 80127d4:	4931      	ldr	r1, [pc, #196]	; (801289c <tcp_parseopt+0xdc>)
 80127d6:	4832      	ldr	r0, [pc, #200]	; (80128a0 <tcp_parseopt+0xe0>)
 80127d8:	f006 fe38 	bl	801944c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80127dc:	4b31      	ldr	r3, [pc, #196]	; (80128a4 <tcp_parseopt+0xe4>)
 80127de:	881b      	ldrh	r3, [r3, #0]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d055      	beq.n	8012890 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80127e4:	4b30      	ldr	r3, [pc, #192]	; (80128a8 <tcp_parseopt+0xe8>)
 80127e6:	2200      	movs	r2, #0
 80127e8:	801a      	strh	r2, [r3, #0]
 80127ea:	e045      	b.n	8012878 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80127ec:	f7ff ffb2 	bl	8012754 <tcp_get_next_optbyte>
 80127f0:	4603      	mov	r3, r0
 80127f2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80127f4:	7bfb      	ldrb	r3, [r7, #15]
 80127f6:	2b02      	cmp	r3, #2
 80127f8:	d006      	beq.n	8012808 <tcp_parseopt+0x48>
 80127fa:	2b02      	cmp	r3, #2
 80127fc:	dc2b      	bgt.n	8012856 <tcp_parseopt+0x96>
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d041      	beq.n	8012886 <tcp_parseopt+0xc6>
 8012802:	2b01      	cmp	r3, #1
 8012804:	d127      	bne.n	8012856 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012806:	e037      	b.n	8012878 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012808:	f7ff ffa4 	bl	8012754 <tcp_get_next_optbyte>
 801280c:	4603      	mov	r3, r0
 801280e:	2b04      	cmp	r3, #4
 8012810:	d13b      	bne.n	801288a <tcp_parseopt+0xca>
 8012812:	4b25      	ldr	r3, [pc, #148]	; (80128a8 <tcp_parseopt+0xe8>)
 8012814:	881b      	ldrh	r3, [r3, #0]
 8012816:	3301      	adds	r3, #1
 8012818:	4a22      	ldr	r2, [pc, #136]	; (80128a4 <tcp_parseopt+0xe4>)
 801281a:	8812      	ldrh	r2, [r2, #0]
 801281c:	4293      	cmp	r3, r2
 801281e:	da34      	bge.n	801288a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012820:	f7ff ff98 	bl	8012754 <tcp_get_next_optbyte>
 8012824:	4603      	mov	r3, r0
 8012826:	b29b      	uxth	r3, r3
 8012828:	021b      	lsls	r3, r3, #8
 801282a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801282c:	f7ff ff92 	bl	8012754 <tcp_get_next_optbyte>
 8012830:	4603      	mov	r3, r0
 8012832:	b29a      	uxth	r2, r3
 8012834:	89bb      	ldrh	r3, [r7, #12]
 8012836:	4313      	orrs	r3, r2
 8012838:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801283a:	89bb      	ldrh	r3, [r7, #12]
 801283c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012840:	d804      	bhi.n	801284c <tcp_parseopt+0x8c>
 8012842:	89bb      	ldrh	r3, [r7, #12]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d001      	beq.n	801284c <tcp_parseopt+0x8c>
 8012848:	89ba      	ldrh	r2, [r7, #12]
 801284a:	e001      	b.n	8012850 <tcp_parseopt+0x90>
 801284c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012854:	e010      	b.n	8012878 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012856:	f7ff ff7d 	bl	8012754 <tcp_get_next_optbyte>
 801285a:	4603      	mov	r3, r0
 801285c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801285e:	7afb      	ldrb	r3, [r7, #11]
 8012860:	2b01      	cmp	r3, #1
 8012862:	d914      	bls.n	801288e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012864:	7afb      	ldrb	r3, [r7, #11]
 8012866:	b29a      	uxth	r2, r3
 8012868:	4b0f      	ldr	r3, [pc, #60]	; (80128a8 <tcp_parseopt+0xe8>)
 801286a:	881b      	ldrh	r3, [r3, #0]
 801286c:	4413      	add	r3, r2
 801286e:	b29b      	uxth	r3, r3
 8012870:	3b02      	subs	r3, #2
 8012872:	b29a      	uxth	r2, r3
 8012874:	4b0c      	ldr	r3, [pc, #48]	; (80128a8 <tcp_parseopt+0xe8>)
 8012876:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012878:	4b0b      	ldr	r3, [pc, #44]	; (80128a8 <tcp_parseopt+0xe8>)
 801287a:	881a      	ldrh	r2, [r3, #0]
 801287c:	4b09      	ldr	r3, [pc, #36]	; (80128a4 <tcp_parseopt+0xe4>)
 801287e:	881b      	ldrh	r3, [r3, #0]
 8012880:	429a      	cmp	r2, r3
 8012882:	d3b3      	bcc.n	80127ec <tcp_parseopt+0x2c>
 8012884:	e004      	b.n	8012890 <tcp_parseopt+0xd0>
          return;
 8012886:	bf00      	nop
 8012888:	e002      	b.n	8012890 <tcp_parseopt+0xd0>
            return;
 801288a:	bf00      	nop
 801288c:	e000      	b.n	8012890 <tcp_parseopt+0xd0>
            return;
 801288e:	bf00      	nop
      }
    }
  }
}
 8012890:	3710      	adds	r7, #16
 8012892:	46bd      	mov	sp, r7
 8012894:	bd80      	pop	{r7, pc}
 8012896:	bf00      	nop
 8012898:	0801c158 	.word	0x0801c158
 801289c:	0801c5bc 	.word	0x0801c5bc
 80128a0:	0801c1a4 	.word	0x0801c1a4
 80128a4:	20000544 	.word	0x20000544
 80128a8:	2000054c 	.word	0x2000054c

080128ac <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80128ac:	b480      	push	{r7}
 80128ae:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80128b0:	4b05      	ldr	r3, [pc, #20]	; (80128c8 <tcp_trigger_input_pcb_close+0x1c>)
 80128b2:	781b      	ldrb	r3, [r3, #0]
 80128b4:	f043 0310 	orr.w	r3, r3, #16
 80128b8:	b2da      	uxtb	r2, r3
 80128ba:	4b03      	ldr	r3, [pc, #12]	; (80128c8 <tcp_trigger_input_pcb_close+0x1c>)
 80128bc:	701a      	strb	r2, [r3, #0]
}
 80128be:	bf00      	nop
 80128c0:	46bd      	mov	sp, r7
 80128c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c6:	4770      	bx	lr
 80128c8:	2000055d 	.word	0x2000055d

080128cc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b084      	sub	sp, #16
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	60f8      	str	r0, [r7, #12]
 80128d4:	60b9      	str	r1, [r7, #8]
 80128d6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d00a      	beq.n	80128f4 <tcp_route+0x28>
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	7a1b      	ldrb	r3, [r3, #8]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d006      	beq.n	80128f4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	7a1b      	ldrb	r3, [r3, #8]
 80128ea:	4618      	mov	r0, r3
 80128ec:	f7fb fabc 	bl	800de68 <netif_get_by_index>
 80128f0:	4603      	mov	r3, r0
 80128f2:	e003      	b.n	80128fc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80128f4:	6878      	ldr	r0, [r7, #4]
 80128f6:	f005 f891 	bl	8017a1c <ip4_route>
 80128fa:	4603      	mov	r3, r0
  }
}
 80128fc:	4618      	mov	r0, r3
 80128fe:	3710      	adds	r7, #16
 8012900:	46bd      	mov	sp, r7
 8012902:	bd80      	pop	{r7, pc}

08012904 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012904:	b590      	push	{r4, r7, lr}
 8012906:	b087      	sub	sp, #28
 8012908:	af00      	add	r7, sp, #0
 801290a:	60f8      	str	r0, [r7, #12]
 801290c:	60b9      	str	r1, [r7, #8]
 801290e:	603b      	str	r3, [r7, #0]
 8012910:	4613      	mov	r3, r2
 8012912:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d105      	bne.n	8012926 <tcp_create_segment+0x22>
 801291a:	4b44      	ldr	r3, [pc, #272]	; (8012a2c <tcp_create_segment+0x128>)
 801291c:	22a3      	movs	r2, #163	; 0xa3
 801291e:	4944      	ldr	r1, [pc, #272]	; (8012a30 <tcp_create_segment+0x12c>)
 8012920:	4844      	ldr	r0, [pc, #272]	; (8012a34 <tcp_create_segment+0x130>)
 8012922:	f006 fd93 	bl	801944c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012926:	68bb      	ldr	r3, [r7, #8]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d105      	bne.n	8012938 <tcp_create_segment+0x34>
 801292c:	4b3f      	ldr	r3, [pc, #252]	; (8012a2c <tcp_create_segment+0x128>)
 801292e:	22a4      	movs	r2, #164	; 0xa4
 8012930:	4941      	ldr	r1, [pc, #260]	; (8012a38 <tcp_create_segment+0x134>)
 8012932:	4840      	ldr	r0, [pc, #256]	; (8012a34 <tcp_create_segment+0x130>)
 8012934:	f006 fd8a 	bl	801944c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012938:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801293c:	009b      	lsls	r3, r3, #2
 801293e:	b2db      	uxtb	r3, r3
 8012940:	f003 0304 	and.w	r3, r3, #4
 8012944:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012946:	2003      	movs	r0, #3
 8012948:	f7fa ff88 	bl	800d85c <memp_malloc>
 801294c:	6138      	str	r0, [r7, #16]
 801294e:	693b      	ldr	r3, [r7, #16]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d104      	bne.n	801295e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012954:	68b8      	ldr	r0, [r7, #8]
 8012956:	f7fb fde7 	bl	800e528 <pbuf_free>
    return NULL;
 801295a:	2300      	movs	r3, #0
 801295c:	e061      	b.n	8012a22 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801295e:	693b      	ldr	r3, [r7, #16]
 8012960:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012964:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012966:	693b      	ldr	r3, [r7, #16]
 8012968:	2200      	movs	r2, #0
 801296a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801296c:	693b      	ldr	r3, [r7, #16]
 801296e:	68ba      	ldr	r2, [r7, #8]
 8012970:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012972:	68bb      	ldr	r3, [r7, #8]
 8012974:	891a      	ldrh	r2, [r3, #8]
 8012976:	7dfb      	ldrb	r3, [r7, #23]
 8012978:	b29b      	uxth	r3, r3
 801297a:	429a      	cmp	r2, r3
 801297c:	d205      	bcs.n	801298a <tcp_create_segment+0x86>
 801297e:	4b2b      	ldr	r3, [pc, #172]	; (8012a2c <tcp_create_segment+0x128>)
 8012980:	22b0      	movs	r2, #176	; 0xb0
 8012982:	492e      	ldr	r1, [pc, #184]	; (8012a3c <tcp_create_segment+0x138>)
 8012984:	482b      	ldr	r0, [pc, #172]	; (8012a34 <tcp_create_segment+0x130>)
 8012986:	f006 fd61 	bl	801944c <iprintf>
  seg->len = p->tot_len - optlen;
 801298a:	68bb      	ldr	r3, [r7, #8]
 801298c:	891a      	ldrh	r2, [r3, #8]
 801298e:	7dfb      	ldrb	r3, [r7, #23]
 8012990:	b29b      	uxth	r3, r3
 8012992:	1ad3      	subs	r3, r2, r3
 8012994:	b29a      	uxth	r2, r3
 8012996:	693b      	ldr	r3, [r7, #16]
 8012998:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801299a:	2114      	movs	r1, #20
 801299c:	68b8      	ldr	r0, [r7, #8]
 801299e:	f7fb fd2d 	bl	800e3fc <pbuf_add_header>
 80129a2:	4603      	mov	r3, r0
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d004      	beq.n	80129b2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80129a8:	6938      	ldr	r0, [r7, #16]
 80129aa:	f7fd f8d2 	bl	800fb52 <tcp_seg_free>
    return NULL;
 80129ae:	2300      	movs	r3, #0
 80129b0:	e037      	b.n	8012a22 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80129b2:	693b      	ldr	r3, [r7, #16]
 80129b4:	685b      	ldr	r3, [r3, #4]
 80129b6:	685a      	ldr	r2, [r3, #4]
 80129b8:	693b      	ldr	r3, [r7, #16]
 80129ba:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	8ada      	ldrh	r2, [r3, #22]
 80129c0:	693b      	ldr	r3, [r7, #16]
 80129c2:	68dc      	ldr	r4, [r3, #12]
 80129c4:	4610      	mov	r0, r2
 80129c6:	f7fa faf3 	bl	800cfb0 <lwip_htons>
 80129ca:	4603      	mov	r3, r0
 80129cc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	8b1a      	ldrh	r2, [r3, #24]
 80129d2:	693b      	ldr	r3, [r7, #16]
 80129d4:	68dc      	ldr	r4, [r3, #12]
 80129d6:	4610      	mov	r0, r2
 80129d8:	f7fa faea 	bl	800cfb0 <lwip_htons>
 80129dc:	4603      	mov	r3, r0
 80129de:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80129e0:	693b      	ldr	r3, [r7, #16]
 80129e2:	68dc      	ldr	r4, [r3, #12]
 80129e4:	6838      	ldr	r0, [r7, #0]
 80129e6:	f7fa faf8 	bl	800cfda <lwip_htonl>
 80129ea:	4603      	mov	r3, r0
 80129ec:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80129ee:	7dfb      	ldrb	r3, [r7, #23]
 80129f0:	089b      	lsrs	r3, r3, #2
 80129f2:	b2db      	uxtb	r3, r3
 80129f4:	b29b      	uxth	r3, r3
 80129f6:	3305      	adds	r3, #5
 80129f8:	b29b      	uxth	r3, r3
 80129fa:	031b      	lsls	r3, r3, #12
 80129fc:	b29a      	uxth	r2, r3
 80129fe:	79fb      	ldrb	r3, [r7, #7]
 8012a00:	b29b      	uxth	r3, r3
 8012a02:	4313      	orrs	r3, r2
 8012a04:	b29a      	uxth	r2, r3
 8012a06:	693b      	ldr	r3, [r7, #16]
 8012a08:	68dc      	ldr	r4, [r3, #12]
 8012a0a:	4610      	mov	r0, r2
 8012a0c:	f7fa fad0 	bl	800cfb0 <lwip_htons>
 8012a10:	4603      	mov	r3, r0
 8012a12:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012a14:	693b      	ldr	r3, [r7, #16]
 8012a16:	68db      	ldr	r3, [r3, #12]
 8012a18:	2200      	movs	r2, #0
 8012a1a:	749a      	strb	r2, [r3, #18]
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	74da      	strb	r2, [r3, #19]
  return seg;
 8012a20:	693b      	ldr	r3, [r7, #16]
}
 8012a22:	4618      	mov	r0, r3
 8012a24:	371c      	adds	r7, #28
 8012a26:	46bd      	mov	sp, r7
 8012a28:	bd90      	pop	{r4, r7, pc}
 8012a2a:	bf00      	nop
 8012a2c:	0801c5d8 	.word	0x0801c5d8
 8012a30:	0801c60c 	.word	0x0801c60c
 8012a34:	0801c62c 	.word	0x0801c62c
 8012a38:	0801c654 	.word	0x0801c654
 8012a3c:	0801c678 	.word	0x0801c678

08012a40 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012a40:	b590      	push	{r4, r7, lr}
 8012a42:	b08b      	sub	sp, #44	; 0x2c
 8012a44:	af02      	add	r7, sp, #8
 8012a46:	6078      	str	r0, [r7, #4]
 8012a48:	460b      	mov	r3, r1
 8012a4a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	61fb      	str	r3, [r7, #28]
 8012a50:	2300      	movs	r3, #0
 8012a52:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012a54:	2300      	movs	r3, #0
 8012a56:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d106      	bne.n	8012a6c <tcp_split_unsent_seg+0x2c>
 8012a5e:	4b95      	ldr	r3, [pc, #596]	; (8012cb4 <tcp_split_unsent_seg+0x274>)
 8012a60:	f240 324b 	movw	r2, #843	; 0x34b
 8012a64:	4994      	ldr	r1, [pc, #592]	; (8012cb8 <tcp_split_unsent_seg+0x278>)
 8012a66:	4895      	ldr	r0, [pc, #596]	; (8012cbc <tcp_split_unsent_seg+0x27c>)
 8012a68:	f006 fcf0 	bl	801944c <iprintf>

  useg = pcb->unsent;
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a70:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d102      	bne.n	8012a7e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012a78:	f04f 33ff 	mov.w	r3, #4294967295
 8012a7c:	e116      	b.n	8012cac <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012a7e:	887b      	ldrh	r3, [r7, #2]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d109      	bne.n	8012a98 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012a84:	4b8b      	ldr	r3, [pc, #556]	; (8012cb4 <tcp_split_unsent_seg+0x274>)
 8012a86:	f240 3253 	movw	r2, #851	; 0x353
 8012a8a:	498d      	ldr	r1, [pc, #564]	; (8012cc0 <tcp_split_unsent_seg+0x280>)
 8012a8c:	488b      	ldr	r0, [pc, #556]	; (8012cbc <tcp_split_unsent_seg+0x27c>)
 8012a8e:	f006 fcdd 	bl	801944c <iprintf>
    return ERR_VAL;
 8012a92:	f06f 0305 	mvn.w	r3, #5
 8012a96:	e109      	b.n	8012cac <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	891b      	ldrh	r3, [r3, #8]
 8012a9c:	887a      	ldrh	r2, [r7, #2]
 8012a9e:	429a      	cmp	r2, r3
 8012aa0:	d301      	bcc.n	8012aa6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	e102      	b.n	8012cac <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012aaa:	887a      	ldrh	r2, [r7, #2]
 8012aac:	429a      	cmp	r2, r3
 8012aae:	d906      	bls.n	8012abe <tcp_split_unsent_seg+0x7e>
 8012ab0:	4b80      	ldr	r3, [pc, #512]	; (8012cb4 <tcp_split_unsent_seg+0x274>)
 8012ab2:	f240 325b 	movw	r2, #859	; 0x35b
 8012ab6:	4983      	ldr	r1, [pc, #524]	; (8012cc4 <tcp_split_unsent_seg+0x284>)
 8012ab8:	4880      	ldr	r0, [pc, #512]	; (8012cbc <tcp_split_unsent_seg+0x27c>)
 8012aba:	f006 fcc7 	bl	801944c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012abe:	697b      	ldr	r3, [r7, #20]
 8012ac0:	891b      	ldrh	r3, [r3, #8]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d106      	bne.n	8012ad4 <tcp_split_unsent_seg+0x94>
 8012ac6:	4b7b      	ldr	r3, [pc, #492]	; (8012cb4 <tcp_split_unsent_seg+0x274>)
 8012ac8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012acc:	497e      	ldr	r1, [pc, #504]	; (8012cc8 <tcp_split_unsent_seg+0x288>)
 8012ace:	487b      	ldr	r0, [pc, #492]	; (8012cbc <tcp_split_unsent_seg+0x27c>)
 8012ad0:	f006 fcbc 	bl	801944c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012ad4:	697b      	ldr	r3, [r7, #20]
 8012ad6:	7a9b      	ldrb	r3, [r3, #10]
 8012ad8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012ada:	7bfb      	ldrb	r3, [r7, #15]
 8012adc:	009b      	lsls	r3, r3, #2
 8012ade:	b2db      	uxtb	r3, r3
 8012ae0:	f003 0304 	and.w	r3, r3, #4
 8012ae4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012ae6:	697b      	ldr	r3, [r7, #20]
 8012ae8:	891a      	ldrh	r2, [r3, #8]
 8012aea:	887b      	ldrh	r3, [r7, #2]
 8012aec:	1ad3      	subs	r3, r2, r3
 8012aee:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012af0:	7bbb      	ldrb	r3, [r7, #14]
 8012af2:	b29a      	uxth	r2, r3
 8012af4:	89bb      	ldrh	r3, [r7, #12]
 8012af6:	4413      	add	r3, r2
 8012af8:	b29b      	uxth	r3, r3
 8012afa:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012afe:	4619      	mov	r1, r3
 8012b00:	2036      	movs	r0, #54	; 0x36
 8012b02:	f7fb fa2d 	bl	800df60 <pbuf_alloc>
 8012b06:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012b08:	693b      	ldr	r3, [r7, #16]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	f000 80b7 	beq.w	8012c7e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012b10:	697b      	ldr	r3, [r7, #20]
 8012b12:	685b      	ldr	r3, [r3, #4]
 8012b14:	891a      	ldrh	r2, [r3, #8]
 8012b16:	697b      	ldr	r3, [r7, #20]
 8012b18:	891b      	ldrh	r3, [r3, #8]
 8012b1a:	1ad3      	subs	r3, r2, r3
 8012b1c:	b29a      	uxth	r2, r3
 8012b1e:	887b      	ldrh	r3, [r7, #2]
 8012b20:	4413      	add	r3, r2
 8012b22:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012b24:	697b      	ldr	r3, [r7, #20]
 8012b26:	6858      	ldr	r0, [r3, #4]
 8012b28:	693b      	ldr	r3, [r7, #16]
 8012b2a:	685a      	ldr	r2, [r3, #4]
 8012b2c:	7bbb      	ldrb	r3, [r7, #14]
 8012b2e:	18d1      	adds	r1, r2, r3
 8012b30:	897b      	ldrh	r3, [r7, #10]
 8012b32:	89ba      	ldrh	r2, [r7, #12]
 8012b34:	f7fb fef2 	bl	800e91c <pbuf_copy_partial>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	461a      	mov	r2, r3
 8012b3c:	89bb      	ldrh	r3, [r7, #12]
 8012b3e:	4293      	cmp	r3, r2
 8012b40:	f040 809f 	bne.w	8012c82 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012b44:	697b      	ldr	r3, [r7, #20]
 8012b46:	68db      	ldr	r3, [r3, #12]
 8012b48:	899b      	ldrh	r3, [r3, #12]
 8012b4a:	b29b      	uxth	r3, r3
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	f7fa fa2f 	bl	800cfb0 <lwip_htons>
 8012b52:	4603      	mov	r3, r0
 8012b54:	b2db      	uxtb	r3, r3
 8012b56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012b5a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012b60:	7efb      	ldrb	r3, [r7, #27]
 8012b62:	f003 0308 	and.w	r3, r3, #8
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d007      	beq.n	8012b7a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012b6a:	7efb      	ldrb	r3, [r7, #27]
 8012b6c:	f023 0308 	bic.w	r3, r3, #8
 8012b70:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012b72:	7ebb      	ldrb	r3, [r7, #26]
 8012b74:	f043 0308 	orr.w	r3, r3, #8
 8012b78:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012b7a:	7efb      	ldrb	r3, [r7, #27]
 8012b7c:	f003 0301 	and.w	r3, r3, #1
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d007      	beq.n	8012b94 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012b84:	7efb      	ldrb	r3, [r7, #27]
 8012b86:	f023 0301 	bic.w	r3, r3, #1
 8012b8a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012b8c:	7ebb      	ldrb	r3, [r7, #26]
 8012b8e:	f043 0301 	orr.w	r3, r3, #1
 8012b92:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012b94:	697b      	ldr	r3, [r7, #20]
 8012b96:	68db      	ldr	r3, [r3, #12]
 8012b98:	685b      	ldr	r3, [r3, #4]
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	f7fa fa1d 	bl	800cfda <lwip_htonl>
 8012ba0:	4602      	mov	r2, r0
 8012ba2:	887b      	ldrh	r3, [r7, #2]
 8012ba4:	18d1      	adds	r1, r2, r3
 8012ba6:	7eba      	ldrb	r2, [r7, #26]
 8012ba8:	7bfb      	ldrb	r3, [r7, #15]
 8012baa:	9300      	str	r3, [sp, #0]
 8012bac:	460b      	mov	r3, r1
 8012bae:	6939      	ldr	r1, [r7, #16]
 8012bb0:	6878      	ldr	r0, [r7, #4]
 8012bb2:	f7ff fea7 	bl	8012904 <tcp_create_segment>
 8012bb6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012bb8:	69fb      	ldr	r3, [r7, #28]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d063      	beq.n	8012c86 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012bbe:	697b      	ldr	r3, [r7, #20]
 8012bc0:	685b      	ldr	r3, [r3, #4]
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f7fb fd38 	bl	800e638 <pbuf_clen>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	461a      	mov	r2, r3
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012bd2:	1a9b      	subs	r3, r3, r2
 8012bd4:	b29a      	uxth	r2, r3
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012bdc:	697b      	ldr	r3, [r7, #20]
 8012bde:	6858      	ldr	r0, [r3, #4]
 8012be0:	697b      	ldr	r3, [r7, #20]
 8012be2:	685b      	ldr	r3, [r3, #4]
 8012be4:	891a      	ldrh	r2, [r3, #8]
 8012be6:	89bb      	ldrh	r3, [r7, #12]
 8012be8:	1ad3      	subs	r3, r2, r3
 8012bea:	b29b      	uxth	r3, r3
 8012bec:	4619      	mov	r1, r3
 8012bee:	f7fb fb15 	bl	800e21c <pbuf_realloc>
  useg->len -= remainder;
 8012bf2:	697b      	ldr	r3, [r7, #20]
 8012bf4:	891a      	ldrh	r2, [r3, #8]
 8012bf6:	89bb      	ldrh	r3, [r7, #12]
 8012bf8:	1ad3      	subs	r3, r2, r3
 8012bfa:	b29a      	uxth	r2, r3
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012c00:	697b      	ldr	r3, [r7, #20]
 8012c02:	68db      	ldr	r3, [r3, #12]
 8012c04:	899b      	ldrh	r3, [r3, #12]
 8012c06:	b29c      	uxth	r4, r3
 8012c08:	7efb      	ldrb	r3, [r7, #27]
 8012c0a:	b29b      	uxth	r3, r3
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	f7fa f9cf 	bl	800cfb0 <lwip_htons>
 8012c12:	4603      	mov	r3, r0
 8012c14:	461a      	mov	r2, r3
 8012c16:	697b      	ldr	r3, [r7, #20]
 8012c18:	68db      	ldr	r3, [r3, #12]
 8012c1a:	4322      	orrs	r2, r4
 8012c1c:	b292      	uxth	r2, r2
 8012c1e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012c20:	697b      	ldr	r3, [r7, #20]
 8012c22:	685b      	ldr	r3, [r3, #4]
 8012c24:	4618      	mov	r0, r3
 8012c26:	f7fb fd07 	bl	800e638 <pbuf_clen>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	461a      	mov	r2, r3
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012c34:	4413      	add	r3, r2
 8012c36:	b29a      	uxth	r2, r3
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012c3e:	69fb      	ldr	r3, [r7, #28]
 8012c40:	685b      	ldr	r3, [r3, #4]
 8012c42:	4618      	mov	r0, r3
 8012c44:	f7fb fcf8 	bl	800e638 <pbuf_clen>
 8012c48:	4603      	mov	r3, r0
 8012c4a:	461a      	mov	r2, r3
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012c52:	4413      	add	r3, r2
 8012c54:	b29a      	uxth	r2, r3
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012c5c:	697b      	ldr	r3, [r7, #20]
 8012c5e:	681a      	ldr	r2, [r3, #0]
 8012c60:	69fb      	ldr	r3, [r7, #28]
 8012c62:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012c64:	697b      	ldr	r3, [r7, #20]
 8012c66:	69fa      	ldr	r2, [r7, #28]
 8012c68:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012c6a:	69fb      	ldr	r3, [r7, #28]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d103      	bne.n	8012c7a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	2200      	movs	r2, #0
 8012c76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	e016      	b.n	8012cac <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012c7e:	bf00      	nop
 8012c80:	e002      	b.n	8012c88 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012c82:	bf00      	nop
 8012c84:	e000      	b.n	8012c88 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012c86:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012c88:	69fb      	ldr	r3, [r7, #28]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d006      	beq.n	8012c9c <tcp_split_unsent_seg+0x25c>
 8012c8e:	4b09      	ldr	r3, [pc, #36]	; (8012cb4 <tcp_split_unsent_seg+0x274>)
 8012c90:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012c94:	490d      	ldr	r1, [pc, #52]	; (8012ccc <tcp_split_unsent_seg+0x28c>)
 8012c96:	4809      	ldr	r0, [pc, #36]	; (8012cbc <tcp_split_unsent_seg+0x27c>)
 8012c98:	f006 fbd8 	bl	801944c <iprintf>
  if (p != NULL) {
 8012c9c:	693b      	ldr	r3, [r7, #16]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d002      	beq.n	8012ca8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012ca2:	6938      	ldr	r0, [r7, #16]
 8012ca4:	f7fb fc40 	bl	800e528 <pbuf_free>
  }

  return ERR_MEM;
 8012ca8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012cac:	4618      	mov	r0, r3
 8012cae:	3724      	adds	r7, #36	; 0x24
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	bd90      	pop	{r4, r7, pc}
 8012cb4:	0801c5d8 	.word	0x0801c5d8
 8012cb8:	0801c96c 	.word	0x0801c96c
 8012cbc:	0801c62c 	.word	0x0801c62c
 8012cc0:	0801c990 	.word	0x0801c990
 8012cc4:	0801c9b4 	.word	0x0801c9b4
 8012cc8:	0801c9c4 	.word	0x0801c9c4
 8012ccc:	0801c9d4 	.word	0x0801c9d4

08012cd0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012cd0:	b590      	push	{r4, r7, lr}
 8012cd2:	b085      	sub	sp, #20
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d106      	bne.n	8012cec <tcp_send_fin+0x1c>
 8012cde:	4b21      	ldr	r3, [pc, #132]	; (8012d64 <tcp_send_fin+0x94>)
 8012ce0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012ce4:	4920      	ldr	r1, [pc, #128]	; (8012d68 <tcp_send_fin+0x98>)
 8012ce6:	4821      	ldr	r0, [pc, #132]	; (8012d6c <tcp_send_fin+0x9c>)
 8012ce8:	f006 fbb0 	bl	801944c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d02e      	beq.n	8012d52 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cf8:	60fb      	str	r3, [r7, #12]
 8012cfa:	e002      	b.n	8012d02 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d1f8      	bne.n	8012cfc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	68db      	ldr	r3, [r3, #12]
 8012d0e:	899b      	ldrh	r3, [r3, #12]
 8012d10:	b29b      	uxth	r3, r3
 8012d12:	4618      	mov	r0, r3
 8012d14:	f7fa f94c 	bl	800cfb0 <lwip_htons>
 8012d18:	4603      	mov	r3, r0
 8012d1a:	b2db      	uxtb	r3, r3
 8012d1c:	f003 0307 	and.w	r3, r3, #7
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d116      	bne.n	8012d52 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	68db      	ldr	r3, [r3, #12]
 8012d28:	899b      	ldrh	r3, [r3, #12]
 8012d2a:	b29c      	uxth	r4, r3
 8012d2c:	2001      	movs	r0, #1
 8012d2e:	f7fa f93f 	bl	800cfb0 <lwip_htons>
 8012d32:	4603      	mov	r3, r0
 8012d34:	461a      	mov	r2, r3
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	68db      	ldr	r3, [r3, #12]
 8012d3a:	4322      	orrs	r2, r4
 8012d3c:	b292      	uxth	r2, r2
 8012d3e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	8b5b      	ldrh	r3, [r3, #26]
 8012d44:	f043 0320 	orr.w	r3, r3, #32
 8012d48:	b29a      	uxth	r2, r3
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012d4e:	2300      	movs	r3, #0
 8012d50:	e004      	b.n	8012d5c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012d52:	2101      	movs	r1, #1
 8012d54:	6878      	ldr	r0, [r7, #4]
 8012d56:	f000 f80b 	bl	8012d70 <tcp_enqueue_flags>
 8012d5a:	4603      	mov	r3, r0
}
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	3714      	adds	r7, #20
 8012d60:	46bd      	mov	sp, r7
 8012d62:	bd90      	pop	{r4, r7, pc}
 8012d64:	0801c5d8 	.word	0x0801c5d8
 8012d68:	0801c9e0 	.word	0x0801c9e0
 8012d6c:	0801c62c 	.word	0x0801c62c

08012d70 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b08a      	sub	sp, #40	; 0x28
 8012d74:	af02      	add	r7, sp, #8
 8012d76:	6078      	str	r0, [r7, #4]
 8012d78:	460b      	mov	r3, r1
 8012d7a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012d80:	2300      	movs	r3, #0
 8012d82:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012d84:	78fb      	ldrb	r3, [r7, #3]
 8012d86:	f003 0303 	and.w	r3, r3, #3
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d106      	bne.n	8012d9c <tcp_enqueue_flags+0x2c>
 8012d8e:	4b67      	ldr	r3, [pc, #412]	; (8012f2c <tcp_enqueue_flags+0x1bc>)
 8012d90:	f240 4211 	movw	r2, #1041	; 0x411
 8012d94:	4966      	ldr	r1, [pc, #408]	; (8012f30 <tcp_enqueue_flags+0x1c0>)
 8012d96:	4867      	ldr	r0, [pc, #412]	; (8012f34 <tcp_enqueue_flags+0x1c4>)
 8012d98:	f006 fb58 	bl	801944c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d106      	bne.n	8012db0 <tcp_enqueue_flags+0x40>
 8012da2:	4b62      	ldr	r3, [pc, #392]	; (8012f2c <tcp_enqueue_flags+0x1bc>)
 8012da4:	f240 4213 	movw	r2, #1043	; 0x413
 8012da8:	4963      	ldr	r1, [pc, #396]	; (8012f38 <tcp_enqueue_flags+0x1c8>)
 8012daa:	4862      	ldr	r0, [pc, #392]	; (8012f34 <tcp_enqueue_flags+0x1c4>)
 8012dac:	f006 fb4e 	bl	801944c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012db0:	78fb      	ldrb	r3, [r7, #3]
 8012db2:	f003 0302 	and.w	r3, r3, #2
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d001      	beq.n	8012dbe <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012dba:	2301      	movs	r3, #1
 8012dbc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012dbe:	7ffb      	ldrb	r3, [r7, #31]
 8012dc0:	009b      	lsls	r3, r3, #2
 8012dc2:	b2db      	uxtb	r3, r3
 8012dc4:	f003 0304 	and.w	r3, r3, #4
 8012dc8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012dca:	7dfb      	ldrb	r3, [r7, #23]
 8012dcc:	b29b      	uxth	r3, r3
 8012dce:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012dd2:	4619      	mov	r1, r3
 8012dd4:	2036      	movs	r0, #54	; 0x36
 8012dd6:	f7fb f8c3 	bl	800df60 <pbuf_alloc>
 8012dda:	6138      	str	r0, [r7, #16]
 8012ddc:	693b      	ldr	r3, [r7, #16]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d109      	bne.n	8012df6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	8b5b      	ldrh	r3, [r3, #26]
 8012de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012dea:	b29a      	uxth	r2, r3
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012df0:	f04f 33ff 	mov.w	r3, #4294967295
 8012df4:	e095      	b.n	8012f22 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012df6:	693b      	ldr	r3, [r7, #16]
 8012df8:	895a      	ldrh	r2, [r3, #10]
 8012dfa:	7dfb      	ldrb	r3, [r7, #23]
 8012dfc:	b29b      	uxth	r3, r3
 8012dfe:	429a      	cmp	r2, r3
 8012e00:	d206      	bcs.n	8012e10 <tcp_enqueue_flags+0xa0>
 8012e02:	4b4a      	ldr	r3, [pc, #296]	; (8012f2c <tcp_enqueue_flags+0x1bc>)
 8012e04:	f240 4239 	movw	r2, #1081	; 0x439
 8012e08:	494c      	ldr	r1, [pc, #304]	; (8012f3c <tcp_enqueue_flags+0x1cc>)
 8012e0a:	484a      	ldr	r0, [pc, #296]	; (8012f34 <tcp_enqueue_flags+0x1c4>)
 8012e0c:	f006 fb1e 	bl	801944c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012e14:	78fa      	ldrb	r2, [r7, #3]
 8012e16:	7ffb      	ldrb	r3, [r7, #31]
 8012e18:	9300      	str	r3, [sp, #0]
 8012e1a:	460b      	mov	r3, r1
 8012e1c:	6939      	ldr	r1, [r7, #16]
 8012e1e:	6878      	ldr	r0, [r7, #4]
 8012e20:	f7ff fd70 	bl	8012904 <tcp_create_segment>
 8012e24:	60f8      	str	r0, [r7, #12]
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d109      	bne.n	8012e40 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	8b5b      	ldrh	r3, [r3, #26]
 8012e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e34:	b29a      	uxth	r2, r3
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8012e3e:	e070      	b.n	8012f22 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	68db      	ldr	r3, [r3, #12]
 8012e44:	f003 0303 	and.w	r3, r3, #3
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d006      	beq.n	8012e5a <tcp_enqueue_flags+0xea>
 8012e4c:	4b37      	ldr	r3, [pc, #220]	; (8012f2c <tcp_enqueue_flags+0x1bc>)
 8012e4e:	f240 4242 	movw	r2, #1090	; 0x442
 8012e52:	493b      	ldr	r1, [pc, #236]	; (8012f40 <tcp_enqueue_flags+0x1d0>)
 8012e54:	4837      	ldr	r0, [pc, #220]	; (8012f34 <tcp_enqueue_flags+0x1c4>)
 8012e56:	f006 faf9 	bl	801944c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	891b      	ldrh	r3, [r3, #8]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d006      	beq.n	8012e70 <tcp_enqueue_flags+0x100>
 8012e62:	4b32      	ldr	r3, [pc, #200]	; (8012f2c <tcp_enqueue_flags+0x1bc>)
 8012e64:	f240 4243 	movw	r2, #1091	; 0x443
 8012e68:	4936      	ldr	r1, [pc, #216]	; (8012f44 <tcp_enqueue_flags+0x1d4>)
 8012e6a:	4832      	ldr	r0, [pc, #200]	; (8012f34 <tcp_enqueue_flags+0x1c4>)
 8012e6c:	f006 faee 	bl	801944c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d103      	bne.n	8012e80 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	68fa      	ldr	r2, [r7, #12]
 8012e7c:	66da      	str	r2, [r3, #108]	; 0x6c
 8012e7e:	e00d      	b.n	8012e9c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e84:	61bb      	str	r3, [r7, #24]
 8012e86:	e002      	b.n	8012e8e <tcp_enqueue_flags+0x11e>
 8012e88:	69bb      	ldr	r3, [r7, #24]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	61bb      	str	r3, [r7, #24]
 8012e8e:	69bb      	ldr	r3, [r7, #24]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d1f8      	bne.n	8012e88 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012e96:	69bb      	ldr	r3, [r7, #24]
 8012e98:	68fa      	ldr	r2, [r7, #12]
 8012e9a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012ea4:	78fb      	ldrb	r3, [r7, #3]
 8012ea6:	f003 0302 	and.w	r3, r3, #2
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d104      	bne.n	8012eb8 <tcp_enqueue_flags+0x148>
 8012eae:	78fb      	ldrb	r3, [r7, #3]
 8012eb0:	f003 0301 	and.w	r3, r3, #1
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d004      	beq.n	8012ec2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012ebc:	1c5a      	adds	r2, r3, #1
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012ec2:	78fb      	ldrb	r3, [r7, #3]
 8012ec4:	f003 0301 	and.w	r3, r3, #1
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d006      	beq.n	8012eda <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	8b5b      	ldrh	r3, [r3, #26]
 8012ed0:	f043 0320 	orr.w	r3, r3, #32
 8012ed4:	b29a      	uxth	r2, r3
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	685b      	ldr	r3, [r3, #4]
 8012ede:	4618      	mov	r0, r3
 8012ee0:	f7fb fbaa 	bl	800e638 <pbuf_clen>
 8012ee4:	4603      	mov	r3, r0
 8012ee6:	461a      	mov	r2, r3
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012eee:	4413      	add	r3, r2
 8012ef0:	b29a      	uxth	r2, r3
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d00e      	beq.n	8012f20 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d10a      	bne.n	8012f20 <tcp_enqueue_flags+0x1b0>
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d106      	bne.n	8012f20 <tcp_enqueue_flags+0x1b0>
 8012f12:	4b06      	ldr	r3, [pc, #24]	; (8012f2c <tcp_enqueue_flags+0x1bc>)
 8012f14:	f240 4265 	movw	r2, #1125	; 0x465
 8012f18:	490b      	ldr	r1, [pc, #44]	; (8012f48 <tcp_enqueue_flags+0x1d8>)
 8012f1a:	4806      	ldr	r0, [pc, #24]	; (8012f34 <tcp_enqueue_flags+0x1c4>)
 8012f1c:	f006 fa96 	bl	801944c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012f20:	2300      	movs	r3, #0
}
 8012f22:	4618      	mov	r0, r3
 8012f24:	3720      	adds	r7, #32
 8012f26:	46bd      	mov	sp, r7
 8012f28:	bd80      	pop	{r7, pc}
 8012f2a:	bf00      	nop
 8012f2c:	0801c5d8 	.word	0x0801c5d8
 8012f30:	0801c9fc 	.word	0x0801c9fc
 8012f34:	0801c62c 	.word	0x0801c62c
 8012f38:	0801ca54 	.word	0x0801ca54
 8012f3c:	0801ca74 	.word	0x0801ca74
 8012f40:	0801cab0 	.word	0x0801cab0
 8012f44:	0801cac8 	.word	0x0801cac8
 8012f48:	0801caf4 	.word	0x0801caf4

08012f4c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012f4c:	b5b0      	push	{r4, r5, r7, lr}
 8012f4e:	b08a      	sub	sp, #40	; 0x28
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d106      	bne.n	8012f68 <tcp_output+0x1c>
 8012f5a:	4b9e      	ldr	r3, [pc, #632]	; (80131d4 <tcp_output+0x288>)
 8012f5c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012f60:	499d      	ldr	r1, [pc, #628]	; (80131d8 <tcp_output+0x28c>)
 8012f62:	489e      	ldr	r0, [pc, #632]	; (80131dc <tcp_output+0x290>)
 8012f64:	f006 fa72 	bl	801944c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	7d1b      	ldrb	r3, [r3, #20]
 8012f6c:	2b01      	cmp	r3, #1
 8012f6e:	d106      	bne.n	8012f7e <tcp_output+0x32>
 8012f70:	4b98      	ldr	r3, [pc, #608]	; (80131d4 <tcp_output+0x288>)
 8012f72:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012f76:	499a      	ldr	r1, [pc, #616]	; (80131e0 <tcp_output+0x294>)
 8012f78:	4898      	ldr	r0, [pc, #608]	; (80131dc <tcp_output+0x290>)
 8012f7a:	f006 fa67 	bl	801944c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012f7e:	4b99      	ldr	r3, [pc, #612]	; (80131e4 <tcp_output+0x298>)
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	687a      	ldr	r2, [r7, #4]
 8012f84:	429a      	cmp	r2, r3
 8012f86:	d101      	bne.n	8012f8c <tcp_output+0x40>
    return ERR_OK;
 8012f88:	2300      	movs	r3, #0
 8012f8a:	e1ce      	b.n	801332a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012f98:	4293      	cmp	r3, r2
 8012f9a:	bf28      	it	cs
 8012f9c:	4613      	movcs	r3, r2
 8012f9e:	b29b      	uxth	r3, r3
 8012fa0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012fa6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d10b      	bne.n	8012fc6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	8b5b      	ldrh	r3, [r3, #26]
 8012fb2:	f003 0302 	and.w	r3, r3, #2
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	f000 81aa 	beq.w	8013310 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012fbc:	6878      	ldr	r0, [r7, #4]
 8012fbe:	f000 fdcb 	bl	8013b58 <tcp_send_empty_ack>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	e1b1      	b.n	801332a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012fc6:	6879      	ldr	r1, [r7, #4]
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	3304      	adds	r3, #4
 8012fcc:	461a      	mov	r2, r3
 8012fce:	6878      	ldr	r0, [r7, #4]
 8012fd0:	f7ff fc7c 	bl	80128cc <tcp_route>
 8012fd4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012fd6:	697b      	ldr	r3, [r7, #20]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d102      	bne.n	8012fe2 <tcp_output+0x96>
    return ERR_RTE;
 8012fdc:	f06f 0303 	mvn.w	r3, #3
 8012fe0:	e1a3      	b.n	801332a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d003      	beq.n	8012ff0 <tcp_output+0xa4>
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d111      	bne.n	8013014 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012ff0:	697b      	ldr	r3, [r7, #20]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d002      	beq.n	8012ffc <tcp_output+0xb0>
 8012ff6:	697b      	ldr	r3, [r7, #20]
 8012ff8:	3304      	adds	r3, #4
 8012ffa:	e000      	b.n	8012ffe <tcp_output+0xb2>
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013000:	693b      	ldr	r3, [r7, #16]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d102      	bne.n	801300c <tcp_output+0xc0>
      return ERR_RTE;
 8013006:	f06f 0303 	mvn.w	r3, #3
 801300a:	e18e      	b.n	801332a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801300c:	693b      	ldr	r3, [r7, #16]
 801300e:	681a      	ldr	r2, [r3, #0]
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013016:	68db      	ldr	r3, [r3, #12]
 8013018:	685b      	ldr	r3, [r3, #4]
 801301a:	4618      	mov	r0, r3
 801301c:	f7f9 ffdd 	bl	800cfda <lwip_htonl>
 8013020:	4602      	mov	r2, r0
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013026:	1ad3      	subs	r3, r2, r3
 8013028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801302a:	8912      	ldrh	r2, [r2, #8]
 801302c:	4413      	add	r3, r2
 801302e:	69ba      	ldr	r2, [r7, #24]
 8013030:	429a      	cmp	r2, r3
 8013032:	d227      	bcs.n	8013084 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801303a:	461a      	mov	r2, r3
 801303c:	69bb      	ldr	r3, [r7, #24]
 801303e:	4293      	cmp	r3, r2
 8013040:	d114      	bne.n	801306c <tcp_output+0x120>
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013046:	2b00      	cmp	r3, #0
 8013048:	d110      	bne.n	801306c <tcp_output+0x120>
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013050:	2b00      	cmp	r3, #0
 8013052:	d10b      	bne.n	801306c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	2200      	movs	r2, #0
 8013058:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	2201      	movs	r2, #1
 8013060:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	2200      	movs	r2, #0
 8013068:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	8b5b      	ldrh	r3, [r3, #26]
 8013070:	f003 0302 	and.w	r3, r3, #2
 8013074:	2b00      	cmp	r3, #0
 8013076:	f000 814d 	beq.w	8013314 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801307a:	6878      	ldr	r0, [r7, #4]
 801307c:	f000 fd6c 	bl	8013b58 <tcp_send_empty_ack>
 8013080:	4603      	mov	r3, r0
 8013082:	e152      	b.n	801332a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	2200      	movs	r2, #0
 8013088:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013090:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013092:	6a3b      	ldr	r3, [r7, #32]
 8013094:	2b00      	cmp	r3, #0
 8013096:	f000 811c 	beq.w	80132d2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801309a:	e002      	b.n	80130a2 <tcp_output+0x156>
 801309c:	6a3b      	ldr	r3, [r7, #32]
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	623b      	str	r3, [r7, #32]
 80130a2:	6a3b      	ldr	r3, [r7, #32]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d1f8      	bne.n	801309c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80130aa:	e112      	b.n	80132d2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80130ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ae:	68db      	ldr	r3, [r3, #12]
 80130b0:	899b      	ldrh	r3, [r3, #12]
 80130b2:	b29b      	uxth	r3, r3
 80130b4:	4618      	mov	r0, r3
 80130b6:	f7f9 ff7b 	bl	800cfb0 <lwip_htons>
 80130ba:	4603      	mov	r3, r0
 80130bc:	b2db      	uxtb	r3, r3
 80130be:	f003 0304 	and.w	r3, r3, #4
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d006      	beq.n	80130d4 <tcp_output+0x188>
 80130c6:	4b43      	ldr	r3, [pc, #268]	; (80131d4 <tcp_output+0x288>)
 80130c8:	f240 5236 	movw	r2, #1334	; 0x536
 80130cc:	4946      	ldr	r1, [pc, #280]	; (80131e8 <tcp_output+0x29c>)
 80130ce:	4843      	ldr	r0, [pc, #268]	; (80131dc <tcp_output+0x290>)
 80130d0:	f006 f9bc 	bl	801944c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d01f      	beq.n	801311c <tcp_output+0x1d0>
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	8b5b      	ldrh	r3, [r3, #26]
 80130e0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d119      	bne.n	801311c <tcp_output+0x1d0>
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d00b      	beq.n	8013108 <tcp_output+0x1bc>
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d110      	bne.n	801311c <tcp_output+0x1d0>
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130fe:	891a      	ldrh	r2, [r3, #8]
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013104:	429a      	cmp	r2, r3
 8013106:	d209      	bcs.n	801311c <tcp_output+0x1d0>
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801310e:	2b00      	cmp	r3, #0
 8013110:	d004      	beq.n	801311c <tcp_output+0x1d0>
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013118:	2b08      	cmp	r3, #8
 801311a:	d901      	bls.n	8013120 <tcp_output+0x1d4>
 801311c:	2301      	movs	r3, #1
 801311e:	e000      	b.n	8013122 <tcp_output+0x1d6>
 8013120:	2300      	movs	r3, #0
 8013122:	2b00      	cmp	r3, #0
 8013124:	d106      	bne.n	8013134 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	8b5b      	ldrh	r3, [r3, #26]
 801312a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801312e:	2b00      	cmp	r3, #0
 8013130:	f000 80e4 	beq.w	80132fc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	7d1b      	ldrb	r3, [r3, #20]
 8013138:	2b02      	cmp	r3, #2
 801313a:	d00d      	beq.n	8013158 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801313e:	68db      	ldr	r3, [r3, #12]
 8013140:	899b      	ldrh	r3, [r3, #12]
 8013142:	b29c      	uxth	r4, r3
 8013144:	2010      	movs	r0, #16
 8013146:	f7f9 ff33 	bl	800cfb0 <lwip_htons>
 801314a:	4603      	mov	r3, r0
 801314c:	461a      	mov	r2, r3
 801314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013150:	68db      	ldr	r3, [r3, #12]
 8013152:	4322      	orrs	r2, r4
 8013154:	b292      	uxth	r2, r2
 8013156:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013158:	697a      	ldr	r2, [r7, #20]
 801315a:	6879      	ldr	r1, [r7, #4]
 801315c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801315e:	f000 f909 	bl	8013374 <tcp_output_segment>
 8013162:	4603      	mov	r3, r0
 8013164:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d009      	beq.n	8013182 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	8b5b      	ldrh	r3, [r3, #26]
 8013172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013176:	b29a      	uxth	r2, r3
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	835a      	strh	r2, [r3, #26]
      return err;
 801317c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013180:	e0d3      	b.n	801332a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013184:	681a      	ldr	r2, [r3, #0]
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	7d1b      	ldrb	r3, [r3, #20]
 801318e:	2b02      	cmp	r3, #2
 8013190:	d006      	beq.n	80131a0 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	8b5b      	ldrh	r3, [r3, #26]
 8013196:	f023 0303 	bic.w	r3, r3, #3
 801319a:	b29a      	uxth	r2, r3
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80131a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131a2:	68db      	ldr	r3, [r3, #12]
 80131a4:	685b      	ldr	r3, [r3, #4]
 80131a6:	4618      	mov	r0, r3
 80131a8:	f7f9 ff17 	bl	800cfda <lwip_htonl>
 80131ac:	4604      	mov	r4, r0
 80131ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131b0:	891b      	ldrh	r3, [r3, #8]
 80131b2:	461d      	mov	r5, r3
 80131b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131b6:	68db      	ldr	r3, [r3, #12]
 80131b8:	899b      	ldrh	r3, [r3, #12]
 80131ba:	b29b      	uxth	r3, r3
 80131bc:	4618      	mov	r0, r3
 80131be:	f7f9 fef7 	bl	800cfb0 <lwip_htons>
 80131c2:	4603      	mov	r3, r0
 80131c4:	b2db      	uxtb	r3, r3
 80131c6:	f003 0303 	and.w	r3, r3, #3
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d00e      	beq.n	80131ec <tcp_output+0x2a0>
 80131ce:	2301      	movs	r3, #1
 80131d0:	e00d      	b.n	80131ee <tcp_output+0x2a2>
 80131d2:	bf00      	nop
 80131d4:	0801c5d8 	.word	0x0801c5d8
 80131d8:	0801cb1c 	.word	0x0801cb1c
 80131dc:	0801c62c 	.word	0x0801c62c
 80131e0:	0801cb34 	.word	0x0801cb34
 80131e4:	20006d14 	.word	0x20006d14
 80131e8:	0801cb5c 	.word	0x0801cb5c
 80131ec:	2300      	movs	r3, #0
 80131ee:	442b      	add	r3, r5
 80131f0:	4423      	add	r3, r4
 80131f2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80131f8:	68bb      	ldr	r3, [r7, #8]
 80131fa:	1ad3      	subs	r3, r2, r3
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	da02      	bge.n	8013206 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	68ba      	ldr	r2, [r7, #8]
 8013204:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013208:	891b      	ldrh	r3, [r3, #8]
 801320a:	461c      	mov	r4, r3
 801320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801320e:	68db      	ldr	r3, [r3, #12]
 8013210:	899b      	ldrh	r3, [r3, #12]
 8013212:	b29b      	uxth	r3, r3
 8013214:	4618      	mov	r0, r3
 8013216:	f7f9 fecb 	bl	800cfb0 <lwip_htons>
 801321a:	4603      	mov	r3, r0
 801321c:	b2db      	uxtb	r3, r3
 801321e:	f003 0303 	and.w	r3, r3, #3
 8013222:	2b00      	cmp	r3, #0
 8013224:	d001      	beq.n	801322a <tcp_output+0x2de>
 8013226:	2301      	movs	r3, #1
 8013228:	e000      	b.n	801322c <tcp_output+0x2e0>
 801322a:	2300      	movs	r3, #0
 801322c:	4423      	add	r3, r4
 801322e:	2b00      	cmp	r3, #0
 8013230:	d049      	beq.n	80132c6 <tcp_output+0x37a>
      seg->next = NULL;
 8013232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013234:	2200      	movs	r2, #0
 8013236:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801323c:	2b00      	cmp	r3, #0
 801323e:	d105      	bne.n	801324c <tcp_output+0x300>
        pcb->unacked = seg;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013244:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8013246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013248:	623b      	str	r3, [r7, #32]
 801324a:	e03f      	b.n	80132cc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801324e:	68db      	ldr	r3, [r3, #12]
 8013250:	685b      	ldr	r3, [r3, #4]
 8013252:	4618      	mov	r0, r3
 8013254:	f7f9 fec1 	bl	800cfda <lwip_htonl>
 8013258:	4604      	mov	r4, r0
 801325a:	6a3b      	ldr	r3, [r7, #32]
 801325c:	68db      	ldr	r3, [r3, #12]
 801325e:	685b      	ldr	r3, [r3, #4]
 8013260:	4618      	mov	r0, r3
 8013262:	f7f9 feba 	bl	800cfda <lwip_htonl>
 8013266:	4603      	mov	r3, r0
 8013268:	1ae3      	subs	r3, r4, r3
 801326a:	2b00      	cmp	r3, #0
 801326c:	da24      	bge.n	80132b8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	3370      	adds	r3, #112	; 0x70
 8013272:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013274:	e002      	b.n	801327c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013276:	69fb      	ldr	r3, [r7, #28]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801327c:	69fb      	ldr	r3, [r7, #28]
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d011      	beq.n	80132a8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013284:	69fb      	ldr	r3, [r7, #28]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	68db      	ldr	r3, [r3, #12]
 801328a:	685b      	ldr	r3, [r3, #4]
 801328c:	4618      	mov	r0, r3
 801328e:	f7f9 fea4 	bl	800cfda <lwip_htonl>
 8013292:	4604      	mov	r4, r0
 8013294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013296:	68db      	ldr	r3, [r3, #12]
 8013298:	685b      	ldr	r3, [r3, #4]
 801329a:	4618      	mov	r0, r3
 801329c:	f7f9 fe9d 	bl	800cfda <lwip_htonl>
 80132a0:	4603      	mov	r3, r0
 80132a2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	dbe6      	blt.n	8013276 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80132a8:	69fb      	ldr	r3, [r7, #28]
 80132aa:	681a      	ldr	r2, [r3, #0]
 80132ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132ae:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80132b0:	69fb      	ldr	r3, [r7, #28]
 80132b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80132b4:	601a      	str	r2, [r3, #0]
 80132b6:	e009      	b.n	80132cc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80132b8:	6a3b      	ldr	r3, [r7, #32]
 80132ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80132bc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80132be:	6a3b      	ldr	r3, [r7, #32]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	623b      	str	r3, [r7, #32]
 80132c4:	e002      	b.n	80132cc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80132c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80132c8:	f7fc fc43 	bl	800fb52 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132d0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80132d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d012      	beq.n	80132fe <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80132d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132da:	68db      	ldr	r3, [r3, #12]
 80132dc:	685b      	ldr	r3, [r3, #4]
 80132de:	4618      	mov	r0, r3
 80132e0:	f7f9 fe7b 	bl	800cfda <lwip_htonl>
 80132e4:	4602      	mov	r2, r0
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80132ea:	1ad3      	subs	r3, r2, r3
 80132ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80132ee:	8912      	ldrh	r2, [r2, #8]
 80132f0:	4413      	add	r3, r2
  while (seg != NULL &&
 80132f2:	69ba      	ldr	r2, [r7, #24]
 80132f4:	429a      	cmp	r2, r3
 80132f6:	f4bf aed9 	bcs.w	80130ac <tcp_output+0x160>
 80132fa:	e000      	b.n	80132fe <tcp_output+0x3b2>
      break;
 80132fc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013302:	2b00      	cmp	r3, #0
 8013304:	d108      	bne.n	8013318 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	2200      	movs	r2, #0
 801330a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801330e:	e004      	b.n	801331a <tcp_output+0x3ce>
    goto output_done;
 8013310:	bf00      	nop
 8013312:	e002      	b.n	801331a <tcp_output+0x3ce>
    goto output_done;
 8013314:	bf00      	nop
 8013316:	e000      	b.n	801331a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013318:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	8b5b      	ldrh	r3, [r3, #26]
 801331e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013322:	b29a      	uxth	r2, r3
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013328:	2300      	movs	r3, #0
}
 801332a:	4618      	mov	r0, r3
 801332c:	3728      	adds	r7, #40	; 0x28
 801332e:	46bd      	mov	sp, r7
 8013330:	bdb0      	pop	{r4, r5, r7, pc}
 8013332:	bf00      	nop

08013334 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013334:	b580      	push	{r7, lr}
 8013336:	b082      	sub	sp, #8
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d106      	bne.n	8013350 <tcp_output_segment_busy+0x1c>
 8013342:	4b09      	ldr	r3, [pc, #36]	; (8013368 <tcp_output_segment_busy+0x34>)
 8013344:	f240 529a 	movw	r2, #1434	; 0x59a
 8013348:	4908      	ldr	r1, [pc, #32]	; (801336c <tcp_output_segment_busy+0x38>)
 801334a:	4809      	ldr	r0, [pc, #36]	; (8013370 <tcp_output_segment_busy+0x3c>)
 801334c:	f006 f87e 	bl	801944c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	685b      	ldr	r3, [r3, #4]
 8013354:	7b9b      	ldrb	r3, [r3, #14]
 8013356:	2b01      	cmp	r3, #1
 8013358:	d001      	beq.n	801335e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801335a:	2301      	movs	r3, #1
 801335c:	e000      	b.n	8013360 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801335e:	2300      	movs	r3, #0
}
 8013360:	4618      	mov	r0, r3
 8013362:	3708      	adds	r7, #8
 8013364:	46bd      	mov	sp, r7
 8013366:	bd80      	pop	{r7, pc}
 8013368:	0801c5d8 	.word	0x0801c5d8
 801336c:	0801cb74 	.word	0x0801cb74
 8013370:	0801c62c 	.word	0x0801c62c

08013374 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013374:	b5b0      	push	{r4, r5, r7, lr}
 8013376:	b08c      	sub	sp, #48	; 0x30
 8013378:	af04      	add	r7, sp, #16
 801337a:	60f8      	str	r0, [r7, #12]
 801337c:	60b9      	str	r1, [r7, #8]
 801337e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d106      	bne.n	8013394 <tcp_output_segment+0x20>
 8013386:	4b63      	ldr	r3, [pc, #396]	; (8013514 <tcp_output_segment+0x1a0>)
 8013388:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801338c:	4962      	ldr	r1, [pc, #392]	; (8013518 <tcp_output_segment+0x1a4>)
 801338e:	4863      	ldr	r0, [pc, #396]	; (801351c <tcp_output_segment+0x1a8>)
 8013390:	f006 f85c 	bl	801944c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013394:	68bb      	ldr	r3, [r7, #8]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d106      	bne.n	80133a8 <tcp_output_segment+0x34>
 801339a:	4b5e      	ldr	r3, [pc, #376]	; (8013514 <tcp_output_segment+0x1a0>)
 801339c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80133a0:	495f      	ldr	r1, [pc, #380]	; (8013520 <tcp_output_segment+0x1ac>)
 80133a2:	485e      	ldr	r0, [pc, #376]	; (801351c <tcp_output_segment+0x1a8>)
 80133a4:	f006 f852 	bl	801944c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d106      	bne.n	80133bc <tcp_output_segment+0x48>
 80133ae:	4b59      	ldr	r3, [pc, #356]	; (8013514 <tcp_output_segment+0x1a0>)
 80133b0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80133b4:	495b      	ldr	r1, [pc, #364]	; (8013524 <tcp_output_segment+0x1b0>)
 80133b6:	4859      	ldr	r0, [pc, #356]	; (801351c <tcp_output_segment+0x1a8>)
 80133b8:	f006 f848 	bl	801944c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80133bc:	68f8      	ldr	r0, [r7, #12]
 80133be:	f7ff ffb9 	bl	8013334 <tcp_output_segment_busy>
 80133c2:	4603      	mov	r3, r0
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d001      	beq.n	80133cc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80133c8:	2300      	movs	r3, #0
 80133ca:	e09f      	b.n	801350c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80133cc:	68bb      	ldr	r3, [r7, #8]
 80133ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	68dc      	ldr	r4, [r3, #12]
 80133d4:	4610      	mov	r0, r2
 80133d6:	f7f9 fe00 	bl	800cfda <lwip_htonl>
 80133da:	4603      	mov	r3, r0
 80133dc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80133de:	68bb      	ldr	r3, [r7, #8]
 80133e0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	68dc      	ldr	r4, [r3, #12]
 80133e6:	4610      	mov	r0, r2
 80133e8:	f7f9 fde2 	bl	800cfb0 <lwip_htons>
 80133ec:	4603      	mov	r3, r0
 80133ee:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80133f0:	68bb      	ldr	r3, [r7, #8]
 80133f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133f4:	68ba      	ldr	r2, [r7, #8]
 80133f6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80133f8:	441a      	add	r2, r3
 80133fa:	68bb      	ldr	r3, [r7, #8]
 80133fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	68db      	ldr	r3, [r3, #12]
 8013402:	3314      	adds	r3, #20
 8013404:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	7a9b      	ldrb	r3, [r3, #10]
 801340a:	f003 0301 	and.w	r3, r3, #1
 801340e:	2b00      	cmp	r3, #0
 8013410:	d015      	beq.n	801343e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013412:	68bb      	ldr	r3, [r7, #8]
 8013414:	3304      	adds	r3, #4
 8013416:	461a      	mov	r2, r3
 8013418:	6879      	ldr	r1, [r7, #4]
 801341a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801341e:	f7fc fe8f 	bl	8010140 <tcp_eff_send_mss_netif>
 8013422:	4603      	mov	r3, r0
 8013424:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013426:	8b7b      	ldrh	r3, [r7, #26]
 8013428:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801342c:	4618      	mov	r0, r3
 801342e:	f7f9 fdd4 	bl	800cfda <lwip_htonl>
 8013432:	4602      	mov	r2, r0
 8013434:	69fb      	ldr	r3, [r7, #28]
 8013436:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013438:	69fb      	ldr	r3, [r7, #28]
 801343a:	3304      	adds	r3, #4
 801343c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801343e:	68bb      	ldr	r3, [r7, #8]
 8013440:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013444:	2b00      	cmp	r3, #0
 8013446:	da02      	bge.n	801344e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013448:	68bb      	ldr	r3, [r7, #8]
 801344a:	2200      	movs	r2, #0
 801344c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801344e:	68bb      	ldr	r3, [r7, #8]
 8013450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013452:	2b00      	cmp	r3, #0
 8013454:	d10c      	bne.n	8013470 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013456:	4b34      	ldr	r3, [pc, #208]	; (8013528 <tcp_output_segment+0x1b4>)
 8013458:	681a      	ldr	r2, [r3, #0]
 801345a:	68bb      	ldr	r3, [r7, #8]
 801345c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	68db      	ldr	r3, [r3, #12]
 8013462:	685b      	ldr	r3, [r3, #4]
 8013464:	4618      	mov	r0, r3
 8013466:	f7f9 fdb8 	bl	800cfda <lwip_htonl>
 801346a:	4602      	mov	r2, r0
 801346c:	68bb      	ldr	r3, [r7, #8]
 801346e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	68da      	ldr	r2, [r3, #12]
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	685b      	ldr	r3, [r3, #4]
 8013478:	685b      	ldr	r3, [r3, #4]
 801347a:	1ad3      	subs	r3, r2, r3
 801347c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	685b      	ldr	r3, [r3, #4]
 8013482:	8959      	ldrh	r1, [r3, #10]
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	685b      	ldr	r3, [r3, #4]
 8013488:	8b3a      	ldrh	r2, [r7, #24]
 801348a:	1a8a      	subs	r2, r1, r2
 801348c:	b292      	uxth	r2, r2
 801348e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	685b      	ldr	r3, [r3, #4]
 8013494:	8919      	ldrh	r1, [r3, #8]
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	685b      	ldr	r3, [r3, #4]
 801349a:	8b3a      	ldrh	r2, [r7, #24]
 801349c:	1a8a      	subs	r2, r1, r2
 801349e:	b292      	uxth	r2, r2
 80134a0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	685b      	ldr	r3, [r3, #4]
 80134a6:	68fa      	ldr	r2, [r7, #12]
 80134a8:	68d2      	ldr	r2, [r2, #12]
 80134aa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	68db      	ldr	r3, [r3, #12]
 80134b0:	2200      	movs	r2, #0
 80134b2:	741a      	strb	r2, [r3, #16]
 80134b4:	2200      	movs	r2, #0
 80134b6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	68db      	ldr	r3, [r3, #12]
 80134bc:	f103 0214 	add.w	r2, r3, #20
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	7a9b      	ldrb	r3, [r3, #10]
 80134c4:	009b      	lsls	r3, r3, #2
 80134c6:	f003 0304 	and.w	r3, r3, #4
 80134ca:	4413      	add	r3, r2
 80134cc:	69fa      	ldr	r2, [r7, #28]
 80134ce:	429a      	cmp	r2, r3
 80134d0:	d006      	beq.n	80134e0 <tcp_output_segment+0x16c>
 80134d2:	4b10      	ldr	r3, [pc, #64]	; (8013514 <tcp_output_segment+0x1a0>)
 80134d4:	f240 621c 	movw	r2, #1564	; 0x61c
 80134d8:	4914      	ldr	r1, [pc, #80]	; (801352c <tcp_output_segment+0x1b8>)
 80134da:	4810      	ldr	r0, [pc, #64]	; (801351c <tcp_output_segment+0x1a8>)
 80134dc:	f005 ffb6 	bl	801944c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	6858      	ldr	r0, [r3, #4]
 80134e4:	68b9      	ldr	r1, [r7, #8]
 80134e6:	68bb      	ldr	r3, [r7, #8]
 80134e8:	1d1c      	adds	r4, r3, #4
 80134ea:	68bb      	ldr	r3, [r7, #8]
 80134ec:	7add      	ldrb	r5, [r3, #11]
 80134ee:	68bb      	ldr	r3, [r7, #8]
 80134f0:	7a9b      	ldrb	r3, [r3, #10]
 80134f2:	687a      	ldr	r2, [r7, #4]
 80134f4:	9202      	str	r2, [sp, #8]
 80134f6:	2206      	movs	r2, #6
 80134f8:	9201      	str	r2, [sp, #4]
 80134fa:	9300      	str	r3, [sp, #0]
 80134fc:	462b      	mov	r3, r5
 80134fe:	4622      	mov	r2, r4
 8013500:	f004 fc68 	bl	8017dd4 <ip4_output_if>
 8013504:	4603      	mov	r3, r0
 8013506:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013508:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801350c:	4618      	mov	r0, r3
 801350e:	3720      	adds	r7, #32
 8013510:	46bd      	mov	sp, r7
 8013512:	bdb0      	pop	{r4, r5, r7, pc}
 8013514:	0801c5d8 	.word	0x0801c5d8
 8013518:	0801cb9c 	.word	0x0801cb9c
 801351c:	0801c62c 	.word	0x0801c62c
 8013520:	0801cbbc 	.word	0x0801cbbc
 8013524:	0801cbdc 	.word	0x0801cbdc
 8013528:	20006d04 	.word	0x20006d04
 801352c:	0801cc00 	.word	0x0801cc00

08013530 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013530:	b5b0      	push	{r4, r5, r7, lr}
 8013532:	b084      	sub	sp, #16
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d106      	bne.n	801354c <tcp_rexmit_rto_prepare+0x1c>
 801353e:	4b31      	ldr	r3, [pc, #196]	; (8013604 <tcp_rexmit_rto_prepare+0xd4>)
 8013540:	f240 6263 	movw	r2, #1635	; 0x663
 8013544:	4930      	ldr	r1, [pc, #192]	; (8013608 <tcp_rexmit_rto_prepare+0xd8>)
 8013546:	4831      	ldr	r0, [pc, #196]	; (801360c <tcp_rexmit_rto_prepare+0xdc>)
 8013548:	f005 ff80 	bl	801944c <iprintf>

  if (pcb->unacked == NULL) {
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013550:	2b00      	cmp	r3, #0
 8013552:	d102      	bne.n	801355a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013554:	f06f 0305 	mvn.w	r3, #5
 8013558:	e050      	b.n	80135fc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801355e:	60fb      	str	r3, [r7, #12]
 8013560:	e00b      	b.n	801357a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013562:	68f8      	ldr	r0, [r7, #12]
 8013564:	f7ff fee6 	bl	8013334 <tcp_output_segment_busy>
 8013568:	4603      	mov	r3, r0
 801356a:	2b00      	cmp	r3, #0
 801356c:	d002      	beq.n	8013574 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801356e:	f06f 0305 	mvn.w	r3, #5
 8013572:	e043      	b.n	80135fc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	60fb      	str	r3, [r7, #12]
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d1ef      	bne.n	8013562 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013582:	68f8      	ldr	r0, [r7, #12]
 8013584:	f7ff fed6 	bl	8013334 <tcp_output_segment_busy>
 8013588:	4603      	mov	r3, r0
 801358a:	2b00      	cmp	r3, #0
 801358c:	d002      	beq.n	8013594 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801358e:	f06f 0305 	mvn.w	r3, #5
 8013592:	e033      	b.n	80135fc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	2200      	movs	r2, #0
 80135a8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	8b5b      	ldrh	r3, [r3, #26]
 80135ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80135b2:	b29a      	uxth	r2, r3
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	68db      	ldr	r3, [r3, #12]
 80135bc:	685b      	ldr	r3, [r3, #4]
 80135be:	4618      	mov	r0, r3
 80135c0:	f7f9 fd0b 	bl	800cfda <lwip_htonl>
 80135c4:	4604      	mov	r4, r0
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	891b      	ldrh	r3, [r3, #8]
 80135ca:	461d      	mov	r5, r3
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	68db      	ldr	r3, [r3, #12]
 80135d0:	899b      	ldrh	r3, [r3, #12]
 80135d2:	b29b      	uxth	r3, r3
 80135d4:	4618      	mov	r0, r3
 80135d6:	f7f9 fceb 	bl	800cfb0 <lwip_htons>
 80135da:	4603      	mov	r3, r0
 80135dc:	b2db      	uxtb	r3, r3
 80135de:	f003 0303 	and.w	r3, r3, #3
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d001      	beq.n	80135ea <tcp_rexmit_rto_prepare+0xba>
 80135e6:	2301      	movs	r3, #1
 80135e8:	e000      	b.n	80135ec <tcp_rexmit_rto_prepare+0xbc>
 80135ea:	2300      	movs	r3, #0
 80135ec:	442b      	add	r3, r5
 80135ee:	18e2      	adds	r2, r4, r3
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	2200      	movs	r2, #0
 80135f8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80135fa:	2300      	movs	r3, #0
}
 80135fc:	4618      	mov	r0, r3
 80135fe:	3710      	adds	r7, #16
 8013600:	46bd      	mov	sp, r7
 8013602:	bdb0      	pop	{r4, r5, r7, pc}
 8013604:	0801c5d8 	.word	0x0801c5d8
 8013608:	0801cc14 	.word	0x0801cc14
 801360c:	0801c62c 	.word	0x0801c62c

08013610 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013610:	b580      	push	{r7, lr}
 8013612:	b082      	sub	sp, #8
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	2b00      	cmp	r3, #0
 801361c:	d106      	bne.n	801362c <tcp_rexmit_rto_commit+0x1c>
 801361e:	4b0d      	ldr	r3, [pc, #52]	; (8013654 <tcp_rexmit_rto_commit+0x44>)
 8013620:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013624:	490c      	ldr	r1, [pc, #48]	; (8013658 <tcp_rexmit_rto_commit+0x48>)
 8013626:	480d      	ldr	r0, [pc, #52]	; (801365c <tcp_rexmit_rto_commit+0x4c>)
 8013628:	f005 ff10 	bl	801944c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013632:	2bff      	cmp	r3, #255	; 0xff
 8013634:	d007      	beq.n	8013646 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801363c:	3301      	adds	r3, #1
 801363e:	b2da      	uxtb	r2, r3
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013646:	6878      	ldr	r0, [r7, #4]
 8013648:	f7ff fc80 	bl	8012f4c <tcp_output>
}
 801364c:	bf00      	nop
 801364e:	3708      	adds	r7, #8
 8013650:	46bd      	mov	sp, r7
 8013652:	bd80      	pop	{r7, pc}
 8013654:	0801c5d8 	.word	0x0801c5d8
 8013658:	0801cc38 	.word	0x0801cc38
 801365c:	0801c62c 	.word	0x0801c62c

08013660 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b082      	sub	sp, #8
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d106      	bne.n	801367c <tcp_rexmit_rto+0x1c>
 801366e:	4b0a      	ldr	r3, [pc, #40]	; (8013698 <tcp_rexmit_rto+0x38>)
 8013670:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013674:	4909      	ldr	r1, [pc, #36]	; (801369c <tcp_rexmit_rto+0x3c>)
 8013676:	480a      	ldr	r0, [pc, #40]	; (80136a0 <tcp_rexmit_rto+0x40>)
 8013678:	f005 fee8 	bl	801944c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801367c:	6878      	ldr	r0, [r7, #4]
 801367e:	f7ff ff57 	bl	8013530 <tcp_rexmit_rto_prepare>
 8013682:	4603      	mov	r3, r0
 8013684:	2b00      	cmp	r3, #0
 8013686:	d102      	bne.n	801368e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013688:	6878      	ldr	r0, [r7, #4]
 801368a:	f7ff ffc1 	bl	8013610 <tcp_rexmit_rto_commit>
  }
}
 801368e:	bf00      	nop
 8013690:	3708      	adds	r7, #8
 8013692:	46bd      	mov	sp, r7
 8013694:	bd80      	pop	{r7, pc}
 8013696:	bf00      	nop
 8013698:	0801c5d8 	.word	0x0801c5d8
 801369c:	0801cc5c 	.word	0x0801cc5c
 80136a0:	0801c62c 	.word	0x0801c62c

080136a4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80136a4:	b590      	push	{r4, r7, lr}
 80136a6:	b085      	sub	sp, #20
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d106      	bne.n	80136c0 <tcp_rexmit+0x1c>
 80136b2:	4b2f      	ldr	r3, [pc, #188]	; (8013770 <tcp_rexmit+0xcc>)
 80136b4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80136b8:	492e      	ldr	r1, [pc, #184]	; (8013774 <tcp_rexmit+0xd0>)
 80136ba:	482f      	ldr	r0, [pc, #188]	; (8013778 <tcp_rexmit+0xd4>)
 80136bc:	f005 fec6 	bl	801944c <iprintf>

  if (pcb->unacked == NULL) {
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d102      	bne.n	80136ce <tcp_rexmit+0x2a>
    return ERR_VAL;
 80136c8:	f06f 0305 	mvn.w	r3, #5
 80136cc:	e04c      	b.n	8013768 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136d2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80136d4:	68b8      	ldr	r0, [r7, #8]
 80136d6:	f7ff fe2d 	bl	8013334 <tcp_output_segment_busy>
 80136da:	4603      	mov	r3, r0
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d002      	beq.n	80136e6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80136e0:	f06f 0305 	mvn.w	r3, #5
 80136e4:	e040      	b.n	8013768 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80136e6:	68bb      	ldr	r3, [r7, #8]
 80136e8:	681a      	ldr	r2, [r3, #0]
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	336c      	adds	r3, #108	; 0x6c
 80136f2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80136f4:	e002      	b.n	80136fc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d011      	beq.n	8013728 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	68db      	ldr	r3, [r3, #12]
 801370a:	685b      	ldr	r3, [r3, #4]
 801370c:	4618      	mov	r0, r3
 801370e:	f7f9 fc64 	bl	800cfda <lwip_htonl>
 8013712:	4604      	mov	r4, r0
 8013714:	68bb      	ldr	r3, [r7, #8]
 8013716:	68db      	ldr	r3, [r3, #12]
 8013718:	685b      	ldr	r3, [r3, #4]
 801371a:	4618      	mov	r0, r3
 801371c:	f7f9 fc5d 	bl	800cfda <lwip_htonl>
 8013720:	4603      	mov	r3, r0
 8013722:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013724:	2b00      	cmp	r3, #0
 8013726:	dbe6      	blt.n	80136f6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	681a      	ldr	r2, [r3, #0]
 801372c:	68bb      	ldr	r3, [r7, #8]
 801372e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	68ba      	ldr	r2, [r7, #8]
 8013734:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013736:	68bb      	ldr	r3, [r7, #8]
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d103      	bne.n	8013746 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	2200      	movs	r2, #0
 8013742:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801374c:	2bff      	cmp	r3, #255	; 0xff
 801374e:	d007      	beq.n	8013760 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013756:	3301      	adds	r3, #1
 8013758:	b2da      	uxtb	r2, r3
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	2200      	movs	r2, #0
 8013764:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013766:	2300      	movs	r3, #0
}
 8013768:	4618      	mov	r0, r3
 801376a:	3714      	adds	r7, #20
 801376c:	46bd      	mov	sp, r7
 801376e:	bd90      	pop	{r4, r7, pc}
 8013770:	0801c5d8 	.word	0x0801c5d8
 8013774:	0801cc78 	.word	0x0801cc78
 8013778:	0801c62c 	.word	0x0801c62c

0801377c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801377c:	b580      	push	{r7, lr}
 801377e:	b082      	sub	sp, #8
 8013780:	af00      	add	r7, sp, #0
 8013782:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d106      	bne.n	8013798 <tcp_rexmit_fast+0x1c>
 801378a:	4b2a      	ldr	r3, [pc, #168]	; (8013834 <tcp_rexmit_fast+0xb8>)
 801378c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013790:	4929      	ldr	r1, [pc, #164]	; (8013838 <tcp_rexmit_fast+0xbc>)
 8013792:	482a      	ldr	r0, [pc, #168]	; (801383c <tcp_rexmit_fast+0xc0>)
 8013794:	f005 fe5a 	bl	801944c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801379c:	2b00      	cmp	r3, #0
 801379e:	d044      	beq.n	801382a <tcp_rexmit_fast+0xae>
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	8b5b      	ldrh	r3, [r3, #26]
 80137a4:	f003 0304 	and.w	r3, r3, #4
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d13e      	bne.n	801382a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80137ac:	6878      	ldr	r0, [r7, #4]
 80137ae:	f7ff ff79 	bl	80136a4 <tcp_rexmit>
 80137b2:	4603      	mov	r3, r0
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d138      	bne.n	801382a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80137c4:	4293      	cmp	r3, r2
 80137c6:	bf28      	it	cs
 80137c8:	4613      	movcs	r3, r2
 80137ca:	b29b      	uxth	r3, r3
 80137cc:	0fda      	lsrs	r2, r3, #31
 80137ce:	4413      	add	r3, r2
 80137d0:	105b      	asrs	r3, r3, #1
 80137d2:	b29a      	uxth	r2, r3
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80137e0:	461a      	mov	r2, r3
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80137e6:	005b      	lsls	r3, r3, #1
 80137e8:	429a      	cmp	r2, r3
 80137ea:	d206      	bcs.n	80137fa <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80137f0:	005b      	lsls	r3, r3, #1
 80137f2:	b29a      	uxth	r2, r3
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013804:	4619      	mov	r1, r3
 8013806:	0049      	lsls	r1, r1, #1
 8013808:	440b      	add	r3, r1
 801380a:	b29b      	uxth	r3, r3
 801380c:	4413      	add	r3, r2
 801380e:	b29a      	uxth	r2, r3
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	8b5b      	ldrh	r3, [r3, #26]
 801381a:	f043 0304 	orr.w	r3, r3, #4
 801381e:	b29a      	uxth	r2, r3
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	2200      	movs	r2, #0
 8013828:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801382a:	bf00      	nop
 801382c:	3708      	adds	r7, #8
 801382e:	46bd      	mov	sp, r7
 8013830:	bd80      	pop	{r7, pc}
 8013832:	bf00      	nop
 8013834:	0801c5d8 	.word	0x0801c5d8
 8013838:	0801cc90 	.word	0x0801cc90
 801383c:	0801c62c 	.word	0x0801c62c

08013840 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013840:	b580      	push	{r7, lr}
 8013842:	b086      	sub	sp, #24
 8013844:	af00      	add	r7, sp, #0
 8013846:	60f8      	str	r0, [r7, #12]
 8013848:	607b      	str	r3, [r7, #4]
 801384a:	460b      	mov	r3, r1
 801384c:	817b      	strh	r3, [r7, #10]
 801384e:	4613      	mov	r3, r2
 8013850:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013852:	897a      	ldrh	r2, [r7, #10]
 8013854:	893b      	ldrh	r3, [r7, #8]
 8013856:	4413      	add	r3, r2
 8013858:	b29b      	uxth	r3, r3
 801385a:	3314      	adds	r3, #20
 801385c:	b29b      	uxth	r3, r3
 801385e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013862:	4619      	mov	r1, r3
 8013864:	2022      	movs	r0, #34	; 0x22
 8013866:	f7fa fb7b 	bl	800df60 <pbuf_alloc>
 801386a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801386c:	697b      	ldr	r3, [r7, #20]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d04d      	beq.n	801390e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013872:	897b      	ldrh	r3, [r7, #10]
 8013874:	3313      	adds	r3, #19
 8013876:	697a      	ldr	r2, [r7, #20]
 8013878:	8952      	ldrh	r2, [r2, #10]
 801387a:	4293      	cmp	r3, r2
 801387c:	db06      	blt.n	801388c <tcp_output_alloc_header_common+0x4c>
 801387e:	4b26      	ldr	r3, [pc, #152]	; (8013918 <tcp_output_alloc_header_common+0xd8>)
 8013880:	f240 7223 	movw	r2, #1827	; 0x723
 8013884:	4925      	ldr	r1, [pc, #148]	; (801391c <tcp_output_alloc_header_common+0xdc>)
 8013886:	4826      	ldr	r0, [pc, #152]	; (8013920 <tcp_output_alloc_header_common+0xe0>)
 8013888:	f005 fde0 	bl	801944c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801388c:	697b      	ldr	r3, [r7, #20]
 801388e:	685b      	ldr	r3, [r3, #4]
 8013890:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013892:	8c3b      	ldrh	r3, [r7, #32]
 8013894:	4618      	mov	r0, r3
 8013896:	f7f9 fb8b 	bl	800cfb0 <lwip_htons>
 801389a:	4603      	mov	r3, r0
 801389c:	461a      	mov	r2, r3
 801389e:	693b      	ldr	r3, [r7, #16]
 80138a0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80138a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80138a4:	4618      	mov	r0, r3
 80138a6:	f7f9 fb83 	bl	800cfb0 <lwip_htons>
 80138aa:	4603      	mov	r3, r0
 80138ac:	461a      	mov	r2, r3
 80138ae:	693b      	ldr	r3, [r7, #16]
 80138b0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80138b2:	693b      	ldr	r3, [r7, #16]
 80138b4:	687a      	ldr	r2, [r7, #4]
 80138b6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80138b8:	68f8      	ldr	r0, [r7, #12]
 80138ba:	f7f9 fb8e 	bl	800cfda <lwip_htonl>
 80138be:	4602      	mov	r2, r0
 80138c0:	693b      	ldr	r3, [r7, #16]
 80138c2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80138c4:	897b      	ldrh	r3, [r7, #10]
 80138c6:	089b      	lsrs	r3, r3, #2
 80138c8:	b29b      	uxth	r3, r3
 80138ca:	3305      	adds	r3, #5
 80138cc:	b29b      	uxth	r3, r3
 80138ce:	031b      	lsls	r3, r3, #12
 80138d0:	b29a      	uxth	r2, r3
 80138d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80138d6:	b29b      	uxth	r3, r3
 80138d8:	4313      	orrs	r3, r2
 80138da:	b29b      	uxth	r3, r3
 80138dc:	4618      	mov	r0, r3
 80138de:	f7f9 fb67 	bl	800cfb0 <lwip_htons>
 80138e2:	4603      	mov	r3, r0
 80138e4:	461a      	mov	r2, r3
 80138e6:	693b      	ldr	r3, [r7, #16]
 80138e8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80138ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80138ec:	4618      	mov	r0, r3
 80138ee:	f7f9 fb5f 	bl	800cfb0 <lwip_htons>
 80138f2:	4603      	mov	r3, r0
 80138f4:	461a      	mov	r2, r3
 80138f6:	693b      	ldr	r3, [r7, #16]
 80138f8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80138fa:	693b      	ldr	r3, [r7, #16]
 80138fc:	2200      	movs	r2, #0
 80138fe:	741a      	strb	r2, [r3, #16]
 8013900:	2200      	movs	r2, #0
 8013902:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013904:	693b      	ldr	r3, [r7, #16]
 8013906:	2200      	movs	r2, #0
 8013908:	749a      	strb	r2, [r3, #18]
 801390a:	2200      	movs	r2, #0
 801390c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801390e:	697b      	ldr	r3, [r7, #20]
}
 8013910:	4618      	mov	r0, r3
 8013912:	3718      	adds	r7, #24
 8013914:	46bd      	mov	sp, r7
 8013916:	bd80      	pop	{r7, pc}
 8013918:	0801c5d8 	.word	0x0801c5d8
 801391c:	0801ccb0 	.word	0x0801ccb0
 8013920:	0801c62c 	.word	0x0801c62c

08013924 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013924:	b5b0      	push	{r4, r5, r7, lr}
 8013926:	b08a      	sub	sp, #40	; 0x28
 8013928:	af04      	add	r7, sp, #16
 801392a:	60f8      	str	r0, [r7, #12]
 801392c:	607b      	str	r3, [r7, #4]
 801392e:	460b      	mov	r3, r1
 8013930:	817b      	strh	r3, [r7, #10]
 8013932:	4613      	mov	r3, r2
 8013934:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	2b00      	cmp	r3, #0
 801393a:	d106      	bne.n	801394a <tcp_output_alloc_header+0x26>
 801393c:	4b15      	ldr	r3, [pc, #84]	; (8013994 <tcp_output_alloc_header+0x70>)
 801393e:	f240 7242 	movw	r2, #1858	; 0x742
 8013942:	4915      	ldr	r1, [pc, #84]	; (8013998 <tcp_output_alloc_header+0x74>)
 8013944:	4815      	ldr	r0, [pc, #84]	; (801399c <tcp_output_alloc_header+0x78>)
 8013946:	f005 fd81 	bl	801944c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	8adb      	ldrh	r3, [r3, #22]
 8013952:	68fa      	ldr	r2, [r7, #12]
 8013954:	8b12      	ldrh	r2, [r2, #24]
 8013956:	68f9      	ldr	r1, [r7, #12]
 8013958:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801395a:	893d      	ldrh	r5, [r7, #8]
 801395c:	897c      	ldrh	r4, [r7, #10]
 801395e:	9103      	str	r1, [sp, #12]
 8013960:	2110      	movs	r1, #16
 8013962:	9102      	str	r1, [sp, #8]
 8013964:	9201      	str	r2, [sp, #4]
 8013966:	9300      	str	r3, [sp, #0]
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	462a      	mov	r2, r5
 801396c:	4621      	mov	r1, r4
 801396e:	f7ff ff67 	bl	8013840 <tcp_output_alloc_header_common>
 8013972:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013974:	697b      	ldr	r3, [r7, #20]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d006      	beq.n	8013988 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801397e:	68fa      	ldr	r2, [r7, #12]
 8013980:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013982:	441a      	add	r2, r3
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013988:	697b      	ldr	r3, [r7, #20]
}
 801398a:	4618      	mov	r0, r3
 801398c:	3718      	adds	r7, #24
 801398e:	46bd      	mov	sp, r7
 8013990:	bdb0      	pop	{r4, r5, r7, pc}
 8013992:	bf00      	nop
 8013994:	0801c5d8 	.word	0x0801c5d8
 8013998:	0801cce0 	.word	0x0801cce0
 801399c:	0801c62c 	.word	0x0801c62c

080139a0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80139a0:	b580      	push	{r7, lr}
 80139a2:	b088      	sub	sp, #32
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	60f8      	str	r0, [r7, #12]
 80139a8:	60b9      	str	r1, [r7, #8]
 80139aa:	4611      	mov	r1, r2
 80139ac:	461a      	mov	r2, r3
 80139ae:	460b      	mov	r3, r1
 80139b0:	71fb      	strb	r3, [r7, #7]
 80139b2:	4613      	mov	r3, r2
 80139b4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80139b6:	2300      	movs	r3, #0
 80139b8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80139ba:	68bb      	ldr	r3, [r7, #8]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d106      	bne.n	80139ce <tcp_output_fill_options+0x2e>
 80139c0:	4b13      	ldr	r3, [pc, #76]	; (8013a10 <tcp_output_fill_options+0x70>)
 80139c2:	f240 7256 	movw	r2, #1878	; 0x756
 80139c6:	4913      	ldr	r1, [pc, #76]	; (8013a14 <tcp_output_fill_options+0x74>)
 80139c8:	4813      	ldr	r0, [pc, #76]	; (8013a18 <tcp_output_fill_options+0x78>)
 80139ca:	f005 fd3f 	bl	801944c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80139ce:	68bb      	ldr	r3, [r7, #8]
 80139d0:	685b      	ldr	r3, [r3, #4]
 80139d2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80139d4:	69bb      	ldr	r3, [r7, #24]
 80139d6:	3314      	adds	r3, #20
 80139d8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80139da:	69bb      	ldr	r3, [r7, #24]
 80139dc:	f103 0214 	add.w	r2, r3, #20
 80139e0:	8bfb      	ldrh	r3, [r7, #30]
 80139e2:	009b      	lsls	r3, r3, #2
 80139e4:	4619      	mov	r1, r3
 80139e6:	79fb      	ldrb	r3, [r7, #7]
 80139e8:	009b      	lsls	r3, r3, #2
 80139ea:	f003 0304 	and.w	r3, r3, #4
 80139ee:	440b      	add	r3, r1
 80139f0:	4413      	add	r3, r2
 80139f2:	697a      	ldr	r2, [r7, #20]
 80139f4:	429a      	cmp	r2, r3
 80139f6:	d006      	beq.n	8013a06 <tcp_output_fill_options+0x66>
 80139f8:	4b05      	ldr	r3, [pc, #20]	; (8013a10 <tcp_output_fill_options+0x70>)
 80139fa:	f240 7275 	movw	r2, #1909	; 0x775
 80139fe:	4907      	ldr	r1, [pc, #28]	; (8013a1c <tcp_output_fill_options+0x7c>)
 8013a00:	4805      	ldr	r0, [pc, #20]	; (8013a18 <tcp_output_fill_options+0x78>)
 8013a02:	f005 fd23 	bl	801944c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013a06:	bf00      	nop
 8013a08:	3720      	adds	r7, #32
 8013a0a:	46bd      	mov	sp, r7
 8013a0c:	bd80      	pop	{r7, pc}
 8013a0e:	bf00      	nop
 8013a10:	0801c5d8 	.word	0x0801c5d8
 8013a14:	0801cd08 	.word	0x0801cd08
 8013a18:	0801c62c 	.word	0x0801c62c
 8013a1c:	0801cc00 	.word	0x0801cc00

08013a20 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b08a      	sub	sp, #40	; 0x28
 8013a24:	af04      	add	r7, sp, #16
 8013a26:	60f8      	str	r0, [r7, #12]
 8013a28:	60b9      	str	r1, [r7, #8]
 8013a2a:	607a      	str	r2, [r7, #4]
 8013a2c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013a2e:	68bb      	ldr	r3, [r7, #8]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d106      	bne.n	8013a42 <tcp_output_control_segment+0x22>
 8013a34:	4b1c      	ldr	r3, [pc, #112]	; (8013aa8 <tcp_output_control_segment+0x88>)
 8013a36:	f240 7287 	movw	r2, #1927	; 0x787
 8013a3a:	491c      	ldr	r1, [pc, #112]	; (8013aac <tcp_output_control_segment+0x8c>)
 8013a3c:	481c      	ldr	r0, [pc, #112]	; (8013ab0 <tcp_output_control_segment+0x90>)
 8013a3e:	f005 fd05 	bl	801944c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013a42:	683a      	ldr	r2, [r7, #0]
 8013a44:	6879      	ldr	r1, [r7, #4]
 8013a46:	68f8      	ldr	r0, [r7, #12]
 8013a48:	f7fe ff40 	bl	80128cc <tcp_route>
 8013a4c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013a4e:	693b      	ldr	r3, [r7, #16]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d102      	bne.n	8013a5a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013a54:	23fc      	movs	r3, #252	; 0xfc
 8013a56:	75fb      	strb	r3, [r7, #23]
 8013a58:	e01c      	b.n	8013a94 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d006      	beq.n	8013a6e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	7adb      	ldrb	r3, [r3, #11]
 8013a64:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	7a9b      	ldrb	r3, [r3, #10]
 8013a6a:	757b      	strb	r3, [r7, #21]
 8013a6c:	e003      	b.n	8013a76 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013a6e:	23ff      	movs	r3, #255	; 0xff
 8013a70:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013a72:	2300      	movs	r3, #0
 8013a74:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013a76:	7dba      	ldrb	r2, [r7, #22]
 8013a78:	693b      	ldr	r3, [r7, #16]
 8013a7a:	9302      	str	r3, [sp, #8]
 8013a7c:	2306      	movs	r3, #6
 8013a7e:	9301      	str	r3, [sp, #4]
 8013a80:	7d7b      	ldrb	r3, [r7, #21]
 8013a82:	9300      	str	r3, [sp, #0]
 8013a84:	4613      	mov	r3, r2
 8013a86:	683a      	ldr	r2, [r7, #0]
 8013a88:	6879      	ldr	r1, [r7, #4]
 8013a8a:	68b8      	ldr	r0, [r7, #8]
 8013a8c:	f004 f9a2 	bl	8017dd4 <ip4_output_if>
 8013a90:	4603      	mov	r3, r0
 8013a92:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013a94:	68b8      	ldr	r0, [r7, #8]
 8013a96:	f7fa fd47 	bl	800e528 <pbuf_free>
  return err;
 8013a9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	3718      	adds	r7, #24
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	bd80      	pop	{r7, pc}
 8013aa6:	bf00      	nop
 8013aa8:	0801c5d8 	.word	0x0801c5d8
 8013aac:	0801cd30 	.word	0x0801cd30
 8013ab0:	0801c62c 	.word	0x0801c62c

08013ab4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013ab4:	b590      	push	{r4, r7, lr}
 8013ab6:	b08b      	sub	sp, #44	; 0x2c
 8013ab8:	af04      	add	r7, sp, #16
 8013aba:	60f8      	str	r0, [r7, #12]
 8013abc:	60b9      	str	r1, [r7, #8]
 8013abe:	607a      	str	r2, [r7, #4]
 8013ac0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013ac2:	683b      	ldr	r3, [r7, #0]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d106      	bne.n	8013ad6 <tcp_rst+0x22>
 8013ac8:	4b1f      	ldr	r3, [pc, #124]	; (8013b48 <tcp_rst+0x94>)
 8013aca:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013ace:	491f      	ldr	r1, [pc, #124]	; (8013b4c <tcp_rst+0x98>)
 8013ad0:	481f      	ldr	r0, [pc, #124]	; (8013b50 <tcp_rst+0x9c>)
 8013ad2:	f005 fcbb 	bl	801944c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d106      	bne.n	8013aea <tcp_rst+0x36>
 8013adc:	4b1a      	ldr	r3, [pc, #104]	; (8013b48 <tcp_rst+0x94>)
 8013ade:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013ae2:	491c      	ldr	r1, [pc, #112]	; (8013b54 <tcp_rst+0xa0>)
 8013ae4:	481a      	ldr	r0, [pc, #104]	; (8013b50 <tcp_rst+0x9c>)
 8013ae6:	f005 fcb1 	bl	801944c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013aea:	2300      	movs	r3, #0
 8013aec:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013aee:	f246 0308 	movw	r3, #24584	; 0x6008
 8013af2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013af4:	7dfb      	ldrb	r3, [r7, #23]
 8013af6:	b29c      	uxth	r4, r3
 8013af8:	68b8      	ldr	r0, [r7, #8]
 8013afa:	f7f9 fa6e 	bl	800cfda <lwip_htonl>
 8013afe:	4602      	mov	r2, r0
 8013b00:	8abb      	ldrh	r3, [r7, #20]
 8013b02:	9303      	str	r3, [sp, #12]
 8013b04:	2314      	movs	r3, #20
 8013b06:	9302      	str	r3, [sp, #8]
 8013b08:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013b0a:	9301      	str	r3, [sp, #4]
 8013b0c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013b0e:	9300      	str	r3, [sp, #0]
 8013b10:	4613      	mov	r3, r2
 8013b12:	2200      	movs	r2, #0
 8013b14:	4621      	mov	r1, r4
 8013b16:	6878      	ldr	r0, [r7, #4]
 8013b18:	f7ff fe92 	bl	8013840 <tcp_output_alloc_header_common>
 8013b1c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013b1e:	693b      	ldr	r3, [r7, #16]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d00c      	beq.n	8013b3e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013b24:	7dfb      	ldrb	r3, [r7, #23]
 8013b26:	2200      	movs	r2, #0
 8013b28:	6939      	ldr	r1, [r7, #16]
 8013b2a:	68f8      	ldr	r0, [r7, #12]
 8013b2c:	f7ff ff38 	bl	80139a0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b32:	683a      	ldr	r2, [r7, #0]
 8013b34:	6939      	ldr	r1, [r7, #16]
 8013b36:	68f8      	ldr	r0, [r7, #12]
 8013b38:	f7ff ff72 	bl	8013a20 <tcp_output_control_segment>
 8013b3c:	e000      	b.n	8013b40 <tcp_rst+0x8c>
    return;
 8013b3e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013b40:	371c      	adds	r7, #28
 8013b42:	46bd      	mov	sp, r7
 8013b44:	bd90      	pop	{r4, r7, pc}
 8013b46:	bf00      	nop
 8013b48:	0801c5d8 	.word	0x0801c5d8
 8013b4c:	0801cd5c 	.word	0x0801cd5c
 8013b50:	0801c62c 	.word	0x0801c62c
 8013b54:	0801cd78 	.word	0x0801cd78

08013b58 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013b58:	b590      	push	{r4, r7, lr}
 8013b5a:	b087      	sub	sp, #28
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013b60:	2300      	movs	r3, #0
 8013b62:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013b64:	2300      	movs	r3, #0
 8013b66:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d106      	bne.n	8013b7c <tcp_send_empty_ack+0x24>
 8013b6e:	4b28      	ldr	r3, [pc, #160]	; (8013c10 <tcp_send_empty_ack+0xb8>)
 8013b70:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013b74:	4927      	ldr	r1, [pc, #156]	; (8013c14 <tcp_send_empty_ack+0xbc>)
 8013b76:	4828      	ldr	r0, [pc, #160]	; (8013c18 <tcp_send_empty_ack+0xc0>)
 8013b78:	f005 fc68 	bl	801944c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013b7c:	7dfb      	ldrb	r3, [r7, #23]
 8013b7e:	009b      	lsls	r3, r3, #2
 8013b80:	b2db      	uxtb	r3, r3
 8013b82:	f003 0304 	and.w	r3, r3, #4
 8013b86:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013b88:	7d7b      	ldrb	r3, [r7, #21]
 8013b8a:	b29c      	uxth	r4, r3
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013b90:	4618      	mov	r0, r3
 8013b92:	f7f9 fa22 	bl	800cfda <lwip_htonl>
 8013b96:	4603      	mov	r3, r0
 8013b98:	2200      	movs	r2, #0
 8013b9a:	4621      	mov	r1, r4
 8013b9c:	6878      	ldr	r0, [r7, #4]
 8013b9e:	f7ff fec1 	bl	8013924 <tcp_output_alloc_header>
 8013ba2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013ba4:	693b      	ldr	r3, [r7, #16]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d109      	bne.n	8013bbe <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	8b5b      	ldrh	r3, [r3, #26]
 8013bae:	f043 0303 	orr.w	r3, r3, #3
 8013bb2:	b29a      	uxth	r2, r3
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013bb8:	f06f 0301 	mvn.w	r3, #1
 8013bbc:	e023      	b.n	8013c06 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013bbe:	7dbb      	ldrb	r3, [r7, #22]
 8013bc0:	7dfa      	ldrb	r2, [r7, #23]
 8013bc2:	6939      	ldr	r1, [r7, #16]
 8013bc4:	6878      	ldr	r0, [r7, #4]
 8013bc6:	f7ff feeb 	bl	80139a0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013bca:	687a      	ldr	r2, [r7, #4]
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	3304      	adds	r3, #4
 8013bd0:	6939      	ldr	r1, [r7, #16]
 8013bd2:	6878      	ldr	r0, [r7, #4]
 8013bd4:	f7ff ff24 	bl	8013a20 <tcp_output_control_segment>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013bdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d007      	beq.n	8013bf4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	8b5b      	ldrh	r3, [r3, #26]
 8013be8:	f043 0303 	orr.w	r3, r3, #3
 8013bec:	b29a      	uxth	r2, r3
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	835a      	strh	r2, [r3, #26]
 8013bf2:	e006      	b.n	8013c02 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	8b5b      	ldrh	r3, [r3, #26]
 8013bf8:	f023 0303 	bic.w	r3, r3, #3
 8013bfc:	b29a      	uxth	r2, r3
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013c06:	4618      	mov	r0, r3
 8013c08:	371c      	adds	r7, #28
 8013c0a:	46bd      	mov	sp, r7
 8013c0c:	bd90      	pop	{r4, r7, pc}
 8013c0e:	bf00      	nop
 8013c10:	0801c5d8 	.word	0x0801c5d8
 8013c14:	0801cd94 	.word	0x0801cd94
 8013c18:	0801c62c 	.word	0x0801c62c

08013c1c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013c1c:	b590      	push	{r4, r7, lr}
 8013c1e:	b087      	sub	sp, #28
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013c24:	2300      	movs	r3, #0
 8013c26:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d106      	bne.n	8013c3c <tcp_keepalive+0x20>
 8013c2e:	4b18      	ldr	r3, [pc, #96]	; (8013c90 <tcp_keepalive+0x74>)
 8013c30:	f640 0224 	movw	r2, #2084	; 0x824
 8013c34:	4917      	ldr	r1, [pc, #92]	; (8013c94 <tcp_keepalive+0x78>)
 8013c36:	4818      	ldr	r0, [pc, #96]	; (8013c98 <tcp_keepalive+0x7c>)
 8013c38:	f005 fc08 	bl	801944c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013c3c:	7dfb      	ldrb	r3, [r7, #23]
 8013c3e:	b29c      	uxth	r4, r3
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c44:	3b01      	subs	r3, #1
 8013c46:	4618      	mov	r0, r3
 8013c48:	f7f9 f9c7 	bl	800cfda <lwip_htonl>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	2200      	movs	r2, #0
 8013c50:	4621      	mov	r1, r4
 8013c52:	6878      	ldr	r0, [r7, #4]
 8013c54:	f7ff fe66 	bl	8013924 <tcp_output_alloc_header>
 8013c58:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013c5a:	693b      	ldr	r3, [r7, #16]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d102      	bne.n	8013c66 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013c60:	f04f 33ff 	mov.w	r3, #4294967295
 8013c64:	e010      	b.n	8013c88 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013c66:	7dfb      	ldrb	r3, [r7, #23]
 8013c68:	2200      	movs	r2, #0
 8013c6a:	6939      	ldr	r1, [r7, #16]
 8013c6c:	6878      	ldr	r0, [r7, #4]
 8013c6e:	f7ff fe97 	bl	80139a0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013c72:	687a      	ldr	r2, [r7, #4]
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	3304      	adds	r3, #4
 8013c78:	6939      	ldr	r1, [r7, #16]
 8013c7a:	6878      	ldr	r0, [r7, #4]
 8013c7c:	f7ff fed0 	bl	8013a20 <tcp_output_control_segment>
 8013c80:	4603      	mov	r3, r0
 8013c82:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013c88:	4618      	mov	r0, r3
 8013c8a:	371c      	adds	r7, #28
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	bd90      	pop	{r4, r7, pc}
 8013c90:	0801c5d8 	.word	0x0801c5d8
 8013c94:	0801cdb4 	.word	0x0801cdb4
 8013c98:	0801c62c 	.word	0x0801c62c

08013c9c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013c9c:	b590      	push	{r4, r7, lr}
 8013c9e:	b08b      	sub	sp, #44	; 0x2c
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013ca4:	2300      	movs	r3, #0
 8013ca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d106      	bne.n	8013cbe <tcp_zero_window_probe+0x22>
 8013cb0:	4b4c      	ldr	r3, [pc, #304]	; (8013de4 <tcp_zero_window_probe+0x148>)
 8013cb2:	f640 024f 	movw	r2, #2127	; 0x84f
 8013cb6:	494c      	ldr	r1, [pc, #304]	; (8013de8 <tcp_zero_window_probe+0x14c>)
 8013cb8:	484c      	ldr	r0, [pc, #304]	; (8013dec <tcp_zero_window_probe+0x150>)
 8013cba:	f005 fbc7 	bl	801944c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013cc2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013cc4:	6a3b      	ldr	r3, [r7, #32]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d101      	bne.n	8013cce <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013cca:	2300      	movs	r3, #0
 8013ccc:	e086      	b.n	8013ddc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013cd4:	2bff      	cmp	r3, #255	; 0xff
 8013cd6:	d007      	beq.n	8013ce8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013cde:	3301      	adds	r3, #1
 8013ce0:	b2da      	uxtb	r2, r3
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013ce8:	6a3b      	ldr	r3, [r7, #32]
 8013cea:	68db      	ldr	r3, [r3, #12]
 8013cec:	899b      	ldrh	r3, [r3, #12]
 8013cee:	b29b      	uxth	r3, r3
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	f7f9 f95d 	bl	800cfb0 <lwip_htons>
 8013cf6:	4603      	mov	r3, r0
 8013cf8:	b2db      	uxtb	r3, r3
 8013cfa:	f003 0301 	and.w	r3, r3, #1
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d005      	beq.n	8013d0e <tcp_zero_window_probe+0x72>
 8013d02:	6a3b      	ldr	r3, [r7, #32]
 8013d04:	891b      	ldrh	r3, [r3, #8]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d101      	bne.n	8013d0e <tcp_zero_window_probe+0x72>
 8013d0a:	2301      	movs	r3, #1
 8013d0c:	e000      	b.n	8013d10 <tcp_zero_window_probe+0x74>
 8013d0e:	2300      	movs	r3, #0
 8013d10:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013d12:	7ffb      	ldrb	r3, [r7, #31]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	bf0c      	ite	eq
 8013d18:	2301      	moveq	r3, #1
 8013d1a:	2300      	movne	r3, #0
 8013d1c:	b2db      	uxtb	r3, r3
 8013d1e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013d20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d24:	b299      	uxth	r1, r3
 8013d26:	6a3b      	ldr	r3, [r7, #32]
 8013d28:	68db      	ldr	r3, [r3, #12]
 8013d2a:	685b      	ldr	r3, [r3, #4]
 8013d2c:	8bba      	ldrh	r2, [r7, #28]
 8013d2e:	6878      	ldr	r0, [r7, #4]
 8013d30:	f7ff fdf8 	bl	8013924 <tcp_output_alloc_header>
 8013d34:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013d36:	69bb      	ldr	r3, [r7, #24]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d102      	bne.n	8013d42 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8013d40:	e04c      	b.n	8013ddc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013d42:	69bb      	ldr	r3, [r7, #24]
 8013d44:	685b      	ldr	r3, [r3, #4]
 8013d46:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013d48:	7ffb      	ldrb	r3, [r7, #31]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d011      	beq.n	8013d72 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013d4e:	697b      	ldr	r3, [r7, #20]
 8013d50:	899b      	ldrh	r3, [r3, #12]
 8013d52:	b29b      	uxth	r3, r3
 8013d54:	b21b      	sxth	r3, r3
 8013d56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013d5a:	b21c      	sxth	r4, r3
 8013d5c:	2011      	movs	r0, #17
 8013d5e:	f7f9 f927 	bl	800cfb0 <lwip_htons>
 8013d62:	4603      	mov	r3, r0
 8013d64:	b21b      	sxth	r3, r3
 8013d66:	4323      	orrs	r3, r4
 8013d68:	b21b      	sxth	r3, r3
 8013d6a:	b29a      	uxth	r2, r3
 8013d6c:	697b      	ldr	r3, [r7, #20]
 8013d6e:	819a      	strh	r2, [r3, #12]
 8013d70:	e010      	b.n	8013d94 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013d72:	69bb      	ldr	r3, [r7, #24]
 8013d74:	685b      	ldr	r3, [r3, #4]
 8013d76:	3314      	adds	r3, #20
 8013d78:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013d7a:	6a3b      	ldr	r3, [r7, #32]
 8013d7c:	6858      	ldr	r0, [r3, #4]
 8013d7e:	6a3b      	ldr	r3, [r7, #32]
 8013d80:	685b      	ldr	r3, [r3, #4]
 8013d82:	891a      	ldrh	r2, [r3, #8]
 8013d84:	6a3b      	ldr	r3, [r7, #32]
 8013d86:	891b      	ldrh	r3, [r3, #8]
 8013d88:	1ad3      	subs	r3, r2, r3
 8013d8a:	b29b      	uxth	r3, r3
 8013d8c:	2201      	movs	r2, #1
 8013d8e:	6939      	ldr	r1, [r7, #16]
 8013d90:	f7fa fdc4 	bl	800e91c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013d94:	6a3b      	ldr	r3, [r7, #32]
 8013d96:	68db      	ldr	r3, [r3, #12]
 8013d98:	685b      	ldr	r3, [r3, #4]
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	f7f9 f91d 	bl	800cfda <lwip_htonl>
 8013da0:	4603      	mov	r3, r0
 8013da2:	3301      	adds	r3, #1
 8013da4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	1ad3      	subs	r3, r2, r3
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	da02      	bge.n	8013db8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	68fa      	ldr	r2, [r7, #12]
 8013db6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013db8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013dbc:	2200      	movs	r2, #0
 8013dbe:	69b9      	ldr	r1, [r7, #24]
 8013dc0:	6878      	ldr	r0, [r7, #4]
 8013dc2:	f7ff fded 	bl	80139a0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013dc6:	687a      	ldr	r2, [r7, #4]
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	3304      	adds	r3, #4
 8013dcc:	69b9      	ldr	r1, [r7, #24]
 8013dce:	6878      	ldr	r0, [r7, #4]
 8013dd0:	f7ff fe26 	bl	8013a20 <tcp_output_control_segment>
 8013dd4:	4603      	mov	r3, r0
 8013dd6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013dd8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013ddc:	4618      	mov	r0, r3
 8013dde:	372c      	adds	r7, #44	; 0x2c
 8013de0:	46bd      	mov	sp, r7
 8013de2:	bd90      	pop	{r4, r7, pc}
 8013de4:	0801c5d8 	.word	0x0801c5d8
 8013de8:	0801cdd0 	.word	0x0801cdd0
 8013dec:	0801c62c 	.word	0x0801c62c

08013df0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013df0:	b580      	push	{r7, lr}
 8013df2:	b082      	sub	sp, #8
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013df8:	f7fa ff10 	bl	800ec1c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013dfc:	4b0a      	ldr	r3, [pc, #40]	; (8013e28 <tcpip_tcp_timer+0x38>)
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d103      	bne.n	8013e0c <tcpip_tcp_timer+0x1c>
 8013e04:	4b09      	ldr	r3, [pc, #36]	; (8013e2c <tcpip_tcp_timer+0x3c>)
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d005      	beq.n	8013e18 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013e0c:	2200      	movs	r2, #0
 8013e0e:	4908      	ldr	r1, [pc, #32]	; (8013e30 <tcpip_tcp_timer+0x40>)
 8013e10:	20fa      	movs	r0, #250	; 0xfa
 8013e12:	f000 f8f3 	bl	8013ffc <sys_timeout>
 8013e16:	e003      	b.n	8013e20 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013e18:	4b06      	ldr	r3, [pc, #24]	; (8013e34 <tcpip_tcp_timer+0x44>)
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	601a      	str	r2, [r3, #0]
  }
}
 8013e1e:	bf00      	nop
 8013e20:	bf00      	nop
 8013e22:	3708      	adds	r7, #8
 8013e24:	46bd      	mov	sp, r7
 8013e26:	bd80      	pop	{r7, pc}
 8013e28:	20006d00 	.word	0x20006d00
 8013e2c:	20006d10 	.word	0x20006d10
 8013e30:	08013df1 	.word	0x08013df1
 8013e34:	2000056c 	.word	0x2000056c

08013e38 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013e3c:	4b0a      	ldr	r3, [pc, #40]	; (8013e68 <tcp_timer_needed+0x30>)
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d10f      	bne.n	8013e64 <tcp_timer_needed+0x2c>
 8013e44:	4b09      	ldr	r3, [pc, #36]	; (8013e6c <tcp_timer_needed+0x34>)
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d103      	bne.n	8013e54 <tcp_timer_needed+0x1c>
 8013e4c:	4b08      	ldr	r3, [pc, #32]	; (8013e70 <tcp_timer_needed+0x38>)
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d007      	beq.n	8013e64 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013e54:	4b04      	ldr	r3, [pc, #16]	; (8013e68 <tcp_timer_needed+0x30>)
 8013e56:	2201      	movs	r2, #1
 8013e58:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013e5a:	2200      	movs	r2, #0
 8013e5c:	4905      	ldr	r1, [pc, #20]	; (8013e74 <tcp_timer_needed+0x3c>)
 8013e5e:	20fa      	movs	r0, #250	; 0xfa
 8013e60:	f000 f8cc 	bl	8013ffc <sys_timeout>
  }
}
 8013e64:	bf00      	nop
 8013e66:	bd80      	pop	{r7, pc}
 8013e68:	2000056c 	.word	0x2000056c
 8013e6c:	20006d00 	.word	0x20006d00
 8013e70:	20006d10 	.word	0x20006d10
 8013e74:	08013df1 	.word	0x08013df1

08013e78 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b086      	sub	sp, #24
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	60f8      	str	r0, [r7, #12]
 8013e80:	60b9      	str	r1, [r7, #8]
 8013e82:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013e84:	2006      	movs	r0, #6
 8013e86:	f7f9 fce9 	bl	800d85c <memp_malloc>
 8013e8a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013e8c:	693b      	ldr	r3, [r7, #16]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d109      	bne.n	8013ea6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013e92:	693b      	ldr	r3, [r7, #16]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d151      	bne.n	8013f3c <sys_timeout_abs+0xc4>
 8013e98:	4b2a      	ldr	r3, [pc, #168]	; (8013f44 <sys_timeout_abs+0xcc>)
 8013e9a:	22be      	movs	r2, #190	; 0xbe
 8013e9c:	492a      	ldr	r1, [pc, #168]	; (8013f48 <sys_timeout_abs+0xd0>)
 8013e9e:	482b      	ldr	r0, [pc, #172]	; (8013f4c <sys_timeout_abs+0xd4>)
 8013ea0:	f005 fad4 	bl	801944c <iprintf>
    return;
 8013ea4:	e04a      	b.n	8013f3c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013ea6:	693b      	ldr	r3, [r7, #16]
 8013ea8:	2200      	movs	r2, #0
 8013eaa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013eac:	693b      	ldr	r3, [r7, #16]
 8013eae:	68ba      	ldr	r2, [r7, #8]
 8013eb0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013eb2:	693b      	ldr	r3, [r7, #16]
 8013eb4:	687a      	ldr	r2, [r7, #4]
 8013eb6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013eb8:	693b      	ldr	r3, [r7, #16]
 8013eba:	68fa      	ldr	r2, [r7, #12]
 8013ebc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013ebe:	4b24      	ldr	r3, [pc, #144]	; (8013f50 <sys_timeout_abs+0xd8>)
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d103      	bne.n	8013ece <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013ec6:	4a22      	ldr	r2, [pc, #136]	; (8013f50 <sys_timeout_abs+0xd8>)
 8013ec8:	693b      	ldr	r3, [r7, #16]
 8013eca:	6013      	str	r3, [r2, #0]
    return;
 8013ecc:	e037      	b.n	8013f3e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013ece:	693b      	ldr	r3, [r7, #16]
 8013ed0:	685a      	ldr	r2, [r3, #4]
 8013ed2:	4b1f      	ldr	r3, [pc, #124]	; (8013f50 <sys_timeout_abs+0xd8>)
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	685b      	ldr	r3, [r3, #4]
 8013ed8:	1ad3      	subs	r3, r2, r3
 8013eda:	0fdb      	lsrs	r3, r3, #31
 8013edc:	f003 0301 	and.w	r3, r3, #1
 8013ee0:	b2db      	uxtb	r3, r3
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d007      	beq.n	8013ef6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013ee6:	4b1a      	ldr	r3, [pc, #104]	; (8013f50 <sys_timeout_abs+0xd8>)
 8013ee8:	681a      	ldr	r2, [r3, #0]
 8013eea:	693b      	ldr	r3, [r7, #16]
 8013eec:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013eee:	4a18      	ldr	r2, [pc, #96]	; (8013f50 <sys_timeout_abs+0xd8>)
 8013ef0:	693b      	ldr	r3, [r7, #16]
 8013ef2:	6013      	str	r3, [r2, #0]
 8013ef4:	e023      	b.n	8013f3e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013ef6:	4b16      	ldr	r3, [pc, #88]	; (8013f50 <sys_timeout_abs+0xd8>)
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	617b      	str	r3, [r7, #20]
 8013efc:	e01a      	b.n	8013f34 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013efe:	697b      	ldr	r3, [r7, #20]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d00b      	beq.n	8013f1e <sys_timeout_abs+0xa6>
 8013f06:	693b      	ldr	r3, [r7, #16]
 8013f08:	685a      	ldr	r2, [r3, #4]
 8013f0a:	697b      	ldr	r3, [r7, #20]
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	685b      	ldr	r3, [r3, #4]
 8013f10:	1ad3      	subs	r3, r2, r3
 8013f12:	0fdb      	lsrs	r3, r3, #31
 8013f14:	f003 0301 	and.w	r3, r3, #1
 8013f18:	b2db      	uxtb	r3, r3
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d007      	beq.n	8013f2e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013f1e:	697b      	ldr	r3, [r7, #20]
 8013f20:	681a      	ldr	r2, [r3, #0]
 8013f22:	693b      	ldr	r3, [r7, #16]
 8013f24:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013f26:	697b      	ldr	r3, [r7, #20]
 8013f28:	693a      	ldr	r2, [r7, #16]
 8013f2a:	601a      	str	r2, [r3, #0]
        break;
 8013f2c:	e007      	b.n	8013f3e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013f2e:	697b      	ldr	r3, [r7, #20]
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	617b      	str	r3, [r7, #20]
 8013f34:	697b      	ldr	r3, [r7, #20]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d1e1      	bne.n	8013efe <sys_timeout_abs+0x86>
 8013f3a:	e000      	b.n	8013f3e <sys_timeout_abs+0xc6>
    return;
 8013f3c:	bf00      	nop
      }
    }
  }
}
 8013f3e:	3718      	adds	r7, #24
 8013f40:	46bd      	mov	sp, r7
 8013f42:	bd80      	pop	{r7, pc}
 8013f44:	0801cdf4 	.word	0x0801cdf4
 8013f48:	0801ce28 	.word	0x0801ce28
 8013f4c:	0801ce68 	.word	0x0801ce68
 8013f50:	20000564 	.word	0x20000564

08013f54 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b086      	sub	sp, #24
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013f60:	697b      	ldr	r3, [r7, #20]
 8013f62:	685b      	ldr	r3, [r3, #4]
 8013f64:	4798      	blx	r3

  now = sys_now();
 8013f66:	f7f8 ff95 	bl	800ce94 <sys_now>
 8013f6a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013f6c:	697b      	ldr	r3, [r7, #20]
 8013f6e:	681a      	ldr	r2, [r3, #0]
 8013f70:	4b0f      	ldr	r3, [pc, #60]	; (8013fb0 <lwip_cyclic_timer+0x5c>)
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	4413      	add	r3, r2
 8013f76:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013f78:	68fa      	ldr	r2, [r7, #12]
 8013f7a:	693b      	ldr	r3, [r7, #16]
 8013f7c:	1ad3      	subs	r3, r2, r3
 8013f7e:	0fdb      	lsrs	r3, r3, #31
 8013f80:	f003 0301 	and.w	r3, r3, #1
 8013f84:	b2db      	uxtb	r3, r3
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d009      	beq.n	8013f9e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013f8a:	697b      	ldr	r3, [r7, #20]
 8013f8c:	681a      	ldr	r2, [r3, #0]
 8013f8e:	693b      	ldr	r3, [r7, #16]
 8013f90:	4413      	add	r3, r2
 8013f92:	687a      	ldr	r2, [r7, #4]
 8013f94:	4907      	ldr	r1, [pc, #28]	; (8013fb4 <lwip_cyclic_timer+0x60>)
 8013f96:	4618      	mov	r0, r3
 8013f98:	f7ff ff6e 	bl	8013e78 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013f9c:	e004      	b.n	8013fa8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013f9e:	687a      	ldr	r2, [r7, #4]
 8013fa0:	4904      	ldr	r1, [pc, #16]	; (8013fb4 <lwip_cyclic_timer+0x60>)
 8013fa2:	68f8      	ldr	r0, [r7, #12]
 8013fa4:	f7ff ff68 	bl	8013e78 <sys_timeout_abs>
}
 8013fa8:	bf00      	nop
 8013faa:	3718      	adds	r7, #24
 8013fac:	46bd      	mov	sp, r7
 8013fae:	bd80      	pop	{r7, pc}
 8013fb0:	20000568 	.word	0x20000568
 8013fb4:	08013f55 	.word	0x08013f55

08013fb8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b082      	sub	sp, #8
 8013fbc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013fbe:	2301      	movs	r3, #1
 8013fc0:	607b      	str	r3, [r7, #4]
 8013fc2:	e00e      	b.n	8013fe2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013fc4:	4a0b      	ldr	r2, [pc, #44]	; (8013ff4 <sys_timeouts_init+0x3c>)
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	00db      	lsls	r3, r3, #3
 8013fd0:	4a08      	ldr	r2, [pc, #32]	; (8013ff4 <sys_timeouts_init+0x3c>)
 8013fd2:	4413      	add	r3, r2
 8013fd4:	461a      	mov	r2, r3
 8013fd6:	4908      	ldr	r1, [pc, #32]	; (8013ff8 <sys_timeouts_init+0x40>)
 8013fd8:	f000 f810 	bl	8013ffc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	3301      	adds	r3, #1
 8013fe0:	607b      	str	r3, [r7, #4]
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	2b04      	cmp	r3, #4
 8013fe6:	d9ed      	bls.n	8013fc4 <sys_timeouts_init+0xc>
  }
}
 8013fe8:	bf00      	nop
 8013fea:	bf00      	nop
 8013fec:	3708      	adds	r7, #8
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	bd80      	pop	{r7, pc}
 8013ff2:	bf00      	nop
 8013ff4:	0801e0b4 	.word	0x0801e0b4
 8013ff8:	08013f55 	.word	0x08013f55

08013ffc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	b086      	sub	sp, #24
 8014000:	af00      	add	r7, sp, #0
 8014002:	60f8      	str	r0, [r7, #12]
 8014004:	60b9      	str	r1, [r7, #8]
 8014006:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801400e:	d306      	bcc.n	801401e <sys_timeout+0x22>
 8014010:	4b0a      	ldr	r3, [pc, #40]	; (801403c <sys_timeout+0x40>)
 8014012:	f240 1229 	movw	r2, #297	; 0x129
 8014016:	490a      	ldr	r1, [pc, #40]	; (8014040 <sys_timeout+0x44>)
 8014018:	480a      	ldr	r0, [pc, #40]	; (8014044 <sys_timeout+0x48>)
 801401a:	f005 fa17 	bl	801944c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801401e:	f7f8 ff39 	bl	800ce94 <sys_now>
 8014022:	4602      	mov	r2, r0
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	4413      	add	r3, r2
 8014028:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801402a:	687a      	ldr	r2, [r7, #4]
 801402c:	68b9      	ldr	r1, [r7, #8]
 801402e:	6978      	ldr	r0, [r7, #20]
 8014030:	f7ff ff22 	bl	8013e78 <sys_timeout_abs>
#endif
}
 8014034:	bf00      	nop
 8014036:	3718      	adds	r7, #24
 8014038:	46bd      	mov	sp, r7
 801403a:	bd80      	pop	{r7, pc}
 801403c:	0801cdf4 	.word	0x0801cdf4
 8014040:	0801ce90 	.word	0x0801ce90
 8014044:	0801ce68 	.word	0x0801ce68

08014048 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014048:	b580      	push	{r7, lr}
 801404a:	b084      	sub	sp, #16
 801404c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801404e:	f7f8 ff21 	bl	800ce94 <sys_now>
 8014052:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8014054:	4b1a      	ldr	r3, [pc, #104]	; (80140c0 <sys_check_timeouts+0x78>)
 8014056:	781b      	ldrb	r3, [r3, #0]
 8014058:	b2db      	uxtb	r3, r3
 801405a:	2b00      	cmp	r3, #0
 801405c:	d001      	beq.n	8014062 <sys_check_timeouts+0x1a>
 801405e:	f7f9 ff29 	bl	800deb4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8014062:	4b18      	ldr	r3, [pc, #96]	; (80140c4 <sys_check_timeouts+0x7c>)
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014068:	68bb      	ldr	r3, [r7, #8]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d022      	beq.n	80140b4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801406e:	68bb      	ldr	r3, [r7, #8]
 8014070:	685b      	ldr	r3, [r3, #4]
 8014072:	68fa      	ldr	r2, [r7, #12]
 8014074:	1ad3      	subs	r3, r2, r3
 8014076:	0fdb      	lsrs	r3, r3, #31
 8014078:	f003 0301 	and.w	r3, r3, #1
 801407c:	b2db      	uxtb	r3, r3
 801407e:	2b00      	cmp	r3, #0
 8014080:	d11a      	bne.n	80140b8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014082:	68bb      	ldr	r3, [r7, #8]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	4a0f      	ldr	r2, [pc, #60]	; (80140c4 <sys_check_timeouts+0x7c>)
 8014088:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801408a:	68bb      	ldr	r3, [r7, #8]
 801408c:	689b      	ldr	r3, [r3, #8]
 801408e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014090:	68bb      	ldr	r3, [r7, #8]
 8014092:	68db      	ldr	r3, [r3, #12]
 8014094:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014096:	68bb      	ldr	r3, [r7, #8]
 8014098:	685b      	ldr	r3, [r3, #4]
 801409a:	4a0b      	ldr	r2, [pc, #44]	; (80140c8 <sys_check_timeouts+0x80>)
 801409c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801409e:	68b9      	ldr	r1, [r7, #8]
 80140a0:	2006      	movs	r0, #6
 80140a2:	f7f9 fc27 	bl	800d8f4 <memp_free>
    if (handler != NULL) {
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d0d3      	beq.n	8014054 <sys_check_timeouts+0xc>
      handler(arg);
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	6838      	ldr	r0, [r7, #0]
 80140b0:	4798      	blx	r3
  do {
 80140b2:	e7cf      	b.n	8014054 <sys_check_timeouts+0xc>
      return;
 80140b4:	bf00      	nop
 80140b6:	e000      	b.n	80140ba <sys_check_timeouts+0x72>
      return;
 80140b8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80140ba:	3710      	adds	r7, #16
 80140bc:	46bd      	mov	sp, r7
 80140be:	bd80      	pop	{r7, pc}
 80140c0:	20006cf8 	.word	0x20006cf8
 80140c4:	20000564 	.word	0x20000564
 80140c8:	20000568 	.word	0x20000568

080140cc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80140cc:	b580      	push	{r7, lr}
 80140ce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80140d0:	f005 fa4a 	bl	8019568 <rand>
 80140d4:	4603      	mov	r3, r0
 80140d6:	b29b      	uxth	r3, r3
 80140d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80140dc:	b29b      	uxth	r3, r3
 80140de:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80140e2:	b29a      	uxth	r2, r3
 80140e4:	4b01      	ldr	r3, [pc, #4]	; (80140ec <udp_init+0x20>)
 80140e6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80140e8:	bf00      	nop
 80140ea:	bd80      	pop	{r7, pc}
 80140ec:	20000068 	.word	0x20000068

080140f0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80140f0:	b480      	push	{r7}
 80140f2:	b083      	sub	sp, #12
 80140f4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80140f6:	2300      	movs	r3, #0
 80140f8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80140fa:	4b17      	ldr	r3, [pc, #92]	; (8014158 <udp_new_port+0x68>)
 80140fc:	881b      	ldrh	r3, [r3, #0]
 80140fe:	1c5a      	adds	r2, r3, #1
 8014100:	b291      	uxth	r1, r2
 8014102:	4a15      	ldr	r2, [pc, #84]	; (8014158 <udp_new_port+0x68>)
 8014104:	8011      	strh	r1, [r2, #0]
 8014106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801410a:	4293      	cmp	r3, r2
 801410c:	d103      	bne.n	8014116 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801410e:	4b12      	ldr	r3, [pc, #72]	; (8014158 <udp_new_port+0x68>)
 8014110:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014114:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014116:	4b11      	ldr	r3, [pc, #68]	; (801415c <udp_new_port+0x6c>)
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	603b      	str	r3, [r7, #0]
 801411c:	e011      	b.n	8014142 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801411e:	683b      	ldr	r3, [r7, #0]
 8014120:	8a5a      	ldrh	r2, [r3, #18]
 8014122:	4b0d      	ldr	r3, [pc, #52]	; (8014158 <udp_new_port+0x68>)
 8014124:	881b      	ldrh	r3, [r3, #0]
 8014126:	429a      	cmp	r2, r3
 8014128:	d108      	bne.n	801413c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801412a:	88fb      	ldrh	r3, [r7, #6]
 801412c:	3301      	adds	r3, #1
 801412e:	80fb      	strh	r3, [r7, #6]
 8014130:	88fb      	ldrh	r3, [r7, #6]
 8014132:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014136:	d3e0      	bcc.n	80140fa <udp_new_port+0xa>
        return 0;
 8014138:	2300      	movs	r3, #0
 801413a:	e007      	b.n	801414c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801413c:	683b      	ldr	r3, [r7, #0]
 801413e:	68db      	ldr	r3, [r3, #12]
 8014140:	603b      	str	r3, [r7, #0]
 8014142:	683b      	ldr	r3, [r7, #0]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d1ea      	bne.n	801411e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8014148:	4b03      	ldr	r3, [pc, #12]	; (8014158 <udp_new_port+0x68>)
 801414a:	881b      	ldrh	r3, [r3, #0]
}
 801414c:	4618      	mov	r0, r3
 801414e:	370c      	adds	r7, #12
 8014150:	46bd      	mov	sp, r7
 8014152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014156:	4770      	bx	lr
 8014158:	20000068 	.word	0x20000068
 801415c:	20006d18 	.word	0x20006d18

08014160 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014160:	b580      	push	{r7, lr}
 8014162:	b084      	sub	sp, #16
 8014164:	af00      	add	r7, sp, #0
 8014166:	60f8      	str	r0, [r7, #12]
 8014168:	60b9      	str	r1, [r7, #8]
 801416a:	4613      	mov	r3, r2
 801416c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d105      	bne.n	8014180 <udp_input_local_match+0x20>
 8014174:	4b27      	ldr	r3, [pc, #156]	; (8014214 <udp_input_local_match+0xb4>)
 8014176:	2287      	movs	r2, #135	; 0x87
 8014178:	4927      	ldr	r1, [pc, #156]	; (8014218 <udp_input_local_match+0xb8>)
 801417a:	4828      	ldr	r0, [pc, #160]	; (801421c <udp_input_local_match+0xbc>)
 801417c:	f005 f966 	bl	801944c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014180:	68bb      	ldr	r3, [r7, #8]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d105      	bne.n	8014192 <udp_input_local_match+0x32>
 8014186:	4b23      	ldr	r3, [pc, #140]	; (8014214 <udp_input_local_match+0xb4>)
 8014188:	2288      	movs	r2, #136	; 0x88
 801418a:	4925      	ldr	r1, [pc, #148]	; (8014220 <udp_input_local_match+0xc0>)
 801418c:	4823      	ldr	r0, [pc, #140]	; (801421c <udp_input_local_match+0xbc>)
 801418e:	f005 f95d 	bl	801944c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	7a1b      	ldrb	r3, [r3, #8]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d00b      	beq.n	80141b2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	7a1a      	ldrb	r2, [r3, #8]
 801419e:	4b21      	ldr	r3, [pc, #132]	; (8014224 <udp_input_local_match+0xc4>)
 80141a0:	685b      	ldr	r3, [r3, #4]
 80141a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80141a6:	3301      	adds	r3, #1
 80141a8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80141aa:	429a      	cmp	r2, r3
 80141ac:	d001      	beq.n	80141b2 <udp_input_local_match+0x52>
    return 0;
 80141ae:	2300      	movs	r3, #0
 80141b0:	e02b      	b.n	801420a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80141b2:	79fb      	ldrb	r3, [r7, #7]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d018      	beq.n	80141ea <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d013      	beq.n	80141e6 <udp_input_local_match+0x86>
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d00f      	beq.n	80141e6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80141c6:	4b17      	ldr	r3, [pc, #92]	; (8014224 <udp_input_local_match+0xc4>)
 80141c8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80141ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141ce:	d00a      	beq.n	80141e6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	681a      	ldr	r2, [r3, #0]
 80141d4:	4b13      	ldr	r3, [pc, #76]	; (8014224 <udp_input_local_match+0xc4>)
 80141d6:	695b      	ldr	r3, [r3, #20]
 80141d8:	405a      	eors	r2, r3
 80141da:	68bb      	ldr	r3, [r7, #8]
 80141dc:	3308      	adds	r3, #8
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d110      	bne.n	8014208 <udp_input_local_match+0xa8>
          return 1;
 80141e6:	2301      	movs	r3, #1
 80141e8:	e00f      	b.n	801420a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d009      	beq.n	8014204 <udp_input_local_match+0xa4>
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d005      	beq.n	8014204 <udp_input_local_match+0xa4>
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	681a      	ldr	r2, [r3, #0]
 80141fc:	4b09      	ldr	r3, [pc, #36]	; (8014224 <udp_input_local_match+0xc4>)
 80141fe:	695b      	ldr	r3, [r3, #20]
 8014200:	429a      	cmp	r2, r3
 8014202:	d101      	bne.n	8014208 <udp_input_local_match+0xa8>
        return 1;
 8014204:	2301      	movs	r3, #1
 8014206:	e000      	b.n	801420a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014208:	2300      	movs	r3, #0
}
 801420a:	4618      	mov	r0, r3
 801420c:	3710      	adds	r7, #16
 801420e:	46bd      	mov	sp, r7
 8014210:	bd80      	pop	{r7, pc}
 8014212:	bf00      	nop
 8014214:	0801cedc 	.word	0x0801cedc
 8014218:	0801cf0c 	.word	0x0801cf0c
 801421c:	0801cf30 	.word	0x0801cf30
 8014220:	0801cf58 	.word	0x0801cf58
 8014224:	2000379c 	.word	0x2000379c

08014228 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014228:	b590      	push	{r4, r7, lr}
 801422a:	b08d      	sub	sp, #52	; 0x34
 801422c:	af02      	add	r7, sp, #8
 801422e:	6078      	str	r0, [r7, #4]
 8014230:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014232:	2300      	movs	r3, #0
 8014234:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d105      	bne.n	8014248 <udp_input+0x20>
 801423c:	4b7c      	ldr	r3, [pc, #496]	; (8014430 <udp_input+0x208>)
 801423e:	22cf      	movs	r2, #207	; 0xcf
 8014240:	497c      	ldr	r1, [pc, #496]	; (8014434 <udp_input+0x20c>)
 8014242:	487d      	ldr	r0, [pc, #500]	; (8014438 <udp_input+0x210>)
 8014244:	f005 f902 	bl	801944c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014248:	683b      	ldr	r3, [r7, #0]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d105      	bne.n	801425a <udp_input+0x32>
 801424e:	4b78      	ldr	r3, [pc, #480]	; (8014430 <udp_input+0x208>)
 8014250:	22d0      	movs	r2, #208	; 0xd0
 8014252:	497a      	ldr	r1, [pc, #488]	; (801443c <udp_input+0x214>)
 8014254:	4878      	ldr	r0, [pc, #480]	; (8014438 <udp_input+0x210>)
 8014256:	f005 f8f9 	bl	801944c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	895b      	ldrh	r3, [r3, #10]
 801425e:	2b07      	cmp	r3, #7
 8014260:	d803      	bhi.n	801426a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014262:	6878      	ldr	r0, [r7, #4]
 8014264:	f7fa f960 	bl	800e528 <pbuf_free>
    goto end;
 8014268:	e0de      	b.n	8014428 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	685b      	ldr	r3, [r3, #4]
 801426e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014270:	4b73      	ldr	r3, [pc, #460]	; (8014440 <udp_input+0x218>)
 8014272:	695b      	ldr	r3, [r3, #20]
 8014274:	4a72      	ldr	r2, [pc, #456]	; (8014440 <udp_input+0x218>)
 8014276:	6812      	ldr	r2, [r2, #0]
 8014278:	4611      	mov	r1, r2
 801427a:	4618      	mov	r0, r3
 801427c:	f003 fe82 	bl	8017f84 <ip4_addr_isbroadcast_u32>
 8014280:	4603      	mov	r3, r0
 8014282:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014284:	697b      	ldr	r3, [r7, #20]
 8014286:	881b      	ldrh	r3, [r3, #0]
 8014288:	b29b      	uxth	r3, r3
 801428a:	4618      	mov	r0, r3
 801428c:	f7f8 fe90 	bl	800cfb0 <lwip_htons>
 8014290:	4603      	mov	r3, r0
 8014292:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014294:	697b      	ldr	r3, [r7, #20]
 8014296:	885b      	ldrh	r3, [r3, #2]
 8014298:	b29b      	uxth	r3, r3
 801429a:	4618      	mov	r0, r3
 801429c:	f7f8 fe88 	bl	800cfb0 <lwip_htons>
 80142a0:	4603      	mov	r3, r0
 80142a2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80142a4:	2300      	movs	r3, #0
 80142a6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80142a8:	2300      	movs	r3, #0
 80142aa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80142ac:	2300      	movs	r3, #0
 80142ae:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80142b0:	4b64      	ldr	r3, [pc, #400]	; (8014444 <udp_input+0x21c>)
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	627b      	str	r3, [r7, #36]	; 0x24
 80142b6:	e054      	b.n	8014362 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80142b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ba:	8a5b      	ldrh	r3, [r3, #18]
 80142bc:	89fa      	ldrh	r2, [r7, #14]
 80142be:	429a      	cmp	r2, r3
 80142c0:	d14a      	bne.n	8014358 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80142c2:	7cfb      	ldrb	r3, [r7, #19]
 80142c4:	461a      	mov	r2, r3
 80142c6:	6839      	ldr	r1, [r7, #0]
 80142c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80142ca:	f7ff ff49 	bl	8014160 <udp_input_local_match>
 80142ce:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d041      	beq.n	8014358 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80142d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142d6:	7c1b      	ldrb	r3, [r3, #16]
 80142d8:	f003 0304 	and.w	r3, r3, #4
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d11d      	bne.n	801431c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80142e0:	69fb      	ldr	r3, [r7, #28]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d102      	bne.n	80142ec <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80142e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142e8:	61fb      	str	r3, [r7, #28]
 80142ea:	e017      	b.n	801431c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80142ec:	7cfb      	ldrb	r3, [r7, #19]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d014      	beq.n	801431c <udp_input+0xf4>
 80142f2:	4b53      	ldr	r3, [pc, #332]	; (8014440 <udp_input+0x218>)
 80142f4:	695b      	ldr	r3, [r3, #20]
 80142f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142fa:	d10f      	bne.n	801431c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80142fc:	69fb      	ldr	r3, [r7, #28]
 80142fe:	681a      	ldr	r2, [r3, #0]
 8014300:	683b      	ldr	r3, [r7, #0]
 8014302:	3304      	adds	r3, #4
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	429a      	cmp	r2, r3
 8014308:	d008      	beq.n	801431c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801430c:	681a      	ldr	r2, [r3, #0]
 801430e:	683b      	ldr	r3, [r7, #0]
 8014310:	3304      	adds	r3, #4
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	429a      	cmp	r2, r3
 8014316:	d101      	bne.n	801431c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801431a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801431e:	8a9b      	ldrh	r3, [r3, #20]
 8014320:	8a3a      	ldrh	r2, [r7, #16]
 8014322:	429a      	cmp	r2, r3
 8014324:	d118      	bne.n	8014358 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014328:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801432a:	2b00      	cmp	r3, #0
 801432c:	d005      	beq.n	801433a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014330:	685a      	ldr	r2, [r3, #4]
 8014332:	4b43      	ldr	r3, [pc, #268]	; (8014440 <udp_input+0x218>)
 8014334:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014336:	429a      	cmp	r2, r3
 8014338:	d10e      	bne.n	8014358 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801433a:	6a3b      	ldr	r3, [r7, #32]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d014      	beq.n	801436a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014342:	68da      	ldr	r2, [r3, #12]
 8014344:	6a3b      	ldr	r3, [r7, #32]
 8014346:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014348:	4b3e      	ldr	r3, [pc, #248]	; (8014444 <udp_input+0x21c>)
 801434a:	681a      	ldr	r2, [r3, #0]
 801434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801434e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014350:	4a3c      	ldr	r2, [pc, #240]	; (8014444 <udp_input+0x21c>)
 8014352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014354:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014356:	e008      	b.n	801436a <udp_input+0x142>
      }
    }

    prev = pcb;
 8014358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801435a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801435e:	68db      	ldr	r3, [r3, #12]
 8014360:	627b      	str	r3, [r7, #36]	; 0x24
 8014362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014364:	2b00      	cmp	r3, #0
 8014366:	d1a7      	bne.n	80142b8 <udp_input+0x90>
 8014368:	e000      	b.n	801436c <udp_input+0x144>
        break;
 801436a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801436e:	2b00      	cmp	r3, #0
 8014370:	d101      	bne.n	8014376 <udp_input+0x14e>
    pcb = uncon_pcb;
 8014372:	69fb      	ldr	r3, [r7, #28]
 8014374:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014378:	2b00      	cmp	r3, #0
 801437a:	d002      	beq.n	8014382 <udp_input+0x15a>
    for_us = 1;
 801437c:	2301      	movs	r3, #1
 801437e:	76fb      	strb	r3, [r7, #27]
 8014380:	e00a      	b.n	8014398 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014382:	683b      	ldr	r3, [r7, #0]
 8014384:	3304      	adds	r3, #4
 8014386:	681a      	ldr	r2, [r3, #0]
 8014388:	4b2d      	ldr	r3, [pc, #180]	; (8014440 <udp_input+0x218>)
 801438a:	695b      	ldr	r3, [r3, #20]
 801438c:	429a      	cmp	r2, r3
 801438e:	bf0c      	ite	eq
 8014390:	2301      	moveq	r3, #1
 8014392:	2300      	movne	r3, #0
 8014394:	b2db      	uxtb	r3, r3
 8014396:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014398:	7efb      	ldrb	r3, [r7, #27]
 801439a:	2b00      	cmp	r3, #0
 801439c:	d041      	beq.n	8014422 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801439e:	2108      	movs	r1, #8
 80143a0:	6878      	ldr	r0, [r7, #4]
 80143a2:	f7fa f83b 	bl	800e41c <pbuf_remove_header>
 80143a6:	4603      	mov	r3, r0
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d00a      	beq.n	80143c2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80143ac:	4b20      	ldr	r3, [pc, #128]	; (8014430 <udp_input+0x208>)
 80143ae:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80143b2:	4925      	ldr	r1, [pc, #148]	; (8014448 <udp_input+0x220>)
 80143b4:	4820      	ldr	r0, [pc, #128]	; (8014438 <udp_input+0x210>)
 80143b6:	f005 f849 	bl	801944c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80143ba:	6878      	ldr	r0, [r7, #4]
 80143bc:	f7fa f8b4 	bl	800e528 <pbuf_free>
      goto end;
 80143c0:	e032      	b.n	8014428 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80143c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d012      	beq.n	80143ee <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80143c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ca:	699b      	ldr	r3, [r3, #24]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d00a      	beq.n	80143e6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80143d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143d2:	699c      	ldr	r4, [r3, #24]
 80143d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143d6:	69d8      	ldr	r0, [r3, #28]
 80143d8:	8a3b      	ldrh	r3, [r7, #16]
 80143da:	9300      	str	r3, [sp, #0]
 80143dc:	4b1b      	ldr	r3, [pc, #108]	; (801444c <udp_input+0x224>)
 80143de:	687a      	ldr	r2, [r7, #4]
 80143e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80143e2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80143e4:	e021      	b.n	801442a <udp_input+0x202>
        pbuf_free(p);
 80143e6:	6878      	ldr	r0, [r7, #4]
 80143e8:	f7fa f89e 	bl	800e528 <pbuf_free>
        goto end;
 80143ec:	e01c      	b.n	8014428 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80143ee:	7cfb      	ldrb	r3, [r7, #19]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d112      	bne.n	801441a <udp_input+0x1f2>
 80143f4:	4b12      	ldr	r3, [pc, #72]	; (8014440 <udp_input+0x218>)
 80143f6:	695b      	ldr	r3, [r3, #20]
 80143f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80143fc:	2be0      	cmp	r3, #224	; 0xe0
 80143fe:	d00c      	beq.n	801441a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014400:	4b0f      	ldr	r3, [pc, #60]	; (8014440 <udp_input+0x218>)
 8014402:	899b      	ldrh	r3, [r3, #12]
 8014404:	3308      	adds	r3, #8
 8014406:	b29b      	uxth	r3, r3
 8014408:	b21b      	sxth	r3, r3
 801440a:	4619      	mov	r1, r3
 801440c:	6878      	ldr	r0, [r7, #4]
 801440e:	f7fa f878 	bl	800e502 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014412:	2103      	movs	r1, #3
 8014414:	6878      	ldr	r0, [r7, #4]
 8014416:	f003 fa77 	bl	8017908 <icmp_dest_unreach>
      pbuf_free(p);
 801441a:	6878      	ldr	r0, [r7, #4]
 801441c:	f7fa f884 	bl	800e528 <pbuf_free>
  return;
 8014420:	e003      	b.n	801442a <udp_input+0x202>
    pbuf_free(p);
 8014422:	6878      	ldr	r0, [r7, #4]
 8014424:	f7fa f880 	bl	800e528 <pbuf_free>
  return;
 8014428:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801442a:	372c      	adds	r7, #44	; 0x2c
 801442c:	46bd      	mov	sp, r7
 801442e:	bd90      	pop	{r4, r7, pc}
 8014430:	0801cedc 	.word	0x0801cedc
 8014434:	0801cf80 	.word	0x0801cf80
 8014438:	0801cf30 	.word	0x0801cf30
 801443c:	0801cf98 	.word	0x0801cf98
 8014440:	2000379c 	.word	0x2000379c
 8014444:	20006d18 	.word	0x20006d18
 8014448:	0801cfb4 	.word	0x0801cfb4
 801444c:	200037ac 	.word	0x200037ac

08014450 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8014450:	b580      	push	{r7, lr}
 8014452:	b082      	sub	sp, #8
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]
 8014458:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d109      	bne.n	8014474 <udp_send+0x24>
 8014460:	4b11      	ldr	r3, [pc, #68]	; (80144a8 <udp_send+0x58>)
 8014462:	f240 12d5 	movw	r2, #469	; 0x1d5
 8014466:	4911      	ldr	r1, [pc, #68]	; (80144ac <udp_send+0x5c>)
 8014468:	4811      	ldr	r0, [pc, #68]	; (80144b0 <udp_send+0x60>)
 801446a:	f004 ffef 	bl	801944c <iprintf>
 801446e:	f06f 030f 	mvn.w	r3, #15
 8014472:	e015      	b.n	80144a0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8014474:	683b      	ldr	r3, [r7, #0]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d109      	bne.n	801448e <udp_send+0x3e>
 801447a:	4b0b      	ldr	r3, [pc, #44]	; (80144a8 <udp_send+0x58>)
 801447c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8014480:	490c      	ldr	r1, [pc, #48]	; (80144b4 <udp_send+0x64>)
 8014482:	480b      	ldr	r0, [pc, #44]	; (80144b0 <udp_send+0x60>)
 8014484:	f004 ffe2 	bl	801944c <iprintf>
 8014488:	f06f 030f 	mvn.w	r3, #15
 801448c:	e008      	b.n	80144a0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	1d1a      	adds	r2, r3, #4
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	8a9b      	ldrh	r3, [r3, #20]
 8014496:	6839      	ldr	r1, [r7, #0]
 8014498:	6878      	ldr	r0, [r7, #4]
 801449a:	f000 f80d 	bl	80144b8 <udp_sendto>
 801449e:	4603      	mov	r3, r0
}
 80144a0:	4618      	mov	r0, r3
 80144a2:	3708      	adds	r7, #8
 80144a4:	46bd      	mov	sp, r7
 80144a6:	bd80      	pop	{r7, pc}
 80144a8:	0801cedc 	.word	0x0801cedc
 80144ac:	0801cfd0 	.word	0x0801cfd0
 80144b0:	0801cf30 	.word	0x0801cf30
 80144b4:	0801cfe8 	.word	0x0801cfe8

080144b8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b088      	sub	sp, #32
 80144bc:	af02      	add	r7, sp, #8
 80144be:	60f8      	str	r0, [r7, #12]
 80144c0:	60b9      	str	r1, [r7, #8]
 80144c2:	607a      	str	r2, [r7, #4]
 80144c4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d109      	bne.n	80144e0 <udp_sendto+0x28>
 80144cc:	4b23      	ldr	r3, [pc, #140]	; (801455c <udp_sendto+0xa4>)
 80144ce:	f44f 7206 	mov.w	r2, #536	; 0x218
 80144d2:	4923      	ldr	r1, [pc, #140]	; (8014560 <udp_sendto+0xa8>)
 80144d4:	4823      	ldr	r0, [pc, #140]	; (8014564 <udp_sendto+0xac>)
 80144d6:	f004 ffb9 	bl	801944c <iprintf>
 80144da:	f06f 030f 	mvn.w	r3, #15
 80144de:	e038      	b.n	8014552 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80144e0:	68bb      	ldr	r3, [r7, #8]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d109      	bne.n	80144fa <udp_sendto+0x42>
 80144e6:	4b1d      	ldr	r3, [pc, #116]	; (801455c <udp_sendto+0xa4>)
 80144e8:	f240 2219 	movw	r2, #537	; 0x219
 80144ec:	491e      	ldr	r1, [pc, #120]	; (8014568 <udp_sendto+0xb0>)
 80144ee:	481d      	ldr	r0, [pc, #116]	; (8014564 <udp_sendto+0xac>)
 80144f0:	f004 ffac 	bl	801944c <iprintf>
 80144f4:	f06f 030f 	mvn.w	r3, #15
 80144f8:	e02b      	b.n	8014552 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d109      	bne.n	8014514 <udp_sendto+0x5c>
 8014500:	4b16      	ldr	r3, [pc, #88]	; (801455c <udp_sendto+0xa4>)
 8014502:	f240 221a 	movw	r2, #538	; 0x21a
 8014506:	4919      	ldr	r1, [pc, #100]	; (801456c <udp_sendto+0xb4>)
 8014508:	4816      	ldr	r0, [pc, #88]	; (8014564 <udp_sendto+0xac>)
 801450a:	f004 ff9f 	bl	801944c <iprintf>
 801450e:	f06f 030f 	mvn.w	r3, #15
 8014512:	e01e      	b.n	8014552 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	7a1b      	ldrb	r3, [r3, #8]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d006      	beq.n	801452a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	7a1b      	ldrb	r3, [r3, #8]
 8014520:	4618      	mov	r0, r3
 8014522:	f7f9 fca1 	bl	800de68 <netif_get_by_index>
 8014526:	6178      	str	r0, [r7, #20]
 8014528:	e003      	b.n	8014532 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801452a:	6878      	ldr	r0, [r7, #4]
 801452c:	f003 fa76 	bl	8017a1c <ip4_route>
 8014530:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8014532:	697b      	ldr	r3, [r7, #20]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d102      	bne.n	801453e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8014538:	f06f 0303 	mvn.w	r3, #3
 801453c:	e009      	b.n	8014552 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801453e:	887a      	ldrh	r2, [r7, #2]
 8014540:	697b      	ldr	r3, [r7, #20]
 8014542:	9300      	str	r3, [sp, #0]
 8014544:	4613      	mov	r3, r2
 8014546:	687a      	ldr	r2, [r7, #4]
 8014548:	68b9      	ldr	r1, [r7, #8]
 801454a:	68f8      	ldr	r0, [r7, #12]
 801454c:	f000 f810 	bl	8014570 <udp_sendto_if>
 8014550:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014552:	4618      	mov	r0, r3
 8014554:	3718      	adds	r7, #24
 8014556:	46bd      	mov	sp, r7
 8014558:	bd80      	pop	{r7, pc}
 801455a:	bf00      	nop
 801455c:	0801cedc 	.word	0x0801cedc
 8014560:	0801d000 	.word	0x0801d000
 8014564:	0801cf30 	.word	0x0801cf30
 8014568:	0801d018 	.word	0x0801d018
 801456c:	0801d034 	.word	0x0801d034

08014570 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b088      	sub	sp, #32
 8014574:	af02      	add	r7, sp, #8
 8014576:	60f8      	str	r0, [r7, #12]
 8014578:	60b9      	str	r1, [r7, #8]
 801457a:	607a      	str	r2, [r7, #4]
 801457c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d109      	bne.n	8014598 <udp_sendto_if+0x28>
 8014584:	4b2e      	ldr	r3, [pc, #184]	; (8014640 <udp_sendto_if+0xd0>)
 8014586:	f44f 7220 	mov.w	r2, #640	; 0x280
 801458a:	492e      	ldr	r1, [pc, #184]	; (8014644 <udp_sendto_if+0xd4>)
 801458c:	482e      	ldr	r0, [pc, #184]	; (8014648 <udp_sendto_if+0xd8>)
 801458e:	f004 ff5d 	bl	801944c <iprintf>
 8014592:	f06f 030f 	mvn.w	r3, #15
 8014596:	e04f      	b.n	8014638 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8014598:	68bb      	ldr	r3, [r7, #8]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d109      	bne.n	80145b2 <udp_sendto_if+0x42>
 801459e:	4b28      	ldr	r3, [pc, #160]	; (8014640 <udp_sendto_if+0xd0>)
 80145a0:	f240 2281 	movw	r2, #641	; 0x281
 80145a4:	4929      	ldr	r1, [pc, #164]	; (801464c <udp_sendto_if+0xdc>)
 80145a6:	4828      	ldr	r0, [pc, #160]	; (8014648 <udp_sendto_if+0xd8>)
 80145a8:	f004 ff50 	bl	801944c <iprintf>
 80145ac:	f06f 030f 	mvn.w	r3, #15
 80145b0:	e042      	b.n	8014638 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d109      	bne.n	80145cc <udp_sendto_if+0x5c>
 80145b8:	4b21      	ldr	r3, [pc, #132]	; (8014640 <udp_sendto_if+0xd0>)
 80145ba:	f240 2282 	movw	r2, #642	; 0x282
 80145be:	4924      	ldr	r1, [pc, #144]	; (8014650 <udp_sendto_if+0xe0>)
 80145c0:	4821      	ldr	r0, [pc, #132]	; (8014648 <udp_sendto_if+0xd8>)
 80145c2:	f004 ff43 	bl	801944c <iprintf>
 80145c6:	f06f 030f 	mvn.w	r3, #15
 80145ca:	e035      	b.n	8014638 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80145cc:	6a3b      	ldr	r3, [r7, #32]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d109      	bne.n	80145e6 <udp_sendto_if+0x76>
 80145d2:	4b1b      	ldr	r3, [pc, #108]	; (8014640 <udp_sendto_if+0xd0>)
 80145d4:	f240 2283 	movw	r2, #643	; 0x283
 80145d8:	491e      	ldr	r1, [pc, #120]	; (8014654 <udp_sendto_if+0xe4>)
 80145da:	481b      	ldr	r0, [pc, #108]	; (8014648 <udp_sendto_if+0xd8>)
 80145dc:	f004 ff36 	bl	801944c <iprintf>
 80145e0:	f06f 030f 	mvn.w	r3, #15
 80145e4:	e028      	b.n	8014638 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d009      	beq.n	8014600 <udp_sendto_if+0x90>
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d005      	beq.n	8014600 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80145fc:	2be0      	cmp	r3, #224	; 0xe0
 80145fe:	d103      	bne.n	8014608 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8014600:	6a3b      	ldr	r3, [r7, #32]
 8014602:	3304      	adds	r3, #4
 8014604:	617b      	str	r3, [r7, #20]
 8014606:	e00b      	b.n	8014620 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	681a      	ldr	r2, [r3, #0]
 801460c:	6a3b      	ldr	r3, [r7, #32]
 801460e:	3304      	adds	r3, #4
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	429a      	cmp	r2, r3
 8014614:	d002      	beq.n	801461c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8014616:	f06f 0303 	mvn.w	r3, #3
 801461a:	e00d      	b.n	8014638 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8014620:	887a      	ldrh	r2, [r7, #2]
 8014622:	697b      	ldr	r3, [r7, #20]
 8014624:	9301      	str	r3, [sp, #4]
 8014626:	6a3b      	ldr	r3, [r7, #32]
 8014628:	9300      	str	r3, [sp, #0]
 801462a:	4613      	mov	r3, r2
 801462c:	687a      	ldr	r2, [r7, #4]
 801462e:	68b9      	ldr	r1, [r7, #8]
 8014630:	68f8      	ldr	r0, [r7, #12]
 8014632:	f000 f811 	bl	8014658 <udp_sendto_if_src>
 8014636:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014638:	4618      	mov	r0, r3
 801463a:	3718      	adds	r7, #24
 801463c:	46bd      	mov	sp, r7
 801463e:	bd80      	pop	{r7, pc}
 8014640:	0801cedc 	.word	0x0801cedc
 8014644:	0801d050 	.word	0x0801d050
 8014648:	0801cf30 	.word	0x0801cf30
 801464c:	0801d06c 	.word	0x0801d06c
 8014650:	0801d088 	.word	0x0801d088
 8014654:	0801d0a8 	.word	0x0801d0a8

08014658 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8014658:	b580      	push	{r7, lr}
 801465a:	b08c      	sub	sp, #48	; 0x30
 801465c:	af04      	add	r7, sp, #16
 801465e:	60f8      	str	r0, [r7, #12]
 8014660:	60b9      	str	r1, [r7, #8]
 8014662:	607a      	str	r2, [r7, #4]
 8014664:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d109      	bne.n	8014680 <udp_sendto_if_src+0x28>
 801466c:	4b65      	ldr	r3, [pc, #404]	; (8014804 <udp_sendto_if_src+0x1ac>)
 801466e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8014672:	4965      	ldr	r1, [pc, #404]	; (8014808 <udp_sendto_if_src+0x1b0>)
 8014674:	4865      	ldr	r0, [pc, #404]	; (801480c <udp_sendto_if_src+0x1b4>)
 8014676:	f004 fee9 	bl	801944c <iprintf>
 801467a:	f06f 030f 	mvn.w	r3, #15
 801467e:	e0bc      	b.n	80147fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8014680:	68bb      	ldr	r3, [r7, #8]
 8014682:	2b00      	cmp	r3, #0
 8014684:	d109      	bne.n	801469a <udp_sendto_if_src+0x42>
 8014686:	4b5f      	ldr	r3, [pc, #380]	; (8014804 <udp_sendto_if_src+0x1ac>)
 8014688:	f240 22d2 	movw	r2, #722	; 0x2d2
 801468c:	4960      	ldr	r1, [pc, #384]	; (8014810 <udp_sendto_if_src+0x1b8>)
 801468e:	485f      	ldr	r0, [pc, #380]	; (801480c <udp_sendto_if_src+0x1b4>)
 8014690:	f004 fedc 	bl	801944c <iprintf>
 8014694:	f06f 030f 	mvn.w	r3, #15
 8014698:	e0af      	b.n	80147fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d109      	bne.n	80146b4 <udp_sendto_if_src+0x5c>
 80146a0:	4b58      	ldr	r3, [pc, #352]	; (8014804 <udp_sendto_if_src+0x1ac>)
 80146a2:	f240 22d3 	movw	r2, #723	; 0x2d3
 80146a6:	495b      	ldr	r1, [pc, #364]	; (8014814 <udp_sendto_if_src+0x1bc>)
 80146a8:	4858      	ldr	r0, [pc, #352]	; (801480c <udp_sendto_if_src+0x1b4>)
 80146aa:	f004 fecf 	bl	801944c <iprintf>
 80146ae:	f06f 030f 	mvn.w	r3, #15
 80146b2:	e0a2      	b.n	80147fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80146b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d109      	bne.n	80146ce <udp_sendto_if_src+0x76>
 80146ba:	4b52      	ldr	r3, [pc, #328]	; (8014804 <udp_sendto_if_src+0x1ac>)
 80146bc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80146c0:	4955      	ldr	r1, [pc, #340]	; (8014818 <udp_sendto_if_src+0x1c0>)
 80146c2:	4852      	ldr	r0, [pc, #328]	; (801480c <udp_sendto_if_src+0x1b4>)
 80146c4:	f004 fec2 	bl	801944c <iprintf>
 80146c8:	f06f 030f 	mvn.w	r3, #15
 80146cc:	e095      	b.n	80147fa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80146ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d109      	bne.n	80146e8 <udp_sendto_if_src+0x90>
 80146d4:	4b4b      	ldr	r3, [pc, #300]	; (8014804 <udp_sendto_if_src+0x1ac>)
 80146d6:	f240 22d5 	movw	r2, #725	; 0x2d5
 80146da:	4950      	ldr	r1, [pc, #320]	; (801481c <udp_sendto_if_src+0x1c4>)
 80146dc:	484b      	ldr	r0, [pc, #300]	; (801480c <udp_sendto_if_src+0x1b4>)
 80146de:	f004 feb5 	bl	801944c <iprintf>
 80146e2:	f06f 030f 	mvn.w	r3, #15
 80146e6:	e088      	b.n	80147fa <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	8a5b      	ldrh	r3, [r3, #18]
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d10f      	bne.n	8014710 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80146f0:	68f9      	ldr	r1, [r7, #12]
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	8a5b      	ldrh	r3, [r3, #18]
 80146f6:	461a      	mov	r2, r3
 80146f8:	68f8      	ldr	r0, [r7, #12]
 80146fa:	f000 f893 	bl	8014824 <udp_bind>
 80146fe:	4603      	mov	r3, r0
 8014700:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8014702:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d002      	beq.n	8014710 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801470a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801470e:	e074      	b.n	80147fa <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8014710:	68bb      	ldr	r3, [r7, #8]
 8014712:	891b      	ldrh	r3, [r3, #8]
 8014714:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014718:	4293      	cmp	r3, r2
 801471a:	d902      	bls.n	8014722 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801471c:	f04f 33ff 	mov.w	r3, #4294967295
 8014720:	e06b      	b.n	80147fa <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8014722:	2108      	movs	r1, #8
 8014724:	68b8      	ldr	r0, [r7, #8]
 8014726:	f7f9 fe69 	bl	800e3fc <pbuf_add_header>
 801472a:	4603      	mov	r3, r0
 801472c:	2b00      	cmp	r3, #0
 801472e:	d015      	beq.n	801475c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8014730:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014734:	2108      	movs	r1, #8
 8014736:	2022      	movs	r0, #34	; 0x22
 8014738:	f7f9 fc12 	bl	800df60 <pbuf_alloc>
 801473c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801473e:	69fb      	ldr	r3, [r7, #28]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d102      	bne.n	801474a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014744:	f04f 33ff 	mov.w	r3, #4294967295
 8014748:	e057      	b.n	80147fa <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801474a:	68bb      	ldr	r3, [r7, #8]
 801474c:	891b      	ldrh	r3, [r3, #8]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d006      	beq.n	8014760 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8014752:	68b9      	ldr	r1, [r7, #8]
 8014754:	69f8      	ldr	r0, [r7, #28]
 8014756:	f7f9 ffff 	bl	800e758 <pbuf_chain>
 801475a:	e001      	b.n	8014760 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801475c:	68bb      	ldr	r3, [r7, #8]
 801475e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8014760:	69fb      	ldr	r3, [r7, #28]
 8014762:	895b      	ldrh	r3, [r3, #10]
 8014764:	2b07      	cmp	r3, #7
 8014766:	d806      	bhi.n	8014776 <udp_sendto_if_src+0x11e>
 8014768:	4b26      	ldr	r3, [pc, #152]	; (8014804 <udp_sendto_if_src+0x1ac>)
 801476a:	f240 320d 	movw	r2, #781	; 0x30d
 801476e:	492c      	ldr	r1, [pc, #176]	; (8014820 <udp_sendto_if_src+0x1c8>)
 8014770:	4826      	ldr	r0, [pc, #152]	; (801480c <udp_sendto_if_src+0x1b4>)
 8014772:	f004 fe6b 	bl	801944c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8014776:	69fb      	ldr	r3, [r7, #28]
 8014778:	685b      	ldr	r3, [r3, #4]
 801477a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	8a5b      	ldrh	r3, [r3, #18]
 8014780:	4618      	mov	r0, r3
 8014782:	f7f8 fc15 	bl	800cfb0 <lwip_htons>
 8014786:	4603      	mov	r3, r0
 8014788:	461a      	mov	r2, r3
 801478a:	697b      	ldr	r3, [r7, #20]
 801478c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801478e:	887b      	ldrh	r3, [r7, #2]
 8014790:	4618      	mov	r0, r3
 8014792:	f7f8 fc0d 	bl	800cfb0 <lwip_htons>
 8014796:	4603      	mov	r3, r0
 8014798:	461a      	mov	r2, r3
 801479a:	697b      	ldr	r3, [r7, #20]
 801479c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801479e:	697b      	ldr	r3, [r7, #20]
 80147a0:	2200      	movs	r2, #0
 80147a2:	719a      	strb	r2, [r3, #6]
 80147a4:	2200      	movs	r2, #0
 80147a6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80147a8:	69fb      	ldr	r3, [r7, #28]
 80147aa:	891b      	ldrh	r3, [r3, #8]
 80147ac:	4618      	mov	r0, r3
 80147ae:	f7f8 fbff 	bl	800cfb0 <lwip_htons>
 80147b2:	4603      	mov	r3, r0
 80147b4:	461a      	mov	r2, r3
 80147b6:	697b      	ldr	r3, [r7, #20]
 80147b8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80147ba:	2311      	movs	r3, #17
 80147bc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	7adb      	ldrb	r3, [r3, #11]
 80147c2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	7a9b      	ldrb	r3, [r3, #10]
 80147c8:	7cb9      	ldrb	r1, [r7, #18]
 80147ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147cc:	9202      	str	r2, [sp, #8]
 80147ce:	7cfa      	ldrb	r2, [r7, #19]
 80147d0:	9201      	str	r2, [sp, #4]
 80147d2:	9300      	str	r3, [sp, #0]
 80147d4:	460b      	mov	r3, r1
 80147d6:	687a      	ldr	r2, [r7, #4]
 80147d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80147da:	69f8      	ldr	r0, [r7, #28]
 80147dc:	f003 fb24 	bl	8017e28 <ip4_output_if_src>
 80147e0:	4603      	mov	r3, r0
 80147e2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80147e4:	69fa      	ldr	r2, [r7, #28]
 80147e6:	68bb      	ldr	r3, [r7, #8]
 80147e8:	429a      	cmp	r2, r3
 80147ea:	d004      	beq.n	80147f6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80147ec:	69f8      	ldr	r0, [r7, #28]
 80147ee:	f7f9 fe9b 	bl	800e528 <pbuf_free>
    q = NULL;
 80147f2:	2300      	movs	r3, #0
 80147f4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80147f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80147fa:	4618      	mov	r0, r3
 80147fc:	3720      	adds	r7, #32
 80147fe:	46bd      	mov	sp, r7
 8014800:	bd80      	pop	{r7, pc}
 8014802:	bf00      	nop
 8014804:	0801cedc 	.word	0x0801cedc
 8014808:	0801d0c8 	.word	0x0801d0c8
 801480c:	0801cf30 	.word	0x0801cf30
 8014810:	0801d0e8 	.word	0x0801d0e8
 8014814:	0801d108 	.word	0x0801d108
 8014818:	0801d12c 	.word	0x0801d12c
 801481c:	0801d150 	.word	0x0801d150
 8014820:	0801d174 	.word	0x0801d174

08014824 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014824:	b580      	push	{r7, lr}
 8014826:	b086      	sub	sp, #24
 8014828:	af00      	add	r7, sp, #0
 801482a:	60f8      	str	r0, [r7, #12]
 801482c:	60b9      	str	r1, [r7, #8]
 801482e:	4613      	mov	r3, r2
 8014830:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014832:	68bb      	ldr	r3, [r7, #8]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d101      	bne.n	801483c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014838:	4b39      	ldr	r3, [pc, #228]	; (8014920 <udp_bind+0xfc>)
 801483a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d109      	bne.n	8014856 <udp_bind+0x32>
 8014842:	4b38      	ldr	r3, [pc, #224]	; (8014924 <udp_bind+0x100>)
 8014844:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014848:	4937      	ldr	r1, [pc, #220]	; (8014928 <udp_bind+0x104>)
 801484a:	4838      	ldr	r0, [pc, #224]	; (801492c <udp_bind+0x108>)
 801484c:	f004 fdfe 	bl	801944c <iprintf>
 8014850:	f06f 030f 	mvn.w	r3, #15
 8014854:	e060      	b.n	8014918 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014856:	2300      	movs	r3, #0
 8014858:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801485a:	4b35      	ldr	r3, [pc, #212]	; (8014930 <udp_bind+0x10c>)
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	617b      	str	r3, [r7, #20]
 8014860:	e009      	b.n	8014876 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014862:	68fa      	ldr	r2, [r7, #12]
 8014864:	697b      	ldr	r3, [r7, #20]
 8014866:	429a      	cmp	r2, r3
 8014868:	d102      	bne.n	8014870 <udp_bind+0x4c>
      rebind = 1;
 801486a:	2301      	movs	r3, #1
 801486c:	74fb      	strb	r3, [r7, #19]
      break;
 801486e:	e005      	b.n	801487c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014870:	697b      	ldr	r3, [r7, #20]
 8014872:	68db      	ldr	r3, [r3, #12]
 8014874:	617b      	str	r3, [r7, #20]
 8014876:	697b      	ldr	r3, [r7, #20]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d1f2      	bne.n	8014862 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801487c:	88fb      	ldrh	r3, [r7, #6]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d109      	bne.n	8014896 <udp_bind+0x72>
    port = udp_new_port();
 8014882:	f7ff fc35 	bl	80140f0 <udp_new_port>
 8014886:	4603      	mov	r3, r0
 8014888:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801488a:	88fb      	ldrh	r3, [r7, #6]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d12c      	bne.n	80148ea <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014890:	f06f 0307 	mvn.w	r3, #7
 8014894:	e040      	b.n	8014918 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014896:	4b26      	ldr	r3, [pc, #152]	; (8014930 <udp_bind+0x10c>)
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	617b      	str	r3, [r7, #20]
 801489c:	e022      	b.n	80148e4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801489e:	68fa      	ldr	r2, [r7, #12]
 80148a0:	697b      	ldr	r3, [r7, #20]
 80148a2:	429a      	cmp	r2, r3
 80148a4:	d01b      	beq.n	80148de <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80148a6:	697b      	ldr	r3, [r7, #20]
 80148a8:	8a5b      	ldrh	r3, [r3, #18]
 80148aa:	88fa      	ldrh	r2, [r7, #6]
 80148ac:	429a      	cmp	r2, r3
 80148ae:	d116      	bne.n	80148de <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80148b0:	697b      	ldr	r3, [r7, #20]
 80148b2:	681a      	ldr	r2, [r3, #0]
 80148b4:	68bb      	ldr	r3, [r7, #8]
 80148b6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80148b8:	429a      	cmp	r2, r3
 80148ba:	d00d      	beq.n	80148d8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80148bc:	68bb      	ldr	r3, [r7, #8]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d00a      	beq.n	80148d8 <udp_bind+0xb4>
 80148c2:	68bb      	ldr	r3, [r7, #8]
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d006      	beq.n	80148d8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80148ca:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d003      	beq.n	80148d8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80148d0:	697b      	ldr	r3, [r7, #20]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d102      	bne.n	80148de <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80148d8:	f06f 0307 	mvn.w	r3, #7
 80148dc:	e01c      	b.n	8014918 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80148de:	697b      	ldr	r3, [r7, #20]
 80148e0:	68db      	ldr	r3, [r3, #12]
 80148e2:	617b      	str	r3, [r7, #20]
 80148e4:	697b      	ldr	r3, [r7, #20]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d1d9      	bne.n	801489e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80148ea:	68bb      	ldr	r3, [r7, #8]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d002      	beq.n	80148f6 <udp_bind+0xd2>
 80148f0:	68bb      	ldr	r3, [r7, #8]
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	e000      	b.n	80148f8 <udp_bind+0xd4>
 80148f6:	2300      	movs	r3, #0
 80148f8:	68fa      	ldr	r2, [r7, #12]
 80148fa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	88fa      	ldrh	r2, [r7, #6]
 8014900:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014902:	7cfb      	ldrb	r3, [r7, #19]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d106      	bne.n	8014916 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014908:	4b09      	ldr	r3, [pc, #36]	; (8014930 <udp_bind+0x10c>)
 801490a:	681a      	ldr	r2, [r3, #0]
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014910:	4a07      	ldr	r2, [pc, #28]	; (8014930 <udp_bind+0x10c>)
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014916:	2300      	movs	r3, #0
}
 8014918:	4618      	mov	r0, r3
 801491a:	3718      	adds	r7, #24
 801491c:	46bd      	mov	sp, r7
 801491e:	bd80      	pop	{r7, pc}
 8014920:	0801e0dc 	.word	0x0801e0dc
 8014924:	0801cedc 	.word	0x0801cedc
 8014928:	0801d1a4 	.word	0x0801d1a4
 801492c:	0801cf30 	.word	0x0801cf30
 8014930:	20006d18 	.word	0x20006d18

08014934 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014934:	b580      	push	{r7, lr}
 8014936:	b086      	sub	sp, #24
 8014938:	af00      	add	r7, sp, #0
 801493a:	60f8      	str	r0, [r7, #12]
 801493c:	60b9      	str	r1, [r7, #8]
 801493e:	4613      	mov	r3, r2
 8014940:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d109      	bne.n	801495c <udp_connect+0x28>
 8014948:	4b2c      	ldr	r3, [pc, #176]	; (80149fc <udp_connect+0xc8>)
 801494a:	f240 4235 	movw	r2, #1077	; 0x435
 801494e:	492c      	ldr	r1, [pc, #176]	; (8014a00 <udp_connect+0xcc>)
 8014950:	482c      	ldr	r0, [pc, #176]	; (8014a04 <udp_connect+0xd0>)
 8014952:	f004 fd7b 	bl	801944c <iprintf>
 8014956:	f06f 030f 	mvn.w	r3, #15
 801495a:	e04b      	b.n	80149f4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801495c:	68bb      	ldr	r3, [r7, #8]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d109      	bne.n	8014976 <udp_connect+0x42>
 8014962:	4b26      	ldr	r3, [pc, #152]	; (80149fc <udp_connect+0xc8>)
 8014964:	f240 4236 	movw	r2, #1078	; 0x436
 8014968:	4927      	ldr	r1, [pc, #156]	; (8014a08 <udp_connect+0xd4>)
 801496a:	4826      	ldr	r0, [pc, #152]	; (8014a04 <udp_connect+0xd0>)
 801496c:	f004 fd6e 	bl	801944c <iprintf>
 8014970:	f06f 030f 	mvn.w	r3, #15
 8014974:	e03e      	b.n	80149f4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	8a5b      	ldrh	r3, [r3, #18]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d10f      	bne.n	801499e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801497e:	68f9      	ldr	r1, [r7, #12]
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	8a5b      	ldrh	r3, [r3, #18]
 8014984:	461a      	mov	r2, r3
 8014986:	68f8      	ldr	r0, [r7, #12]
 8014988:	f7ff ff4c 	bl	8014824 <udp_bind>
 801498c:	4603      	mov	r3, r0
 801498e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8014990:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014994:	2b00      	cmp	r3, #0
 8014996:	d002      	beq.n	801499e <udp_connect+0x6a>
      return err;
 8014998:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801499c:	e02a      	b.n	80149f4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801499e:	68bb      	ldr	r3, [r7, #8]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d002      	beq.n	80149aa <udp_connect+0x76>
 80149a4:	68bb      	ldr	r3, [r7, #8]
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	e000      	b.n	80149ac <udp_connect+0x78>
 80149aa:	2300      	movs	r3, #0
 80149ac:	68fa      	ldr	r2, [r7, #12]
 80149ae:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	88fa      	ldrh	r2, [r7, #6]
 80149b4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	7c1b      	ldrb	r3, [r3, #16]
 80149ba:	f043 0304 	orr.w	r3, r3, #4
 80149be:	b2da      	uxtb	r2, r3
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80149c4:	4b11      	ldr	r3, [pc, #68]	; (8014a0c <udp_connect+0xd8>)
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	617b      	str	r3, [r7, #20]
 80149ca:	e008      	b.n	80149de <udp_connect+0xaa>
    if (pcb == ipcb) {
 80149cc:	68fa      	ldr	r2, [r7, #12]
 80149ce:	697b      	ldr	r3, [r7, #20]
 80149d0:	429a      	cmp	r2, r3
 80149d2:	d101      	bne.n	80149d8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80149d4:	2300      	movs	r3, #0
 80149d6:	e00d      	b.n	80149f4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80149d8:	697b      	ldr	r3, [r7, #20]
 80149da:	68db      	ldr	r3, [r3, #12]
 80149dc:	617b      	str	r3, [r7, #20]
 80149de:	697b      	ldr	r3, [r7, #20]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d1f3      	bne.n	80149cc <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80149e4:	4b09      	ldr	r3, [pc, #36]	; (8014a0c <udp_connect+0xd8>)
 80149e6:	681a      	ldr	r2, [r3, #0]
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80149ec:	4a07      	ldr	r2, [pc, #28]	; (8014a0c <udp_connect+0xd8>)
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80149f2:	2300      	movs	r3, #0
}
 80149f4:	4618      	mov	r0, r3
 80149f6:	3718      	adds	r7, #24
 80149f8:	46bd      	mov	sp, r7
 80149fa:	bd80      	pop	{r7, pc}
 80149fc:	0801cedc 	.word	0x0801cedc
 8014a00:	0801d1bc 	.word	0x0801d1bc
 8014a04:	0801cf30 	.word	0x0801cf30
 8014a08:	0801d1d8 	.word	0x0801d1d8
 8014a0c:	20006d18 	.word	0x20006d18

08014a10 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b082      	sub	sp, #8
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d107      	bne.n	8014a2e <udp_disconnect+0x1e>
 8014a1e:	4b0d      	ldr	r3, [pc, #52]	; (8014a54 <udp_disconnect+0x44>)
 8014a20:	f240 426a 	movw	r2, #1130	; 0x46a
 8014a24:	490c      	ldr	r1, [pc, #48]	; (8014a58 <udp_disconnect+0x48>)
 8014a26:	480d      	ldr	r0, [pc, #52]	; (8014a5c <udp_disconnect+0x4c>)
 8014a28:	f004 fd10 	bl	801944c <iprintf>
 8014a2c:	e00f      	b.n	8014a4e <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	2200      	movs	r2, #0
 8014a32:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	2200      	movs	r2, #0
 8014a38:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	7c1b      	ldrb	r3, [r3, #16]
 8014a44:	f023 0304 	bic.w	r3, r3, #4
 8014a48:	b2da      	uxtb	r2, r3
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	741a      	strb	r2, [r3, #16]
}
 8014a4e:	3708      	adds	r7, #8
 8014a50:	46bd      	mov	sp, r7
 8014a52:	bd80      	pop	{r7, pc}
 8014a54:	0801cedc 	.word	0x0801cedc
 8014a58:	0801d1f4 	.word	0x0801d1f4
 8014a5c:	0801cf30 	.word	0x0801cf30

08014a60 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014a60:	b580      	push	{r7, lr}
 8014a62:	b084      	sub	sp, #16
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	60f8      	str	r0, [r7, #12]
 8014a68:	60b9      	str	r1, [r7, #8]
 8014a6a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d107      	bne.n	8014a82 <udp_recv+0x22>
 8014a72:	4b08      	ldr	r3, [pc, #32]	; (8014a94 <udp_recv+0x34>)
 8014a74:	f240 428a 	movw	r2, #1162	; 0x48a
 8014a78:	4907      	ldr	r1, [pc, #28]	; (8014a98 <udp_recv+0x38>)
 8014a7a:	4808      	ldr	r0, [pc, #32]	; (8014a9c <udp_recv+0x3c>)
 8014a7c:	f004 fce6 	bl	801944c <iprintf>
 8014a80:	e005      	b.n	8014a8e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	68ba      	ldr	r2, [r7, #8]
 8014a86:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	687a      	ldr	r2, [r7, #4]
 8014a8c:	61da      	str	r2, [r3, #28]
}
 8014a8e:	3710      	adds	r7, #16
 8014a90:	46bd      	mov	sp, r7
 8014a92:	bd80      	pop	{r7, pc}
 8014a94:	0801cedc 	.word	0x0801cedc
 8014a98:	0801d210 	.word	0x0801d210
 8014a9c:	0801cf30 	.word	0x0801cf30

08014aa0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b084      	sub	sp, #16
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d107      	bne.n	8014abe <udp_remove+0x1e>
 8014aae:	4b19      	ldr	r3, [pc, #100]	; (8014b14 <udp_remove+0x74>)
 8014ab0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014ab4:	4918      	ldr	r1, [pc, #96]	; (8014b18 <udp_remove+0x78>)
 8014ab6:	4819      	ldr	r0, [pc, #100]	; (8014b1c <udp_remove+0x7c>)
 8014ab8:	f004 fcc8 	bl	801944c <iprintf>
 8014abc:	e026      	b.n	8014b0c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014abe:	4b18      	ldr	r3, [pc, #96]	; (8014b20 <udp_remove+0x80>)
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	687a      	ldr	r2, [r7, #4]
 8014ac4:	429a      	cmp	r2, r3
 8014ac6:	d105      	bne.n	8014ad4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014ac8:	4b15      	ldr	r3, [pc, #84]	; (8014b20 <udp_remove+0x80>)
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	68db      	ldr	r3, [r3, #12]
 8014ace:	4a14      	ldr	r2, [pc, #80]	; (8014b20 <udp_remove+0x80>)
 8014ad0:	6013      	str	r3, [r2, #0]
 8014ad2:	e017      	b.n	8014b04 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014ad4:	4b12      	ldr	r3, [pc, #72]	; (8014b20 <udp_remove+0x80>)
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	60fb      	str	r3, [r7, #12]
 8014ada:	e010      	b.n	8014afe <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	68db      	ldr	r3, [r3, #12]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d009      	beq.n	8014af8 <udp_remove+0x58>
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	68db      	ldr	r3, [r3, #12]
 8014ae8:	687a      	ldr	r2, [r7, #4]
 8014aea:	429a      	cmp	r2, r3
 8014aec:	d104      	bne.n	8014af8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	68da      	ldr	r2, [r3, #12]
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	60da      	str	r2, [r3, #12]
        break;
 8014af6:	e005      	b.n	8014b04 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	68db      	ldr	r3, [r3, #12]
 8014afc:	60fb      	str	r3, [r7, #12]
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d1eb      	bne.n	8014adc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014b04:	6879      	ldr	r1, [r7, #4]
 8014b06:	2000      	movs	r0, #0
 8014b08:	f7f8 fef4 	bl	800d8f4 <memp_free>
}
 8014b0c:	3710      	adds	r7, #16
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	bd80      	pop	{r7, pc}
 8014b12:	bf00      	nop
 8014b14:	0801cedc 	.word	0x0801cedc
 8014b18:	0801d228 	.word	0x0801d228
 8014b1c:	0801cf30 	.word	0x0801cf30
 8014b20:	20006d18 	.word	0x20006d18

08014b24 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b082      	sub	sp, #8
 8014b28:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014b2a:	2000      	movs	r0, #0
 8014b2c:	f7f8 fe96 	bl	800d85c <memp_malloc>
 8014b30:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d007      	beq.n	8014b48 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014b38:	2220      	movs	r2, #32
 8014b3a:	2100      	movs	r1, #0
 8014b3c:	6878      	ldr	r0, [r7, #4]
 8014b3e:	f004 fbd3 	bl	80192e8 <memset>
    pcb->ttl = UDP_TTL;
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	22ff      	movs	r2, #255	; 0xff
 8014b46:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014b48:	687b      	ldr	r3, [r7, #4]
}
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	3708      	adds	r7, #8
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	bd80      	pop	{r7, pc}
	...

08014b54 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014b54:	b480      	push	{r7}
 8014b56:	b085      	sub	sp, #20
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	6078      	str	r0, [r7, #4]
 8014b5c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d01e      	beq.n	8014ba2 <udp_netif_ip_addr_changed+0x4e>
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d01a      	beq.n	8014ba2 <udp_netif_ip_addr_changed+0x4e>
 8014b6c:	683b      	ldr	r3, [r7, #0]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d017      	beq.n	8014ba2 <udp_netif_ip_addr_changed+0x4e>
 8014b72:	683b      	ldr	r3, [r7, #0]
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d013      	beq.n	8014ba2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014b7a:	4b0d      	ldr	r3, [pc, #52]	; (8014bb0 <udp_netif_ip_addr_changed+0x5c>)
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	60fb      	str	r3, [r7, #12]
 8014b80:	e00c      	b.n	8014b9c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	681a      	ldr	r2, [r3, #0]
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	429a      	cmp	r2, r3
 8014b8c:	d103      	bne.n	8014b96 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014b8e:	683b      	ldr	r3, [r7, #0]
 8014b90:	681a      	ldr	r2, [r3, #0]
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	68db      	ldr	r3, [r3, #12]
 8014b9a:	60fb      	str	r3, [r7, #12]
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d1ef      	bne.n	8014b82 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014ba2:	bf00      	nop
 8014ba4:	3714      	adds	r7, #20
 8014ba6:	46bd      	mov	sp, r7
 8014ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bac:	4770      	bx	lr
 8014bae:	bf00      	nop
 8014bb0:	20006d18 	.word	0x20006d18

08014bb4 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8014bb8:	4b20      	ldr	r3, [pc, #128]	; (8014c3c <dhcp_inc_pcb_refcount+0x88>)
 8014bba:	781b      	ldrb	r3, [r3, #0]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d133      	bne.n	8014c28 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8014bc0:	4b1f      	ldr	r3, [pc, #124]	; (8014c40 <dhcp_inc_pcb_refcount+0x8c>)
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d005      	beq.n	8014bd4 <dhcp_inc_pcb_refcount+0x20>
 8014bc8:	4b1e      	ldr	r3, [pc, #120]	; (8014c44 <dhcp_inc_pcb_refcount+0x90>)
 8014bca:	22e5      	movs	r2, #229	; 0xe5
 8014bcc:	491e      	ldr	r1, [pc, #120]	; (8014c48 <dhcp_inc_pcb_refcount+0x94>)
 8014bce:	481f      	ldr	r0, [pc, #124]	; (8014c4c <dhcp_inc_pcb_refcount+0x98>)
 8014bd0:	f004 fc3c 	bl	801944c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8014bd4:	f7ff ffa6 	bl	8014b24 <udp_new>
 8014bd8:	4603      	mov	r3, r0
 8014bda:	4a19      	ldr	r2, [pc, #100]	; (8014c40 <dhcp_inc_pcb_refcount+0x8c>)
 8014bdc:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8014bde:	4b18      	ldr	r3, [pc, #96]	; (8014c40 <dhcp_inc_pcb_refcount+0x8c>)
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d102      	bne.n	8014bec <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8014be6:	f04f 33ff 	mov.w	r3, #4294967295
 8014bea:	e024      	b.n	8014c36 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8014bec:	4b14      	ldr	r3, [pc, #80]	; (8014c40 <dhcp_inc_pcb_refcount+0x8c>)
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	7a5a      	ldrb	r2, [r3, #9]
 8014bf2:	4b13      	ldr	r3, [pc, #76]	; (8014c40 <dhcp_inc_pcb_refcount+0x8c>)
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	f042 0220 	orr.w	r2, r2, #32
 8014bfa:	b2d2      	uxtb	r2, r2
 8014bfc:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8014bfe:	4b10      	ldr	r3, [pc, #64]	; (8014c40 <dhcp_inc_pcb_refcount+0x8c>)
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	2244      	movs	r2, #68	; 0x44
 8014c04:	4912      	ldr	r1, [pc, #72]	; (8014c50 <dhcp_inc_pcb_refcount+0x9c>)
 8014c06:	4618      	mov	r0, r3
 8014c08:	f7ff fe0c 	bl	8014824 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8014c0c:	4b0c      	ldr	r3, [pc, #48]	; (8014c40 <dhcp_inc_pcb_refcount+0x8c>)
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	2243      	movs	r2, #67	; 0x43
 8014c12:	490f      	ldr	r1, [pc, #60]	; (8014c50 <dhcp_inc_pcb_refcount+0x9c>)
 8014c14:	4618      	mov	r0, r3
 8014c16:	f7ff fe8d 	bl	8014934 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8014c1a:	4b09      	ldr	r3, [pc, #36]	; (8014c40 <dhcp_inc_pcb_refcount+0x8c>)
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	2200      	movs	r2, #0
 8014c20:	490c      	ldr	r1, [pc, #48]	; (8014c54 <dhcp_inc_pcb_refcount+0xa0>)
 8014c22:	4618      	mov	r0, r3
 8014c24:	f7ff ff1c 	bl	8014a60 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8014c28:	4b04      	ldr	r3, [pc, #16]	; (8014c3c <dhcp_inc_pcb_refcount+0x88>)
 8014c2a:	781b      	ldrb	r3, [r3, #0]
 8014c2c:	3301      	adds	r3, #1
 8014c2e:	b2da      	uxtb	r2, r3
 8014c30:	4b02      	ldr	r3, [pc, #8]	; (8014c3c <dhcp_inc_pcb_refcount+0x88>)
 8014c32:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8014c34:	2300      	movs	r3, #0
}
 8014c36:	4618      	mov	r0, r3
 8014c38:	bd80      	pop	{r7, pc}
 8014c3a:	bf00      	nop
 8014c3c:	20000574 	.word	0x20000574
 8014c40:	20000570 	.word	0x20000570
 8014c44:	0801d240 	.word	0x0801d240
 8014c48:	0801d278 	.word	0x0801d278
 8014c4c:	0801d2a0 	.word	0x0801d2a0
 8014c50:	0801e0dc 	.word	0x0801e0dc
 8014c54:	08016471 	.word	0x08016471

08014c58 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8014c5c:	4b0e      	ldr	r3, [pc, #56]	; (8014c98 <dhcp_dec_pcb_refcount+0x40>)
 8014c5e:	781b      	ldrb	r3, [r3, #0]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d105      	bne.n	8014c70 <dhcp_dec_pcb_refcount+0x18>
 8014c64:	4b0d      	ldr	r3, [pc, #52]	; (8014c9c <dhcp_dec_pcb_refcount+0x44>)
 8014c66:	22ff      	movs	r2, #255	; 0xff
 8014c68:	490d      	ldr	r1, [pc, #52]	; (8014ca0 <dhcp_dec_pcb_refcount+0x48>)
 8014c6a:	480e      	ldr	r0, [pc, #56]	; (8014ca4 <dhcp_dec_pcb_refcount+0x4c>)
 8014c6c:	f004 fbee 	bl	801944c <iprintf>
  dhcp_pcb_refcount--;
 8014c70:	4b09      	ldr	r3, [pc, #36]	; (8014c98 <dhcp_dec_pcb_refcount+0x40>)
 8014c72:	781b      	ldrb	r3, [r3, #0]
 8014c74:	3b01      	subs	r3, #1
 8014c76:	b2da      	uxtb	r2, r3
 8014c78:	4b07      	ldr	r3, [pc, #28]	; (8014c98 <dhcp_dec_pcb_refcount+0x40>)
 8014c7a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8014c7c:	4b06      	ldr	r3, [pc, #24]	; (8014c98 <dhcp_dec_pcb_refcount+0x40>)
 8014c7e:	781b      	ldrb	r3, [r3, #0]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d107      	bne.n	8014c94 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8014c84:	4b08      	ldr	r3, [pc, #32]	; (8014ca8 <dhcp_dec_pcb_refcount+0x50>)
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	4618      	mov	r0, r3
 8014c8a:	f7ff ff09 	bl	8014aa0 <udp_remove>
    dhcp_pcb = NULL;
 8014c8e:	4b06      	ldr	r3, [pc, #24]	; (8014ca8 <dhcp_dec_pcb_refcount+0x50>)
 8014c90:	2200      	movs	r2, #0
 8014c92:	601a      	str	r2, [r3, #0]
  }
}
 8014c94:	bf00      	nop
 8014c96:	bd80      	pop	{r7, pc}
 8014c98:	20000574 	.word	0x20000574
 8014c9c:	0801d240 	.word	0x0801d240
 8014ca0:	0801d2c8 	.word	0x0801d2c8
 8014ca4:	0801d2a0 	.word	0x0801d2a0
 8014ca8:	20000570 	.word	0x20000570

08014cac <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b084      	sub	sp, #16
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cb8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014cba:	210c      	movs	r1, #12
 8014cbc:	68f8      	ldr	r0, [r7, #12]
 8014cbe:	f001 f819 	bl	8015cf4 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014cc2:	4b06      	ldr	r3, [pc, #24]	; (8014cdc <dhcp_handle_nak+0x30>)
 8014cc4:	4a05      	ldr	r2, [pc, #20]	; (8014cdc <dhcp_handle_nak+0x30>)
 8014cc6:	4905      	ldr	r1, [pc, #20]	; (8014cdc <dhcp_handle_nak+0x30>)
 8014cc8:	6878      	ldr	r0, [r7, #4]
 8014cca:	f7f8 ffb5 	bl	800dc38 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8014cce:	6878      	ldr	r0, [r7, #4]
 8014cd0:	f000 fc0c 	bl	80154ec <dhcp_discover>
}
 8014cd4:	bf00      	nop
 8014cd6:	3710      	adds	r7, #16
 8014cd8:	46bd      	mov	sp, r7
 8014cda:	bd80      	pop	{r7, pc}
 8014cdc:	0801e0dc 	.word	0x0801e0dc

08014ce0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8014ce0:	b580      	push	{r7, lr}
 8014ce2:	b084      	sub	sp, #16
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cec:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8014cee:	2108      	movs	r1, #8
 8014cf0:	68f8      	ldr	r0, [r7, #12]
 8014cf2:	f000 ffff 	bl	8015cf4 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	331c      	adds	r3, #28
 8014cfa:	2200      	movs	r2, #0
 8014cfc:	4619      	mov	r1, r3
 8014cfe:	6878      	ldr	r0, [r7, #4]
 8014d00:	f002 fb00 	bl	8017304 <etharp_query>
 8014d04:	4603      	mov	r3, r0
 8014d06:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	799b      	ldrb	r3, [r3, #6]
 8014d0c:	2bff      	cmp	r3, #255	; 0xff
 8014d0e:	d005      	beq.n	8014d1c <dhcp_check+0x3c>
    dhcp->tries++;
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	799b      	ldrb	r3, [r3, #6]
 8014d14:	3301      	adds	r3, #1
 8014d16:	b2da      	uxtb	r2, r3
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8014d1c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8014d20:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014d22:	893b      	ldrh	r3, [r7, #8]
 8014d24:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014d28:	4a06      	ldr	r2, [pc, #24]	; (8014d44 <dhcp_check+0x64>)
 8014d2a:	fb82 1203 	smull	r1, r2, r2, r3
 8014d2e:	1152      	asrs	r2, r2, #5
 8014d30:	17db      	asrs	r3, r3, #31
 8014d32:	1ad3      	subs	r3, r2, r3
 8014d34:	b29a      	uxth	r2, r3
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8014d3a:	bf00      	nop
 8014d3c:	3710      	adds	r7, #16
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	bd80      	pop	{r7, pc}
 8014d42:	bf00      	nop
 8014d44:	10624dd3 	.word	0x10624dd3

08014d48 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b084      	sub	sp, #16
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	6078      	str	r0, [r7, #4]
 8014d50:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d56:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8014d58:	4b0c      	ldr	r3, [pc, #48]	; (8014d8c <dhcp_handle_offer+0x44>)
 8014d5a:	789b      	ldrb	r3, [r3, #2]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d011      	beq.n	8014d84 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	2200      	movs	r2, #0
 8014d64:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8014d66:	4b0a      	ldr	r3, [pc, #40]	; (8014d90 <dhcp_handle_offer+0x48>)
 8014d68:	689b      	ldr	r3, [r3, #8]
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	f7f8 f935 	bl	800cfda <lwip_htonl>
 8014d70:	4602      	mov	r2, r0
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8014d76:	683b      	ldr	r3, [r7, #0]
 8014d78:	691a      	ldr	r2, [r3, #16]
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8014d7e:	6878      	ldr	r0, [r7, #4]
 8014d80:	f000 f808 	bl	8014d94 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8014d84:	bf00      	nop
 8014d86:	3710      	adds	r7, #16
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	bd80      	pop	{r7, pc}
 8014d8c:	20006d1c 	.word	0x20006d1c
 8014d90:	20006d24 	.word	0x20006d24

08014d94 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8014d94:	b5b0      	push	{r4, r5, r7, lr}
 8014d96:	b08a      	sub	sp, #40	; 0x28
 8014d98:	af02      	add	r7, sp, #8
 8014d9a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d109      	bne.n	8014db6 <dhcp_select+0x22>
 8014da2:	4b71      	ldr	r3, [pc, #452]	; (8014f68 <dhcp_select+0x1d4>)
 8014da4:	f240 1277 	movw	r2, #375	; 0x177
 8014da8:	4970      	ldr	r1, [pc, #448]	; (8014f6c <dhcp_select+0x1d8>)
 8014daa:	4871      	ldr	r0, [pc, #452]	; (8014f70 <dhcp_select+0x1dc>)
 8014dac:	f004 fb4e 	bl	801944c <iprintf>
 8014db0:	f06f 030f 	mvn.w	r3, #15
 8014db4:	e0d3      	b.n	8014f5e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dba:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8014dbc:	69bb      	ldr	r3, [r7, #24]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d109      	bne.n	8014dd6 <dhcp_select+0x42>
 8014dc2:	4b69      	ldr	r3, [pc, #420]	; (8014f68 <dhcp_select+0x1d4>)
 8014dc4:	f240 1279 	movw	r2, #377	; 0x179
 8014dc8:	496a      	ldr	r1, [pc, #424]	; (8014f74 <dhcp_select+0x1e0>)
 8014dca:	4869      	ldr	r0, [pc, #420]	; (8014f70 <dhcp_select+0x1dc>)
 8014dcc:	f004 fb3e 	bl	801944c <iprintf>
 8014dd0:	f06f 0305 	mvn.w	r3, #5
 8014dd4:	e0c3      	b.n	8014f5e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8014dd6:	2101      	movs	r1, #1
 8014dd8:	69b8      	ldr	r0, [r7, #24]
 8014dda:	f000 ff8b 	bl	8015cf4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014dde:	f107 030c 	add.w	r3, r7, #12
 8014de2:	2203      	movs	r2, #3
 8014de4:	69b9      	ldr	r1, [r7, #24]
 8014de6:	6878      	ldr	r0, [r7, #4]
 8014de8:	f001 fc10 	bl	801660c <dhcp_create_msg>
 8014dec:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014dee:	697b      	ldr	r3, [r7, #20]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	f000 8085 	beq.w	8014f00 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014df6:	697b      	ldr	r3, [r7, #20]
 8014df8:	685b      	ldr	r3, [r3, #4]
 8014dfa:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014dfc:	89b8      	ldrh	r0, [r7, #12]
 8014dfe:	693b      	ldr	r3, [r7, #16]
 8014e00:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014e04:	2302      	movs	r3, #2
 8014e06:	2239      	movs	r2, #57	; 0x39
 8014e08:	f000 ff8e 	bl	8015d28 <dhcp_option>
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014e10:	89b8      	ldrh	r0, [r7, #12]
 8014e12:	693b      	ldr	r3, [r7, #16]
 8014e14:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014e1c:	461a      	mov	r2, r3
 8014e1e:	f000 ffdd 	bl	8015ddc <dhcp_option_short>
 8014e22:	4603      	mov	r3, r0
 8014e24:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014e26:	89b8      	ldrh	r0, [r7, #12]
 8014e28:	693b      	ldr	r3, [r7, #16]
 8014e2a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014e2e:	2304      	movs	r3, #4
 8014e30:	2232      	movs	r2, #50	; 0x32
 8014e32:	f000 ff79 	bl	8015d28 <dhcp_option>
 8014e36:	4603      	mov	r3, r0
 8014e38:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014e3a:	89bc      	ldrh	r4, [r7, #12]
 8014e3c:	693b      	ldr	r3, [r7, #16]
 8014e3e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014e42:	69bb      	ldr	r3, [r7, #24]
 8014e44:	69db      	ldr	r3, [r3, #28]
 8014e46:	4618      	mov	r0, r3
 8014e48:	f7f8 f8c7 	bl	800cfda <lwip_htonl>
 8014e4c:	4603      	mov	r3, r0
 8014e4e:	461a      	mov	r2, r3
 8014e50:	4629      	mov	r1, r5
 8014e52:	4620      	mov	r0, r4
 8014e54:	f000 fff4 	bl	8015e40 <dhcp_option_long>
 8014e58:	4603      	mov	r3, r0
 8014e5a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014e5c:	89b8      	ldrh	r0, [r7, #12]
 8014e5e:	693b      	ldr	r3, [r7, #16]
 8014e60:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014e64:	2304      	movs	r3, #4
 8014e66:	2236      	movs	r2, #54	; 0x36
 8014e68:	f000 ff5e 	bl	8015d28 <dhcp_option>
 8014e6c:	4603      	mov	r3, r0
 8014e6e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8014e70:	89bc      	ldrh	r4, [r7, #12]
 8014e72:	693b      	ldr	r3, [r7, #16]
 8014e74:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014e78:	69bb      	ldr	r3, [r7, #24]
 8014e7a:	699b      	ldr	r3, [r3, #24]
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	f7f8 f8ac 	bl	800cfda <lwip_htonl>
 8014e82:	4603      	mov	r3, r0
 8014e84:	461a      	mov	r2, r3
 8014e86:	4629      	mov	r1, r5
 8014e88:	4620      	mov	r0, r4
 8014e8a:	f000 ffd9 	bl	8015e40 <dhcp_option_long>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014e92:	89b8      	ldrh	r0, [r7, #12]
 8014e94:	693b      	ldr	r3, [r7, #16]
 8014e96:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014e9a:	2303      	movs	r3, #3
 8014e9c:	2237      	movs	r2, #55	; 0x37
 8014e9e:	f000 ff43 	bl	8015d28 <dhcp_option>
 8014ea2:	4603      	mov	r3, r0
 8014ea4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014ea6:	2300      	movs	r3, #0
 8014ea8:	77bb      	strb	r3, [r7, #30]
 8014eaa:	e00e      	b.n	8014eca <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014eac:	89b8      	ldrh	r0, [r7, #12]
 8014eae:	693b      	ldr	r3, [r7, #16]
 8014eb0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014eb4:	7fbb      	ldrb	r3, [r7, #30]
 8014eb6:	4a30      	ldr	r2, [pc, #192]	; (8014f78 <dhcp_select+0x1e4>)
 8014eb8:	5cd3      	ldrb	r3, [r2, r3]
 8014eba:	461a      	mov	r2, r3
 8014ebc:	f000 ff68 	bl	8015d90 <dhcp_option_byte>
 8014ec0:	4603      	mov	r3, r0
 8014ec2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014ec4:	7fbb      	ldrb	r3, [r7, #30]
 8014ec6:	3301      	adds	r3, #1
 8014ec8:	77bb      	strb	r3, [r7, #30]
 8014eca:	7fbb      	ldrb	r3, [r7, #30]
 8014ecc:	2b02      	cmp	r3, #2
 8014ece:	d9ed      	bls.n	8014eac <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014ed0:	89b8      	ldrh	r0, [r7, #12]
 8014ed2:	693b      	ldr	r3, [r7, #16]
 8014ed4:	33f0      	adds	r3, #240	; 0xf0
 8014ed6:	697a      	ldr	r2, [r7, #20]
 8014ed8:	4619      	mov	r1, r3
 8014eda:	f001 fc6d 	bl	80167b8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014ede:	4b27      	ldr	r3, [pc, #156]	; (8014f7c <dhcp_select+0x1e8>)
 8014ee0:	6818      	ldr	r0, [r3, #0]
 8014ee2:	4b27      	ldr	r3, [pc, #156]	; (8014f80 <dhcp_select+0x1ec>)
 8014ee4:	9301      	str	r3, [sp, #4]
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	9300      	str	r3, [sp, #0]
 8014eea:	2343      	movs	r3, #67	; 0x43
 8014eec:	4a25      	ldr	r2, [pc, #148]	; (8014f84 <dhcp_select+0x1f0>)
 8014eee:	6979      	ldr	r1, [r7, #20]
 8014ef0:	f7ff fbb2 	bl	8014658 <udp_sendto_if_src>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014ef8:	6978      	ldr	r0, [r7, #20]
 8014efa:	f7f9 fb15 	bl	800e528 <pbuf_free>
 8014efe:	e001      	b.n	8014f04 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014f00:	23ff      	movs	r3, #255	; 0xff
 8014f02:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014f04:	69bb      	ldr	r3, [r7, #24]
 8014f06:	799b      	ldrb	r3, [r3, #6]
 8014f08:	2bff      	cmp	r3, #255	; 0xff
 8014f0a:	d005      	beq.n	8014f18 <dhcp_select+0x184>
    dhcp->tries++;
 8014f0c:	69bb      	ldr	r3, [r7, #24]
 8014f0e:	799b      	ldrb	r3, [r3, #6]
 8014f10:	3301      	adds	r3, #1
 8014f12:	b2da      	uxtb	r2, r3
 8014f14:	69bb      	ldr	r3, [r7, #24]
 8014f16:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014f18:	69bb      	ldr	r3, [r7, #24]
 8014f1a:	799b      	ldrb	r3, [r3, #6]
 8014f1c:	2b05      	cmp	r3, #5
 8014f1e:	d80d      	bhi.n	8014f3c <dhcp_select+0x1a8>
 8014f20:	69bb      	ldr	r3, [r7, #24]
 8014f22:	799b      	ldrb	r3, [r3, #6]
 8014f24:	461a      	mov	r2, r3
 8014f26:	2301      	movs	r3, #1
 8014f28:	4093      	lsls	r3, r2
 8014f2a:	b29b      	uxth	r3, r3
 8014f2c:	461a      	mov	r2, r3
 8014f2e:	0152      	lsls	r2, r2, #5
 8014f30:	1ad2      	subs	r2, r2, r3
 8014f32:	0092      	lsls	r2, r2, #2
 8014f34:	4413      	add	r3, r2
 8014f36:	00db      	lsls	r3, r3, #3
 8014f38:	b29b      	uxth	r3, r3
 8014f3a:	e001      	b.n	8014f40 <dhcp_select+0x1ac>
 8014f3c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014f40:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014f42:	89fb      	ldrh	r3, [r7, #14]
 8014f44:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014f48:	4a0f      	ldr	r2, [pc, #60]	; (8014f88 <dhcp_select+0x1f4>)
 8014f4a:	fb82 1203 	smull	r1, r2, r2, r3
 8014f4e:	1152      	asrs	r2, r2, #5
 8014f50:	17db      	asrs	r3, r3, #31
 8014f52:	1ad3      	subs	r3, r2, r3
 8014f54:	b29a      	uxth	r2, r3
 8014f56:	69bb      	ldr	r3, [r7, #24]
 8014f58:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014f5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014f5e:	4618      	mov	r0, r3
 8014f60:	3720      	adds	r7, #32
 8014f62:	46bd      	mov	sp, r7
 8014f64:	bdb0      	pop	{r4, r5, r7, pc}
 8014f66:	bf00      	nop
 8014f68:	0801d240 	.word	0x0801d240
 8014f6c:	0801d2ec 	.word	0x0801d2ec
 8014f70:	0801d2a0 	.word	0x0801d2a0
 8014f74:	0801d308 	.word	0x0801d308
 8014f78:	2000006c 	.word	0x2000006c
 8014f7c:	20000570 	.word	0x20000570
 8014f80:	0801e0dc 	.word	0x0801e0dc
 8014f84:	0801e0e0 	.word	0x0801e0e0
 8014f88:	10624dd3 	.word	0x10624dd3

08014f8c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8014f8c:	b580      	push	{r7, lr}
 8014f8e:	b082      	sub	sp, #8
 8014f90:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8014f92:	4b27      	ldr	r3, [pc, #156]	; (8015030 <dhcp_coarse_tmr+0xa4>)
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	607b      	str	r3, [r7, #4]
 8014f98:	e042      	b.n	8015020 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f9e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8014fa0:	683b      	ldr	r3, [r7, #0]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d039      	beq.n	801501a <dhcp_coarse_tmr+0x8e>
 8014fa6:	683b      	ldr	r3, [r7, #0]
 8014fa8:	795b      	ldrb	r3, [r3, #5]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d035      	beq.n	801501a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8014fae:	683b      	ldr	r3, [r7, #0]
 8014fb0:	8a9b      	ldrh	r3, [r3, #20]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d012      	beq.n	8014fdc <dhcp_coarse_tmr+0x50>
 8014fb6:	683b      	ldr	r3, [r7, #0]
 8014fb8:	8a5b      	ldrh	r3, [r3, #18]
 8014fba:	3301      	adds	r3, #1
 8014fbc:	b29a      	uxth	r2, r3
 8014fbe:	683b      	ldr	r3, [r7, #0]
 8014fc0:	825a      	strh	r2, [r3, #18]
 8014fc2:	683b      	ldr	r3, [r7, #0]
 8014fc4:	8a5a      	ldrh	r2, [r3, #18]
 8014fc6:	683b      	ldr	r3, [r7, #0]
 8014fc8:	8a9b      	ldrh	r3, [r3, #20]
 8014fca:	429a      	cmp	r2, r3
 8014fcc:	d106      	bne.n	8014fdc <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8014fce:	6878      	ldr	r0, [r7, #4]
 8014fd0:	f000 fdf6 	bl	8015bc0 <dhcp_release_and_stop>
        dhcp_start(netif);
 8014fd4:	6878      	ldr	r0, [r7, #4]
 8014fd6:	f000 f969 	bl	80152ac <dhcp_start>
 8014fda:	e01e      	b.n	801501a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8014fdc:	683b      	ldr	r3, [r7, #0]
 8014fde:	8a1b      	ldrh	r3, [r3, #16]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d00b      	beq.n	8014ffc <dhcp_coarse_tmr+0x70>
 8014fe4:	683b      	ldr	r3, [r7, #0]
 8014fe6:	8a1b      	ldrh	r3, [r3, #16]
 8014fe8:	1e5a      	subs	r2, r3, #1
 8014fea:	b291      	uxth	r1, r2
 8014fec:	683a      	ldr	r2, [r7, #0]
 8014fee:	8211      	strh	r1, [r2, #16]
 8014ff0:	2b01      	cmp	r3, #1
 8014ff2:	d103      	bne.n	8014ffc <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8014ff4:	6878      	ldr	r0, [r7, #4]
 8014ff6:	f000 f8c6 	bl	8015186 <dhcp_t2_timeout>
 8014ffa:	e00e      	b.n	801501a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014ffc:	683b      	ldr	r3, [r7, #0]
 8014ffe:	89db      	ldrh	r3, [r3, #14]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d00a      	beq.n	801501a <dhcp_coarse_tmr+0x8e>
 8015004:	683b      	ldr	r3, [r7, #0]
 8015006:	89db      	ldrh	r3, [r3, #14]
 8015008:	1e5a      	subs	r2, r3, #1
 801500a:	b291      	uxth	r1, r2
 801500c:	683a      	ldr	r2, [r7, #0]
 801500e:	81d1      	strh	r1, [r2, #14]
 8015010:	2b01      	cmp	r3, #1
 8015012:	d102      	bne.n	801501a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8015014:	6878      	ldr	r0, [r7, #4]
 8015016:	f000 f888 	bl	801512a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	607b      	str	r3, [r7, #4]
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	2b00      	cmp	r3, #0
 8015024:	d1b9      	bne.n	8014f9a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8015026:	bf00      	nop
 8015028:	bf00      	nop
 801502a:	3708      	adds	r7, #8
 801502c:	46bd      	mov	sp, r7
 801502e:	bd80      	pop	{r7, pc}
 8015030:	20006cf0 	.word	0x20006cf0

08015034 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8015034:	b580      	push	{r7, lr}
 8015036:	b082      	sub	sp, #8
 8015038:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801503a:	4b16      	ldr	r3, [pc, #88]	; (8015094 <dhcp_fine_tmr+0x60>)
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	607b      	str	r3, [r7, #4]
 8015040:	e020      	b.n	8015084 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015046:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8015048:	683b      	ldr	r3, [r7, #0]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d017      	beq.n	801507e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801504e:	683b      	ldr	r3, [r7, #0]
 8015050:	891b      	ldrh	r3, [r3, #8]
 8015052:	2b01      	cmp	r3, #1
 8015054:	d906      	bls.n	8015064 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8015056:	683b      	ldr	r3, [r7, #0]
 8015058:	891b      	ldrh	r3, [r3, #8]
 801505a:	3b01      	subs	r3, #1
 801505c:	b29a      	uxth	r2, r3
 801505e:	683b      	ldr	r3, [r7, #0]
 8015060:	811a      	strh	r2, [r3, #8]
 8015062:	e00c      	b.n	801507e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8015064:	683b      	ldr	r3, [r7, #0]
 8015066:	891b      	ldrh	r3, [r3, #8]
 8015068:	2b01      	cmp	r3, #1
 801506a:	d108      	bne.n	801507e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801506c:	683b      	ldr	r3, [r7, #0]
 801506e:	891b      	ldrh	r3, [r3, #8]
 8015070:	3b01      	subs	r3, #1
 8015072:	b29a      	uxth	r2, r3
 8015074:	683b      	ldr	r3, [r7, #0]
 8015076:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8015078:	6878      	ldr	r0, [r7, #4]
 801507a:	f000 f80d 	bl	8015098 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	607b      	str	r3, [r7, #4]
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d1db      	bne.n	8015042 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801508a:	bf00      	nop
 801508c:	bf00      	nop
 801508e:	3708      	adds	r7, #8
 8015090:	46bd      	mov	sp, r7
 8015092:	bd80      	pop	{r7, pc}
 8015094:	20006cf0 	.word	0x20006cf0

08015098 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8015098:	b580      	push	{r7, lr}
 801509a:	b084      	sub	sp, #16
 801509c:	af00      	add	r7, sp, #0
 801509e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150a4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	795b      	ldrb	r3, [r3, #5]
 80150aa:	2b0c      	cmp	r3, #12
 80150ac:	d003      	beq.n	80150b6 <dhcp_timeout+0x1e>
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	795b      	ldrb	r3, [r3, #5]
 80150b2:	2b06      	cmp	r3, #6
 80150b4:	d103      	bne.n	80150be <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80150b6:	6878      	ldr	r0, [r7, #4]
 80150b8:	f000 fa18 	bl	80154ec <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80150bc:	e031      	b.n	8015122 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	795b      	ldrb	r3, [r3, #5]
 80150c2:	2b01      	cmp	r3, #1
 80150c4:	d10e      	bne.n	80150e4 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	799b      	ldrb	r3, [r3, #6]
 80150ca:	2b05      	cmp	r3, #5
 80150cc:	d803      	bhi.n	80150d6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80150ce:	6878      	ldr	r0, [r7, #4]
 80150d0:	f7ff fe60 	bl	8014d94 <dhcp_select>
}
 80150d4:	e025      	b.n	8015122 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80150d6:	6878      	ldr	r0, [r7, #4]
 80150d8:	f000 fd72 	bl	8015bc0 <dhcp_release_and_stop>
      dhcp_start(netif);
 80150dc:	6878      	ldr	r0, [r7, #4]
 80150de:	f000 f8e5 	bl	80152ac <dhcp_start>
}
 80150e2:	e01e      	b.n	8015122 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	795b      	ldrb	r3, [r3, #5]
 80150e8:	2b08      	cmp	r3, #8
 80150ea:	d10b      	bne.n	8015104 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	799b      	ldrb	r3, [r3, #6]
 80150f0:	2b01      	cmp	r3, #1
 80150f2:	d803      	bhi.n	80150fc <dhcp_timeout+0x64>
      dhcp_check(netif);
 80150f4:	6878      	ldr	r0, [r7, #4]
 80150f6:	f7ff fdf3 	bl	8014ce0 <dhcp_check>
}
 80150fa:	e012      	b.n	8015122 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80150fc:	6878      	ldr	r0, [r7, #4]
 80150fe:	f000 fa97 	bl	8015630 <dhcp_bind>
}
 8015102:	e00e      	b.n	8015122 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	795b      	ldrb	r3, [r3, #5]
 8015108:	2b03      	cmp	r3, #3
 801510a:	d10a      	bne.n	8015122 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	799b      	ldrb	r3, [r3, #6]
 8015110:	2b01      	cmp	r3, #1
 8015112:	d803      	bhi.n	801511c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8015114:	6878      	ldr	r0, [r7, #4]
 8015116:	f000 fc9d 	bl	8015a54 <dhcp_reboot>
}
 801511a:	e002      	b.n	8015122 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801511c:	6878      	ldr	r0, [r7, #4]
 801511e:	f000 f9e5 	bl	80154ec <dhcp_discover>
}
 8015122:	bf00      	nop
 8015124:	3710      	adds	r7, #16
 8015126:	46bd      	mov	sp, r7
 8015128:	bd80      	pop	{r7, pc}

0801512a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801512a:	b580      	push	{r7, lr}
 801512c:	b084      	sub	sp, #16
 801512e:	af00      	add	r7, sp, #0
 8015130:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015136:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	795b      	ldrb	r3, [r3, #5]
 801513c:	2b01      	cmp	r3, #1
 801513e:	d007      	beq.n	8015150 <dhcp_t1_timeout+0x26>
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	795b      	ldrb	r3, [r3, #5]
 8015144:	2b0a      	cmp	r3, #10
 8015146:	d003      	beq.n	8015150 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801514c:	2b05      	cmp	r3, #5
 801514e:	d116      	bne.n	801517e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8015150:	6878      	ldr	r0, [r7, #4]
 8015152:	f000 fb47 	bl	80157e4 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	899b      	ldrh	r3, [r3, #12]
 801515a:	461a      	mov	r2, r3
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	8a5b      	ldrh	r3, [r3, #18]
 8015160:	1ad3      	subs	r3, r2, r3
 8015162:	2b01      	cmp	r3, #1
 8015164:	dd0b      	ble.n	801517e <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	899b      	ldrh	r3, [r3, #12]
 801516a:	461a      	mov	r2, r3
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	8a5b      	ldrh	r3, [r3, #18]
 8015170:	1ad3      	subs	r3, r2, r3
 8015172:	0fda      	lsrs	r2, r3, #31
 8015174:	4413      	add	r3, r2
 8015176:	105b      	asrs	r3, r3, #1
 8015178:	b29a      	uxth	r2, r3
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801517e:	bf00      	nop
 8015180:	3710      	adds	r7, #16
 8015182:	46bd      	mov	sp, r7
 8015184:	bd80      	pop	{r7, pc}

08015186 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8015186:	b580      	push	{r7, lr}
 8015188:	b084      	sub	sp, #16
 801518a:	af00      	add	r7, sp, #0
 801518c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015192:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	795b      	ldrb	r3, [r3, #5]
 8015198:	2b01      	cmp	r3, #1
 801519a:	d00b      	beq.n	80151b4 <dhcp_t2_timeout+0x2e>
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	795b      	ldrb	r3, [r3, #5]
 80151a0:	2b0a      	cmp	r3, #10
 80151a2:	d007      	beq.n	80151b4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80151a8:	2b05      	cmp	r3, #5
 80151aa:	d003      	beq.n	80151b4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	795b      	ldrb	r3, [r3, #5]
 80151b0:	2b04      	cmp	r3, #4
 80151b2:	d116      	bne.n	80151e2 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80151b4:	6878      	ldr	r0, [r7, #4]
 80151b6:	f000 fbb1 	bl	801591c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	8a9b      	ldrh	r3, [r3, #20]
 80151be:	461a      	mov	r2, r3
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	8a5b      	ldrh	r3, [r3, #18]
 80151c4:	1ad3      	subs	r3, r2, r3
 80151c6:	2b01      	cmp	r3, #1
 80151c8:	dd0b      	ble.n	80151e2 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	8a9b      	ldrh	r3, [r3, #20]
 80151ce:	461a      	mov	r2, r3
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	8a5b      	ldrh	r3, [r3, #18]
 80151d4:	1ad3      	subs	r3, r2, r3
 80151d6:	0fda      	lsrs	r2, r3, #31
 80151d8:	4413      	add	r3, r2
 80151da:	105b      	asrs	r3, r3, #1
 80151dc:	b29a      	uxth	r2, r3
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80151e2:	bf00      	nop
 80151e4:	3710      	adds	r7, #16
 80151e6:	46bd      	mov	sp, r7
 80151e8:	bd80      	pop	{r7, pc}
	...

080151ec <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b084      	sub	sp, #16
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
 80151f4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151fa:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	2200      	movs	r2, #0
 8015200:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	2200      	movs	r2, #0
 8015206:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8015208:	4b26      	ldr	r3, [pc, #152]	; (80152a4 <dhcp_handle_ack+0xb8>)
 801520a:	78db      	ldrb	r3, [r3, #3]
 801520c:	2b00      	cmp	r3, #0
 801520e:	d003      	beq.n	8015218 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8015210:	4b25      	ldr	r3, [pc, #148]	; (80152a8 <dhcp_handle_ack+0xbc>)
 8015212:	68da      	ldr	r2, [r3, #12]
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8015218:	4b22      	ldr	r3, [pc, #136]	; (80152a4 <dhcp_handle_ack+0xb8>)
 801521a:	791b      	ldrb	r3, [r3, #4]
 801521c:	2b00      	cmp	r3, #0
 801521e:	d004      	beq.n	801522a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8015220:	4b21      	ldr	r3, [pc, #132]	; (80152a8 <dhcp_handle_ack+0xbc>)
 8015222:	691a      	ldr	r2, [r3, #16]
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	62da      	str	r2, [r3, #44]	; 0x2c
 8015228:	e004      	b.n	8015234 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801522e:	085a      	lsrs	r2, r3, #1
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8015234:	4b1b      	ldr	r3, [pc, #108]	; (80152a4 <dhcp_handle_ack+0xb8>)
 8015236:	795b      	ldrb	r3, [r3, #5]
 8015238:	2b00      	cmp	r3, #0
 801523a:	d004      	beq.n	8015246 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801523c:	4b1a      	ldr	r3, [pc, #104]	; (80152a8 <dhcp_handle_ack+0xbc>)
 801523e:	695a      	ldr	r2, [r3, #20]
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	631a      	str	r2, [r3, #48]	; 0x30
 8015244:	e007      	b.n	8015256 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801524a:	4613      	mov	r3, r2
 801524c:	00db      	lsls	r3, r3, #3
 801524e:	1a9b      	subs	r3, r3, r2
 8015250:	08da      	lsrs	r2, r3, #3
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8015256:	683b      	ldr	r3, [r7, #0]
 8015258:	691a      	ldr	r2, [r3, #16]
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801525e:	4b11      	ldr	r3, [pc, #68]	; (80152a4 <dhcp_handle_ack+0xb8>)
 8015260:	799b      	ldrb	r3, [r3, #6]
 8015262:	2b00      	cmp	r3, #0
 8015264:	d00b      	beq.n	801527e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8015266:	4b10      	ldr	r3, [pc, #64]	; (80152a8 <dhcp_handle_ack+0xbc>)
 8015268:	699b      	ldr	r3, [r3, #24]
 801526a:	4618      	mov	r0, r3
 801526c:	f7f7 feb5 	bl	800cfda <lwip_htonl>
 8015270:	4602      	mov	r2, r0
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	2201      	movs	r2, #1
 801527a:	71da      	strb	r2, [r3, #7]
 801527c:	e002      	b.n	8015284 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	2200      	movs	r2, #0
 8015282:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8015284:	4b07      	ldr	r3, [pc, #28]	; (80152a4 <dhcp_handle_ack+0xb8>)
 8015286:	79db      	ldrb	r3, [r3, #7]
 8015288:	2b00      	cmp	r3, #0
 801528a:	d007      	beq.n	801529c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801528c:	4b06      	ldr	r3, [pc, #24]	; (80152a8 <dhcp_handle_ack+0xbc>)
 801528e:	69db      	ldr	r3, [r3, #28]
 8015290:	4618      	mov	r0, r3
 8015292:	f7f7 fea2 	bl	800cfda <lwip_htonl>
 8015296:	4602      	mov	r2, r0
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801529c:	bf00      	nop
 801529e:	3710      	adds	r7, #16
 80152a0:	46bd      	mov	sp, r7
 80152a2:	bd80      	pop	{r7, pc}
 80152a4:	20006d1c 	.word	0x20006d1c
 80152a8:	20006d24 	.word	0x20006d24

080152ac <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	b084      	sub	sp, #16
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d109      	bne.n	80152ce <dhcp_start+0x22>
 80152ba:	4b37      	ldr	r3, [pc, #220]	; (8015398 <dhcp_start+0xec>)
 80152bc:	f240 22e7 	movw	r2, #743	; 0x2e7
 80152c0:	4936      	ldr	r1, [pc, #216]	; (801539c <dhcp_start+0xf0>)
 80152c2:	4837      	ldr	r0, [pc, #220]	; (80153a0 <dhcp_start+0xf4>)
 80152c4:	f004 f8c2 	bl	801944c <iprintf>
 80152c8:	f06f 030f 	mvn.w	r3, #15
 80152cc:	e060      	b.n	8015390 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80152d4:	f003 0301 	and.w	r3, r3, #1
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d109      	bne.n	80152f0 <dhcp_start+0x44>
 80152dc:	4b2e      	ldr	r3, [pc, #184]	; (8015398 <dhcp_start+0xec>)
 80152de:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80152e2:	4930      	ldr	r1, [pc, #192]	; (80153a4 <dhcp_start+0xf8>)
 80152e4:	482e      	ldr	r0, [pc, #184]	; (80153a0 <dhcp_start+0xf4>)
 80152e6:	f004 f8b1 	bl	801944c <iprintf>
 80152ea:	f06f 030f 	mvn.w	r3, #15
 80152ee:	e04f      	b.n	8015390 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152f4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80152fa:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80152fe:	d202      	bcs.n	8015306 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8015300:	f04f 33ff 	mov.w	r3, #4294967295
 8015304:	e044      	b.n	8015390 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d10d      	bne.n	8015328 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801530c:	2034      	movs	r0, #52	; 0x34
 801530e:	f7f8 f937 	bl	800d580 <mem_malloc>
 8015312:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	2b00      	cmp	r3, #0
 8015318:	d102      	bne.n	8015320 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801531a:	f04f 33ff 	mov.w	r3, #4294967295
 801531e:	e037      	b.n	8015390 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	68fa      	ldr	r2, [r7, #12]
 8015324:	625a      	str	r2, [r3, #36]	; 0x24
 8015326:	e005      	b.n	8015334 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	791b      	ldrb	r3, [r3, #4]
 801532c:	2b00      	cmp	r3, #0
 801532e:	d001      	beq.n	8015334 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015330:	f7ff fc92 	bl	8014c58 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8015334:	2234      	movs	r2, #52	; 0x34
 8015336:	2100      	movs	r1, #0
 8015338:	68f8      	ldr	r0, [r7, #12]
 801533a:	f003 ffd5 	bl	80192e8 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801533e:	f7ff fc39 	bl	8014bb4 <dhcp_inc_pcb_refcount>
 8015342:	4603      	mov	r3, r0
 8015344:	2b00      	cmp	r3, #0
 8015346:	d002      	beq.n	801534e <dhcp_start+0xa2>
    return ERR_MEM;
 8015348:	f04f 33ff 	mov.w	r3, #4294967295
 801534c:	e020      	b.n	8015390 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	2201      	movs	r2, #1
 8015352:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801535a:	f003 0304 	and.w	r3, r3, #4
 801535e:	2b00      	cmp	r3, #0
 8015360:	d105      	bne.n	801536e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8015362:	2102      	movs	r1, #2
 8015364:	68f8      	ldr	r0, [r7, #12]
 8015366:	f000 fcc5 	bl	8015cf4 <dhcp_set_state>
    return ERR_OK;
 801536a:	2300      	movs	r3, #0
 801536c:	e010      	b.n	8015390 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801536e:	6878      	ldr	r0, [r7, #4]
 8015370:	f000 f8bc 	bl	80154ec <dhcp_discover>
 8015374:	4603      	mov	r3, r0
 8015376:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8015378:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d005      	beq.n	801538c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8015380:	6878      	ldr	r0, [r7, #4]
 8015382:	f000 fc1d 	bl	8015bc0 <dhcp_release_and_stop>
    return ERR_MEM;
 8015386:	f04f 33ff 	mov.w	r3, #4294967295
 801538a:	e001      	b.n	8015390 <dhcp_start+0xe4>
  }
  return result;
 801538c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015390:	4618      	mov	r0, r3
 8015392:	3710      	adds	r7, #16
 8015394:	46bd      	mov	sp, r7
 8015396:	bd80      	pop	{r7, pc}
 8015398:	0801d240 	.word	0x0801d240
 801539c:	0801d324 	.word	0x0801d324
 80153a0:	0801d2a0 	.word	0x0801d2a0
 80153a4:	0801d368 	.word	0x0801d368

080153a8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b084      	sub	sp, #16
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
 80153b0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d107      	bne.n	80153c8 <dhcp_arp_reply+0x20>
 80153b8:	4b0e      	ldr	r3, [pc, #56]	; (80153f4 <dhcp_arp_reply+0x4c>)
 80153ba:	f240 328b 	movw	r2, #907	; 0x38b
 80153be:	490e      	ldr	r1, [pc, #56]	; (80153f8 <dhcp_arp_reply+0x50>)
 80153c0:	480e      	ldr	r0, [pc, #56]	; (80153fc <dhcp_arp_reply+0x54>)
 80153c2:	f004 f843 	bl	801944c <iprintf>
 80153c6:	e012      	b.n	80153ee <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153cc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d00c      	beq.n	80153ee <dhcp_arp_reply+0x46>
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	795b      	ldrb	r3, [r3, #5]
 80153d8:	2b08      	cmp	r3, #8
 80153da:	d108      	bne.n	80153ee <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80153dc:	683b      	ldr	r3, [r7, #0]
 80153de:	681a      	ldr	r2, [r3, #0]
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	69db      	ldr	r3, [r3, #28]
 80153e4:	429a      	cmp	r2, r3
 80153e6:	d102      	bne.n	80153ee <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80153e8:	6878      	ldr	r0, [r7, #4]
 80153ea:	f000 f809 	bl	8015400 <dhcp_decline>
    }
  }
}
 80153ee:	3710      	adds	r7, #16
 80153f0:	46bd      	mov	sp, r7
 80153f2:	bd80      	pop	{r7, pc}
 80153f4:	0801d240 	.word	0x0801d240
 80153f8:	0801d324 	.word	0x0801d324
 80153fc:	0801d2a0 	.word	0x0801d2a0

08015400 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8015400:	b5b0      	push	{r4, r5, r7, lr}
 8015402:	b08a      	sub	sp, #40	; 0x28
 8015404:	af02      	add	r7, sp, #8
 8015406:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801540c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801540e:	210c      	movs	r1, #12
 8015410:	69b8      	ldr	r0, [r7, #24]
 8015412:	f000 fc6f 	bl	8015cf4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8015416:	f107 030c 	add.w	r3, r7, #12
 801541a:	2204      	movs	r2, #4
 801541c:	69b9      	ldr	r1, [r7, #24]
 801541e:	6878      	ldr	r0, [r7, #4]
 8015420:	f001 f8f4 	bl	801660c <dhcp_create_msg>
 8015424:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015426:	697b      	ldr	r3, [r7, #20]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d035      	beq.n	8015498 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801542c:	697b      	ldr	r3, [r7, #20]
 801542e:	685b      	ldr	r3, [r3, #4]
 8015430:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015432:	89b8      	ldrh	r0, [r7, #12]
 8015434:	693b      	ldr	r3, [r7, #16]
 8015436:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801543a:	2304      	movs	r3, #4
 801543c:	2232      	movs	r2, #50	; 0x32
 801543e:	f000 fc73 	bl	8015d28 <dhcp_option>
 8015442:	4603      	mov	r3, r0
 8015444:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015446:	89bc      	ldrh	r4, [r7, #12]
 8015448:	693b      	ldr	r3, [r7, #16]
 801544a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801544e:	69bb      	ldr	r3, [r7, #24]
 8015450:	69db      	ldr	r3, [r3, #28]
 8015452:	4618      	mov	r0, r3
 8015454:	f7f7 fdc1 	bl	800cfda <lwip_htonl>
 8015458:	4603      	mov	r3, r0
 801545a:	461a      	mov	r2, r3
 801545c:	4629      	mov	r1, r5
 801545e:	4620      	mov	r0, r4
 8015460:	f000 fcee 	bl	8015e40 <dhcp_option_long>
 8015464:	4603      	mov	r3, r0
 8015466:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015468:	89b8      	ldrh	r0, [r7, #12]
 801546a:	693b      	ldr	r3, [r7, #16]
 801546c:	33f0      	adds	r3, #240	; 0xf0
 801546e:	697a      	ldr	r2, [r7, #20]
 8015470:	4619      	mov	r1, r3
 8015472:	f001 f9a1 	bl	80167b8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015476:	4b19      	ldr	r3, [pc, #100]	; (80154dc <dhcp_decline+0xdc>)
 8015478:	6818      	ldr	r0, [r3, #0]
 801547a:	4b19      	ldr	r3, [pc, #100]	; (80154e0 <dhcp_decline+0xe0>)
 801547c:	9301      	str	r3, [sp, #4]
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	9300      	str	r3, [sp, #0]
 8015482:	2343      	movs	r3, #67	; 0x43
 8015484:	4a17      	ldr	r2, [pc, #92]	; (80154e4 <dhcp_decline+0xe4>)
 8015486:	6979      	ldr	r1, [r7, #20]
 8015488:	f7ff f8e6 	bl	8014658 <udp_sendto_if_src>
 801548c:	4603      	mov	r3, r0
 801548e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015490:	6978      	ldr	r0, [r7, #20]
 8015492:	f7f9 f849 	bl	800e528 <pbuf_free>
 8015496:	e001      	b.n	801549c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015498:	23ff      	movs	r3, #255	; 0xff
 801549a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801549c:	69bb      	ldr	r3, [r7, #24]
 801549e:	799b      	ldrb	r3, [r3, #6]
 80154a0:	2bff      	cmp	r3, #255	; 0xff
 80154a2:	d005      	beq.n	80154b0 <dhcp_decline+0xb0>
    dhcp->tries++;
 80154a4:	69bb      	ldr	r3, [r7, #24]
 80154a6:	799b      	ldrb	r3, [r3, #6]
 80154a8:	3301      	adds	r3, #1
 80154aa:	b2da      	uxtb	r2, r3
 80154ac:	69bb      	ldr	r3, [r7, #24]
 80154ae:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80154b0:	f242 7310 	movw	r3, #10000	; 0x2710
 80154b4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80154b6:	89fb      	ldrh	r3, [r7, #14]
 80154b8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80154bc:	4a0a      	ldr	r2, [pc, #40]	; (80154e8 <dhcp_decline+0xe8>)
 80154be:	fb82 1203 	smull	r1, r2, r2, r3
 80154c2:	1152      	asrs	r2, r2, #5
 80154c4:	17db      	asrs	r3, r3, #31
 80154c6:	1ad3      	subs	r3, r2, r3
 80154c8:	b29a      	uxth	r2, r3
 80154ca:	69bb      	ldr	r3, [r7, #24]
 80154cc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80154ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80154d2:	4618      	mov	r0, r3
 80154d4:	3720      	adds	r7, #32
 80154d6:	46bd      	mov	sp, r7
 80154d8:	bdb0      	pop	{r4, r5, r7, pc}
 80154da:	bf00      	nop
 80154dc:	20000570 	.word	0x20000570
 80154e0:	0801e0dc 	.word	0x0801e0dc
 80154e4:	0801e0e0 	.word	0x0801e0e0
 80154e8:	10624dd3 	.word	0x10624dd3

080154ec <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80154ec:	b580      	push	{r7, lr}
 80154ee:	b08a      	sub	sp, #40	; 0x28
 80154f0:	af02      	add	r7, sp, #8
 80154f2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154f8:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80154fa:	2300      	movs	r3, #0
 80154fc:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80154fe:	69bb      	ldr	r3, [r7, #24]
 8015500:	2200      	movs	r2, #0
 8015502:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8015504:	2106      	movs	r1, #6
 8015506:	69b8      	ldr	r0, [r7, #24]
 8015508:	f000 fbf4 	bl	8015cf4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801550c:	f107 0308 	add.w	r3, r7, #8
 8015510:	2201      	movs	r2, #1
 8015512:	69b9      	ldr	r1, [r7, #24]
 8015514:	6878      	ldr	r0, [r7, #4]
 8015516:	f001 f879 	bl	801660c <dhcp_create_msg>
 801551a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801551c:	693b      	ldr	r3, [r7, #16]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d04b      	beq.n	80155ba <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015522:	693b      	ldr	r3, [r7, #16]
 8015524:	685b      	ldr	r3, [r3, #4]
 8015526:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015528:	8938      	ldrh	r0, [r7, #8]
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015530:	2302      	movs	r3, #2
 8015532:	2239      	movs	r2, #57	; 0x39
 8015534:	f000 fbf8 	bl	8015d28 <dhcp_option>
 8015538:	4603      	mov	r3, r0
 801553a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801553c:	8938      	ldrh	r0, [r7, #8]
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015548:	461a      	mov	r2, r3
 801554a:	f000 fc47 	bl	8015ddc <dhcp_option_short>
 801554e:	4603      	mov	r3, r0
 8015550:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015552:	8938      	ldrh	r0, [r7, #8]
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801555a:	2303      	movs	r3, #3
 801555c:	2237      	movs	r2, #55	; 0x37
 801555e:	f000 fbe3 	bl	8015d28 <dhcp_option>
 8015562:	4603      	mov	r3, r0
 8015564:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015566:	2300      	movs	r3, #0
 8015568:	77fb      	strb	r3, [r7, #31]
 801556a:	e00e      	b.n	801558a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801556c:	8938      	ldrh	r0, [r7, #8]
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015574:	7ffb      	ldrb	r3, [r7, #31]
 8015576:	4a29      	ldr	r2, [pc, #164]	; (801561c <dhcp_discover+0x130>)
 8015578:	5cd3      	ldrb	r3, [r2, r3]
 801557a:	461a      	mov	r2, r3
 801557c:	f000 fc08 	bl	8015d90 <dhcp_option_byte>
 8015580:	4603      	mov	r3, r0
 8015582:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015584:	7ffb      	ldrb	r3, [r7, #31]
 8015586:	3301      	adds	r3, #1
 8015588:	77fb      	strb	r3, [r7, #31]
 801558a:	7ffb      	ldrb	r3, [r7, #31]
 801558c:	2b02      	cmp	r3, #2
 801558e:	d9ed      	bls.n	801556c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015590:	8938      	ldrh	r0, [r7, #8]
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	33f0      	adds	r3, #240	; 0xf0
 8015596:	693a      	ldr	r2, [r7, #16]
 8015598:	4619      	mov	r1, r3
 801559a:	f001 f90d 	bl	80167b8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801559e:	4b20      	ldr	r3, [pc, #128]	; (8015620 <dhcp_discover+0x134>)
 80155a0:	6818      	ldr	r0, [r3, #0]
 80155a2:	4b20      	ldr	r3, [pc, #128]	; (8015624 <dhcp_discover+0x138>)
 80155a4:	9301      	str	r3, [sp, #4]
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	9300      	str	r3, [sp, #0]
 80155aa:	2343      	movs	r3, #67	; 0x43
 80155ac:	4a1e      	ldr	r2, [pc, #120]	; (8015628 <dhcp_discover+0x13c>)
 80155ae:	6939      	ldr	r1, [r7, #16]
 80155b0:	f7ff f852 	bl	8014658 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80155b4:	6938      	ldr	r0, [r7, #16]
 80155b6:	f7f8 ffb7 	bl	800e528 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80155ba:	69bb      	ldr	r3, [r7, #24]
 80155bc:	799b      	ldrb	r3, [r3, #6]
 80155be:	2bff      	cmp	r3, #255	; 0xff
 80155c0:	d005      	beq.n	80155ce <dhcp_discover+0xe2>
    dhcp->tries++;
 80155c2:	69bb      	ldr	r3, [r7, #24]
 80155c4:	799b      	ldrb	r3, [r3, #6]
 80155c6:	3301      	adds	r3, #1
 80155c8:	b2da      	uxtb	r2, r3
 80155ca:	69bb      	ldr	r3, [r7, #24]
 80155cc:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80155ce:	69bb      	ldr	r3, [r7, #24]
 80155d0:	799b      	ldrb	r3, [r3, #6]
 80155d2:	2b05      	cmp	r3, #5
 80155d4:	d80d      	bhi.n	80155f2 <dhcp_discover+0x106>
 80155d6:	69bb      	ldr	r3, [r7, #24]
 80155d8:	799b      	ldrb	r3, [r3, #6]
 80155da:	461a      	mov	r2, r3
 80155dc:	2301      	movs	r3, #1
 80155de:	4093      	lsls	r3, r2
 80155e0:	b29b      	uxth	r3, r3
 80155e2:	461a      	mov	r2, r3
 80155e4:	0152      	lsls	r2, r2, #5
 80155e6:	1ad2      	subs	r2, r2, r3
 80155e8:	0092      	lsls	r2, r2, #2
 80155ea:	4413      	add	r3, r2
 80155ec:	00db      	lsls	r3, r3, #3
 80155ee:	b29b      	uxth	r3, r3
 80155f0:	e001      	b.n	80155f6 <dhcp_discover+0x10a>
 80155f2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80155f6:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80155f8:	897b      	ldrh	r3, [r7, #10]
 80155fa:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80155fe:	4a0b      	ldr	r2, [pc, #44]	; (801562c <dhcp_discover+0x140>)
 8015600:	fb82 1203 	smull	r1, r2, r2, r3
 8015604:	1152      	asrs	r2, r2, #5
 8015606:	17db      	asrs	r3, r3, #31
 8015608:	1ad3      	subs	r3, r2, r3
 801560a:	b29a      	uxth	r2, r3
 801560c:	69bb      	ldr	r3, [r7, #24]
 801560e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015610:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015614:	4618      	mov	r0, r3
 8015616:	3720      	adds	r7, #32
 8015618:	46bd      	mov	sp, r7
 801561a:	bd80      	pop	{r7, pc}
 801561c:	2000006c 	.word	0x2000006c
 8015620:	20000570 	.word	0x20000570
 8015624:	0801e0dc 	.word	0x0801e0dc
 8015628:	0801e0e0 	.word	0x0801e0e0
 801562c:	10624dd3 	.word	0x10624dd3

08015630 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8015630:	b580      	push	{r7, lr}
 8015632:	b088      	sub	sp, #32
 8015634:	af00      	add	r7, sp, #0
 8015636:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d107      	bne.n	801564e <dhcp_bind+0x1e>
 801563e:	4b64      	ldr	r3, [pc, #400]	; (80157d0 <dhcp_bind+0x1a0>)
 8015640:	f240 4215 	movw	r2, #1045	; 0x415
 8015644:	4963      	ldr	r1, [pc, #396]	; (80157d4 <dhcp_bind+0x1a4>)
 8015646:	4864      	ldr	r0, [pc, #400]	; (80157d8 <dhcp_bind+0x1a8>)
 8015648:	f003 ff00 	bl	801944c <iprintf>
 801564c:	e0bc      	b.n	80157c8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015652:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8015654:	69bb      	ldr	r3, [r7, #24]
 8015656:	2b00      	cmp	r3, #0
 8015658:	d107      	bne.n	801566a <dhcp_bind+0x3a>
 801565a:	4b5d      	ldr	r3, [pc, #372]	; (80157d0 <dhcp_bind+0x1a0>)
 801565c:	f240 4217 	movw	r2, #1047	; 0x417
 8015660:	495e      	ldr	r1, [pc, #376]	; (80157dc <dhcp_bind+0x1ac>)
 8015662:	485d      	ldr	r0, [pc, #372]	; (80157d8 <dhcp_bind+0x1a8>)
 8015664:	f003 fef2 	bl	801944c <iprintf>
 8015668:	e0ae      	b.n	80157c8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801566a:	69bb      	ldr	r3, [r7, #24]
 801566c:	2200      	movs	r2, #0
 801566e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8015670:	69bb      	ldr	r3, [r7, #24]
 8015672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015678:	d019      	beq.n	80156ae <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801567a:	69bb      	ldr	r3, [r7, #24]
 801567c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801567e:	331e      	adds	r3, #30
 8015680:	4a57      	ldr	r2, [pc, #348]	; (80157e0 <dhcp_bind+0x1b0>)
 8015682:	fba2 2303 	umull	r2, r3, r2, r3
 8015686:	095b      	lsrs	r3, r3, #5
 8015688:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801568a:	69fb      	ldr	r3, [r7, #28]
 801568c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015690:	d302      	bcc.n	8015698 <dhcp_bind+0x68>
      timeout = 0xffff;
 8015692:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015696:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8015698:	69fb      	ldr	r3, [r7, #28]
 801569a:	b29a      	uxth	r2, r3
 801569c:	69bb      	ldr	r3, [r7, #24]
 801569e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80156a0:	69bb      	ldr	r3, [r7, #24]
 80156a2:	8a9b      	ldrh	r3, [r3, #20]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d102      	bne.n	80156ae <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80156a8:	69bb      	ldr	r3, [r7, #24]
 80156aa:	2201      	movs	r2, #1
 80156ac:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80156ae:	69bb      	ldr	r3, [r7, #24]
 80156b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156b6:	d01d      	beq.n	80156f4 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80156b8:	69bb      	ldr	r3, [r7, #24]
 80156ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156bc:	331e      	adds	r3, #30
 80156be:	4a48      	ldr	r2, [pc, #288]	; (80157e0 <dhcp_bind+0x1b0>)
 80156c0:	fba2 2303 	umull	r2, r3, r2, r3
 80156c4:	095b      	lsrs	r3, r3, #5
 80156c6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80156c8:	69fb      	ldr	r3, [r7, #28]
 80156ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80156ce:	d302      	bcc.n	80156d6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 80156d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80156d4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80156d6:	69fb      	ldr	r3, [r7, #28]
 80156d8:	b29a      	uxth	r2, r3
 80156da:	69bb      	ldr	r3, [r7, #24]
 80156dc:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80156de:	69bb      	ldr	r3, [r7, #24]
 80156e0:	895b      	ldrh	r3, [r3, #10]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d102      	bne.n	80156ec <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80156e6:	69bb      	ldr	r3, [r7, #24]
 80156e8:	2201      	movs	r2, #1
 80156ea:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80156ec:	69bb      	ldr	r3, [r7, #24]
 80156ee:	895a      	ldrh	r2, [r3, #10]
 80156f0:	69bb      	ldr	r3, [r7, #24]
 80156f2:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80156f4:	69bb      	ldr	r3, [r7, #24]
 80156f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156fc:	d01d      	beq.n	801573a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80156fe:	69bb      	ldr	r3, [r7, #24]
 8015700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015702:	331e      	adds	r3, #30
 8015704:	4a36      	ldr	r2, [pc, #216]	; (80157e0 <dhcp_bind+0x1b0>)
 8015706:	fba2 2303 	umull	r2, r3, r2, r3
 801570a:	095b      	lsrs	r3, r3, #5
 801570c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801570e:	69fb      	ldr	r3, [r7, #28]
 8015710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015714:	d302      	bcc.n	801571c <dhcp_bind+0xec>
      timeout = 0xffff;
 8015716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801571a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801571c:	69fb      	ldr	r3, [r7, #28]
 801571e:	b29a      	uxth	r2, r3
 8015720:	69bb      	ldr	r3, [r7, #24]
 8015722:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8015724:	69bb      	ldr	r3, [r7, #24]
 8015726:	899b      	ldrh	r3, [r3, #12]
 8015728:	2b00      	cmp	r3, #0
 801572a:	d102      	bne.n	8015732 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801572c:	69bb      	ldr	r3, [r7, #24]
 801572e:	2201      	movs	r2, #1
 8015730:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8015732:	69bb      	ldr	r3, [r7, #24]
 8015734:	899a      	ldrh	r2, [r3, #12]
 8015736:	69bb      	ldr	r3, [r7, #24]
 8015738:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801573a:	69bb      	ldr	r3, [r7, #24]
 801573c:	895a      	ldrh	r2, [r3, #10]
 801573e:	69bb      	ldr	r3, [r7, #24]
 8015740:	899b      	ldrh	r3, [r3, #12]
 8015742:	429a      	cmp	r2, r3
 8015744:	d306      	bcc.n	8015754 <dhcp_bind+0x124>
 8015746:	69bb      	ldr	r3, [r7, #24]
 8015748:	899b      	ldrh	r3, [r3, #12]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d002      	beq.n	8015754 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801574e:	69bb      	ldr	r3, [r7, #24]
 8015750:	2200      	movs	r2, #0
 8015752:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8015754:	69bb      	ldr	r3, [r7, #24]
 8015756:	79db      	ldrb	r3, [r3, #7]
 8015758:	2b00      	cmp	r3, #0
 801575a:	d003      	beq.n	8015764 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801575c:	69bb      	ldr	r3, [r7, #24]
 801575e:	6a1b      	ldr	r3, [r3, #32]
 8015760:	613b      	str	r3, [r7, #16]
 8015762:	e014      	b.n	801578e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8015764:	69bb      	ldr	r3, [r7, #24]
 8015766:	331c      	adds	r3, #28
 8015768:	781b      	ldrb	r3, [r3, #0]
 801576a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801576c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015770:	2b00      	cmp	r3, #0
 8015772:	db02      	blt.n	801577a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8015774:	23ff      	movs	r3, #255	; 0xff
 8015776:	613b      	str	r3, [r7, #16]
 8015778:	e009      	b.n	801578e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801577a:	7dfb      	ldrb	r3, [r7, #23]
 801577c:	2bbf      	cmp	r3, #191	; 0xbf
 801577e:	d903      	bls.n	8015788 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8015780:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8015784:	613b      	str	r3, [r7, #16]
 8015786:	e002      	b.n	801578e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8015788:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801578c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801578e:	69bb      	ldr	r3, [r7, #24]
 8015790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015792:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d108      	bne.n	80157ac <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801579a:	69bb      	ldr	r3, [r7, #24]
 801579c:	69da      	ldr	r2, [r3, #28]
 801579e:	693b      	ldr	r3, [r7, #16]
 80157a0:	4013      	ands	r3, r2
 80157a2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80157aa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80157ac:	210a      	movs	r1, #10
 80157ae:	69b8      	ldr	r0, [r7, #24]
 80157b0:	f000 faa0 	bl	8015cf4 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80157b4:	69bb      	ldr	r3, [r7, #24]
 80157b6:	f103 011c 	add.w	r1, r3, #28
 80157ba:	f107 030c 	add.w	r3, r7, #12
 80157be:	f107 0210 	add.w	r2, r7, #16
 80157c2:	6878      	ldr	r0, [r7, #4]
 80157c4:	f7f8 fa38 	bl	800dc38 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80157c8:	3720      	adds	r7, #32
 80157ca:	46bd      	mov	sp, r7
 80157cc:	bd80      	pop	{r7, pc}
 80157ce:	bf00      	nop
 80157d0:	0801d240 	.word	0x0801d240
 80157d4:	0801d3a0 	.word	0x0801d3a0
 80157d8:	0801d2a0 	.word	0x0801d2a0
 80157dc:	0801d3bc 	.word	0x0801d3bc
 80157e0:	88888889 	.word	0x88888889

080157e4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b08a      	sub	sp, #40	; 0x28
 80157e8:	af02      	add	r7, sp, #8
 80157ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157f0:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80157f2:	2105      	movs	r1, #5
 80157f4:	69b8      	ldr	r0, [r7, #24]
 80157f6:	f000 fa7d 	bl	8015cf4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80157fa:	f107 030c 	add.w	r3, r7, #12
 80157fe:	2203      	movs	r2, #3
 8015800:	69b9      	ldr	r1, [r7, #24]
 8015802:	6878      	ldr	r0, [r7, #4]
 8015804:	f000 ff02 	bl	801660c <dhcp_create_msg>
 8015808:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801580a:	697b      	ldr	r3, [r7, #20]
 801580c:	2b00      	cmp	r3, #0
 801580e:	d04e      	beq.n	80158ae <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015810:	697b      	ldr	r3, [r7, #20]
 8015812:	685b      	ldr	r3, [r3, #4]
 8015814:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015816:	89b8      	ldrh	r0, [r7, #12]
 8015818:	693b      	ldr	r3, [r7, #16]
 801581a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801581e:	2302      	movs	r3, #2
 8015820:	2239      	movs	r2, #57	; 0x39
 8015822:	f000 fa81 	bl	8015d28 <dhcp_option>
 8015826:	4603      	mov	r3, r0
 8015828:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801582a:	89b8      	ldrh	r0, [r7, #12]
 801582c:	693b      	ldr	r3, [r7, #16]
 801582e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015836:	461a      	mov	r2, r3
 8015838:	f000 fad0 	bl	8015ddc <dhcp_option_short>
 801583c:	4603      	mov	r3, r0
 801583e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015840:	89b8      	ldrh	r0, [r7, #12]
 8015842:	693b      	ldr	r3, [r7, #16]
 8015844:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015848:	2303      	movs	r3, #3
 801584a:	2237      	movs	r2, #55	; 0x37
 801584c:	f000 fa6c 	bl	8015d28 <dhcp_option>
 8015850:	4603      	mov	r3, r0
 8015852:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015854:	2300      	movs	r3, #0
 8015856:	77bb      	strb	r3, [r7, #30]
 8015858:	e00e      	b.n	8015878 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801585a:	89b8      	ldrh	r0, [r7, #12]
 801585c:	693b      	ldr	r3, [r7, #16]
 801585e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015862:	7fbb      	ldrb	r3, [r7, #30]
 8015864:	4a2a      	ldr	r2, [pc, #168]	; (8015910 <dhcp_renew+0x12c>)
 8015866:	5cd3      	ldrb	r3, [r2, r3]
 8015868:	461a      	mov	r2, r3
 801586a:	f000 fa91 	bl	8015d90 <dhcp_option_byte>
 801586e:	4603      	mov	r3, r0
 8015870:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015872:	7fbb      	ldrb	r3, [r7, #30]
 8015874:	3301      	adds	r3, #1
 8015876:	77bb      	strb	r3, [r7, #30]
 8015878:	7fbb      	ldrb	r3, [r7, #30]
 801587a:	2b02      	cmp	r3, #2
 801587c:	d9ed      	bls.n	801585a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801587e:	89b8      	ldrh	r0, [r7, #12]
 8015880:	693b      	ldr	r3, [r7, #16]
 8015882:	33f0      	adds	r3, #240	; 0xf0
 8015884:	697a      	ldr	r2, [r7, #20]
 8015886:	4619      	mov	r1, r3
 8015888:	f000 ff96 	bl	80167b8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801588c:	4b21      	ldr	r3, [pc, #132]	; (8015914 <dhcp_renew+0x130>)
 801588e:	6818      	ldr	r0, [r3, #0]
 8015890:	69bb      	ldr	r3, [r7, #24]
 8015892:	f103 0218 	add.w	r2, r3, #24
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	9300      	str	r3, [sp, #0]
 801589a:	2343      	movs	r3, #67	; 0x43
 801589c:	6979      	ldr	r1, [r7, #20]
 801589e:	f7fe fe67 	bl	8014570 <udp_sendto_if>
 80158a2:	4603      	mov	r3, r0
 80158a4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80158a6:	6978      	ldr	r0, [r7, #20]
 80158a8:	f7f8 fe3e 	bl	800e528 <pbuf_free>
 80158ac:	e001      	b.n	80158b2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80158ae:	23ff      	movs	r3, #255	; 0xff
 80158b0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80158b2:	69bb      	ldr	r3, [r7, #24]
 80158b4:	799b      	ldrb	r3, [r3, #6]
 80158b6:	2bff      	cmp	r3, #255	; 0xff
 80158b8:	d005      	beq.n	80158c6 <dhcp_renew+0xe2>
    dhcp->tries++;
 80158ba:	69bb      	ldr	r3, [r7, #24]
 80158bc:	799b      	ldrb	r3, [r3, #6]
 80158be:	3301      	adds	r3, #1
 80158c0:	b2da      	uxtb	r2, r3
 80158c2:	69bb      	ldr	r3, [r7, #24]
 80158c4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80158c6:	69bb      	ldr	r3, [r7, #24]
 80158c8:	799b      	ldrb	r3, [r3, #6]
 80158ca:	2b09      	cmp	r3, #9
 80158cc:	d80a      	bhi.n	80158e4 <dhcp_renew+0x100>
 80158ce:	69bb      	ldr	r3, [r7, #24]
 80158d0:	799b      	ldrb	r3, [r3, #6]
 80158d2:	b29b      	uxth	r3, r3
 80158d4:	461a      	mov	r2, r3
 80158d6:	0152      	lsls	r2, r2, #5
 80158d8:	1ad2      	subs	r2, r2, r3
 80158da:	0092      	lsls	r2, r2, #2
 80158dc:	4413      	add	r3, r2
 80158de:	011b      	lsls	r3, r3, #4
 80158e0:	b29b      	uxth	r3, r3
 80158e2:	e001      	b.n	80158e8 <dhcp_renew+0x104>
 80158e4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80158e8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80158ea:	89fb      	ldrh	r3, [r7, #14]
 80158ec:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80158f0:	4a09      	ldr	r2, [pc, #36]	; (8015918 <dhcp_renew+0x134>)
 80158f2:	fb82 1203 	smull	r1, r2, r2, r3
 80158f6:	1152      	asrs	r2, r2, #5
 80158f8:	17db      	asrs	r3, r3, #31
 80158fa:	1ad3      	subs	r3, r2, r3
 80158fc:	b29a      	uxth	r2, r3
 80158fe:	69bb      	ldr	r3, [r7, #24]
 8015900:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015902:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015906:	4618      	mov	r0, r3
 8015908:	3720      	adds	r7, #32
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}
 801590e:	bf00      	nop
 8015910:	2000006c 	.word	0x2000006c
 8015914:	20000570 	.word	0x20000570
 8015918:	10624dd3 	.word	0x10624dd3

0801591c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801591c:	b580      	push	{r7, lr}
 801591e:	b08a      	sub	sp, #40	; 0x28
 8015920:	af02      	add	r7, sp, #8
 8015922:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015928:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801592a:	2104      	movs	r1, #4
 801592c:	69b8      	ldr	r0, [r7, #24]
 801592e:	f000 f9e1 	bl	8015cf4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015932:	f107 030c 	add.w	r3, r7, #12
 8015936:	2203      	movs	r2, #3
 8015938:	69b9      	ldr	r1, [r7, #24]
 801593a:	6878      	ldr	r0, [r7, #4]
 801593c:	f000 fe66 	bl	801660c <dhcp_create_msg>
 8015940:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015942:	697b      	ldr	r3, [r7, #20]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d04c      	beq.n	80159e2 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015948:	697b      	ldr	r3, [r7, #20]
 801594a:	685b      	ldr	r3, [r3, #4]
 801594c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801594e:	89b8      	ldrh	r0, [r7, #12]
 8015950:	693b      	ldr	r3, [r7, #16]
 8015952:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015956:	2302      	movs	r3, #2
 8015958:	2239      	movs	r2, #57	; 0x39
 801595a:	f000 f9e5 	bl	8015d28 <dhcp_option>
 801595e:	4603      	mov	r3, r0
 8015960:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015962:	89b8      	ldrh	r0, [r7, #12]
 8015964:	693b      	ldr	r3, [r7, #16]
 8015966:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801596e:	461a      	mov	r2, r3
 8015970:	f000 fa34 	bl	8015ddc <dhcp_option_short>
 8015974:	4603      	mov	r3, r0
 8015976:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015978:	89b8      	ldrh	r0, [r7, #12]
 801597a:	693b      	ldr	r3, [r7, #16]
 801597c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015980:	2303      	movs	r3, #3
 8015982:	2237      	movs	r2, #55	; 0x37
 8015984:	f000 f9d0 	bl	8015d28 <dhcp_option>
 8015988:	4603      	mov	r3, r0
 801598a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801598c:	2300      	movs	r3, #0
 801598e:	77bb      	strb	r3, [r7, #30]
 8015990:	e00e      	b.n	80159b0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015992:	89b8      	ldrh	r0, [r7, #12]
 8015994:	693b      	ldr	r3, [r7, #16]
 8015996:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801599a:	7fbb      	ldrb	r3, [r7, #30]
 801599c:	4a29      	ldr	r2, [pc, #164]	; (8015a44 <dhcp_rebind+0x128>)
 801599e:	5cd3      	ldrb	r3, [r2, r3]
 80159a0:	461a      	mov	r2, r3
 80159a2:	f000 f9f5 	bl	8015d90 <dhcp_option_byte>
 80159a6:	4603      	mov	r3, r0
 80159a8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80159aa:	7fbb      	ldrb	r3, [r7, #30]
 80159ac:	3301      	adds	r3, #1
 80159ae:	77bb      	strb	r3, [r7, #30]
 80159b0:	7fbb      	ldrb	r3, [r7, #30]
 80159b2:	2b02      	cmp	r3, #2
 80159b4:	d9ed      	bls.n	8015992 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80159b6:	89b8      	ldrh	r0, [r7, #12]
 80159b8:	693b      	ldr	r3, [r7, #16]
 80159ba:	33f0      	adds	r3, #240	; 0xf0
 80159bc:	697a      	ldr	r2, [r7, #20]
 80159be:	4619      	mov	r1, r3
 80159c0:	f000 fefa 	bl	80167b8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80159c4:	4b20      	ldr	r3, [pc, #128]	; (8015a48 <dhcp_rebind+0x12c>)
 80159c6:	6818      	ldr	r0, [r3, #0]
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	9300      	str	r3, [sp, #0]
 80159cc:	2343      	movs	r3, #67	; 0x43
 80159ce:	4a1f      	ldr	r2, [pc, #124]	; (8015a4c <dhcp_rebind+0x130>)
 80159d0:	6979      	ldr	r1, [r7, #20]
 80159d2:	f7fe fdcd 	bl	8014570 <udp_sendto_if>
 80159d6:	4603      	mov	r3, r0
 80159d8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80159da:	6978      	ldr	r0, [r7, #20]
 80159dc:	f7f8 fda4 	bl	800e528 <pbuf_free>
 80159e0:	e001      	b.n	80159e6 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80159e2:	23ff      	movs	r3, #255	; 0xff
 80159e4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80159e6:	69bb      	ldr	r3, [r7, #24]
 80159e8:	799b      	ldrb	r3, [r3, #6]
 80159ea:	2bff      	cmp	r3, #255	; 0xff
 80159ec:	d005      	beq.n	80159fa <dhcp_rebind+0xde>
    dhcp->tries++;
 80159ee:	69bb      	ldr	r3, [r7, #24]
 80159f0:	799b      	ldrb	r3, [r3, #6]
 80159f2:	3301      	adds	r3, #1
 80159f4:	b2da      	uxtb	r2, r3
 80159f6:	69bb      	ldr	r3, [r7, #24]
 80159f8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80159fa:	69bb      	ldr	r3, [r7, #24]
 80159fc:	799b      	ldrb	r3, [r3, #6]
 80159fe:	2b09      	cmp	r3, #9
 8015a00:	d80a      	bhi.n	8015a18 <dhcp_rebind+0xfc>
 8015a02:	69bb      	ldr	r3, [r7, #24]
 8015a04:	799b      	ldrb	r3, [r3, #6]
 8015a06:	b29b      	uxth	r3, r3
 8015a08:	461a      	mov	r2, r3
 8015a0a:	0152      	lsls	r2, r2, #5
 8015a0c:	1ad2      	subs	r2, r2, r3
 8015a0e:	0092      	lsls	r2, r2, #2
 8015a10:	4413      	add	r3, r2
 8015a12:	00db      	lsls	r3, r3, #3
 8015a14:	b29b      	uxth	r3, r3
 8015a16:	e001      	b.n	8015a1c <dhcp_rebind+0x100>
 8015a18:	f242 7310 	movw	r3, #10000	; 0x2710
 8015a1c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015a1e:	89fb      	ldrh	r3, [r7, #14]
 8015a20:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015a24:	4a0a      	ldr	r2, [pc, #40]	; (8015a50 <dhcp_rebind+0x134>)
 8015a26:	fb82 1203 	smull	r1, r2, r2, r3
 8015a2a:	1152      	asrs	r2, r2, #5
 8015a2c:	17db      	asrs	r3, r3, #31
 8015a2e:	1ad3      	subs	r3, r2, r3
 8015a30:	b29a      	uxth	r2, r3
 8015a32:	69bb      	ldr	r3, [r7, #24]
 8015a34:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015a36:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	3720      	adds	r7, #32
 8015a3e:	46bd      	mov	sp, r7
 8015a40:	bd80      	pop	{r7, pc}
 8015a42:	bf00      	nop
 8015a44:	2000006c 	.word	0x2000006c
 8015a48:	20000570 	.word	0x20000570
 8015a4c:	0801e0e0 	.word	0x0801e0e0
 8015a50:	10624dd3 	.word	0x10624dd3

08015a54 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8015a54:	b5b0      	push	{r4, r5, r7, lr}
 8015a56:	b08a      	sub	sp, #40	; 0x28
 8015a58:	af02      	add	r7, sp, #8
 8015a5a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a60:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8015a62:	2103      	movs	r1, #3
 8015a64:	69b8      	ldr	r0, [r7, #24]
 8015a66:	f000 f945 	bl	8015cf4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015a6a:	f107 030c 	add.w	r3, r7, #12
 8015a6e:	2203      	movs	r2, #3
 8015a70:	69b9      	ldr	r1, [r7, #24]
 8015a72:	6878      	ldr	r0, [r7, #4]
 8015a74:	f000 fdca 	bl	801660c <dhcp_create_msg>
 8015a78:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015a7a:	697b      	ldr	r3, [r7, #20]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d066      	beq.n	8015b4e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015a80:	697b      	ldr	r3, [r7, #20]
 8015a82:	685b      	ldr	r3, [r3, #4]
 8015a84:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015a86:	89b8      	ldrh	r0, [r7, #12]
 8015a88:	693b      	ldr	r3, [r7, #16]
 8015a8a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015a8e:	2302      	movs	r3, #2
 8015a90:	2239      	movs	r2, #57	; 0x39
 8015a92:	f000 f949 	bl	8015d28 <dhcp_option>
 8015a96:	4603      	mov	r3, r0
 8015a98:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8015a9a:	89b8      	ldrh	r0, [r7, #12]
 8015a9c:	693b      	ldr	r3, [r7, #16]
 8015a9e:	33f0      	adds	r3, #240	; 0xf0
 8015aa0:	f44f 7210 	mov.w	r2, #576	; 0x240
 8015aa4:	4619      	mov	r1, r3
 8015aa6:	f000 f999 	bl	8015ddc <dhcp_option_short>
 8015aaa:	4603      	mov	r3, r0
 8015aac:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015aae:	89b8      	ldrh	r0, [r7, #12]
 8015ab0:	693b      	ldr	r3, [r7, #16]
 8015ab2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015ab6:	2304      	movs	r3, #4
 8015ab8:	2232      	movs	r2, #50	; 0x32
 8015aba:	f000 f935 	bl	8015d28 <dhcp_option>
 8015abe:	4603      	mov	r3, r0
 8015ac0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015ac2:	89bc      	ldrh	r4, [r7, #12]
 8015ac4:	693b      	ldr	r3, [r7, #16]
 8015ac6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015aca:	69bb      	ldr	r3, [r7, #24]
 8015acc:	69db      	ldr	r3, [r3, #28]
 8015ace:	4618      	mov	r0, r3
 8015ad0:	f7f7 fa83 	bl	800cfda <lwip_htonl>
 8015ad4:	4603      	mov	r3, r0
 8015ad6:	461a      	mov	r2, r3
 8015ad8:	4629      	mov	r1, r5
 8015ada:	4620      	mov	r0, r4
 8015adc:	f000 f9b0 	bl	8015e40 <dhcp_option_long>
 8015ae0:	4603      	mov	r3, r0
 8015ae2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015ae4:	89b8      	ldrh	r0, [r7, #12]
 8015ae6:	693b      	ldr	r3, [r7, #16]
 8015ae8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015aec:	2303      	movs	r3, #3
 8015aee:	2237      	movs	r2, #55	; 0x37
 8015af0:	f000 f91a 	bl	8015d28 <dhcp_option>
 8015af4:	4603      	mov	r3, r0
 8015af6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015af8:	2300      	movs	r3, #0
 8015afa:	77bb      	strb	r3, [r7, #30]
 8015afc:	e00e      	b.n	8015b1c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015afe:	89b8      	ldrh	r0, [r7, #12]
 8015b00:	693b      	ldr	r3, [r7, #16]
 8015b02:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015b06:	7fbb      	ldrb	r3, [r7, #30]
 8015b08:	4a29      	ldr	r2, [pc, #164]	; (8015bb0 <dhcp_reboot+0x15c>)
 8015b0a:	5cd3      	ldrb	r3, [r2, r3]
 8015b0c:	461a      	mov	r2, r3
 8015b0e:	f000 f93f 	bl	8015d90 <dhcp_option_byte>
 8015b12:	4603      	mov	r3, r0
 8015b14:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015b16:	7fbb      	ldrb	r3, [r7, #30]
 8015b18:	3301      	adds	r3, #1
 8015b1a:	77bb      	strb	r3, [r7, #30]
 8015b1c:	7fbb      	ldrb	r3, [r7, #30]
 8015b1e:	2b02      	cmp	r3, #2
 8015b20:	d9ed      	bls.n	8015afe <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015b22:	89b8      	ldrh	r0, [r7, #12]
 8015b24:	693b      	ldr	r3, [r7, #16]
 8015b26:	33f0      	adds	r3, #240	; 0xf0
 8015b28:	697a      	ldr	r2, [r7, #20]
 8015b2a:	4619      	mov	r1, r3
 8015b2c:	f000 fe44 	bl	80167b8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015b30:	4b20      	ldr	r3, [pc, #128]	; (8015bb4 <dhcp_reboot+0x160>)
 8015b32:	6818      	ldr	r0, [r3, #0]
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	9300      	str	r3, [sp, #0]
 8015b38:	2343      	movs	r3, #67	; 0x43
 8015b3a:	4a1f      	ldr	r2, [pc, #124]	; (8015bb8 <dhcp_reboot+0x164>)
 8015b3c:	6979      	ldr	r1, [r7, #20]
 8015b3e:	f7fe fd17 	bl	8014570 <udp_sendto_if>
 8015b42:	4603      	mov	r3, r0
 8015b44:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015b46:	6978      	ldr	r0, [r7, #20]
 8015b48:	f7f8 fcee 	bl	800e528 <pbuf_free>
 8015b4c:	e001      	b.n	8015b52 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015b4e:	23ff      	movs	r3, #255	; 0xff
 8015b50:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015b52:	69bb      	ldr	r3, [r7, #24]
 8015b54:	799b      	ldrb	r3, [r3, #6]
 8015b56:	2bff      	cmp	r3, #255	; 0xff
 8015b58:	d005      	beq.n	8015b66 <dhcp_reboot+0x112>
    dhcp->tries++;
 8015b5a:	69bb      	ldr	r3, [r7, #24]
 8015b5c:	799b      	ldrb	r3, [r3, #6]
 8015b5e:	3301      	adds	r3, #1
 8015b60:	b2da      	uxtb	r2, r3
 8015b62:	69bb      	ldr	r3, [r7, #24]
 8015b64:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015b66:	69bb      	ldr	r3, [r7, #24]
 8015b68:	799b      	ldrb	r3, [r3, #6]
 8015b6a:	2b09      	cmp	r3, #9
 8015b6c:	d80a      	bhi.n	8015b84 <dhcp_reboot+0x130>
 8015b6e:	69bb      	ldr	r3, [r7, #24]
 8015b70:	799b      	ldrb	r3, [r3, #6]
 8015b72:	b29b      	uxth	r3, r3
 8015b74:	461a      	mov	r2, r3
 8015b76:	0152      	lsls	r2, r2, #5
 8015b78:	1ad2      	subs	r2, r2, r3
 8015b7a:	0092      	lsls	r2, r2, #2
 8015b7c:	4413      	add	r3, r2
 8015b7e:	00db      	lsls	r3, r3, #3
 8015b80:	b29b      	uxth	r3, r3
 8015b82:	e001      	b.n	8015b88 <dhcp_reboot+0x134>
 8015b84:	f242 7310 	movw	r3, #10000	; 0x2710
 8015b88:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015b8a:	89fb      	ldrh	r3, [r7, #14]
 8015b8c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015b90:	4a0a      	ldr	r2, [pc, #40]	; (8015bbc <dhcp_reboot+0x168>)
 8015b92:	fb82 1203 	smull	r1, r2, r2, r3
 8015b96:	1152      	asrs	r2, r2, #5
 8015b98:	17db      	asrs	r3, r3, #31
 8015b9a:	1ad3      	subs	r3, r2, r3
 8015b9c:	b29a      	uxth	r2, r3
 8015b9e:	69bb      	ldr	r3, [r7, #24]
 8015ba0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015ba2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	3720      	adds	r7, #32
 8015baa:	46bd      	mov	sp, r7
 8015bac:	bdb0      	pop	{r4, r5, r7, pc}
 8015bae:	bf00      	nop
 8015bb0:	2000006c 	.word	0x2000006c
 8015bb4:	20000570 	.word	0x20000570
 8015bb8:	0801e0e0 	.word	0x0801e0e0
 8015bbc:	10624dd3 	.word	0x10624dd3

08015bc0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8015bc0:	b5b0      	push	{r4, r5, r7, lr}
 8015bc2:	b08a      	sub	sp, #40	; 0x28
 8015bc4:	af02      	add	r7, sp, #8
 8015bc6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bcc:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8015bce:	69fb      	ldr	r3, [r7, #28]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	f000 8084 	beq.w	8015cde <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8015bd6:	69fb      	ldr	r3, [r7, #28]
 8015bd8:	795b      	ldrb	r3, [r3, #5]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	f000 8081 	beq.w	8015ce2 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8015be0:	69fb      	ldr	r3, [r7, #28]
 8015be2:	699b      	ldr	r3, [r3, #24]
 8015be4:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8015be6:	69fb      	ldr	r3, [r7, #28]
 8015be8:	2200      	movs	r2, #0
 8015bea:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8015bec:	69fb      	ldr	r3, [r7, #28]
 8015bee:	2200      	movs	r2, #0
 8015bf0:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8015bf2:	69fb      	ldr	r3, [r7, #28]
 8015bf4:	2200      	movs	r2, #0
 8015bf6:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015bf8:	69fb      	ldr	r3, [r7, #28]
 8015bfa:	2200      	movs	r2, #0
 8015bfc:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8015bfe:	69fb      	ldr	r3, [r7, #28]
 8015c00:	2200      	movs	r2, #0
 8015c02:	631a      	str	r2, [r3, #48]	; 0x30
 8015c04:	69fb      	ldr	r3, [r7, #28]
 8015c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015c08:	69fb      	ldr	r3, [r7, #28]
 8015c0a:	62da      	str	r2, [r3, #44]	; 0x2c
 8015c0c:	69fb      	ldr	r3, [r7, #28]
 8015c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c10:	69fb      	ldr	r3, [r7, #28]
 8015c12:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8015c14:	69fb      	ldr	r3, [r7, #28]
 8015c16:	2200      	movs	r2, #0
 8015c18:	829a      	strh	r2, [r3, #20]
 8015c1a:	69fb      	ldr	r3, [r7, #28]
 8015c1c:	8a9a      	ldrh	r2, [r3, #20]
 8015c1e:	69fb      	ldr	r3, [r7, #28]
 8015c20:	825a      	strh	r2, [r3, #18]
 8015c22:	69fb      	ldr	r3, [r7, #28]
 8015c24:	8a5a      	ldrh	r2, [r3, #18]
 8015c26:	69fb      	ldr	r3, [r7, #28]
 8015c28:	821a      	strh	r2, [r3, #16]
 8015c2a:	69fb      	ldr	r3, [r7, #28]
 8015c2c:	8a1a      	ldrh	r2, [r3, #16]
 8015c2e:	69fb      	ldr	r3, [r7, #28]
 8015c30:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8015c32:	6878      	ldr	r0, [r7, #4]
 8015c34:	f000 fdee 	bl	8016814 <dhcp_supplied_address>
 8015c38:	4603      	mov	r3, r0
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d03b      	beq.n	8015cb6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8015c3e:	f107 030e 	add.w	r3, r7, #14
 8015c42:	2207      	movs	r2, #7
 8015c44:	69f9      	ldr	r1, [r7, #28]
 8015c46:	6878      	ldr	r0, [r7, #4]
 8015c48:	f000 fce0 	bl	801660c <dhcp_create_msg>
 8015c4c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8015c4e:	69bb      	ldr	r3, [r7, #24]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d030      	beq.n	8015cb6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015c54:	69bb      	ldr	r3, [r7, #24]
 8015c56:	685b      	ldr	r3, [r3, #4]
 8015c58:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015c5a:	89f8      	ldrh	r0, [r7, #14]
 8015c5c:	697b      	ldr	r3, [r7, #20]
 8015c5e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015c62:	2304      	movs	r3, #4
 8015c64:	2236      	movs	r2, #54	; 0x36
 8015c66:	f000 f85f 	bl	8015d28 <dhcp_option>
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8015c6e:	89fc      	ldrh	r4, [r7, #14]
 8015c70:	697b      	ldr	r3, [r7, #20]
 8015c72:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015c76:	693b      	ldr	r3, [r7, #16]
 8015c78:	4618      	mov	r0, r3
 8015c7a:	f7f7 f9ae 	bl	800cfda <lwip_htonl>
 8015c7e:	4603      	mov	r3, r0
 8015c80:	461a      	mov	r2, r3
 8015c82:	4629      	mov	r1, r5
 8015c84:	4620      	mov	r0, r4
 8015c86:	f000 f8db 	bl	8015e40 <dhcp_option_long>
 8015c8a:	4603      	mov	r3, r0
 8015c8c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015c8e:	89f8      	ldrh	r0, [r7, #14]
 8015c90:	697b      	ldr	r3, [r7, #20]
 8015c92:	33f0      	adds	r3, #240	; 0xf0
 8015c94:	69ba      	ldr	r2, [r7, #24]
 8015c96:	4619      	mov	r1, r3
 8015c98:	f000 fd8e 	bl	80167b8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015c9c:	4b13      	ldr	r3, [pc, #76]	; (8015cec <dhcp_release_and_stop+0x12c>)
 8015c9e:	6818      	ldr	r0, [r3, #0]
 8015ca0:	f107 0210 	add.w	r2, r7, #16
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	9300      	str	r3, [sp, #0]
 8015ca8:	2343      	movs	r3, #67	; 0x43
 8015caa:	69b9      	ldr	r1, [r7, #24]
 8015cac:	f7fe fc60 	bl	8014570 <udp_sendto_if>
      pbuf_free(p_out);
 8015cb0:	69b8      	ldr	r0, [r7, #24]
 8015cb2:	f7f8 fc39 	bl	800e528 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015cb6:	4b0e      	ldr	r3, [pc, #56]	; (8015cf0 <dhcp_release_and_stop+0x130>)
 8015cb8:	4a0d      	ldr	r2, [pc, #52]	; (8015cf0 <dhcp_release_and_stop+0x130>)
 8015cba:	490d      	ldr	r1, [pc, #52]	; (8015cf0 <dhcp_release_and_stop+0x130>)
 8015cbc:	6878      	ldr	r0, [r7, #4]
 8015cbe:	f7f7 ffbb 	bl	800dc38 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8015cc2:	2100      	movs	r1, #0
 8015cc4:	69f8      	ldr	r0, [r7, #28]
 8015cc6:	f000 f815 	bl	8015cf4 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8015cca:	69fb      	ldr	r3, [r7, #28]
 8015ccc:	791b      	ldrb	r3, [r3, #4]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d008      	beq.n	8015ce4 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015cd2:	f7fe ffc1 	bl	8014c58 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8015cd6:	69fb      	ldr	r3, [r7, #28]
 8015cd8:	2200      	movs	r2, #0
 8015cda:	711a      	strb	r2, [r3, #4]
 8015cdc:	e002      	b.n	8015ce4 <dhcp_release_and_stop+0x124>
    return;
 8015cde:	bf00      	nop
 8015ce0:	e000      	b.n	8015ce4 <dhcp_release_and_stop+0x124>
    return;
 8015ce2:	bf00      	nop
  }
}
 8015ce4:	3720      	adds	r7, #32
 8015ce6:	46bd      	mov	sp, r7
 8015ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8015cea:	bf00      	nop
 8015cec:	20000570 	.word	0x20000570
 8015cf0:	0801e0dc 	.word	0x0801e0dc

08015cf4 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8015cf4:	b480      	push	{r7}
 8015cf6:	b083      	sub	sp, #12
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	6078      	str	r0, [r7, #4]
 8015cfc:	460b      	mov	r3, r1
 8015cfe:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	795b      	ldrb	r3, [r3, #5]
 8015d04:	78fa      	ldrb	r2, [r7, #3]
 8015d06:	429a      	cmp	r2, r3
 8015d08:	d008      	beq.n	8015d1c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	78fa      	ldrb	r2, [r7, #3]
 8015d0e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	2200      	movs	r2, #0
 8015d14:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	2200      	movs	r2, #0
 8015d1a:	811a      	strh	r2, [r3, #8]
  }
}
 8015d1c:	bf00      	nop
 8015d1e:	370c      	adds	r7, #12
 8015d20:	46bd      	mov	sp, r7
 8015d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d26:	4770      	bx	lr

08015d28 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8015d28:	b580      	push	{r7, lr}
 8015d2a:	b082      	sub	sp, #8
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	6039      	str	r1, [r7, #0]
 8015d30:	4611      	mov	r1, r2
 8015d32:	461a      	mov	r2, r3
 8015d34:	4603      	mov	r3, r0
 8015d36:	80fb      	strh	r3, [r7, #6]
 8015d38:	460b      	mov	r3, r1
 8015d3a:	717b      	strb	r3, [r7, #5]
 8015d3c:	4613      	mov	r3, r2
 8015d3e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8015d40:	88fa      	ldrh	r2, [r7, #6]
 8015d42:	793b      	ldrb	r3, [r7, #4]
 8015d44:	4413      	add	r3, r2
 8015d46:	3302      	adds	r3, #2
 8015d48:	2b44      	cmp	r3, #68	; 0x44
 8015d4a:	d906      	bls.n	8015d5a <dhcp_option+0x32>
 8015d4c:	4b0d      	ldr	r3, [pc, #52]	; (8015d84 <dhcp_option+0x5c>)
 8015d4e:	f240 529a 	movw	r2, #1434	; 0x59a
 8015d52:	490d      	ldr	r1, [pc, #52]	; (8015d88 <dhcp_option+0x60>)
 8015d54:	480d      	ldr	r0, [pc, #52]	; (8015d8c <dhcp_option+0x64>)
 8015d56:	f003 fb79 	bl	801944c <iprintf>
  options[options_out_len++] = option_type;
 8015d5a:	88fb      	ldrh	r3, [r7, #6]
 8015d5c:	1c5a      	adds	r2, r3, #1
 8015d5e:	80fa      	strh	r2, [r7, #6]
 8015d60:	461a      	mov	r2, r3
 8015d62:	683b      	ldr	r3, [r7, #0]
 8015d64:	4413      	add	r3, r2
 8015d66:	797a      	ldrb	r2, [r7, #5]
 8015d68:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8015d6a:	88fb      	ldrh	r3, [r7, #6]
 8015d6c:	1c5a      	adds	r2, r3, #1
 8015d6e:	80fa      	strh	r2, [r7, #6]
 8015d70:	461a      	mov	r2, r3
 8015d72:	683b      	ldr	r3, [r7, #0]
 8015d74:	4413      	add	r3, r2
 8015d76:	793a      	ldrb	r2, [r7, #4]
 8015d78:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015d7a:	88fb      	ldrh	r3, [r7, #6]
}
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	3708      	adds	r7, #8
 8015d80:	46bd      	mov	sp, r7
 8015d82:	bd80      	pop	{r7, pc}
 8015d84:	0801d240 	.word	0x0801d240
 8015d88:	0801d3d4 	.word	0x0801d3d4
 8015d8c:	0801d2a0 	.word	0x0801d2a0

08015d90 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8015d90:	b580      	push	{r7, lr}
 8015d92:	b082      	sub	sp, #8
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	4603      	mov	r3, r0
 8015d98:	6039      	str	r1, [r7, #0]
 8015d9a:	80fb      	strh	r3, [r7, #6]
 8015d9c:	4613      	mov	r3, r2
 8015d9e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8015da0:	88fb      	ldrh	r3, [r7, #6]
 8015da2:	2b43      	cmp	r3, #67	; 0x43
 8015da4:	d906      	bls.n	8015db4 <dhcp_option_byte+0x24>
 8015da6:	4b0a      	ldr	r3, [pc, #40]	; (8015dd0 <dhcp_option_byte+0x40>)
 8015da8:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8015dac:	4909      	ldr	r1, [pc, #36]	; (8015dd4 <dhcp_option_byte+0x44>)
 8015dae:	480a      	ldr	r0, [pc, #40]	; (8015dd8 <dhcp_option_byte+0x48>)
 8015db0:	f003 fb4c 	bl	801944c <iprintf>
  options[options_out_len++] = value;
 8015db4:	88fb      	ldrh	r3, [r7, #6]
 8015db6:	1c5a      	adds	r2, r3, #1
 8015db8:	80fa      	strh	r2, [r7, #6]
 8015dba:	461a      	mov	r2, r3
 8015dbc:	683b      	ldr	r3, [r7, #0]
 8015dbe:	4413      	add	r3, r2
 8015dc0:	797a      	ldrb	r2, [r7, #5]
 8015dc2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015dc4:	88fb      	ldrh	r3, [r7, #6]
}
 8015dc6:	4618      	mov	r0, r3
 8015dc8:	3708      	adds	r7, #8
 8015dca:	46bd      	mov	sp, r7
 8015dcc:	bd80      	pop	{r7, pc}
 8015dce:	bf00      	nop
 8015dd0:	0801d240 	.word	0x0801d240
 8015dd4:	0801d418 	.word	0x0801d418
 8015dd8:	0801d2a0 	.word	0x0801d2a0

08015ddc <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8015ddc:	b580      	push	{r7, lr}
 8015dde:	b082      	sub	sp, #8
 8015de0:	af00      	add	r7, sp, #0
 8015de2:	4603      	mov	r3, r0
 8015de4:	6039      	str	r1, [r7, #0]
 8015de6:	80fb      	strh	r3, [r7, #6]
 8015de8:	4613      	mov	r3, r2
 8015dea:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8015dec:	88fb      	ldrh	r3, [r7, #6]
 8015dee:	3302      	adds	r3, #2
 8015df0:	2b44      	cmp	r3, #68	; 0x44
 8015df2:	d906      	bls.n	8015e02 <dhcp_option_short+0x26>
 8015df4:	4b0f      	ldr	r3, [pc, #60]	; (8015e34 <dhcp_option_short+0x58>)
 8015df6:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8015dfa:	490f      	ldr	r1, [pc, #60]	; (8015e38 <dhcp_option_short+0x5c>)
 8015dfc:	480f      	ldr	r0, [pc, #60]	; (8015e3c <dhcp_option_short+0x60>)
 8015dfe:	f003 fb25 	bl	801944c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8015e02:	88bb      	ldrh	r3, [r7, #4]
 8015e04:	0a1b      	lsrs	r3, r3, #8
 8015e06:	b29a      	uxth	r2, r3
 8015e08:	88fb      	ldrh	r3, [r7, #6]
 8015e0a:	1c59      	adds	r1, r3, #1
 8015e0c:	80f9      	strh	r1, [r7, #6]
 8015e0e:	4619      	mov	r1, r3
 8015e10:	683b      	ldr	r3, [r7, #0]
 8015e12:	440b      	add	r3, r1
 8015e14:	b2d2      	uxtb	r2, r2
 8015e16:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8015e18:	88fb      	ldrh	r3, [r7, #6]
 8015e1a:	1c5a      	adds	r2, r3, #1
 8015e1c:	80fa      	strh	r2, [r7, #6]
 8015e1e:	461a      	mov	r2, r3
 8015e20:	683b      	ldr	r3, [r7, #0]
 8015e22:	4413      	add	r3, r2
 8015e24:	88ba      	ldrh	r2, [r7, #4]
 8015e26:	b2d2      	uxtb	r2, r2
 8015e28:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015e2a:	88fb      	ldrh	r3, [r7, #6]
}
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	3708      	adds	r7, #8
 8015e30:	46bd      	mov	sp, r7
 8015e32:	bd80      	pop	{r7, pc}
 8015e34:	0801d240 	.word	0x0801d240
 8015e38:	0801d450 	.word	0x0801d450
 8015e3c:	0801d2a0 	.word	0x0801d2a0

08015e40 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b084      	sub	sp, #16
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	4603      	mov	r3, r0
 8015e48:	60b9      	str	r1, [r7, #8]
 8015e4a:	607a      	str	r2, [r7, #4]
 8015e4c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8015e4e:	89fb      	ldrh	r3, [r7, #14]
 8015e50:	3304      	adds	r3, #4
 8015e52:	2b44      	cmp	r3, #68	; 0x44
 8015e54:	d906      	bls.n	8015e64 <dhcp_option_long+0x24>
 8015e56:	4b19      	ldr	r3, [pc, #100]	; (8015ebc <dhcp_option_long+0x7c>)
 8015e58:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8015e5c:	4918      	ldr	r1, [pc, #96]	; (8015ec0 <dhcp_option_long+0x80>)
 8015e5e:	4819      	ldr	r0, [pc, #100]	; (8015ec4 <dhcp_option_long+0x84>)
 8015e60:	f003 faf4 	bl	801944c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	0e1a      	lsrs	r2, r3, #24
 8015e68:	89fb      	ldrh	r3, [r7, #14]
 8015e6a:	1c59      	adds	r1, r3, #1
 8015e6c:	81f9      	strh	r1, [r7, #14]
 8015e6e:	4619      	mov	r1, r3
 8015e70:	68bb      	ldr	r3, [r7, #8]
 8015e72:	440b      	add	r3, r1
 8015e74:	b2d2      	uxtb	r2, r2
 8015e76:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	0c1a      	lsrs	r2, r3, #16
 8015e7c:	89fb      	ldrh	r3, [r7, #14]
 8015e7e:	1c59      	adds	r1, r3, #1
 8015e80:	81f9      	strh	r1, [r7, #14]
 8015e82:	4619      	mov	r1, r3
 8015e84:	68bb      	ldr	r3, [r7, #8]
 8015e86:	440b      	add	r3, r1
 8015e88:	b2d2      	uxtb	r2, r2
 8015e8a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	0a1a      	lsrs	r2, r3, #8
 8015e90:	89fb      	ldrh	r3, [r7, #14]
 8015e92:	1c59      	adds	r1, r3, #1
 8015e94:	81f9      	strh	r1, [r7, #14]
 8015e96:	4619      	mov	r1, r3
 8015e98:	68bb      	ldr	r3, [r7, #8]
 8015e9a:	440b      	add	r3, r1
 8015e9c:	b2d2      	uxtb	r2, r2
 8015e9e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8015ea0:	89fb      	ldrh	r3, [r7, #14]
 8015ea2:	1c5a      	adds	r2, r3, #1
 8015ea4:	81fa      	strh	r2, [r7, #14]
 8015ea6:	461a      	mov	r2, r3
 8015ea8:	68bb      	ldr	r3, [r7, #8]
 8015eaa:	4413      	add	r3, r2
 8015eac:	687a      	ldr	r2, [r7, #4]
 8015eae:	b2d2      	uxtb	r2, r2
 8015eb0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015eb2:	89fb      	ldrh	r3, [r7, #14]
}
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	3710      	adds	r7, #16
 8015eb8:	46bd      	mov	sp, r7
 8015eba:	bd80      	pop	{r7, pc}
 8015ebc:	0801d240 	.word	0x0801d240
 8015ec0:	0801d48c 	.word	0x0801d48c
 8015ec4:	0801d2a0 	.word	0x0801d2a0

08015ec8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8015ec8:	b580      	push	{r7, lr}
 8015eca:	b090      	sub	sp, #64	; 0x40
 8015ecc:	af00      	add	r7, sp, #0
 8015ece:	6078      	str	r0, [r7, #4]
 8015ed0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8015eda:	2208      	movs	r2, #8
 8015edc:	2100      	movs	r1, #0
 8015ede:	48be      	ldr	r0, [pc, #760]	; (80161d8 <dhcp_parse_reply+0x310>)
 8015ee0:	f003 fa02 	bl	80192e8 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	895b      	ldrh	r3, [r3, #10]
 8015ee8:	2b2b      	cmp	r3, #43	; 0x2b
 8015eea:	d802      	bhi.n	8015ef2 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8015eec:	f06f 0301 	mvn.w	r3, #1
 8015ef0:	e2a8      	b.n	8016444 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	685b      	ldr	r3, [r3, #4]
 8015ef6:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8015ef8:	23f0      	movs	r3, #240	; 0xf0
 8015efa:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	891b      	ldrh	r3, [r3, #8]
 8015f00:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015f06:	e00c      	b.n	8015f22 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8015f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f0a:	895b      	ldrh	r3, [r3, #10]
 8015f0c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015f0e:	1ad3      	subs	r3, r2, r3
 8015f10:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8015f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f14:	895b      	ldrh	r3, [r3, #10]
 8015f16:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8015f18:	1ad3      	subs	r3, r2, r3
 8015f1a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8015f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d004      	beq.n	8015f32 <dhcp_parse_reply+0x6a>
 8015f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f2a:	895b      	ldrh	r3, [r3, #10]
 8015f2c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015f2e:	429a      	cmp	r2, r3
 8015f30:	d2ea      	bcs.n	8015f08 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8015f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d102      	bne.n	8015f3e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8015f38:	f06f 0301 	mvn.w	r3, #1
 8015f3c:	e282      	b.n	8016444 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8015f3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015f40:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8015f42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015f44:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8015f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f48:	685b      	ldr	r3, [r3, #4]
 8015f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015f4c:	e23a      	b.n	80163c4 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8015f4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015f50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015f52:	4413      	add	r3, r2
 8015f54:	781b      	ldrb	r3, [r3, #0]
 8015f56:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8015f58:	2300      	movs	r3, #0
 8015f5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8015f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8015f62:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8015f64:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015f66:	3302      	adds	r3, #2
 8015f68:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8015f6a:	8bfa      	ldrh	r2, [r7, #30]
 8015f6c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015f6e:	429a      	cmp	r2, r3
 8015f70:	d202      	bcs.n	8015f78 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8015f72:	f06f 0301 	mvn.w	r3, #1
 8015f76:	e265      	b.n	8016444 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8015f78:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015f7a:	3301      	adds	r3, #1
 8015f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f7e:	8952      	ldrh	r2, [r2, #10]
 8015f80:	4293      	cmp	r3, r2
 8015f82:	da07      	bge.n	8015f94 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8015f84:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015f86:	3301      	adds	r3, #1
 8015f88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015f8a:	4413      	add	r3, r2
 8015f8c:	781b      	ldrb	r3, [r3, #0]
 8015f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015f92:	e00b      	b.n	8015fac <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8015f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d004      	beq.n	8015fa6 <dhcp_parse_reply+0xde>
 8015f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	685b      	ldr	r3, [r3, #4]
 8015fa2:	781b      	ldrb	r3, [r3, #0]
 8015fa4:	e000      	b.n	8015fa8 <dhcp_parse_reply+0xe0>
 8015fa6:	2300      	movs	r3, #0
 8015fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8015fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015fb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8015fb4:	7dfb      	ldrb	r3, [r7, #23]
 8015fb6:	2b3b      	cmp	r3, #59	; 0x3b
 8015fb8:	f200 812d 	bhi.w	8016216 <dhcp_parse_reply+0x34e>
 8015fbc:	a201      	add	r2, pc, #4	; (adr r2, 8015fc4 <dhcp_parse_reply+0xfc>)
 8015fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fc2:	bf00      	nop
 8015fc4:	080160b5 	.word	0x080160b5
 8015fc8:	080160c5 	.word	0x080160c5
 8015fcc:	08016217 	.word	0x08016217
 8015fd0:	080160e7 	.word	0x080160e7
 8015fd4:	08016217 	.word	0x08016217
 8015fd8:	08016217 	.word	0x08016217
 8015fdc:	08016217 	.word	0x08016217
 8015fe0:	08016217 	.word	0x08016217
 8015fe4:	08016217 	.word	0x08016217
 8015fe8:	08016217 	.word	0x08016217
 8015fec:	08016217 	.word	0x08016217
 8015ff0:	08016217 	.word	0x08016217
 8015ff4:	08016217 	.word	0x08016217
 8015ff8:	08016217 	.word	0x08016217
 8015ffc:	08016217 	.word	0x08016217
 8016000:	08016217 	.word	0x08016217
 8016004:	08016217 	.word	0x08016217
 8016008:	08016217 	.word	0x08016217
 801600c:	08016217 	.word	0x08016217
 8016010:	08016217 	.word	0x08016217
 8016014:	08016217 	.word	0x08016217
 8016018:	08016217 	.word	0x08016217
 801601c:	08016217 	.word	0x08016217
 8016020:	08016217 	.word	0x08016217
 8016024:	08016217 	.word	0x08016217
 8016028:	08016217 	.word	0x08016217
 801602c:	08016217 	.word	0x08016217
 8016030:	08016217 	.word	0x08016217
 8016034:	08016217 	.word	0x08016217
 8016038:	08016217 	.word	0x08016217
 801603c:	08016217 	.word	0x08016217
 8016040:	08016217 	.word	0x08016217
 8016044:	08016217 	.word	0x08016217
 8016048:	08016217 	.word	0x08016217
 801604c:	08016217 	.word	0x08016217
 8016050:	08016217 	.word	0x08016217
 8016054:	08016217 	.word	0x08016217
 8016058:	08016217 	.word	0x08016217
 801605c:	08016217 	.word	0x08016217
 8016060:	08016217 	.word	0x08016217
 8016064:	08016217 	.word	0x08016217
 8016068:	08016217 	.word	0x08016217
 801606c:	08016217 	.word	0x08016217
 8016070:	08016217 	.word	0x08016217
 8016074:	08016217 	.word	0x08016217
 8016078:	08016217 	.word	0x08016217
 801607c:	08016217 	.word	0x08016217
 8016080:	08016217 	.word	0x08016217
 8016084:	08016217 	.word	0x08016217
 8016088:	08016217 	.word	0x08016217
 801608c:	08016217 	.word	0x08016217
 8016090:	08016113 	.word	0x08016113
 8016094:	08016135 	.word	0x08016135
 8016098:	08016171 	.word	0x08016171
 801609c:	08016193 	.word	0x08016193
 80160a0:	08016217 	.word	0x08016217
 80160a4:	08016217 	.word	0x08016217
 80160a8:	08016217 	.word	0x08016217
 80160ac:	080161b5 	.word	0x080161b5
 80160b0:	080161f5 	.word	0x080161f5
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80160b4:	2300      	movs	r3, #0
 80160b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80160ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80160c2:	e0ac      	b.n	801621e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80160c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160c8:	2b04      	cmp	r3, #4
 80160ca:	d009      	beq.n	80160e0 <dhcp_parse_reply+0x218>
 80160cc:	4b43      	ldr	r3, [pc, #268]	; (80161dc <dhcp_parse_reply+0x314>)
 80160ce:	f240 622e 	movw	r2, #1582	; 0x62e
 80160d2:	4943      	ldr	r1, [pc, #268]	; (80161e0 <dhcp_parse_reply+0x318>)
 80160d4:	4843      	ldr	r0, [pc, #268]	; (80161e4 <dhcp_parse_reply+0x31c>)
 80160d6:	f003 f9b9 	bl	801944c <iprintf>
 80160da:	f06f 0305 	mvn.w	r3, #5
 80160de:	e1b1      	b.n	8016444 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80160e0:	2306      	movs	r3, #6
 80160e2:	623b      	str	r3, [r7, #32]
        break;
 80160e4:	e09b      	b.n	801621e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80160e6:	2304      	movs	r3, #4
 80160e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80160ec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80160f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80160f4:	429a      	cmp	r2, r3
 80160f6:	d209      	bcs.n	801610c <dhcp_parse_reply+0x244>
 80160f8:	4b38      	ldr	r3, [pc, #224]	; (80161dc <dhcp_parse_reply+0x314>)
 80160fa:	f240 6233 	movw	r2, #1587	; 0x633
 80160fe:	493a      	ldr	r1, [pc, #232]	; (80161e8 <dhcp_parse_reply+0x320>)
 8016100:	4838      	ldr	r0, [pc, #224]	; (80161e4 <dhcp_parse_reply+0x31c>)
 8016102:	f003 f9a3 	bl	801944c <iprintf>
 8016106:	f06f 0305 	mvn.w	r3, #5
 801610a:	e19b      	b.n	8016444 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801610c:	2307      	movs	r3, #7
 801610e:	623b      	str	r3, [r7, #32]
        break;
 8016110:	e085      	b.n	801621e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016112:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016116:	2b04      	cmp	r3, #4
 8016118:	d009      	beq.n	801612e <dhcp_parse_reply+0x266>
 801611a:	4b30      	ldr	r3, [pc, #192]	; (80161dc <dhcp_parse_reply+0x314>)
 801611c:	f240 6241 	movw	r2, #1601	; 0x641
 8016120:	492f      	ldr	r1, [pc, #188]	; (80161e0 <dhcp_parse_reply+0x318>)
 8016122:	4830      	ldr	r0, [pc, #192]	; (80161e4 <dhcp_parse_reply+0x31c>)
 8016124:	f003 f992 	bl	801944c <iprintf>
 8016128:	f06f 0305 	mvn.w	r3, #5
 801612c:	e18a      	b.n	8016444 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801612e:	2303      	movs	r3, #3
 8016130:	623b      	str	r3, [r7, #32]
        break;
 8016132:	e074      	b.n	801621e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8016134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016138:	2b01      	cmp	r3, #1
 801613a:	d009      	beq.n	8016150 <dhcp_parse_reply+0x288>
 801613c:	4b27      	ldr	r3, [pc, #156]	; (80161dc <dhcp_parse_reply+0x314>)
 801613e:	f240 624f 	movw	r2, #1615	; 0x64f
 8016142:	492a      	ldr	r1, [pc, #168]	; (80161ec <dhcp_parse_reply+0x324>)
 8016144:	4827      	ldr	r0, [pc, #156]	; (80161e4 <dhcp_parse_reply+0x31c>)
 8016146:	f003 f981 	bl	801944c <iprintf>
 801614a:	f06f 0305 	mvn.w	r3, #5
 801614e:	e179      	b.n	8016444 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8016150:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016152:	2bf0      	cmp	r3, #240	; 0xf0
 8016154:	d009      	beq.n	801616a <dhcp_parse_reply+0x2a2>
 8016156:	4b21      	ldr	r3, [pc, #132]	; (80161dc <dhcp_parse_reply+0x314>)
 8016158:	f240 6251 	movw	r2, #1617	; 0x651
 801615c:	4924      	ldr	r1, [pc, #144]	; (80161f0 <dhcp_parse_reply+0x328>)
 801615e:	4821      	ldr	r0, [pc, #132]	; (80161e4 <dhcp_parse_reply+0x31c>)
 8016160:	f003 f974 	bl	801944c <iprintf>
 8016164:	f06f 0305 	mvn.w	r3, #5
 8016168:	e16c      	b.n	8016444 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801616a:	2300      	movs	r3, #0
 801616c:	623b      	str	r3, [r7, #32]
        break;
 801616e:	e056      	b.n	801621e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8016170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016174:	2b01      	cmp	r3, #1
 8016176:	d009      	beq.n	801618c <dhcp_parse_reply+0x2c4>
 8016178:	4b18      	ldr	r3, [pc, #96]	; (80161dc <dhcp_parse_reply+0x314>)
 801617a:	f240 6255 	movw	r2, #1621	; 0x655
 801617e:	491b      	ldr	r1, [pc, #108]	; (80161ec <dhcp_parse_reply+0x324>)
 8016180:	4818      	ldr	r0, [pc, #96]	; (80161e4 <dhcp_parse_reply+0x31c>)
 8016182:	f003 f963 	bl	801944c <iprintf>
 8016186:	f06f 0305 	mvn.w	r3, #5
 801618a:	e15b      	b.n	8016444 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801618c:	2301      	movs	r3, #1
 801618e:	623b      	str	r3, [r7, #32]
        break;
 8016190:	e045      	b.n	801621e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016196:	2b04      	cmp	r3, #4
 8016198:	d009      	beq.n	80161ae <dhcp_parse_reply+0x2e6>
 801619a:	4b10      	ldr	r3, [pc, #64]	; (80161dc <dhcp_parse_reply+0x314>)
 801619c:	f240 6259 	movw	r2, #1625	; 0x659
 80161a0:	490f      	ldr	r1, [pc, #60]	; (80161e0 <dhcp_parse_reply+0x318>)
 80161a2:	4810      	ldr	r0, [pc, #64]	; (80161e4 <dhcp_parse_reply+0x31c>)
 80161a4:	f003 f952 	bl	801944c <iprintf>
 80161a8:	f06f 0305 	mvn.w	r3, #5
 80161ac:	e14a      	b.n	8016444 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80161ae:	2302      	movs	r3, #2
 80161b0:	623b      	str	r3, [r7, #32]
        break;
 80161b2:	e034      	b.n	801621e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80161b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161b8:	2b04      	cmp	r3, #4
 80161ba:	d009      	beq.n	80161d0 <dhcp_parse_reply+0x308>
 80161bc:	4b07      	ldr	r3, [pc, #28]	; (80161dc <dhcp_parse_reply+0x314>)
 80161be:	f240 625d 	movw	r2, #1629	; 0x65d
 80161c2:	4907      	ldr	r1, [pc, #28]	; (80161e0 <dhcp_parse_reply+0x318>)
 80161c4:	4807      	ldr	r0, [pc, #28]	; (80161e4 <dhcp_parse_reply+0x31c>)
 80161c6:	f003 f941 	bl	801944c <iprintf>
 80161ca:	f06f 0305 	mvn.w	r3, #5
 80161ce:	e139      	b.n	8016444 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 80161d0:	2304      	movs	r3, #4
 80161d2:	623b      	str	r3, [r7, #32]
        break;
 80161d4:	e023      	b.n	801621e <dhcp_parse_reply+0x356>
 80161d6:	bf00      	nop
 80161d8:	20006d1c 	.word	0x20006d1c
 80161dc:	0801d240 	.word	0x0801d240
 80161e0:	0801d4c8 	.word	0x0801d4c8
 80161e4:	0801d2a0 	.word	0x0801d2a0
 80161e8:	0801d4d4 	.word	0x0801d4d4
 80161ec:	0801d4e8 	.word	0x0801d4e8
 80161f0:	0801d4f4 	.word	0x0801d4f4
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80161f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161f8:	2b04      	cmp	r3, #4
 80161fa:	d009      	beq.n	8016210 <dhcp_parse_reply+0x348>
 80161fc:	4b93      	ldr	r3, [pc, #588]	; (801644c <dhcp_parse_reply+0x584>)
 80161fe:	f240 6261 	movw	r2, #1633	; 0x661
 8016202:	4993      	ldr	r1, [pc, #588]	; (8016450 <dhcp_parse_reply+0x588>)
 8016204:	4893      	ldr	r0, [pc, #588]	; (8016454 <dhcp_parse_reply+0x58c>)
 8016206:	f003 f921 	bl	801944c <iprintf>
 801620a:	f06f 0305 	mvn.w	r3, #5
 801620e:	e119      	b.n	8016444 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8016210:	2305      	movs	r3, #5
 8016212:	623b      	str	r3, [r7, #32]
        break;
 8016214:	e003      	b.n	801621e <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8016216:	2300      	movs	r3, #0
 8016218:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801621c:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801621e:	7dfb      	ldrb	r3, [r7, #23]
 8016220:	2b00      	cmp	r3, #0
 8016222:	d103      	bne.n	801622c <dhcp_parse_reply+0x364>
      offset++;
 8016224:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016226:	3301      	adds	r3, #1
 8016228:	877b      	strh	r3, [r7, #58]	; 0x3a
 801622a:	e0a1      	b.n	8016370 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801622c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801622e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016232:	4413      	add	r3, r2
 8016234:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8016238:	4293      	cmp	r3, r2
 801623a:	dd02      	ble.n	8016242 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 801623c:	f06f 0301 	mvn.w	r3, #1
 8016240:	e100      	b.n	8016444 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8016242:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016246:	b29a      	uxth	r2, r3
 8016248:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801624a:	4413      	add	r3, r2
 801624c:	b29b      	uxth	r3, r3
 801624e:	3302      	adds	r3, #2
 8016250:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8016252:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016256:	2b00      	cmp	r3, #0
 8016258:	f000 808a 	beq.w	8016370 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 801625c:	2300      	movs	r3, #0
 801625e:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8016260:	6a3b      	ldr	r3, [r7, #32]
 8016262:	2b00      	cmp	r3, #0
 8016264:	db02      	blt.n	801626c <dhcp_parse_reply+0x3a4>
 8016266:	6a3b      	ldr	r3, [r7, #32]
 8016268:	2b07      	cmp	r3, #7
 801626a:	dd06      	ble.n	801627a <dhcp_parse_reply+0x3b2>
 801626c:	4b77      	ldr	r3, [pc, #476]	; (801644c <dhcp_parse_reply+0x584>)
 801626e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8016272:	4979      	ldr	r1, [pc, #484]	; (8016458 <dhcp_parse_reply+0x590>)
 8016274:	4877      	ldr	r0, [pc, #476]	; (8016454 <dhcp_parse_reply+0x58c>)
 8016276:	f003 f8e9 	bl	801944c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801627a:	4a78      	ldr	r2, [pc, #480]	; (801645c <dhcp_parse_reply+0x594>)
 801627c:	6a3b      	ldr	r3, [r7, #32]
 801627e:	4413      	add	r3, r2
 8016280:	781b      	ldrb	r3, [r3, #0]
 8016282:	2b00      	cmp	r3, #0
 8016284:	d174      	bne.n	8016370 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8016286:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801628a:	2b04      	cmp	r3, #4
 801628c:	bf28      	it	cs
 801628e:	2304      	movcs	r3, #4
 8016290:	b2db      	uxtb	r3, r3
 8016292:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8016294:	8bfb      	ldrh	r3, [r7, #30]
 8016296:	8aba      	ldrh	r2, [r7, #20]
 8016298:	f107 0108 	add.w	r1, r7, #8
 801629c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801629e:	f7f8 fb3d 	bl	800e91c <pbuf_copy_partial>
 80162a2:	4603      	mov	r3, r0
 80162a4:	461a      	mov	r2, r3
 80162a6:	8abb      	ldrh	r3, [r7, #20]
 80162a8:	4293      	cmp	r3, r2
 80162aa:	d002      	beq.n	80162b2 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 80162ac:	f06f 0301 	mvn.w	r3, #1
 80162b0:	e0c8      	b.n	8016444 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 80162b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80162b6:	2b04      	cmp	r3, #4
 80162b8:	d933      	bls.n	8016322 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80162ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80162be:	f003 0303 	and.w	r3, r3, #3
 80162c2:	b2db      	uxtb	r3, r3
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d009      	beq.n	80162dc <dhcp_parse_reply+0x414>
 80162c8:	4b60      	ldr	r3, [pc, #384]	; (801644c <dhcp_parse_reply+0x584>)
 80162ca:	f240 6281 	movw	r2, #1665	; 0x681
 80162ce:	4964      	ldr	r1, [pc, #400]	; (8016460 <dhcp_parse_reply+0x598>)
 80162d0:	4860      	ldr	r0, [pc, #384]	; (8016454 <dhcp_parse_reply+0x58c>)
 80162d2:	f003 f8bb 	bl	801944c <iprintf>
 80162d6:	f06f 0305 	mvn.w	r3, #5
 80162da:	e0b3      	b.n	8016444 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 80162dc:	4a5f      	ldr	r2, [pc, #380]	; (801645c <dhcp_parse_reply+0x594>)
 80162de:	6a3b      	ldr	r3, [r7, #32]
 80162e0:	4413      	add	r3, r2
 80162e2:	2201      	movs	r2, #1
 80162e4:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80162e6:	68bb      	ldr	r3, [r7, #8]
 80162e8:	4618      	mov	r0, r3
 80162ea:	f7f6 fe76 	bl	800cfda <lwip_htonl>
 80162ee:	4602      	mov	r2, r0
 80162f0:	495c      	ldr	r1, [pc, #368]	; (8016464 <dhcp_parse_reply+0x59c>)
 80162f2:	6a3b      	ldr	r3, [r7, #32]
 80162f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80162f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80162fc:	3b04      	subs	r3, #4
 80162fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8016302:	8bfb      	ldrh	r3, [r7, #30]
 8016304:	3304      	adds	r3, #4
 8016306:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8016308:	8a7a      	ldrh	r2, [r7, #18]
 801630a:	8bfb      	ldrh	r3, [r7, #30]
 801630c:	429a      	cmp	r2, r3
 801630e:	d202      	bcs.n	8016316 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8016310:	f06f 0301 	mvn.w	r3, #1
 8016314:	e096      	b.n	8016444 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8016316:	8a7b      	ldrh	r3, [r7, #18]
 8016318:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801631a:	6a3b      	ldr	r3, [r7, #32]
 801631c:	3301      	adds	r3, #1
 801631e:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8016320:	e79e      	b.n	8016260 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8016322:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016326:	2b04      	cmp	r3, #4
 8016328:	d106      	bne.n	8016338 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 801632a:	68bb      	ldr	r3, [r7, #8]
 801632c:	4618      	mov	r0, r3
 801632e:	f7f6 fe54 	bl	800cfda <lwip_htonl>
 8016332:	4603      	mov	r3, r0
 8016334:	60bb      	str	r3, [r7, #8]
 8016336:	e011      	b.n	801635c <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8016338:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801633c:	2b01      	cmp	r3, #1
 801633e:	d009      	beq.n	8016354 <dhcp_parse_reply+0x48c>
 8016340:	4b42      	ldr	r3, [pc, #264]	; (801644c <dhcp_parse_reply+0x584>)
 8016342:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8016346:	4948      	ldr	r1, [pc, #288]	; (8016468 <dhcp_parse_reply+0x5a0>)
 8016348:	4842      	ldr	r0, [pc, #264]	; (8016454 <dhcp_parse_reply+0x58c>)
 801634a:	f003 f87f 	bl	801944c <iprintf>
 801634e:	f06f 0305 	mvn.w	r3, #5
 8016352:	e077      	b.n	8016444 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8016354:	f107 0308 	add.w	r3, r7, #8
 8016358:	781b      	ldrb	r3, [r3, #0]
 801635a:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801635c:	4a3f      	ldr	r2, [pc, #252]	; (801645c <dhcp_parse_reply+0x594>)
 801635e:	6a3b      	ldr	r3, [r7, #32]
 8016360:	4413      	add	r3, r2
 8016362:	2201      	movs	r2, #1
 8016364:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8016366:	68ba      	ldr	r2, [r7, #8]
 8016368:	493e      	ldr	r1, [pc, #248]	; (8016464 <dhcp_parse_reply+0x59c>)
 801636a:	6a3b      	ldr	r3, [r7, #32]
 801636c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8016370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016372:	895b      	ldrh	r3, [r3, #10]
 8016374:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016376:	429a      	cmp	r2, r3
 8016378:	d324      	bcc.n	80163c4 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 801637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801637c:	895b      	ldrh	r3, [r3, #10]
 801637e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016380:	1ad3      	subs	r3, r2, r3
 8016382:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8016384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016386:	895b      	ldrh	r3, [r3, #10]
 8016388:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801638a:	1ad3      	subs	r3, r2, r3
 801638c:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801638e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016390:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016392:	429a      	cmp	r2, r3
 8016394:	d213      	bcs.n	80163be <dhcp_parse_reply+0x4f6>
        q = q->next;
 8016396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801639c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d109      	bne.n	80163b6 <dhcp_parse_reply+0x4ee>
 80163a2:	4b2a      	ldr	r3, [pc, #168]	; (801644c <dhcp_parse_reply+0x584>)
 80163a4:	f240 629d 	movw	r2, #1693	; 0x69d
 80163a8:	4930      	ldr	r1, [pc, #192]	; (801646c <dhcp_parse_reply+0x5a4>)
 80163aa:	482a      	ldr	r0, [pc, #168]	; (8016454 <dhcp_parse_reply+0x58c>)
 80163ac:	f003 f84e 	bl	801944c <iprintf>
 80163b0:	f06f 0305 	mvn.w	r3, #5
 80163b4:	e046      	b.n	8016444 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 80163b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163b8:	685b      	ldr	r3, [r3, #4]
 80163ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80163bc:	e002      	b.n	80163c4 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80163be:	f06f 0301 	mvn.w	r3, #1
 80163c2:	e03f      	b.n	8016444 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80163c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d00a      	beq.n	80163e0 <dhcp_parse_reply+0x518>
 80163ca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80163cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80163ce:	429a      	cmp	r2, r3
 80163d0:	d206      	bcs.n	80163e0 <dhcp_parse_reply+0x518>
 80163d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80163d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80163d6:	4413      	add	r3, r2
 80163d8:	781b      	ldrb	r3, [r3, #0]
 80163da:	2bff      	cmp	r3, #255	; 0xff
 80163dc:	f47f adb7 	bne.w	8015f4e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80163e0:	4b1e      	ldr	r3, [pc, #120]	; (801645c <dhcp_parse_reply+0x594>)
 80163e2:	781b      	ldrb	r3, [r3, #0]
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d018      	beq.n	801641a <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80163e8:	4b1e      	ldr	r3, [pc, #120]	; (8016464 <dhcp_parse_reply+0x59c>)
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80163ee:	4b1b      	ldr	r3, [pc, #108]	; (801645c <dhcp_parse_reply+0x594>)
 80163f0:	2200      	movs	r2, #0
 80163f2:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	2b01      	cmp	r3, #1
 80163f8:	d102      	bne.n	8016400 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 80163fa:	2301      	movs	r3, #1
 80163fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80163fe:	e00c      	b.n	801641a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	2b02      	cmp	r3, #2
 8016404:	d102      	bne.n	801640c <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8016406:	2301      	movs	r3, #1
 8016408:	62bb      	str	r3, [r7, #40]	; 0x28
 801640a:	e006      	b.n	801641a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	2b03      	cmp	r3, #3
 8016410:	d103      	bne.n	801641a <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8016412:	2301      	movs	r3, #1
 8016414:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8016416:	2301      	movs	r3, #1
 8016418:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801641a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801641c:	2b00      	cmp	r3, #0
 801641e:	d006      	beq.n	801642e <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8016420:	2300      	movs	r3, #0
 8016422:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8016424:	236c      	movs	r3, #108	; 0x6c
 8016426:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8016428:	23ec      	movs	r3, #236	; 0xec
 801642a:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801642c:	e569      	b.n	8015f02 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016430:	2b00      	cmp	r3, #0
 8016432:	d006      	beq.n	8016442 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8016434:	2300      	movs	r3, #0
 8016436:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8016438:	232c      	movs	r3, #44	; 0x2c
 801643a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801643c:	236c      	movs	r3, #108	; 0x6c
 801643e:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8016440:	e55f      	b.n	8015f02 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8016442:	2300      	movs	r3, #0
}
 8016444:	4618      	mov	r0, r3
 8016446:	3740      	adds	r7, #64	; 0x40
 8016448:	46bd      	mov	sp, r7
 801644a:	bd80      	pop	{r7, pc}
 801644c:	0801d240 	.word	0x0801d240
 8016450:	0801d4c8 	.word	0x0801d4c8
 8016454:	0801d2a0 	.word	0x0801d2a0
 8016458:	0801d50c 	.word	0x0801d50c
 801645c:	20006d1c 	.word	0x20006d1c
 8016460:	0801d520 	.word	0x0801d520
 8016464:	20006d24 	.word	0x20006d24
 8016468:	0801d538 	.word	0x0801d538
 801646c:	0801d54c 	.word	0x0801d54c

08016470 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b08a      	sub	sp, #40	; 0x28
 8016474:	af00      	add	r7, sp, #0
 8016476:	60f8      	str	r0, [r7, #12]
 8016478:	60b9      	str	r1, [r7, #8]
 801647a:	607a      	str	r2, [r7, #4]
 801647c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801647e:	4b60      	ldr	r3, [pc, #384]	; (8016600 <dhcp_recv+0x190>)
 8016480:	685b      	ldr	r3, [r3, #4]
 8016482:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016484:	6a3b      	ldr	r3, [r7, #32]
 8016486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016488:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	685b      	ldr	r3, [r3, #4]
 801648e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8016490:	69fb      	ldr	r3, [r7, #28]
 8016492:	2b00      	cmp	r3, #0
 8016494:	f000 809d 	beq.w	80165d2 <dhcp_recv+0x162>
 8016498:	69fb      	ldr	r3, [r7, #28]
 801649a:	791b      	ldrb	r3, [r3, #4]
 801649c:	2b00      	cmp	r3, #0
 801649e:	f000 8098 	beq.w	80165d2 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	895b      	ldrh	r3, [r3, #10]
 80164a6:	2b2b      	cmp	r3, #43	; 0x2b
 80164a8:	f240 8095 	bls.w	80165d6 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80164ac:	69bb      	ldr	r3, [r7, #24]
 80164ae:	781b      	ldrb	r3, [r3, #0]
 80164b0:	2b02      	cmp	r3, #2
 80164b2:	f040 8092 	bne.w	80165da <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80164b6:	2300      	movs	r3, #0
 80164b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80164bc:	e012      	b.n	80164e4 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80164be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80164c2:	6a3a      	ldr	r2, [r7, #32]
 80164c4:	4413      	add	r3, r2
 80164c6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80164ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80164ce:	69b9      	ldr	r1, [r7, #24]
 80164d0:	440b      	add	r3, r1
 80164d2:	7f1b      	ldrb	r3, [r3, #28]
 80164d4:	429a      	cmp	r2, r3
 80164d6:	f040 8082 	bne.w	80165de <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80164da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80164de:	3301      	adds	r3, #1
 80164e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80164e4:	6a3b      	ldr	r3, [r7, #32]
 80164e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80164ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80164ee:	429a      	cmp	r2, r3
 80164f0:	d203      	bcs.n	80164fa <dhcp_recv+0x8a>
 80164f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80164f6:	2b05      	cmp	r3, #5
 80164f8:	d9e1      	bls.n	80164be <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80164fa:	69bb      	ldr	r3, [r7, #24]
 80164fc:	685b      	ldr	r3, [r3, #4]
 80164fe:	4618      	mov	r0, r3
 8016500:	f7f6 fd6b 	bl	800cfda <lwip_htonl>
 8016504:	4602      	mov	r2, r0
 8016506:	69fb      	ldr	r3, [r7, #28]
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	429a      	cmp	r2, r3
 801650c:	d169      	bne.n	80165e2 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801650e:	69f9      	ldr	r1, [r7, #28]
 8016510:	6878      	ldr	r0, [r7, #4]
 8016512:	f7ff fcd9 	bl	8015ec8 <dhcp_parse_reply>
 8016516:	4603      	mov	r3, r0
 8016518:	2b00      	cmp	r3, #0
 801651a:	d164      	bne.n	80165e6 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801651c:	4b39      	ldr	r3, [pc, #228]	; (8016604 <dhcp_recv+0x194>)
 801651e:	785b      	ldrb	r3, [r3, #1]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d062      	beq.n	80165ea <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	685b      	ldr	r3, [r3, #4]
 8016528:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801652a:	4b37      	ldr	r3, [pc, #220]	; (8016608 <dhcp_recv+0x198>)
 801652c:	685b      	ldr	r3, [r3, #4]
 801652e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8016530:	7cfb      	ldrb	r3, [r7, #19]
 8016532:	2b05      	cmp	r3, #5
 8016534:	d12a      	bne.n	801658c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8016536:	69fb      	ldr	r3, [r7, #28]
 8016538:	795b      	ldrb	r3, [r3, #5]
 801653a:	2b01      	cmp	r3, #1
 801653c:	d112      	bne.n	8016564 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801653e:	6979      	ldr	r1, [r7, #20]
 8016540:	6a38      	ldr	r0, [r7, #32]
 8016542:	f7fe fe53 	bl	80151ec <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8016546:	6a3b      	ldr	r3, [r7, #32]
 8016548:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801654c:	f003 0308 	and.w	r3, r3, #8
 8016550:	2b00      	cmp	r3, #0
 8016552:	d003      	beq.n	801655c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8016554:	6a38      	ldr	r0, [r7, #32]
 8016556:	f7fe fbc3 	bl	8014ce0 <dhcp_check>
 801655a:	e049      	b.n	80165f0 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801655c:	6a38      	ldr	r0, [r7, #32]
 801655e:	f7ff f867 	bl	8015630 <dhcp_bind>
 8016562:	e045      	b.n	80165f0 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8016564:	69fb      	ldr	r3, [r7, #28]
 8016566:	795b      	ldrb	r3, [r3, #5]
 8016568:	2b03      	cmp	r3, #3
 801656a:	d007      	beq.n	801657c <dhcp_recv+0x10c>
 801656c:	69fb      	ldr	r3, [r7, #28]
 801656e:	795b      	ldrb	r3, [r3, #5]
 8016570:	2b04      	cmp	r3, #4
 8016572:	d003      	beq.n	801657c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8016574:	69fb      	ldr	r3, [r7, #28]
 8016576:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8016578:	2b05      	cmp	r3, #5
 801657a:	d139      	bne.n	80165f0 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801657c:	6979      	ldr	r1, [r7, #20]
 801657e:	6a38      	ldr	r0, [r7, #32]
 8016580:	f7fe fe34 	bl	80151ec <dhcp_handle_ack>
      dhcp_bind(netif);
 8016584:	6a38      	ldr	r0, [r7, #32]
 8016586:	f7ff f853 	bl	8015630 <dhcp_bind>
 801658a:	e031      	b.n	80165f0 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801658c:	7cfb      	ldrb	r3, [r7, #19]
 801658e:	2b06      	cmp	r3, #6
 8016590:	d113      	bne.n	80165ba <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016592:	69fb      	ldr	r3, [r7, #28]
 8016594:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8016596:	2b03      	cmp	r3, #3
 8016598:	d00b      	beq.n	80165b2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801659a:	69fb      	ldr	r3, [r7, #28]
 801659c:	795b      	ldrb	r3, [r3, #5]
 801659e:	2b01      	cmp	r3, #1
 80165a0:	d007      	beq.n	80165b2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80165a2:	69fb      	ldr	r3, [r7, #28]
 80165a4:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80165a6:	2b04      	cmp	r3, #4
 80165a8:	d003      	beq.n	80165b2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80165aa:	69fb      	ldr	r3, [r7, #28]
 80165ac:	795b      	ldrb	r3, [r3, #5]
 80165ae:	2b05      	cmp	r3, #5
 80165b0:	d103      	bne.n	80165ba <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80165b2:	6a38      	ldr	r0, [r7, #32]
 80165b4:	f7fe fb7a 	bl	8014cac <dhcp_handle_nak>
 80165b8:	e01a      	b.n	80165f0 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80165ba:	7cfb      	ldrb	r3, [r7, #19]
 80165bc:	2b02      	cmp	r3, #2
 80165be:	d116      	bne.n	80165ee <dhcp_recv+0x17e>
 80165c0:	69fb      	ldr	r3, [r7, #28]
 80165c2:	795b      	ldrb	r3, [r3, #5]
 80165c4:	2b06      	cmp	r3, #6
 80165c6:	d112      	bne.n	80165ee <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80165c8:	6979      	ldr	r1, [r7, #20]
 80165ca:	6a38      	ldr	r0, [r7, #32]
 80165cc:	f7fe fbbc 	bl	8014d48 <dhcp_handle_offer>
 80165d0:	e00e      	b.n	80165f0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80165d2:	bf00      	nop
 80165d4:	e00c      	b.n	80165f0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80165d6:	bf00      	nop
 80165d8:	e00a      	b.n	80165f0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80165da:	bf00      	nop
 80165dc:	e008      	b.n	80165f0 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80165de:	bf00      	nop
 80165e0:	e006      	b.n	80165f0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80165e2:	bf00      	nop
 80165e4:	e004      	b.n	80165f0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80165e6:	bf00      	nop
 80165e8:	e002      	b.n	80165f0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80165ea:	bf00      	nop
 80165ec:	e000      	b.n	80165f0 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 80165ee:	bf00      	nop
  pbuf_free(p);
 80165f0:	6878      	ldr	r0, [r7, #4]
 80165f2:	f7f7 ff99 	bl	800e528 <pbuf_free>
}
 80165f6:	bf00      	nop
 80165f8:	3728      	adds	r7, #40	; 0x28
 80165fa:	46bd      	mov	sp, r7
 80165fc:	bd80      	pop	{r7, pc}
 80165fe:	bf00      	nop
 8016600:	2000379c 	.word	0x2000379c
 8016604:	20006d1c 	.word	0x20006d1c
 8016608:	20006d24 	.word	0x20006d24

0801660c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801660c:	b580      	push	{r7, lr}
 801660e:	b088      	sub	sp, #32
 8016610:	af00      	add	r7, sp, #0
 8016612:	60f8      	str	r0, [r7, #12]
 8016614:	60b9      	str	r1, [r7, #8]
 8016616:	603b      	str	r3, [r7, #0]
 8016618:	4613      	mov	r3, r2
 801661a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	2b00      	cmp	r3, #0
 8016620:	d108      	bne.n	8016634 <dhcp_create_msg+0x28>
 8016622:	4b5f      	ldr	r3, [pc, #380]	; (80167a0 <dhcp_create_msg+0x194>)
 8016624:	f240 7269 	movw	r2, #1897	; 0x769
 8016628:	495e      	ldr	r1, [pc, #376]	; (80167a4 <dhcp_create_msg+0x198>)
 801662a:	485f      	ldr	r0, [pc, #380]	; (80167a8 <dhcp_create_msg+0x19c>)
 801662c:	f002 ff0e 	bl	801944c <iprintf>
 8016630:	2300      	movs	r3, #0
 8016632:	e0b1      	b.n	8016798 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8016634:	68bb      	ldr	r3, [r7, #8]
 8016636:	2b00      	cmp	r3, #0
 8016638:	d108      	bne.n	801664c <dhcp_create_msg+0x40>
 801663a:	4b59      	ldr	r3, [pc, #356]	; (80167a0 <dhcp_create_msg+0x194>)
 801663c:	f240 726a 	movw	r2, #1898	; 0x76a
 8016640:	495a      	ldr	r1, [pc, #360]	; (80167ac <dhcp_create_msg+0x1a0>)
 8016642:	4859      	ldr	r0, [pc, #356]	; (80167a8 <dhcp_create_msg+0x19c>)
 8016644:	f002 ff02 	bl	801944c <iprintf>
 8016648:	2300      	movs	r3, #0
 801664a:	e0a5      	b.n	8016798 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801664c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016650:	f44f 719a 	mov.w	r1, #308	; 0x134
 8016654:	2036      	movs	r0, #54	; 0x36
 8016656:	f7f7 fc83 	bl	800df60 <pbuf_alloc>
 801665a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801665c:	69bb      	ldr	r3, [r7, #24]
 801665e:	2b00      	cmp	r3, #0
 8016660:	d101      	bne.n	8016666 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8016662:	2300      	movs	r3, #0
 8016664:	e098      	b.n	8016798 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8016666:	69bb      	ldr	r3, [r7, #24]
 8016668:	895b      	ldrh	r3, [r3, #10]
 801666a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801666e:	d206      	bcs.n	801667e <dhcp_create_msg+0x72>
 8016670:	4b4b      	ldr	r3, [pc, #300]	; (80167a0 <dhcp_create_msg+0x194>)
 8016672:	f240 7271 	movw	r2, #1905	; 0x771
 8016676:	494e      	ldr	r1, [pc, #312]	; (80167b0 <dhcp_create_msg+0x1a4>)
 8016678:	484b      	ldr	r0, [pc, #300]	; (80167a8 <dhcp_create_msg+0x19c>)
 801667a:	f002 fee7 	bl	801944c <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801667e:	79fb      	ldrb	r3, [r7, #7]
 8016680:	2b03      	cmp	r3, #3
 8016682:	d103      	bne.n	801668c <dhcp_create_msg+0x80>
 8016684:	68bb      	ldr	r3, [r7, #8]
 8016686:	795b      	ldrb	r3, [r3, #5]
 8016688:	2b03      	cmp	r3, #3
 801668a:	d10d      	bne.n	80166a8 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801668c:	68bb      	ldr	r3, [r7, #8]
 801668e:	799b      	ldrb	r3, [r3, #6]
 8016690:	2b00      	cmp	r3, #0
 8016692:	d105      	bne.n	80166a0 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8016694:	f002 ff68 	bl	8019568 <rand>
 8016698:	4603      	mov	r3, r0
 801669a:	461a      	mov	r2, r3
 801669c:	4b45      	ldr	r3, [pc, #276]	; (80167b4 <dhcp_create_msg+0x1a8>)
 801669e:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80166a0:	4b44      	ldr	r3, [pc, #272]	; (80167b4 <dhcp_create_msg+0x1a8>)
 80166a2:	681a      	ldr	r2, [r3, #0]
 80166a4:	68bb      	ldr	r3, [r7, #8]
 80166a6:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80166a8:	69bb      	ldr	r3, [r7, #24]
 80166aa:	685b      	ldr	r3, [r3, #4]
 80166ac:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80166ae:	f44f 729a 	mov.w	r2, #308	; 0x134
 80166b2:	2100      	movs	r1, #0
 80166b4:	6978      	ldr	r0, [r7, #20]
 80166b6:	f002 fe17 	bl	80192e8 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80166ba:	697b      	ldr	r3, [r7, #20]
 80166bc:	2201      	movs	r2, #1
 80166be:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80166c0:	697b      	ldr	r3, [r7, #20]
 80166c2:	2201      	movs	r2, #1
 80166c4:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80166cc:	697b      	ldr	r3, [r7, #20]
 80166ce:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80166d0:	68bb      	ldr	r3, [r7, #8]
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	4618      	mov	r0, r3
 80166d6:	f7f6 fc80 	bl	800cfda <lwip_htonl>
 80166da:	4602      	mov	r2, r0
 80166dc:	697b      	ldr	r3, [r7, #20]
 80166de:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80166e0:	79fb      	ldrb	r3, [r7, #7]
 80166e2:	2b08      	cmp	r3, #8
 80166e4:	d010      	beq.n	8016708 <dhcp_create_msg+0xfc>
 80166e6:	79fb      	ldrb	r3, [r7, #7]
 80166e8:	2b04      	cmp	r3, #4
 80166ea:	d00d      	beq.n	8016708 <dhcp_create_msg+0xfc>
 80166ec:	79fb      	ldrb	r3, [r7, #7]
 80166ee:	2b07      	cmp	r3, #7
 80166f0:	d00a      	beq.n	8016708 <dhcp_create_msg+0xfc>
 80166f2:	79fb      	ldrb	r3, [r7, #7]
 80166f4:	2b03      	cmp	r3, #3
 80166f6:	d10c      	bne.n	8016712 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80166f8:	68bb      	ldr	r3, [r7, #8]
 80166fa:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80166fc:	2b05      	cmp	r3, #5
 80166fe:	d003      	beq.n	8016708 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8016700:	68bb      	ldr	r3, [r7, #8]
 8016702:	795b      	ldrb	r3, [r3, #5]
 8016704:	2b04      	cmp	r3, #4
 8016706:	d104      	bne.n	8016712 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	3304      	adds	r3, #4
 801670c:	681a      	ldr	r2, [r3, #0]
 801670e:	697b      	ldr	r3, [r7, #20]
 8016710:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016712:	2300      	movs	r3, #0
 8016714:	83fb      	strh	r3, [r7, #30]
 8016716:	e00c      	b.n	8016732 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8016718:	8bfa      	ldrh	r2, [r7, #30]
 801671a:	8bfb      	ldrh	r3, [r7, #30]
 801671c:	68f9      	ldr	r1, [r7, #12]
 801671e:	440a      	add	r2, r1
 8016720:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8016724:	697a      	ldr	r2, [r7, #20]
 8016726:	4413      	add	r3, r2
 8016728:	460a      	mov	r2, r1
 801672a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801672c:	8bfb      	ldrh	r3, [r7, #30]
 801672e:	3301      	adds	r3, #1
 8016730:	83fb      	strh	r3, [r7, #30]
 8016732:	8bfb      	ldrh	r3, [r7, #30]
 8016734:	2b05      	cmp	r3, #5
 8016736:	d9ef      	bls.n	8016718 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8016738:	697b      	ldr	r3, [r7, #20]
 801673a:	2200      	movs	r2, #0
 801673c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8016740:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8016744:	2200      	movs	r2, #0
 8016746:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801674a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801674e:	2200      	movs	r2, #0
 8016750:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8016754:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8016758:	2200      	movs	r2, #0
 801675a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801675e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8016762:	697b      	ldr	r3, [r7, #20]
 8016764:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016768:	2301      	movs	r3, #1
 801676a:	2235      	movs	r2, #53	; 0x35
 801676c:	2000      	movs	r0, #0
 801676e:	f7ff fadb 	bl	8015d28 <dhcp_option>
 8016772:	4603      	mov	r3, r0
 8016774:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8016776:	697b      	ldr	r3, [r7, #20]
 8016778:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801677c:	79fa      	ldrb	r2, [r7, #7]
 801677e:	8a7b      	ldrh	r3, [r7, #18]
 8016780:	4618      	mov	r0, r3
 8016782:	f7ff fb05 	bl	8015d90 <dhcp_option_byte>
 8016786:	4603      	mov	r3, r0
 8016788:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801678a:	683b      	ldr	r3, [r7, #0]
 801678c:	2b00      	cmp	r3, #0
 801678e:	d002      	beq.n	8016796 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8016790:	683b      	ldr	r3, [r7, #0]
 8016792:	8a7a      	ldrh	r2, [r7, #18]
 8016794:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8016796:	69bb      	ldr	r3, [r7, #24]
}
 8016798:	4618      	mov	r0, r3
 801679a:	3720      	adds	r7, #32
 801679c:	46bd      	mov	sp, r7
 801679e:	bd80      	pop	{r7, pc}
 80167a0:	0801d240 	.word	0x0801d240
 80167a4:	0801d560 	.word	0x0801d560
 80167a8:	0801d2a0 	.word	0x0801d2a0
 80167ac:	0801d580 	.word	0x0801d580
 80167b0:	0801d5a0 	.word	0x0801d5a0
 80167b4:	20000578 	.word	0x20000578

080167b8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80167b8:	b580      	push	{r7, lr}
 80167ba:	b084      	sub	sp, #16
 80167bc:	af00      	add	r7, sp, #0
 80167be:	4603      	mov	r3, r0
 80167c0:	60b9      	str	r1, [r7, #8]
 80167c2:	607a      	str	r2, [r7, #4]
 80167c4:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80167c6:	89fb      	ldrh	r3, [r7, #14]
 80167c8:	1c5a      	adds	r2, r3, #1
 80167ca:	81fa      	strh	r2, [r7, #14]
 80167cc:	461a      	mov	r2, r3
 80167ce:	68bb      	ldr	r3, [r7, #8]
 80167d0:	4413      	add	r3, r2
 80167d2:	22ff      	movs	r2, #255	; 0xff
 80167d4:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80167d6:	e007      	b.n	80167e8 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80167d8:	89fb      	ldrh	r3, [r7, #14]
 80167da:	1c5a      	adds	r2, r3, #1
 80167dc:	81fa      	strh	r2, [r7, #14]
 80167de:	461a      	mov	r2, r3
 80167e0:	68bb      	ldr	r3, [r7, #8]
 80167e2:	4413      	add	r3, r2
 80167e4:	2200      	movs	r2, #0
 80167e6:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80167e8:	89fb      	ldrh	r3, [r7, #14]
 80167ea:	2b43      	cmp	r3, #67	; 0x43
 80167ec:	d904      	bls.n	80167f8 <dhcp_option_trailer+0x40>
 80167ee:	89fb      	ldrh	r3, [r7, #14]
 80167f0:	f003 0303 	and.w	r3, r3, #3
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d002      	beq.n	80167fe <dhcp_option_trailer+0x46>
 80167f8:	89fb      	ldrh	r3, [r7, #14]
 80167fa:	2b43      	cmp	r3, #67	; 0x43
 80167fc:	d9ec      	bls.n	80167d8 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80167fe:	89fb      	ldrh	r3, [r7, #14]
 8016800:	33f0      	adds	r3, #240	; 0xf0
 8016802:	b29b      	uxth	r3, r3
 8016804:	4619      	mov	r1, r3
 8016806:	6878      	ldr	r0, [r7, #4]
 8016808:	f7f7 fd08 	bl	800e21c <pbuf_realloc>
}
 801680c:	bf00      	nop
 801680e:	3710      	adds	r7, #16
 8016810:	46bd      	mov	sp, r7
 8016812:	bd80      	pop	{r7, pc}

08016814 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8016814:	b480      	push	{r7}
 8016816:	b085      	sub	sp, #20
 8016818:	af00      	add	r7, sp, #0
 801681a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d017      	beq.n	8016852 <dhcp_supplied_address+0x3e>
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016826:	2b00      	cmp	r3, #0
 8016828:	d013      	beq.n	8016852 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801682e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	795b      	ldrb	r3, [r3, #5]
 8016834:	2b0a      	cmp	r3, #10
 8016836:	d007      	beq.n	8016848 <dhcp_supplied_address+0x34>
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	795b      	ldrb	r3, [r3, #5]
 801683c:	2b05      	cmp	r3, #5
 801683e:	d003      	beq.n	8016848 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016844:	2b04      	cmp	r3, #4
 8016846:	d101      	bne.n	801684c <dhcp_supplied_address+0x38>
 8016848:	2301      	movs	r3, #1
 801684a:	e000      	b.n	801684e <dhcp_supplied_address+0x3a>
 801684c:	2300      	movs	r3, #0
 801684e:	b2db      	uxtb	r3, r3
 8016850:	e000      	b.n	8016854 <dhcp_supplied_address+0x40>
  }
  return 0;
 8016852:	2300      	movs	r3, #0
}
 8016854:	4618      	mov	r0, r3
 8016856:	3714      	adds	r7, #20
 8016858:	46bd      	mov	sp, r7
 801685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801685e:	4770      	bx	lr

08016860 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016860:	b580      	push	{r7, lr}
 8016862:	b082      	sub	sp, #8
 8016864:	af00      	add	r7, sp, #0
 8016866:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016868:	4915      	ldr	r1, [pc, #84]	; (80168c0 <etharp_free_entry+0x60>)
 801686a:	687a      	ldr	r2, [r7, #4]
 801686c:	4613      	mov	r3, r2
 801686e:	005b      	lsls	r3, r3, #1
 8016870:	4413      	add	r3, r2
 8016872:	00db      	lsls	r3, r3, #3
 8016874:	440b      	add	r3, r1
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	2b00      	cmp	r3, #0
 801687a:	d013      	beq.n	80168a4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801687c:	4910      	ldr	r1, [pc, #64]	; (80168c0 <etharp_free_entry+0x60>)
 801687e:	687a      	ldr	r2, [r7, #4]
 8016880:	4613      	mov	r3, r2
 8016882:	005b      	lsls	r3, r3, #1
 8016884:	4413      	add	r3, r2
 8016886:	00db      	lsls	r3, r3, #3
 8016888:	440b      	add	r3, r1
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	4618      	mov	r0, r3
 801688e:	f7f7 fe4b 	bl	800e528 <pbuf_free>
    arp_table[i].q = NULL;
 8016892:	490b      	ldr	r1, [pc, #44]	; (80168c0 <etharp_free_entry+0x60>)
 8016894:	687a      	ldr	r2, [r7, #4]
 8016896:	4613      	mov	r3, r2
 8016898:	005b      	lsls	r3, r3, #1
 801689a:	4413      	add	r3, r2
 801689c:	00db      	lsls	r3, r3, #3
 801689e:	440b      	add	r3, r1
 80168a0:	2200      	movs	r2, #0
 80168a2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80168a4:	4906      	ldr	r1, [pc, #24]	; (80168c0 <etharp_free_entry+0x60>)
 80168a6:	687a      	ldr	r2, [r7, #4]
 80168a8:	4613      	mov	r3, r2
 80168aa:	005b      	lsls	r3, r3, #1
 80168ac:	4413      	add	r3, r2
 80168ae:	00db      	lsls	r3, r3, #3
 80168b0:	440b      	add	r3, r1
 80168b2:	3314      	adds	r3, #20
 80168b4:	2200      	movs	r2, #0
 80168b6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80168b8:	bf00      	nop
 80168ba:	3708      	adds	r7, #8
 80168bc:	46bd      	mov	sp, r7
 80168be:	bd80      	pop	{r7, pc}
 80168c0:	2000057c 	.word	0x2000057c

080168c4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80168c4:	b580      	push	{r7, lr}
 80168c6:	b082      	sub	sp, #8
 80168c8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80168ca:	2300      	movs	r3, #0
 80168cc:	607b      	str	r3, [r7, #4]
 80168ce:	e096      	b.n	80169fe <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80168d0:	494f      	ldr	r1, [pc, #316]	; (8016a10 <etharp_tmr+0x14c>)
 80168d2:	687a      	ldr	r2, [r7, #4]
 80168d4:	4613      	mov	r3, r2
 80168d6:	005b      	lsls	r3, r3, #1
 80168d8:	4413      	add	r3, r2
 80168da:	00db      	lsls	r3, r3, #3
 80168dc:	440b      	add	r3, r1
 80168de:	3314      	adds	r3, #20
 80168e0:	781b      	ldrb	r3, [r3, #0]
 80168e2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80168e4:	78fb      	ldrb	r3, [r7, #3]
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	f000 8086 	beq.w	80169f8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80168ec:	4948      	ldr	r1, [pc, #288]	; (8016a10 <etharp_tmr+0x14c>)
 80168ee:	687a      	ldr	r2, [r7, #4]
 80168f0:	4613      	mov	r3, r2
 80168f2:	005b      	lsls	r3, r3, #1
 80168f4:	4413      	add	r3, r2
 80168f6:	00db      	lsls	r3, r3, #3
 80168f8:	440b      	add	r3, r1
 80168fa:	3312      	adds	r3, #18
 80168fc:	881b      	ldrh	r3, [r3, #0]
 80168fe:	3301      	adds	r3, #1
 8016900:	b298      	uxth	r0, r3
 8016902:	4943      	ldr	r1, [pc, #268]	; (8016a10 <etharp_tmr+0x14c>)
 8016904:	687a      	ldr	r2, [r7, #4]
 8016906:	4613      	mov	r3, r2
 8016908:	005b      	lsls	r3, r3, #1
 801690a:	4413      	add	r3, r2
 801690c:	00db      	lsls	r3, r3, #3
 801690e:	440b      	add	r3, r1
 8016910:	3312      	adds	r3, #18
 8016912:	4602      	mov	r2, r0
 8016914:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016916:	493e      	ldr	r1, [pc, #248]	; (8016a10 <etharp_tmr+0x14c>)
 8016918:	687a      	ldr	r2, [r7, #4]
 801691a:	4613      	mov	r3, r2
 801691c:	005b      	lsls	r3, r3, #1
 801691e:	4413      	add	r3, r2
 8016920:	00db      	lsls	r3, r3, #3
 8016922:	440b      	add	r3, r1
 8016924:	3312      	adds	r3, #18
 8016926:	881b      	ldrh	r3, [r3, #0]
 8016928:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801692c:	d215      	bcs.n	801695a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801692e:	4938      	ldr	r1, [pc, #224]	; (8016a10 <etharp_tmr+0x14c>)
 8016930:	687a      	ldr	r2, [r7, #4]
 8016932:	4613      	mov	r3, r2
 8016934:	005b      	lsls	r3, r3, #1
 8016936:	4413      	add	r3, r2
 8016938:	00db      	lsls	r3, r3, #3
 801693a:	440b      	add	r3, r1
 801693c:	3314      	adds	r3, #20
 801693e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016940:	2b01      	cmp	r3, #1
 8016942:	d10e      	bne.n	8016962 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016944:	4932      	ldr	r1, [pc, #200]	; (8016a10 <etharp_tmr+0x14c>)
 8016946:	687a      	ldr	r2, [r7, #4]
 8016948:	4613      	mov	r3, r2
 801694a:	005b      	lsls	r3, r3, #1
 801694c:	4413      	add	r3, r2
 801694e:	00db      	lsls	r3, r3, #3
 8016950:	440b      	add	r3, r1
 8016952:	3312      	adds	r3, #18
 8016954:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016956:	2b04      	cmp	r3, #4
 8016958:	d903      	bls.n	8016962 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801695a:	6878      	ldr	r0, [r7, #4]
 801695c:	f7ff ff80 	bl	8016860 <etharp_free_entry>
 8016960:	e04a      	b.n	80169f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016962:	492b      	ldr	r1, [pc, #172]	; (8016a10 <etharp_tmr+0x14c>)
 8016964:	687a      	ldr	r2, [r7, #4]
 8016966:	4613      	mov	r3, r2
 8016968:	005b      	lsls	r3, r3, #1
 801696a:	4413      	add	r3, r2
 801696c:	00db      	lsls	r3, r3, #3
 801696e:	440b      	add	r3, r1
 8016970:	3314      	adds	r3, #20
 8016972:	781b      	ldrb	r3, [r3, #0]
 8016974:	2b03      	cmp	r3, #3
 8016976:	d10a      	bne.n	801698e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016978:	4925      	ldr	r1, [pc, #148]	; (8016a10 <etharp_tmr+0x14c>)
 801697a:	687a      	ldr	r2, [r7, #4]
 801697c:	4613      	mov	r3, r2
 801697e:	005b      	lsls	r3, r3, #1
 8016980:	4413      	add	r3, r2
 8016982:	00db      	lsls	r3, r3, #3
 8016984:	440b      	add	r3, r1
 8016986:	3314      	adds	r3, #20
 8016988:	2204      	movs	r2, #4
 801698a:	701a      	strb	r2, [r3, #0]
 801698c:	e034      	b.n	80169f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801698e:	4920      	ldr	r1, [pc, #128]	; (8016a10 <etharp_tmr+0x14c>)
 8016990:	687a      	ldr	r2, [r7, #4]
 8016992:	4613      	mov	r3, r2
 8016994:	005b      	lsls	r3, r3, #1
 8016996:	4413      	add	r3, r2
 8016998:	00db      	lsls	r3, r3, #3
 801699a:	440b      	add	r3, r1
 801699c:	3314      	adds	r3, #20
 801699e:	781b      	ldrb	r3, [r3, #0]
 80169a0:	2b04      	cmp	r3, #4
 80169a2:	d10a      	bne.n	80169ba <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80169a4:	491a      	ldr	r1, [pc, #104]	; (8016a10 <etharp_tmr+0x14c>)
 80169a6:	687a      	ldr	r2, [r7, #4]
 80169a8:	4613      	mov	r3, r2
 80169aa:	005b      	lsls	r3, r3, #1
 80169ac:	4413      	add	r3, r2
 80169ae:	00db      	lsls	r3, r3, #3
 80169b0:	440b      	add	r3, r1
 80169b2:	3314      	adds	r3, #20
 80169b4:	2202      	movs	r2, #2
 80169b6:	701a      	strb	r2, [r3, #0]
 80169b8:	e01e      	b.n	80169f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80169ba:	4915      	ldr	r1, [pc, #84]	; (8016a10 <etharp_tmr+0x14c>)
 80169bc:	687a      	ldr	r2, [r7, #4]
 80169be:	4613      	mov	r3, r2
 80169c0:	005b      	lsls	r3, r3, #1
 80169c2:	4413      	add	r3, r2
 80169c4:	00db      	lsls	r3, r3, #3
 80169c6:	440b      	add	r3, r1
 80169c8:	3314      	adds	r3, #20
 80169ca:	781b      	ldrb	r3, [r3, #0]
 80169cc:	2b01      	cmp	r3, #1
 80169ce:	d113      	bne.n	80169f8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80169d0:	490f      	ldr	r1, [pc, #60]	; (8016a10 <etharp_tmr+0x14c>)
 80169d2:	687a      	ldr	r2, [r7, #4]
 80169d4:	4613      	mov	r3, r2
 80169d6:	005b      	lsls	r3, r3, #1
 80169d8:	4413      	add	r3, r2
 80169da:	00db      	lsls	r3, r3, #3
 80169dc:	440b      	add	r3, r1
 80169de:	3308      	adds	r3, #8
 80169e0:	6818      	ldr	r0, [r3, #0]
 80169e2:	687a      	ldr	r2, [r7, #4]
 80169e4:	4613      	mov	r3, r2
 80169e6:	005b      	lsls	r3, r3, #1
 80169e8:	4413      	add	r3, r2
 80169ea:	00db      	lsls	r3, r3, #3
 80169ec:	4a08      	ldr	r2, [pc, #32]	; (8016a10 <etharp_tmr+0x14c>)
 80169ee:	4413      	add	r3, r2
 80169f0:	3304      	adds	r3, #4
 80169f2:	4619      	mov	r1, r3
 80169f4:	f000 fe72 	bl	80176dc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	3301      	adds	r3, #1
 80169fc:	607b      	str	r3, [r7, #4]
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	2b09      	cmp	r3, #9
 8016a02:	f77f af65 	ble.w	80168d0 <etharp_tmr+0xc>
      }
    }
  }
}
 8016a06:	bf00      	nop
 8016a08:	bf00      	nop
 8016a0a:	3708      	adds	r7, #8
 8016a0c:	46bd      	mov	sp, r7
 8016a0e:	bd80      	pop	{r7, pc}
 8016a10:	2000057c 	.word	0x2000057c

08016a14 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016a14:	b580      	push	{r7, lr}
 8016a16:	b08a      	sub	sp, #40	; 0x28
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	60f8      	str	r0, [r7, #12]
 8016a1c:	460b      	mov	r3, r1
 8016a1e:	607a      	str	r2, [r7, #4]
 8016a20:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016a22:	230a      	movs	r3, #10
 8016a24:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016a26:	230a      	movs	r3, #10
 8016a28:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016a2a:	230a      	movs	r3, #10
 8016a2c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8016a2e:	2300      	movs	r3, #0
 8016a30:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016a32:	230a      	movs	r3, #10
 8016a34:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016a36:	2300      	movs	r3, #0
 8016a38:	83bb      	strh	r3, [r7, #28]
 8016a3a:	2300      	movs	r3, #0
 8016a3c:	837b      	strh	r3, [r7, #26]
 8016a3e:	2300      	movs	r3, #0
 8016a40:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016a42:	2300      	movs	r3, #0
 8016a44:	843b      	strh	r3, [r7, #32]
 8016a46:	e0ae      	b.n	8016ba6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016a48:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a4c:	49a6      	ldr	r1, [pc, #664]	; (8016ce8 <etharp_find_entry+0x2d4>)
 8016a4e:	4613      	mov	r3, r2
 8016a50:	005b      	lsls	r3, r3, #1
 8016a52:	4413      	add	r3, r2
 8016a54:	00db      	lsls	r3, r3, #3
 8016a56:	440b      	add	r3, r1
 8016a58:	3314      	adds	r3, #20
 8016a5a:	781b      	ldrb	r3, [r3, #0]
 8016a5c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016a5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016a62:	2b0a      	cmp	r3, #10
 8016a64:	d105      	bne.n	8016a72 <etharp_find_entry+0x5e>
 8016a66:	7dfb      	ldrb	r3, [r7, #23]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d102      	bne.n	8016a72 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016a6c:	8c3b      	ldrh	r3, [r7, #32]
 8016a6e:	847b      	strh	r3, [r7, #34]	; 0x22
 8016a70:	e095      	b.n	8016b9e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016a72:	7dfb      	ldrb	r3, [r7, #23]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	f000 8092 	beq.w	8016b9e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016a7a:	7dfb      	ldrb	r3, [r7, #23]
 8016a7c:	2b01      	cmp	r3, #1
 8016a7e:	d009      	beq.n	8016a94 <etharp_find_entry+0x80>
 8016a80:	7dfb      	ldrb	r3, [r7, #23]
 8016a82:	2b01      	cmp	r3, #1
 8016a84:	d806      	bhi.n	8016a94 <etharp_find_entry+0x80>
 8016a86:	4b99      	ldr	r3, [pc, #612]	; (8016cec <etharp_find_entry+0x2d8>)
 8016a88:	f240 1223 	movw	r2, #291	; 0x123
 8016a8c:	4998      	ldr	r1, [pc, #608]	; (8016cf0 <etharp_find_entry+0x2dc>)
 8016a8e:	4899      	ldr	r0, [pc, #612]	; (8016cf4 <etharp_find_entry+0x2e0>)
 8016a90:	f002 fcdc 	bl	801944c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d020      	beq.n	8016adc <etharp_find_entry+0xc8>
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	6819      	ldr	r1, [r3, #0]
 8016a9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016aa2:	4891      	ldr	r0, [pc, #580]	; (8016ce8 <etharp_find_entry+0x2d4>)
 8016aa4:	4613      	mov	r3, r2
 8016aa6:	005b      	lsls	r3, r3, #1
 8016aa8:	4413      	add	r3, r2
 8016aaa:	00db      	lsls	r3, r3, #3
 8016aac:	4403      	add	r3, r0
 8016aae:	3304      	adds	r3, #4
 8016ab0:	681b      	ldr	r3, [r3, #0]
 8016ab2:	4299      	cmp	r1, r3
 8016ab4:	d112      	bne.n	8016adc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d00c      	beq.n	8016ad6 <etharp_find_entry+0xc2>
 8016abc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ac0:	4989      	ldr	r1, [pc, #548]	; (8016ce8 <etharp_find_entry+0x2d4>)
 8016ac2:	4613      	mov	r3, r2
 8016ac4:	005b      	lsls	r3, r3, #1
 8016ac6:	4413      	add	r3, r2
 8016ac8:	00db      	lsls	r3, r3, #3
 8016aca:	440b      	add	r3, r1
 8016acc:	3308      	adds	r3, #8
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	687a      	ldr	r2, [r7, #4]
 8016ad2:	429a      	cmp	r2, r3
 8016ad4:	d102      	bne.n	8016adc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016ad6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016ada:	e100      	b.n	8016cde <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016adc:	7dfb      	ldrb	r3, [r7, #23]
 8016ade:	2b01      	cmp	r3, #1
 8016ae0:	d140      	bne.n	8016b64 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016ae2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ae6:	4980      	ldr	r1, [pc, #512]	; (8016ce8 <etharp_find_entry+0x2d4>)
 8016ae8:	4613      	mov	r3, r2
 8016aea:	005b      	lsls	r3, r3, #1
 8016aec:	4413      	add	r3, r2
 8016aee:	00db      	lsls	r3, r3, #3
 8016af0:	440b      	add	r3, r1
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d01a      	beq.n	8016b2e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016af8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016afc:	497a      	ldr	r1, [pc, #488]	; (8016ce8 <etharp_find_entry+0x2d4>)
 8016afe:	4613      	mov	r3, r2
 8016b00:	005b      	lsls	r3, r3, #1
 8016b02:	4413      	add	r3, r2
 8016b04:	00db      	lsls	r3, r3, #3
 8016b06:	440b      	add	r3, r1
 8016b08:	3312      	adds	r3, #18
 8016b0a:	881b      	ldrh	r3, [r3, #0]
 8016b0c:	8bba      	ldrh	r2, [r7, #28]
 8016b0e:	429a      	cmp	r2, r3
 8016b10:	d845      	bhi.n	8016b9e <etharp_find_entry+0x18a>
            old_queue = i;
 8016b12:	8c3b      	ldrh	r3, [r7, #32]
 8016b14:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016b16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b1a:	4973      	ldr	r1, [pc, #460]	; (8016ce8 <etharp_find_entry+0x2d4>)
 8016b1c:	4613      	mov	r3, r2
 8016b1e:	005b      	lsls	r3, r3, #1
 8016b20:	4413      	add	r3, r2
 8016b22:	00db      	lsls	r3, r3, #3
 8016b24:	440b      	add	r3, r1
 8016b26:	3312      	adds	r3, #18
 8016b28:	881b      	ldrh	r3, [r3, #0]
 8016b2a:	83bb      	strh	r3, [r7, #28]
 8016b2c:	e037      	b.n	8016b9e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016b2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b32:	496d      	ldr	r1, [pc, #436]	; (8016ce8 <etharp_find_entry+0x2d4>)
 8016b34:	4613      	mov	r3, r2
 8016b36:	005b      	lsls	r3, r3, #1
 8016b38:	4413      	add	r3, r2
 8016b3a:	00db      	lsls	r3, r3, #3
 8016b3c:	440b      	add	r3, r1
 8016b3e:	3312      	adds	r3, #18
 8016b40:	881b      	ldrh	r3, [r3, #0]
 8016b42:	8b7a      	ldrh	r2, [r7, #26]
 8016b44:	429a      	cmp	r2, r3
 8016b46:	d82a      	bhi.n	8016b9e <etharp_find_entry+0x18a>
            old_pending = i;
 8016b48:	8c3b      	ldrh	r3, [r7, #32]
 8016b4a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016b4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b50:	4965      	ldr	r1, [pc, #404]	; (8016ce8 <etharp_find_entry+0x2d4>)
 8016b52:	4613      	mov	r3, r2
 8016b54:	005b      	lsls	r3, r3, #1
 8016b56:	4413      	add	r3, r2
 8016b58:	00db      	lsls	r3, r3, #3
 8016b5a:	440b      	add	r3, r1
 8016b5c:	3312      	adds	r3, #18
 8016b5e:	881b      	ldrh	r3, [r3, #0]
 8016b60:	837b      	strh	r3, [r7, #26]
 8016b62:	e01c      	b.n	8016b9e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016b64:	7dfb      	ldrb	r3, [r7, #23]
 8016b66:	2b01      	cmp	r3, #1
 8016b68:	d919      	bls.n	8016b9e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016b6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b6e:	495e      	ldr	r1, [pc, #376]	; (8016ce8 <etharp_find_entry+0x2d4>)
 8016b70:	4613      	mov	r3, r2
 8016b72:	005b      	lsls	r3, r3, #1
 8016b74:	4413      	add	r3, r2
 8016b76:	00db      	lsls	r3, r3, #3
 8016b78:	440b      	add	r3, r1
 8016b7a:	3312      	adds	r3, #18
 8016b7c:	881b      	ldrh	r3, [r3, #0]
 8016b7e:	8b3a      	ldrh	r2, [r7, #24]
 8016b80:	429a      	cmp	r2, r3
 8016b82:	d80c      	bhi.n	8016b9e <etharp_find_entry+0x18a>
            old_stable = i;
 8016b84:	8c3b      	ldrh	r3, [r7, #32]
 8016b86:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016b88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b8c:	4956      	ldr	r1, [pc, #344]	; (8016ce8 <etharp_find_entry+0x2d4>)
 8016b8e:	4613      	mov	r3, r2
 8016b90:	005b      	lsls	r3, r3, #1
 8016b92:	4413      	add	r3, r2
 8016b94:	00db      	lsls	r3, r3, #3
 8016b96:	440b      	add	r3, r1
 8016b98:	3312      	adds	r3, #18
 8016b9a:	881b      	ldrh	r3, [r3, #0]
 8016b9c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016b9e:	8c3b      	ldrh	r3, [r7, #32]
 8016ba0:	3301      	adds	r3, #1
 8016ba2:	b29b      	uxth	r3, r3
 8016ba4:	843b      	strh	r3, [r7, #32]
 8016ba6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016baa:	2b09      	cmp	r3, #9
 8016bac:	f77f af4c 	ble.w	8016a48 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016bb0:	7afb      	ldrb	r3, [r7, #11]
 8016bb2:	f003 0302 	and.w	r3, r3, #2
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d108      	bne.n	8016bcc <etharp_find_entry+0x1b8>
 8016bba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016bbe:	2b0a      	cmp	r3, #10
 8016bc0:	d107      	bne.n	8016bd2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016bc2:	7afb      	ldrb	r3, [r7, #11]
 8016bc4:	f003 0301 	and.w	r3, r3, #1
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d102      	bne.n	8016bd2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8016bd0:	e085      	b.n	8016cde <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016bd2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016bd6:	2b09      	cmp	r3, #9
 8016bd8:	dc02      	bgt.n	8016be0 <etharp_find_entry+0x1cc>
    i = empty;
 8016bda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016bdc:	843b      	strh	r3, [r7, #32]
 8016bde:	e039      	b.n	8016c54 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016be0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016be4:	2b09      	cmp	r3, #9
 8016be6:	dc14      	bgt.n	8016c12 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016be8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016bea:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016bec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016bf0:	493d      	ldr	r1, [pc, #244]	; (8016ce8 <etharp_find_entry+0x2d4>)
 8016bf2:	4613      	mov	r3, r2
 8016bf4:	005b      	lsls	r3, r3, #1
 8016bf6:	4413      	add	r3, r2
 8016bf8:	00db      	lsls	r3, r3, #3
 8016bfa:	440b      	add	r3, r1
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d018      	beq.n	8016c34 <etharp_find_entry+0x220>
 8016c02:	4b3a      	ldr	r3, [pc, #232]	; (8016cec <etharp_find_entry+0x2d8>)
 8016c04:	f240 126d 	movw	r2, #365	; 0x16d
 8016c08:	493b      	ldr	r1, [pc, #236]	; (8016cf8 <etharp_find_entry+0x2e4>)
 8016c0a:	483a      	ldr	r0, [pc, #232]	; (8016cf4 <etharp_find_entry+0x2e0>)
 8016c0c:	f002 fc1e 	bl	801944c <iprintf>
 8016c10:	e010      	b.n	8016c34 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016c12:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016c16:	2b09      	cmp	r3, #9
 8016c18:	dc02      	bgt.n	8016c20 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016c1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016c1c:	843b      	strh	r3, [r7, #32]
 8016c1e:	e009      	b.n	8016c34 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016c20:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016c24:	2b09      	cmp	r3, #9
 8016c26:	dc02      	bgt.n	8016c2e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016c28:	8bfb      	ldrh	r3, [r7, #30]
 8016c2a:	843b      	strh	r3, [r7, #32]
 8016c2c:	e002      	b.n	8016c34 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8016c32:	e054      	b.n	8016cde <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016c34:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016c38:	2b09      	cmp	r3, #9
 8016c3a:	dd06      	ble.n	8016c4a <etharp_find_entry+0x236>
 8016c3c:	4b2b      	ldr	r3, [pc, #172]	; (8016cec <etharp_find_entry+0x2d8>)
 8016c3e:	f240 127f 	movw	r2, #383	; 0x17f
 8016c42:	492e      	ldr	r1, [pc, #184]	; (8016cfc <etharp_find_entry+0x2e8>)
 8016c44:	482b      	ldr	r0, [pc, #172]	; (8016cf4 <etharp_find_entry+0x2e0>)
 8016c46:	f002 fc01 	bl	801944c <iprintf>
    etharp_free_entry(i);
 8016c4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016c4e:	4618      	mov	r0, r3
 8016c50:	f7ff fe06 	bl	8016860 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016c54:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016c58:	2b09      	cmp	r3, #9
 8016c5a:	dd06      	ble.n	8016c6a <etharp_find_entry+0x256>
 8016c5c:	4b23      	ldr	r3, [pc, #140]	; (8016cec <etharp_find_entry+0x2d8>)
 8016c5e:	f240 1283 	movw	r2, #387	; 0x183
 8016c62:	4926      	ldr	r1, [pc, #152]	; (8016cfc <etharp_find_entry+0x2e8>)
 8016c64:	4823      	ldr	r0, [pc, #140]	; (8016cf4 <etharp_find_entry+0x2e0>)
 8016c66:	f002 fbf1 	bl	801944c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016c6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c6e:	491e      	ldr	r1, [pc, #120]	; (8016ce8 <etharp_find_entry+0x2d4>)
 8016c70:	4613      	mov	r3, r2
 8016c72:	005b      	lsls	r3, r3, #1
 8016c74:	4413      	add	r3, r2
 8016c76:	00db      	lsls	r3, r3, #3
 8016c78:	440b      	add	r3, r1
 8016c7a:	3314      	adds	r3, #20
 8016c7c:	781b      	ldrb	r3, [r3, #0]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d006      	beq.n	8016c90 <etharp_find_entry+0x27c>
 8016c82:	4b1a      	ldr	r3, [pc, #104]	; (8016cec <etharp_find_entry+0x2d8>)
 8016c84:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8016c88:	491d      	ldr	r1, [pc, #116]	; (8016d00 <etharp_find_entry+0x2ec>)
 8016c8a:	481a      	ldr	r0, [pc, #104]	; (8016cf4 <etharp_find_entry+0x2e0>)
 8016c8c:	f002 fbde 	bl	801944c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d00b      	beq.n	8016cae <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016c96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	6819      	ldr	r1, [r3, #0]
 8016c9e:	4812      	ldr	r0, [pc, #72]	; (8016ce8 <etharp_find_entry+0x2d4>)
 8016ca0:	4613      	mov	r3, r2
 8016ca2:	005b      	lsls	r3, r3, #1
 8016ca4:	4413      	add	r3, r2
 8016ca6:	00db      	lsls	r3, r3, #3
 8016ca8:	4403      	add	r3, r0
 8016caa:	3304      	adds	r3, #4
 8016cac:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016cae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016cb2:	490d      	ldr	r1, [pc, #52]	; (8016ce8 <etharp_find_entry+0x2d4>)
 8016cb4:	4613      	mov	r3, r2
 8016cb6:	005b      	lsls	r3, r3, #1
 8016cb8:	4413      	add	r3, r2
 8016cba:	00db      	lsls	r3, r3, #3
 8016cbc:	440b      	add	r3, r1
 8016cbe:	3312      	adds	r3, #18
 8016cc0:	2200      	movs	r2, #0
 8016cc2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016cc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016cc8:	4907      	ldr	r1, [pc, #28]	; (8016ce8 <etharp_find_entry+0x2d4>)
 8016cca:	4613      	mov	r3, r2
 8016ccc:	005b      	lsls	r3, r3, #1
 8016cce:	4413      	add	r3, r2
 8016cd0:	00db      	lsls	r3, r3, #3
 8016cd2:	440b      	add	r3, r1
 8016cd4:	3308      	adds	r3, #8
 8016cd6:	687a      	ldr	r2, [r7, #4]
 8016cd8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016cda:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016cde:	4618      	mov	r0, r3
 8016ce0:	3728      	adds	r7, #40	; 0x28
 8016ce2:	46bd      	mov	sp, r7
 8016ce4:	bd80      	pop	{r7, pc}
 8016ce6:	bf00      	nop
 8016ce8:	2000057c 	.word	0x2000057c
 8016cec:	0801d5e0 	.word	0x0801d5e0
 8016cf0:	0801d618 	.word	0x0801d618
 8016cf4:	0801d658 	.word	0x0801d658
 8016cf8:	0801d680 	.word	0x0801d680
 8016cfc:	0801d698 	.word	0x0801d698
 8016d00:	0801d6ac 	.word	0x0801d6ac

08016d04 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016d04:	b580      	push	{r7, lr}
 8016d06:	b088      	sub	sp, #32
 8016d08:	af02      	add	r7, sp, #8
 8016d0a:	60f8      	str	r0, [r7, #12]
 8016d0c:	60b9      	str	r1, [r7, #8]
 8016d0e:	607a      	str	r2, [r7, #4]
 8016d10:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016d18:	2b06      	cmp	r3, #6
 8016d1a:	d006      	beq.n	8016d2a <etharp_update_arp_entry+0x26>
 8016d1c:	4b48      	ldr	r3, [pc, #288]	; (8016e40 <etharp_update_arp_entry+0x13c>)
 8016d1e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8016d22:	4948      	ldr	r1, [pc, #288]	; (8016e44 <etharp_update_arp_entry+0x140>)
 8016d24:	4848      	ldr	r0, [pc, #288]	; (8016e48 <etharp_update_arp_entry+0x144>)
 8016d26:	f002 fb91 	bl	801944c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016d2a:	68bb      	ldr	r3, [r7, #8]
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d012      	beq.n	8016d56 <etharp_update_arp_entry+0x52>
 8016d30:	68bb      	ldr	r3, [r7, #8]
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d00e      	beq.n	8016d56 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016d38:	68bb      	ldr	r3, [r7, #8]
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	68f9      	ldr	r1, [r7, #12]
 8016d3e:	4618      	mov	r0, r3
 8016d40:	f001 f920 	bl	8017f84 <ip4_addr_isbroadcast_u32>
 8016d44:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d105      	bne.n	8016d56 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016d4a:	68bb      	ldr	r3, [r7, #8]
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016d52:	2be0      	cmp	r3, #224	; 0xe0
 8016d54:	d102      	bne.n	8016d5c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016d56:	f06f 030f 	mvn.w	r3, #15
 8016d5a:	e06c      	b.n	8016e36 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016d5c:	78fb      	ldrb	r3, [r7, #3]
 8016d5e:	68fa      	ldr	r2, [r7, #12]
 8016d60:	4619      	mov	r1, r3
 8016d62:	68b8      	ldr	r0, [r7, #8]
 8016d64:	f7ff fe56 	bl	8016a14 <etharp_find_entry>
 8016d68:	4603      	mov	r3, r0
 8016d6a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016d6c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	da02      	bge.n	8016d7a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016d74:	8afb      	ldrh	r3, [r7, #22]
 8016d76:	b25b      	sxtb	r3, r3
 8016d78:	e05d      	b.n	8016e36 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016d7a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016d7e:	4933      	ldr	r1, [pc, #204]	; (8016e4c <etharp_update_arp_entry+0x148>)
 8016d80:	4613      	mov	r3, r2
 8016d82:	005b      	lsls	r3, r3, #1
 8016d84:	4413      	add	r3, r2
 8016d86:	00db      	lsls	r3, r3, #3
 8016d88:	440b      	add	r3, r1
 8016d8a:	3314      	adds	r3, #20
 8016d8c:	2202      	movs	r2, #2
 8016d8e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016d90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016d94:	492d      	ldr	r1, [pc, #180]	; (8016e4c <etharp_update_arp_entry+0x148>)
 8016d96:	4613      	mov	r3, r2
 8016d98:	005b      	lsls	r3, r3, #1
 8016d9a:	4413      	add	r3, r2
 8016d9c:	00db      	lsls	r3, r3, #3
 8016d9e:	440b      	add	r3, r1
 8016da0:	3308      	adds	r3, #8
 8016da2:	68fa      	ldr	r2, [r7, #12]
 8016da4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016da6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016daa:	4613      	mov	r3, r2
 8016dac:	005b      	lsls	r3, r3, #1
 8016dae:	4413      	add	r3, r2
 8016db0:	00db      	lsls	r3, r3, #3
 8016db2:	3308      	adds	r3, #8
 8016db4:	4a25      	ldr	r2, [pc, #148]	; (8016e4c <etharp_update_arp_entry+0x148>)
 8016db6:	4413      	add	r3, r2
 8016db8:	3304      	adds	r3, #4
 8016dba:	2206      	movs	r2, #6
 8016dbc:	6879      	ldr	r1, [r7, #4]
 8016dbe:	4618      	mov	r0, r3
 8016dc0:	f002 fa6a 	bl	8019298 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016dc4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016dc8:	4920      	ldr	r1, [pc, #128]	; (8016e4c <etharp_update_arp_entry+0x148>)
 8016dca:	4613      	mov	r3, r2
 8016dcc:	005b      	lsls	r3, r3, #1
 8016dce:	4413      	add	r3, r2
 8016dd0:	00db      	lsls	r3, r3, #3
 8016dd2:	440b      	add	r3, r1
 8016dd4:	3312      	adds	r3, #18
 8016dd6:	2200      	movs	r2, #0
 8016dd8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016dda:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016dde:	491b      	ldr	r1, [pc, #108]	; (8016e4c <etharp_update_arp_entry+0x148>)
 8016de0:	4613      	mov	r3, r2
 8016de2:	005b      	lsls	r3, r3, #1
 8016de4:	4413      	add	r3, r2
 8016de6:	00db      	lsls	r3, r3, #3
 8016de8:	440b      	add	r3, r1
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d021      	beq.n	8016e34 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016df0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016df4:	4915      	ldr	r1, [pc, #84]	; (8016e4c <etharp_update_arp_entry+0x148>)
 8016df6:	4613      	mov	r3, r2
 8016df8:	005b      	lsls	r3, r3, #1
 8016dfa:	4413      	add	r3, r2
 8016dfc:	00db      	lsls	r3, r3, #3
 8016dfe:	440b      	add	r3, r1
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016e04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016e08:	4910      	ldr	r1, [pc, #64]	; (8016e4c <etharp_update_arp_entry+0x148>)
 8016e0a:	4613      	mov	r3, r2
 8016e0c:	005b      	lsls	r3, r3, #1
 8016e0e:	4413      	add	r3, r2
 8016e10:	00db      	lsls	r3, r3, #3
 8016e12:	440b      	add	r3, r1
 8016e14:	2200      	movs	r2, #0
 8016e16:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8016e1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016e22:	9300      	str	r3, [sp, #0]
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	6939      	ldr	r1, [r7, #16]
 8016e28:	68f8      	ldr	r0, [r7, #12]
 8016e2a:	f001 ffb3 	bl	8018d94 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016e2e:	6938      	ldr	r0, [r7, #16]
 8016e30:	f7f7 fb7a 	bl	800e528 <pbuf_free>
  }
  return ERR_OK;
 8016e34:	2300      	movs	r3, #0
}
 8016e36:	4618      	mov	r0, r3
 8016e38:	3718      	adds	r7, #24
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	bd80      	pop	{r7, pc}
 8016e3e:	bf00      	nop
 8016e40:	0801d5e0 	.word	0x0801d5e0
 8016e44:	0801d6d8 	.word	0x0801d6d8
 8016e48:	0801d658 	.word	0x0801d658
 8016e4c:	2000057c 	.word	0x2000057c

08016e50 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b084      	sub	sp, #16
 8016e54:	af00      	add	r7, sp, #0
 8016e56:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016e58:	2300      	movs	r3, #0
 8016e5a:	60fb      	str	r3, [r7, #12]
 8016e5c:	e01e      	b.n	8016e9c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016e5e:	4913      	ldr	r1, [pc, #76]	; (8016eac <etharp_cleanup_netif+0x5c>)
 8016e60:	68fa      	ldr	r2, [r7, #12]
 8016e62:	4613      	mov	r3, r2
 8016e64:	005b      	lsls	r3, r3, #1
 8016e66:	4413      	add	r3, r2
 8016e68:	00db      	lsls	r3, r3, #3
 8016e6a:	440b      	add	r3, r1
 8016e6c:	3314      	adds	r3, #20
 8016e6e:	781b      	ldrb	r3, [r3, #0]
 8016e70:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016e72:	7afb      	ldrb	r3, [r7, #11]
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d00e      	beq.n	8016e96 <etharp_cleanup_netif+0x46>
 8016e78:	490c      	ldr	r1, [pc, #48]	; (8016eac <etharp_cleanup_netif+0x5c>)
 8016e7a:	68fa      	ldr	r2, [r7, #12]
 8016e7c:	4613      	mov	r3, r2
 8016e7e:	005b      	lsls	r3, r3, #1
 8016e80:	4413      	add	r3, r2
 8016e82:	00db      	lsls	r3, r3, #3
 8016e84:	440b      	add	r3, r1
 8016e86:	3308      	adds	r3, #8
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	687a      	ldr	r2, [r7, #4]
 8016e8c:	429a      	cmp	r2, r3
 8016e8e:	d102      	bne.n	8016e96 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016e90:	68f8      	ldr	r0, [r7, #12]
 8016e92:	f7ff fce5 	bl	8016860 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016e96:	68fb      	ldr	r3, [r7, #12]
 8016e98:	3301      	adds	r3, #1
 8016e9a:	60fb      	str	r3, [r7, #12]
 8016e9c:	68fb      	ldr	r3, [r7, #12]
 8016e9e:	2b09      	cmp	r3, #9
 8016ea0:	dddd      	ble.n	8016e5e <etharp_cleanup_netif+0xe>
    }
  }
}
 8016ea2:	bf00      	nop
 8016ea4:	bf00      	nop
 8016ea6:	3710      	adds	r7, #16
 8016ea8:	46bd      	mov	sp, r7
 8016eaa:	bd80      	pop	{r7, pc}
 8016eac:	2000057c 	.word	0x2000057c

08016eb0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016eb0:	b5b0      	push	{r4, r5, r7, lr}
 8016eb2:	b08a      	sub	sp, #40	; 0x28
 8016eb4:	af04      	add	r7, sp, #16
 8016eb6:	6078      	str	r0, [r7, #4]
 8016eb8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016eba:	683b      	ldr	r3, [r7, #0]
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d107      	bne.n	8016ed0 <etharp_input+0x20>
 8016ec0:	4b3f      	ldr	r3, [pc, #252]	; (8016fc0 <etharp_input+0x110>)
 8016ec2:	f240 228a 	movw	r2, #650	; 0x28a
 8016ec6:	493f      	ldr	r1, [pc, #252]	; (8016fc4 <etharp_input+0x114>)
 8016ec8:	483f      	ldr	r0, [pc, #252]	; (8016fc8 <etharp_input+0x118>)
 8016eca:	f002 fabf 	bl	801944c <iprintf>
 8016ece:	e074      	b.n	8016fba <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	685b      	ldr	r3, [r3, #4]
 8016ed4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016ed6:	693b      	ldr	r3, [r7, #16]
 8016ed8:	881b      	ldrh	r3, [r3, #0]
 8016eda:	b29b      	uxth	r3, r3
 8016edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016ee0:	d10c      	bne.n	8016efc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016ee2:	693b      	ldr	r3, [r7, #16]
 8016ee4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016ee6:	2b06      	cmp	r3, #6
 8016ee8:	d108      	bne.n	8016efc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016eea:	693b      	ldr	r3, [r7, #16]
 8016eec:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016eee:	2b04      	cmp	r3, #4
 8016ef0:	d104      	bne.n	8016efc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016ef2:	693b      	ldr	r3, [r7, #16]
 8016ef4:	885b      	ldrh	r3, [r3, #2]
 8016ef6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016ef8:	2b08      	cmp	r3, #8
 8016efa:	d003      	beq.n	8016f04 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016efc:	6878      	ldr	r0, [r7, #4]
 8016efe:	f7f7 fb13 	bl	800e528 <pbuf_free>
    return;
 8016f02:	e05a      	b.n	8016fba <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016f04:	693b      	ldr	r3, [r7, #16]
 8016f06:	330e      	adds	r3, #14
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016f0c:	693b      	ldr	r3, [r7, #16]
 8016f0e:	3318      	adds	r3, #24
 8016f10:	681b      	ldr	r3, [r3, #0]
 8016f12:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016f14:	683b      	ldr	r3, [r7, #0]
 8016f16:	3304      	adds	r3, #4
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d102      	bne.n	8016f24 <etharp_input+0x74>
    for_us = 0;
 8016f1e:	2300      	movs	r3, #0
 8016f20:	75fb      	strb	r3, [r7, #23]
 8016f22:	e009      	b.n	8016f38 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016f24:	68ba      	ldr	r2, [r7, #8]
 8016f26:	683b      	ldr	r3, [r7, #0]
 8016f28:	3304      	adds	r3, #4
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	429a      	cmp	r2, r3
 8016f2e:	bf0c      	ite	eq
 8016f30:	2301      	moveq	r3, #1
 8016f32:	2300      	movne	r3, #0
 8016f34:	b2db      	uxtb	r3, r3
 8016f36:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016f38:	693b      	ldr	r3, [r7, #16]
 8016f3a:	f103 0208 	add.w	r2, r3, #8
 8016f3e:	7dfb      	ldrb	r3, [r7, #23]
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d001      	beq.n	8016f48 <etharp_input+0x98>
 8016f44:	2301      	movs	r3, #1
 8016f46:	e000      	b.n	8016f4a <etharp_input+0x9a>
 8016f48:	2302      	movs	r3, #2
 8016f4a:	f107 010c 	add.w	r1, r7, #12
 8016f4e:	6838      	ldr	r0, [r7, #0]
 8016f50:	f7ff fed8 	bl	8016d04 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016f54:	693b      	ldr	r3, [r7, #16]
 8016f56:	88db      	ldrh	r3, [r3, #6]
 8016f58:	b29b      	uxth	r3, r3
 8016f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016f5e:	d003      	beq.n	8016f68 <etharp_input+0xb8>
 8016f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016f64:	d01e      	beq.n	8016fa4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016f66:	e025      	b.n	8016fb4 <etharp_input+0x104>
      if (for_us) {
 8016f68:	7dfb      	ldrb	r3, [r7, #23]
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d021      	beq.n	8016fb2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016f6e:	683b      	ldr	r3, [r7, #0]
 8016f70:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016f74:	693b      	ldr	r3, [r7, #16]
 8016f76:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016f7a:	683b      	ldr	r3, [r7, #0]
 8016f7c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8016f80:	683b      	ldr	r3, [r7, #0]
 8016f82:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016f84:	693a      	ldr	r2, [r7, #16]
 8016f86:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016f88:	2102      	movs	r1, #2
 8016f8a:	9103      	str	r1, [sp, #12]
 8016f8c:	f107 010c 	add.w	r1, r7, #12
 8016f90:	9102      	str	r1, [sp, #8]
 8016f92:	9201      	str	r2, [sp, #4]
 8016f94:	9300      	str	r3, [sp, #0]
 8016f96:	462b      	mov	r3, r5
 8016f98:	4622      	mov	r2, r4
 8016f9a:	4601      	mov	r1, r0
 8016f9c:	6838      	ldr	r0, [r7, #0]
 8016f9e:	f000 faef 	bl	8017580 <etharp_raw>
      break;
 8016fa2:	e006      	b.n	8016fb2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8016fa4:	f107 030c 	add.w	r3, r7, #12
 8016fa8:	4619      	mov	r1, r3
 8016faa:	6838      	ldr	r0, [r7, #0]
 8016fac:	f7fe f9fc 	bl	80153a8 <dhcp_arp_reply>
      break;
 8016fb0:	e000      	b.n	8016fb4 <etharp_input+0x104>
      break;
 8016fb2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016fb4:	6878      	ldr	r0, [r7, #4]
 8016fb6:	f7f7 fab7 	bl	800e528 <pbuf_free>
}
 8016fba:	3718      	adds	r7, #24
 8016fbc:	46bd      	mov	sp, r7
 8016fbe:	bdb0      	pop	{r4, r5, r7, pc}
 8016fc0:	0801d5e0 	.word	0x0801d5e0
 8016fc4:	0801d730 	.word	0x0801d730
 8016fc8:	0801d658 	.word	0x0801d658

08016fcc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016fcc:	b580      	push	{r7, lr}
 8016fce:	b086      	sub	sp, #24
 8016fd0:	af02      	add	r7, sp, #8
 8016fd2:	60f8      	str	r0, [r7, #12]
 8016fd4:	60b9      	str	r1, [r7, #8]
 8016fd6:	4613      	mov	r3, r2
 8016fd8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016fda:	79fa      	ldrb	r2, [r7, #7]
 8016fdc:	4944      	ldr	r1, [pc, #272]	; (80170f0 <etharp_output_to_arp_index+0x124>)
 8016fde:	4613      	mov	r3, r2
 8016fe0:	005b      	lsls	r3, r3, #1
 8016fe2:	4413      	add	r3, r2
 8016fe4:	00db      	lsls	r3, r3, #3
 8016fe6:	440b      	add	r3, r1
 8016fe8:	3314      	adds	r3, #20
 8016fea:	781b      	ldrb	r3, [r3, #0]
 8016fec:	2b01      	cmp	r3, #1
 8016fee:	d806      	bhi.n	8016ffe <etharp_output_to_arp_index+0x32>
 8016ff0:	4b40      	ldr	r3, [pc, #256]	; (80170f4 <etharp_output_to_arp_index+0x128>)
 8016ff2:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016ff6:	4940      	ldr	r1, [pc, #256]	; (80170f8 <etharp_output_to_arp_index+0x12c>)
 8016ff8:	4840      	ldr	r0, [pc, #256]	; (80170fc <etharp_output_to_arp_index+0x130>)
 8016ffa:	f002 fa27 	bl	801944c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016ffe:	79fa      	ldrb	r2, [r7, #7]
 8017000:	493b      	ldr	r1, [pc, #236]	; (80170f0 <etharp_output_to_arp_index+0x124>)
 8017002:	4613      	mov	r3, r2
 8017004:	005b      	lsls	r3, r3, #1
 8017006:	4413      	add	r3, r2
 8017008:	00db      	lsls	r3, r3, #3
 801700a:	440b      	add	r3, r1
 801700c:	3314      	adds	r3, #20
 801700e:	781b      	ldrb	r3, [r3, #0]
 8017010:	2b02      	cmp	r3, #2
 8017012:	d153      	bne.n	80170bc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8017014:	79fa      	ldrb	r2, [r7, #7]
 8017016:	4936      	ldr	r1, [pc, #216]	; (80170f0 <etharp_output_to_arp_index+0x124>)
 8017018:	4613      	mov	r3, r2
 801701a:	005b      	lsls	r3, r3, #1
 801701c:	4413      	add	r3, r2
 801701e:	00db      	lsls	r3, r3, #3
 8017020:	440b      	add	r3, r1
 8017022:	3312      	adds	r3, #18
 8017024:	881b      	ldrh	r3, [r3, #0]
 8017026:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801702a:	d919      	bls.n	8017060 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801702c:	79fa      	ldrb	r2, [r7, #7]
 801702e:	4613      	mov	r3, r2
 8017030:	005b      	lsls	r3, r3, #1
 8017032:	4413      	add	r3, r2
 8017034:	00db      	lsls	r3, r3, #3
 8017036:	4a2e      	ldr	r2, [pc, #184]	; (80170f0 <etharp_output_to_arp_index+0x124>)
 8017038:	4413      	add	r3, r2
 801703a:	3304      	adds	r3, #4
 801703c:	4619      	mov	r1, r3
 801703e:	68f8      	ldr	r0, [r7, #12]
 8017040:	f000 fb4c 	bl	80176dc <etharp_request>
 8017044:	4603      	mov	r3, r0
 8017046:	2b00      	cmp	r3, #0
 8017048:	d138      	bne.n	80170bc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801704a:	79fa      	ldrb	r2, [r7, #7]
 801704c:	4928      	ldr	r1, [pc, #160]	; (80170f0 <etharp_output_to_arp_index+0x124>)
 801704e:	4613      	mov	r3, r2
 8017050:	005b      	lsls	r3, r3, #1
 8017052:	4413      	add	r3, r2
 8017054:	00db      	lsls	r3, r3, #3
 8017056:	440b      	add	r3, r1
 8017058:	3314      	adds	r3, #20
 801705a:	2203      	movs	r2, #3
 801705c:	701a      	strb	r2, [r3, #0]
 801705e:	e02d      	b.n	80170bc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017060:	79fa      	ldrb	r2, [r7, #7]
 8017062:	4923      	ldr	r1, [pc, #140]	; (80170f0 <etharp_output_to_arp_index+0x124>)
 8017064:	4613      	mov	r3, r2
 8017066:	005b      	lsls	r3, r3, #1
 8017068:	4413      	add	r3, r2
 801706a:	00db      	lsls	r3, r3, #3
 801706c:	440b      	add	r3, r1
 801706e:	3312      	adds	r3, #18
 8017070:	881b      	ldrh	r3, [r3, #0]
 8017072:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8017076:	d321      	bcc.n	80170bc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017078:	79fa      	ldrb	r2, [r7, #7]
 801707a:	4613      	mov	r3, r2
 801707c:	005b      	lsls	r3, r3, #1
 801707e:	4413      	add	r3, r2
 8017080:	00db      	lsls	r3, r3, #3
 8017082:	4a1b      	ldr	r2, [pc, #108]	; (80170f0 <etharp_output_to_arp_index+0x124>)
 8017084:	4413      	add	r3, r2
 8017086:	1d19      	adds	r1, r3, #4
 8017088:	79fa      	ldrb	r2, [r7, #7]
 801708a:	4613      	mov	r3, r2
 801708c:	005b      	lsls	r3, r3, #1
 801708e:	4413      	add	r3, r2
 8017090:	00db      	lsls	r3, r3, #3
 8017092:	3308      	adds	r3, #8
 8017094:	4a16      	ldr	r2, [pc, #88]	; (80170f0 <etharp_output_to_arp_index+0x124>)
 8017096:	4413      	add	r3, r2
 8017098:	3304      	adds	r3, #4
 801709a:	461a      	mov	r2, r3
 801709c:	68f8      	ldr	r0, [r7, #12]
 801709e:	f000 fafb 	bl	8017698 <etharp_request_dst>
 80170a2:	4603      	mov	r3, r0
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d109      	bne.n	80170bc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80170a8:	79fa      	ldrb	r2, [r7, #7]
 80170aa:	4911      	ldr	r1, [pc, #68]	; (80170f0 <etharp_output_to_arp_index+0x124>)
 80170ac:	4613      	mov	r3, r2
 80170ae:	005b      	lsls	r3, r3, #1
 80170b0:	4413      	add	r3, r2
 80170b2:	00db      	lsls	r3, r3, #3
 80170b4:	440b      	add	r3, r1
 80170b6:	3314      	adds	r3, #20
 80170b8:	2203      	movs	r2, #3
 80170ba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80170c2:	79fa      	ldrb	r2, [r7, #7]
 80170c4:	4613      	mov	r3, r2
 80170c6:	005b      	lsls	r3, r3, #1
 80170c8:	4413      	add	r3, r2
 80170ca:	00db      	lsls	r3, r3, #3
 80170cc:	3308      	adds	r3, #8
 80170ce:	4a08      	ldr	r2, [pc, #32]	; (80170f0 <etharp_output_to_arp_index+0x124>)
 80170d0:	4413      	add	r3, r2
 80170d2:	3304      	adds	r3, #4
 80170d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80170d8:	9200      	str	r2, [sp, #0]
 80170da:	460a      	mov	r2, r1
 80170dc:	68b9      	ldr	r1, [r7, #8]
 80170de:	68f8      	ldr	r0, [r7, #12]
 80170e0:	f001 fe58 	bl	8018d94 <ethernet_output>
 80170e4:	4603      	mov	r3, r0
}
 80170e6:	4618      	mov	r0, r3
 80170e8:	3710      	adds	r7, #16
 80170ea:	46bd      	mov	sp, r7
 80170ec:	bd80      	pop	{r7, pc}
 80170ee:	bf00      	nop
 80170f0:	2000057c 	.word	0x2000057c
 80170f4:	0801d5e0 	.word	0x0801d5e0
 80170f8:	0801d750 	.word	0x0801d750
 80170fc:	0801d658 	.word	0x0801d658

08017100 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017100:	b580      	push	{r7, lr}
 8017102:	b08a      	sub	sp, #40	; 0x28
 8017104:	af02      	add	r7, sp, #8
 8017106:	60f8      	str	r0, [r7, #12]
 8017108:	60b9      	str	r1, [r7, #8]
 801710a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	2b00      	cmp	r3, #0
 8017114:	d106      	bne.n	8017124 <etharp_output+0x24>
 8017116:	4b73      	ldr	r3, [pc, #460]	; (80172e4 <etharp_output+0x1e4>)
 8017118:	f240 321e 	movw	r2, #798	; 0x31e
 801711c:	4972      	ldr	r1, [pc, #456]	; (80172e8 <etharp_output+0x1e8>)
 801711e:	4873      	ldr	r0, [pc, #460]	; (80172ec <etharp_output+0x1ec>)
 8017120:	f002 f994 	bl	801944c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8017124:	68bb      	ldr	r3, [r7, #8]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d106      	bne.n	8017138 <etharp_output+0x38>
 801712a:	4b6e      	ldr	r3, [pc, #440]	; (80172e4 <etharp_output+0x1e4>)
 801712c:	f240 321f 	movw	r2, #799	; 0x31f
 8017130:	496f      	ldr	r1, [pc, #444]	; (80172f0 <etharp_output+0x1f0>)
 8017132:	486e      	ldr	r0, [pc, #440]	; (80172ec <etharp_output+0x1ec>)
 8017134:	f002 f98a 	bl	801944c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d106      	bne.n	801714c <etharp_output+0x4c>
 801713e:	4b69      	ldr	r3, [pc, #420]	; (80172e4 <etharp_output+0x1e4>)
 8017140:	f44f 7248 	mov.w	r2, #800	; 0x320
 8017144:	496b      	ldr	r1, [pc, #428]	; (80172f4 <etharp_output+0x1f4>)
 8017146:	4869      	ldr	r0, [pc, #420]	; (80172ec <etharp_output+0x1ec>)
 8017148:	f002 f980 	bl	801944c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	681b      	ldr	r3, [r3, #0]
 8017150:	68f9      	ldr	r1, [r7, #12]
 8017152:	4618      	mov	r0, r3
 8017154:	f000 ff16 	bl	8017f84 <ip4_addr_isbroadcast_u32>
 8017158:	4603      	mov	r3, r0
 801715a:	2b00      	cmp	r3, #0
 801715c:	d002      	beq.n	8017164 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801715e:	4b66      	ldr	r3, [pc, #408]	; (80172f8 <etharp_output+0x1f8>)
 8017160:	61fb      	str	r3, [r7, #28]
 8017162:	e0af      	b.n	80172c4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801716c:	2be0      	cmp	r3, #224	; 0xe0
 801716e:	d118      	bne.n	80171a2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017170:	2301      	movs	r3, #1
 8017172:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017174:	2300      	movs	r3, #0
 8017176:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017178:	235e      	movs	r3, #94	; 0x5e
 801717a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	3301      	adds	r3, #1
 8017180:	781b      	ldrb	r3, [r3, #0]
 8017182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017186:	b2db      	uxtb	r3, r3
 8017188:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	3302      	adds	r3, #2
 801718e:	781b      	ldrb	r3, [r3, #0]
 8017190:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	3303      	adds	r3, #3
 8017196:	781b      	ldrb	r3, [r3, #0]
 8017198:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801719a:	f107 0310 	add.w	r3, r7, #16
 801719e:	61fb      	str	r3, [r7, #28]
 80171a0:	e090      	b.n	80172c4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	681a      	ldr	r2, [r3, #0]
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	3304      	adds	r3, #4
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	405a      	eors	r2, r3
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	3308      	adds	r3, #8
 80171b2:	681b      	ldr	r3, [r3, #0]
 80171b4:	4013      	ands	r3, r2
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d012      	beq.n	80171e0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80171c0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80171c4:	4293      	cmp	r3, r2
 80171c6:	d00b      	beq.n	80171e0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	330c      	adds	r3, #12
 80171cc:	681b      	ldr	r3, [r3, #0]
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d003      	beq.n	80171da <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	330c      	adds	r3, #12
 80171d6:	61bb      	str	r3, [r7, #24]
 80171d8:	e002      	b.n	80171e0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80171da:	f06f 0303 	mvn.w	r3, #3
 80171de:	e07d      	b.n	80172dc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80171e0:	4b46      	ldr	r3, [pc, #280]	; (80172fc <etharp_output+0x1fc>)
 80171e2:	781b      	ldrb	r3, [r3, #0]
 80171e4:	4619      	mov	r1, r3
 80171e6:	4a46      	ldr	r2, [pc, #280]	; (8017300 <etharp_output+0x200>)
 80171e8:	460b      	mov	r3, r1
 80171ea:	005b      	lsls	r3, r3, #1
 80171ec:	440b      	add	r3, r1
 80171ee:	00db      	lsls	r3, r3, #3
 80171f0:	4413      	add	r3, r2
 80171f2:	3314      	adds	r3, #20
 80171f4:	781b      	ldrb	r3, [r3, #0]
 80171f6:	2b01      	cmp	r3, #1
 80171f8:	d925      	bls.n	8017246 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80171fa:	4b40      	ldr	r3, [pc, #256]	; (80172fc <etharp_output+0x1fc>)
 80171fc:	781b      	ldrb	r3, [r3, #0]
 80171fe:	4619      	mov	r1, r3
 8017200:	4a3f      	ldr	r2, [pc, #252]	; (8017300 <etharp_output+0x200>)
 8017202:	460b      	mov	r3, r1
 8017204:	005b      	lsls	r3, r3, #1
 8017206:	440b      	add	r3, r1
 8017208:	00db      	lsls	r3, r3, #3
 801720a:	4413      	add	r3, r2
 801720c:	3308      	adds	r3, #8
 801720e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017210:	68fa      	ldr	r2, [r7, #12]
 8017212:	429a      	cmp	r2, r3
 8017214:	d117      	bne.n	8017246 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8017216:	69bb      	ldr	r3, [r7, #24]
 8017218:	681a      	ldr	r2, [r3, #0]
 801721a:	4b38      	ldr	r3, [pc, #224]	; (80172fc <etharp_output+0x1fc>)
 801721c:	781b      	ldrb	r3, [r3, #0]
 801721e:	4618      	mov	r0, r3
 8017220:	4937      	ldr	r1, [pc, #220]	; (8017300 <etharp_output+0x200>)
 8017222:	4603      	mov	r3, r0
 8017224:	005b      	lsls	r3, r3, #1
 8017226:	4403      	add	r3, r0
 8017228:	00db      	lsls	r3, r3, #3
 801722a:	440b      	add	r3, r1
 801722c:	3304      	adds	r3, #4
 801722e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017230:	429a      	cmp	r2, r3
 8017232:	d108      	bne.n	8017246 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017234:	4b31      	ldr	r3, [pc, #196]	; (80172fc <etharp_output+0x1fc>)
 8017236:	781b      	ldrb	r3, [r3, #0]
 8017238:	461a      	mov	r2, r3
 801723a:	68b9      	ldr	r1, [r7, #8]
 801723c:	68f8      	ldr	r0, [r7, #12]
 801723e:	f7ff fec5 	bl	8016fcc <etharp_output_to_arp_index>
 8017242:	4603      	mov	r3, r0
 8017244:	e04a      	b.n	80172dc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017246:	2300      	movs	r3, #0
 8017248:	75fb      	strb	r3, [r7, #23]
 801724a:	e031      	b.n	80172b0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801724c:	7dfa      	ldrb	r2, [r7, #23]
 801724e:	492c      	ldr	r1, [pc, #176]	; (8017300 <etharp_output+0x200>)
 8017250:	4613      	mov	r3, r2
 8017252:	005b      	lsls	r3, r3, #1
 8017254:	4413      	add	r3, r2
 8017256:	00db      	lsls	r3, r3, #3
 8017258:	440b      	add	r3, r1
 801725a:	3314      	adds	r3, #20
 801725c:	781b      	ldrb	r3, [r3, #0]
 801725e:	2b01      	cmp	r3, #1
 8017260:	d923      	bls.n	80172aa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8017262:	7dfa      	ldrb	r2, [r7, #23]
 8017264:	4926      	ldr	r1, [pc, #152]	; (8017300 <etharp_output+0x200>)
 8017266:	4613      	mov	r3, r2
 8017268:	005b      	lsls	r3, r3, #1
 801726a:	4413      	add	r3, r2
 801726c:	00db      	lsls	r3, r3, #3
 801726e:	440b      	add	r3, r1
 8017270:	3308      	adds	r3, #8
 8017272:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017274:	68fa      	ldr	r2, [r7, #12]
 8017276:	429a      	cmp	r2, r3
 8017278:	d117      	bne.n	80172aa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801727a:	69bb      	ldr	r3, [r7, #24]
 801727c:	6819      	ldr	r1, [r3, #0]
 801727e:	7dfa      	ldrb	r2, [r7, #23]
 8017280:	481f      	ldr	r0, [pc, #124]	; (8017300 <etharp_output+0x200>)
 8017282:	4613      	mov	r3, r2
 8017284:	005b      	lsls	r3, r3, #1
 8017286:	4413      	add	r3, r2
 8017288:	00db      	lsls	r3, r3, #3
 801728a:	4403      	add	r3, r0
 801728c:	3304      	adds	r3, #4
 801728e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017290:	4299      	cmp	r1, r3
 8017292:	d10a      	bne.n	80172aa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017294:	4a19      	ldr	r2, [pc, #100]	; (80172fc <etharp_output+0x1fc>)
 8017296:	7dfb      	ldrb	r3, [r7, #23]
 8017298:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801729a:	7dfb      	ldrb	r3, [r7, #23]
 801729c:	461a      	mov	r2, r3
 801729e:	68b9      	ldr	r1, [r7, #8]
 80172a0:	68f8      	ldr	r0, [r7, #12]
 80172a2:	f7ff fe93 	bl	8016fcc <etharp_output_to_arp_index>
 80172a6:	4603      	mov	r3, r0
 80172a8:	e018      	b.n	80172dc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80172aa:	7dfb      	ldrb	r3, [r7, #23]
 80172ac:	3301      	adds	r3, #1
 80172ae:	75fb      	strb	r3, [r7, #23]
 80172b0:	7dfb      	ldrb	r3, [r7, #23]
 80172b2:	2b09      	cmp	r3, #9
 80172b4:	d9ca      	bls.n	801724c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80172b6:	68ba      	ldr	r2, [r7, #8]
 80172b8:	69b9      	ldr	r1, [r7, #24]
 80172ba:	68f8      	ldr	r0, [r7, #12]
 80172bc:	f000 f822 	bl	8017304 <etharp_query>
 80172c0:	4603      	mov	r3, r0
 80172c2:	e00b      	b.n	80172dc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80172ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80172ce:	9300      	str	r3, [sp, #0]
 80172d0:	69fb      	ldr	r3, [r7, #28]
 80172d2:	68b9      	ldr	r1, [r7, #8]
 80172d4:	68f8      	ldr	r0, [r7, #12]
 80172d6:	f001 fd5d 	bl	8018d94 <ethernet_output>
 80172da:	4603      	mov	r3, r0
}
 80172dc:	4618      	mov	r0, r3
 80172de:	3720      	adds	r7, #32
 80172e0:	46bd      	mov	sp, r7
 80172e2:	bd80      	pop	{r7, pc}
 80172e4:	0801d5e0 	.word	0x0801d5e0
 80172e8:	0801d730 	.word	0x0801d730
 80172ec:	0801d658 	.word	0x0801d658
 80172f0:	0801d780 	.word	0x0801d780
 80172f4:	0801d720 	.word	0x0801d720
 80172f8:	0801e0e4 	.word	0x0801e0e4
 80172fc:	2000066c 	.word	0x2000066c
 8017300:	2000057c 	.word	0x2000057c

08017304 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8017304:	b580      	push	{r7, lr}
 8017306:	b08c      	sub	sp, #48	; 0x30
 8017308:	af02      	add	r7, sp, #8
 801730a:	60f8      	str	r0, [r7, #12]
 801730c:	60b9      	str	r1, [r7, #8]
 801730e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	332a      	adds	r3, #42	; 0x2a
 8017314:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8017316:	23ff      	movs	r3, #255	; 0xff
 8017318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801731c:	2300      	movs	r3, #0
 801731e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017320:	68bb      	ldr	r3, [r7, #8]
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	68f9      	ldr	r1, [r7, #12]
 8017326:	4618      	mov	r0, r3
 8017328:	f000 fe2c 	bl	8017f84 <ip4_addr_isbroadcast_u32>
 801732c:	4603      	mov	r3, r0
 801732e:	2b00      	cmp	r3, #0
 8017330:	d10c      	bne.n	801734c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017332:	68bb      	ldr	r3, [r7, #8]
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801733a:	2be0      	cmp	r3, #224	; 0xe0
 801733c:	d006      	beq.n	801734c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801733e:	68bb      	ldr	r3, [r7, #8]
 8017340:	2b00      	cmp	r3, #0
 8017342:	d003      	beq.n	801734c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8017344:	68bb      	ldr	r3, [r7, #8]
 8017346:	681b      	ldr	r3, [r3, #0]
 8017348:	2b00      	cmp	r3, #0
 801734a:	d102      	bne.n	8017352 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801734c:	f06f 030f 	mvn.w	r3, #15
 8017350:	e101      	b.n	8017556 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8017352:	68fa      	ldr	r2, [r7, #12]
 8017354:	2101      	movs	r1, #1
 8017356:	68b8      	ldr	r0, [r7, #8]
 8017358:	f7ff fb5c 	bl	8016a14 <etharp_find_entry>
 801735c:	4603      	mov	r3, r0
 801735e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017360:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017364:	2b00      	cmp	r3, #0
 8017366:	da02      	bge.n	801736e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8017368:	8a7b      	ldrh	r3, [r7, #18]
 801736a:	b25b      	sxtb	r3, r3
 801736c:	e0f3      	b.n	8017556 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801736e:	8a7b      	ldrh	r3, [r7, #18]
 8017370:	2b7e      	cmp	r3, #126	; 0x7e
 8017372:	d906      	bls.n	8017382 <etharp_query+0x7e>
 8017374:	4b7a      	ldr	r3, [pc, #488]	; (8017560 <etharp_query+0x25c>)
 8017376:	f240 32c1 	movw	r2, #961	; 0x3c1
 801737a:	497a      	ldr	r1, [pc, #488]	; (8017564 <etharp_query+0x260>)
 801737c:	487a      	ldr	r0, [pc, #488]	; (8017568 <etharp_query+0x264>)
 801737e:	f002 f865 	bl	801944c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8017382:	8a7b      	ldrh	r3, [r7, #18]
 8017384:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8017386:	7c7a      	ldrb	r2, [r7, #17]
 8017388:	4978      	ldr	r1, [pc, #480]	; (801756c <etharp_query+0x268>)
 801738a:	4613      	mov	r3, r2
 801738c:	005b      	lsls	r3, r3, #1
 801738e:	4413      	add	r3, r2
 8017390:	00db      	lsls	r3, r3, #3
 8017392:	440b      	add	r3, r1
 8017394:	3314      	adds	r3, #20
 8017396:	781b      	ldrb	r3, [r3, #0]
 8017398:	2b00      	cmp	r3, #0
 801739a:	d115      	bne.n	80173c8 <etharp_query+0xc4>
    is_new_entry = 1;
 801739c:	2301      	movs	r3, #1
 801739e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80173a0:	7c7a      	ldrb	r2, [r7, #17]
 80173a2:	4972      	ldr	r1, [pc, #456]	; (801756c <etharp_query+0x268>)
 80173a4:	4613      	mov	r3, r2
 80173a6:	005b      	lsls	r3, r3, #1
 80173a8:	4413      	add	r3, r2
 80173aa:	00db      	lsls	r3, r3, #3
 80173ac:	440b      	add	r3, r1
 80173ae:	3314      	adds	r3, #20
 80173b0:	2201      	movs	r2, #1
 80173b2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80173b4:	7c7a      	ldrb	r2, [r7, #17]
 80173b6:	496d      	ldr	r1, [pc, #436]	; (801756c <etharp_query+0x268>)
 80173b8:	4613      	mov	r3, r2
 80173ba:	005b      	lsls	r3, r3, #1
 80173bc:	4413      	add	r3, r2
 80173be:	00db      	lsls	r3, r3, #3
 80173c0:	440b      	add	r3, r1
 80173c2:	3308      	adds	r3, #8
 80173c4:	68fa      	ldr	r2, [r7, #12]
 80173c6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80173c8:	7c7a      	ldrb	r2, [r7, #17]
 80173ca:	4968      	ldr	r1, [pc, #416]	; (801756c <etharp_query+0x268>)
 80173cc:	4613      	mov	r3, r2
 80173ce:	005b      	lsls	r3, r3, #1
 80173d0:	4413      	add	r3, r2
 80173d2:	00db      	lsls	r3, r3, #3
 80173d4:	440b      	add	r3, r1
 80173d6:	3314      	adds	r3, #20
 80173d8:	781b      	ldrb	r3, [r3, #0]
 80173da:	2b01      	cmp	r3, #1
 80173dc:	d011      	beq.n	8017402 <etharp_query+0xfe>
 80173de:	7c7a      	ldrb	r2, [r7, #17]
 80173e0:	4962      	ldr	r1, [pc, #392]	; (801756c <etharp_query+0x268>)
 80173e2:	4613      	mov	r3, r2
 80173e4:	005b      	lsls	r3, r3, #1
 80173e6:	4413      	add	r3, r2
 80173e8:	00db      	lsls	r3, r3, #3
 80173ea:	440b      	add	r3, r1
 80173ec:	3314      	adds	r3, #20
 80173ee:	781b      	ldrb	r3, [r3, #0]
 80173f0:	2b01      	cmp	r3, #1
 80173f2:	d806      	bhi.n	8017402 <etharp_query+0xfe>
 80173f4:	4b5a      	ldr	r3, [pc, #360]	; (8017560 <etharp_query+0x25c>)
 80173f6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80173fa:	495d      	ldr	r1, [pc, #372]	; (8017570 <etharp_query+0x26c>)
 80173fc:	485a      	ldr	r0, [pc, #360]	; (8017568 <etharp_query+0x264>)
 80173fe:	f002 f825 	bl	801944c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8017402:	6a3b      	ldr	r3, [r7, #32]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d102      	bne.n	801740e <etharp_query+0x10a>
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	2b00      	cmp	r3, #0
 801740c:	d10c      	bne.n	8017428 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801740e:	68b9      	ldr	r1, [r7, #8]
 8017410:	68f8      	ldr	r0, [r7, #12]
 8017412:	f000 f963 	bl	80176dc <etharp_request>
 8017416:	4603      	mov	r3, r0
 8017418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	2b00      	cmp	r3, #0
 8017420:	d102      	bne.n	8017428 <etharp_query+0x124>
      return result;
 8017422:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017426:	e096      	b.n	8017556 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	2b00      	cmp	r3, #0
 801742c:	d106      	bne.n	801743c <etharp_query+0x138>
 801742e:	4b4c      	ldr	r3, [pc, #304]	; (8017560 <etharp_query+0x25c>)
 8017430:	f240 32e1 	movw	r2, #993	; 0x3e1
 8017434:	494f      	ldr	r1, [pc, #316]	; (8017574 <etharp_query+0x270>)
 8017436:	484c      	ldr	r0, [pc, #304]	; (8017568 <etharp_query+0x264>)
 8017438:	f002 f808 	bl	801944c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801743c:	7c7a      	ldrb	r2, [r7, #17]
 801743e:	494b      	ldr	r1, [pc, #300]	; (801756c <etharp_query+0x268>)
 8017440:	4613      	mov	r3, r2
 8017442:	005b      	lsls	r3, r3, #1
 8017444:	4413      	add	r3, r2
 8017446:	00db      	lsls	r3, r3, #3
 8017448:	440b      	add	r3, r1
 801744a:	3314      	adds	r3, #20
 801744c:	781b      	ldrb	r3, [r3, #0]
 801744e:	2b01      	cmp	r3, #1
 8017450:	d917      	bls.n	8017482 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8017452:	4a49      	ldr	r2, [pc, #292]	; (8017578 <etharp_query+0x274>)
 8017454:	7c7b      	ldrb	r3, [r7, #17]
 8017456:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017458:	7c7a      	ldrb	r2, [r7, #17]
 801745a:	4613      	mov	r3, r2
 801745c:	005b      	lsls	r3, r3, #1
 801745e:	4413      	add	r3, r2
 8017460:	00db      	lsls	r3, r3, #3
 8017462:	3308      	adds	r3, #8
 8017464:	4a41      	ldr	r2, [pc, #260]	; (801756c <etharp_query+0x268>)
 8017466:	4413      	add	r3, r2
 8017468:	3304      	adds	r3, #4
 801746a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801746e:	9200      	str	r2, [sp, #0]
 8017470:	697a      	ldr	r2, [r7, #20]
 8017472:	6879      	ldr	r1, [r7, #4]
 8017474:	68f8      	ldr	r0, [r7, #12]
 8017476:	f001 fc8d 	bl	8018d94 <ethernet_output>
 801747a:	4603      	mov	r3, r0
 801747c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017480:	e067      	b.n	8017552 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017482:	7c7a      	ldrb	r2, [r7, #17]
 8017484:	4939      	ldr	r1, [pc, #228]	; (801756c <etharp_query+0x268>)
 8017486:	4613      	mov	r3, r2
 8017488:	005b      	lsls	r3, r3, #1
 801748a:	4413      	add	r3, r2
 801748c:	00db      	lsls	r3, r3, #3
 801748e:	440b      	add	r3, r1
 8017490:	3314      	adds	r3, #20
 8017492:	781b      	ldrb	r3, [r3, #0]
 8017494:	2b01      	cmp	r3, #1
 8017496:	d15c      	bne.n	8017552 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8017498:	2300      	movs	r3, #0
 801749a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	61fb      	str	r3, [r7, #28]
    while (p) {
 80174a0:	e01c      	b.n	80174dc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80174a2:	69fb      	ldr	r3, [r7, #28]
 80174a4:	895a      	ldrh	r2, [r3, #10]
 80174a6:	69fb      	ldr	r3, [r7, #28]
 80174a8:	891b      	ldrh	r3, [r3, #8]
 80174aa:	429a      	cmp	r2, r3
 80174ac:	d10a      	bne.n	80174c4 <etharp_query+0x1c0>
 80174ae:	69fb      	ldr	r3, [r7, #28]
 80174b0:	681b      	ldr	r3, [r3, #0]
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d006      	beq.n	80174c4 <etharp_query+0x1c0>
 80174b6:	4b2a      	ldr	r3, [pc, #168]	; (8017560 <etharp_query+0x25c>)
 80174b8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80174bc:	492f      	ldr	r1, [pc, #188]	; (801757c <etharp_query+0x278>)
 80174be:	482a      	ldr	r0, [pc, #168]	; (8017568 <etharp_query+0x264>)
 80174c0:	f001 ffc4 	bl	801944c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80174c4:	69fb      	ldr	r3, [r7, #28]
 80174c6:	7b1b      	ldrb	r3, [r3, #12]
 80174c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d002      	beq.n	80174d6 <etharp_query+0x1d2>
        copy_needed = 1;
 80174d0:	2301      	movs	r3, #1
 80174d2:	61bb      	str	r3, [r7, #24]
        break;
 80174d4:	e005      	b.n	80174e2 <etharp_query+0x1de>
      }
      p = p->next;
 80174d6:	69fb      	ldr	r3, [r7, #28]
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	61fb      	str	r3, [r7, #28]
    while (p) {
 80174dc:	69fb      	ldr	r3, [r7, #28]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d1df      	bne.n	80174a2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80174e2:	69bb      	ldr	r3, [r7, #24]
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d007      	beq.n	80174f8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80174e8:	687a      	ldr	r2, [r7, #4]
 80174ea:	f44f 7120 	mov.w	r1, #640	; 0x280
 80174ee:	200e      	movs	r0, #14
 80174f0:	f7f7 fb18 	bl	800eb24 <pbuf_clone>
 80174f4:	61f8      	str	r0, [r7, #28]
 80174f6:	e004      	b.n	8017502 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80174fc:	69f8      	ldr	r0, [r7, #28]
 80174fe:	f7f7 f8b3 	bl	800e668 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017502:	69fb      	ldr	r3, [r7, #28]
 8017504:	2b00      	cmp	r3, #0
 8017506:	d021      	beq.n	801754c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017508:	7c7a      	ldrb	r2, [r7, #17]
 801750a:	4918      	ldr	r1, [pc, #96]	; (801756c <etharp_query+0x268>)
 801750c:	4613      	mov	r3, r2
 801750e:	005b      	lsls	r3, r3, #1
 8017510:	4413      	add	r3, r2
 8017512:	00db      	lsls	r3, r3, #3
 8017514:	440b      	add	r3, r1
 8017516:	681b      	ldr	r3, [r3, #0]
 8017518:	2b00      	cmp	r3, #0
 801751a:	d00a      	beq.n	8017532 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801751c:	7c7a      	ldrb	r2, [r7, #17]
 801751e:	4913      	ldr	r1, [pc, #76]	; (801756c <etharp_query+0x268>)
 8017520:	4613      	mov	r3, r2
 8017522:	005b      	lsls	r3, r3, #1
 8017524:	4413      	add	r3, r2
 8017526:	00db      	lsls	r3, r3, #3
 8017528:	440b      	add	r3, r1
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	4618      	mov	r0, r3
 801752e:	f7f6 fffb 	bl	800e528 <pbuf_free>
      }
      arp_table[i].q = p;
 8017532:	7c7a      	ldrb	r2, [r7, #17]
 8017534:	490d      	ldr	r1, [pc, #52]	; (801756c <etharp_query+0x268>)
 8017536:	4613      	mov	r3, r2
 8017538:	005b      	lsls	r3, r3, #1
 801753a:	4413      	add	r3, r2
 801753c:	00db      	lsls	r3, r3, #3
 801753e:	440b      	add	r3, r1
 8017540:	69fa      	ldr	r2, [r7, #28]
 8017542:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017544:	2300      	movs	r3, #0
 8017546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801754a:	e002      	b.n	8017552 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801754c:	23ff      	movs	r3, #255	; 0xff
 801754e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8017552:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8017556:	4618      	mov	r0, r3
 8017558:	3728      	adds	r7, #40	; 0x28
 801755a:	46bd      	mov	sp, r7
 801755c:	bd80      	pop	{r7, pc}
 801755e:	bf00      	nop
 8017560:	0801d5e0 	.word	0x0801d5e0
 8017564:	0801d78c 	.word	0x0801d78c
 8017568:	0801d658 	.word	0x0801d658
 801756c:	2000057c 	.word	0x2000057c
 8017570:	0801d79c 	.word	0x0801d79c
 8017574:	0801d780 	.word	0x0801d780
 8017578:	2000066c 	.word	0x2000066c
 801757c:	0801d7c4 	.word	0x0801d7c4

08017580 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017580:	b580      	push	{r7, lr}
 8017582:	b08a      	sub	sp, #40	; 0x28
 8017584:	af02      	add	r7, sp, #8
 8017586:	60f8      	str	r0, [r7, #12]
 8017588:	60b9      	str	r1, [r7, #8]
 801758a:	607a      	str	r2, [r7, #4]
 801758c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801758e:	2300      	movs	r3, #0
 8017590:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017592:	68fb      	ldr	r3, [r7, #12]
 8017594:	2b00      	cmp	r3, #0
 8017596:	d106      	bne.n	80175a6 <etharp_raw+0x26>
 8017598:	4b3a      	ldr	r3, [pc, #232]	; (8017684 <etharp_raw+0x104>)
 801759a:	f240 4257 	movw	r2, #1111	; 0x457
 801759e:	493a      	ldr	r1, [pc, #232]	; (8017688 <etharp_raw+0x108>)
 80175a0:	483a      	ldr	r0, [pc, #232]	; (801768c <etharp_raw+0x10c>)
 80175a2:	f001 ff53 	bl	801944c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80175a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80175aa:	211c      	movs	r1, #28
 80175ac:	200e      	movs	r0, #14
 80175ae:	f7f6 fcd7 	bl	800df60 <pbuf_alloc>
 80175b2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80175b4:	69bb      	ldr	r3, [r7, #24]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d102      	bne.n	80175c0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80175ba:	f04f 33ff 	mov.w	r3, #4294967295
 80175be:	e05d      	b.n	801767c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80175c0:	69bb      	ldr	r3, [r7, #24]
 80175c2:	895b      	ldrh	r3, [r3, #10]
 80175c4:	2b1b      	cmp	r3, #27
 80175c6:	d806      	bhi.n	80175d6 <etharp_raw+0x56>
 80175c8:	4b2e      	ldr	r3, [pc, #184]	; (8017684 <etharp_raw+0x104>)
 80175ca:	f240 4262 	movw	r2, #1122	; 0x462
 80175ce:	4930      	ldr	r1, [pc, #192]	; (8017690 <etharp_raw+0x110>)
 80175d0:	482e      	ldr	r0, [pc, #184]	; (801768c <etharp_raw+0x10c>)
 80175d2:	f001 ff3b 	bl	801944c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80175d6:	69bb      	ldr	r3, [r7, #24]
 80175d8:	685b      	ldr	r3, [r3, #4]
 80175da:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80175dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80175de:	4618      	mov	r0, r3
 80175e0:	f7f5 fce6 	bl	800cfb0 <lwip_htons>
 80175e4:	4603      	mov	r3, r0
 80175e6:	461a      	mov	r2, r3
 80175e8:	697b      	ldr	r3, [r7, #20]
 80175ea:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80175f2:	2b06      	cmp	r3, #6
 80175f4:	d006      	beq.n	8017604 <etharp_raw+0x84>
 80175f6:	4b23      	ldr	r3, [pc, #140]	; (8017684 <etharp_raw+0x104>)
 80175f8:	f240 4269 	movw	r2, #1129	; 0x469
 80175fc:	4925      	ldr	r1, [pc, #148]	; (8017694 <etharp_raw+0x114>)
 80175fe:	4823      	ldr	r0, [pc, #140]	; (801768c <etharp_raw+0x10c>)
 8017600:	f001 ff24 	bl	801944c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017604:	697b      	ldr	r3, [r7, #20]
 8017606:	3308      	adds	r3, #8
 8017608:	2206      	movs	r2, #6
 801760a:	6839      	ldr	r1, [r7, #0]
 801760c:	4618      	mov	r0, r3
 801760e:	f001 fe43 	bl	8019298 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017612:	697b      	ldr	r3, [r7, #20]
 8017614:	3312      	adds	r3, #18
 8017616:	2206      	movs	r2, #6
 8017618:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801761a:	4618      	mov	r0, r3
 801761c:	f001 fe3c 	bl	8019298 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017620:	697b      	ldr	r3, [r7, #20]
 8017622:	330e      	adds	r3, #14
 8017624:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017626:	6812      	ldr	r2, [r2, #0]
 8017628:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801762a:	697b      	ldr	r3, [r7, #20]
 801762c:	3318      	adds	r3, #24
 801762e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017630:	6812      	ldr	r2, [r2, #0]
 8017632:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017634:	697b      	ldr	r3, [r7, #20]
 8017636:	2200      	movs	r2, #0
 8017638:	701a      	strb	r2, [r3, #0]
 801763a:	2200      	movs	r2, #0
 801763c:	f042 0201 	orr.w	r2, r2, #1
 8017640:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017642:	697b      	ldr	r3, [r7, #20]
 8017644:	2200      	movs	r2, #0
 8017646:	f042 0208 	orr.w	r2, r2, #8
 801764a:	709a      	strb	r2, [r3, #2]
 801764c:	2200      	movs	r2, #0
 801764e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017650:	697b      	ldr	r3, [r7, #20]
 8017652:	2206      	movs	r2, #6
 8017654:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017656:	697b      	ldr	r3, [r7, #20]
 8017658:	2204      	movs	r2, #4
 801765a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801765c:	f640 0306 	movw	r3, #2054	; 0x806
 8017660:	9300      	str	r3, [sp, #0]
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	68ba      	ldr	r2, [r7, #8]
 8017666:	69b9      	ldr	r1, [r7, #24]
 8017668:	68f8      	ldr	r0, [r7, #12]
 801766a:	f001 fb93 	bl	8018d94 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801766e:	69b8      	ldr	r0, [r7, #24]
 8017670:	f7f6 ff5a 	bl	800e528 <pbuf_free>
  p = NULL;
 8017674:	2300      	movs	r3, #0
 8017676:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017678:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801767c:	4618      	mov	r0, r3
 801767e:	3720      	adds	r7, #32
 8017680:	46bd      	mov	sp, r7
 8017682:	bd80      	pop	{r7, pc}
 8017684:	0801d5e0 	.word	0x0801d5e0
 8017688:	0801d730 	.word	0x0801d730
 801768c:	0801d658 	.word	0x0801d658
 8017690:	0801d7e0 	.word	0x0801d7e0
 8017694:	0801d814 	.word	0x0801d814

08017698 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017698:	b580      	push	{r7, lr}
 801769a:	b088      	sub	sp, #32
 801769c:	af04      	add	r7, sp, #16
 801769e:	60f8      	str	r0, [r7, #12]
 80176a0:	60b9      	str	r1, [r7, #8]
 80176a2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80176a4:	68fb      	ldr	r3, [r7, #12]
 80176a6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80176b4:	2201      	movs	r2, #1
 80176b6:	9203      	str	r2, [sp, #12]
 80176b8:	68ba      	ldr	r2, [r7, #8]
 80176ba:	9202      	str	r2, [sp, #8]
 80176bc:	4a06      	ldr	r2, [pc, #24]	; (80176d8 <etharp_request_dst+0x40>)
 80176be:	9201      	str	r2, [sp, #4]
 80176c0:	9300      	str	r3, [sp, #0]
 80176c2:	4603      	mov	r3, r0
 80176c4:	687a      	ldr	r2, [r7, #4]
 80176c6:	68f8      	ldr	r0, [r7, #12]
 80176c8:	f7ff ff5a 	bl	8017580 <etharp_raw>
 80176cc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80176ce:	4618      	mov	r0, r3
 80176d0:	3710      	adds	r7, #16
 80176d2:	46bd      	mov	sp, r7
 80176d4:	bd80      	pop	{r7, pc}
 80176d6:	bf00      	nop
 80176d8:	0801e0ec 	.word	0x0801e0ec

080176dc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80176dc:	b580      	push	{r7, lr}
 80176de:	b082      	sub	sp, #8
 80176e0:	af00      	add	r7, sp, #0
 80176e2:	6078      	str	r0, [r7, #4]
 80176e4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80176e6:	4a05      	ldr	r2, [pc, #20]	; (80176fc <etharp_request+0x20>)
 80176e8:	6839      	ldr	r1, [r7, #0]
 80176ea:	6878      	ldr	r0, [r7, #4]
 80176ec:	f7ff ffd4 	bl	8017698 <etharp_request_dst>
 80176f0:	4603      	mov	r3, r0
}
 80176f2:	4618      	mov	r0, r3
 80176f4:	3708      	adds	r7, #8
 80176f6:	46bd      	mov	sp, r7
 80176f8:	bd80      	pop	{r7, pc}
 80176fa:	bf00      	nop
 80176fc:	0801e0e4 	.word	0x0801e0e4

08017700 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017700:	b580      	push	{r7, lr}
 8017702:	b08e      	sub	sp, #56	; 0x38
 8017704:	af04      	add	r7, sp, #16
 8017706:	6078      	str	r0, [r7, #4]
 8017708:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801770a:	4b79      	ldr	r3, [pc, #484]	; (80178f0 <icmp_input+0x1f0>)
 801770c:	689b      	ldr	r3, [r3, #8]
 801770e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017712:	781b      	ldrb	r3, [r3, #0]
 8017714:	f003 030f 	and.w	r3, r3, #15
 8017718:	b2db      	uxtb	r3, r3
 801771a:	009b      	lsls	r3, r3, #2
 801771c:	b2db      	uxtb	r3, r3
 801771e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017720:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017722:	2b13      	cmp	r3, #19
 8017724:	f240 80cd 	bls.w	80178c2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	895b      	ldrh	r3, [r3, #10]
 801772c:	2b03      	cmp	r3, #3
 801772e:	f240 80ca 	bls.w	80178c6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	685b      	ldr	r3, [r3, #4]
 8017736:	781b      	ldrb	r3, [r3, #0]
 8017738:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801773c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017740:	2b00      	cmp	r3, #0
 8017742:	f000 80b7 	beq.w	80178b4 <icmp_input+0x1b4>
 8017746:	2b08      	cmp	r3, #8
 8017748:	f040 80b7 	bne.w	80178ba <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801774c:	4b69      	ldr	r3, [pc, #420]	; (80178f4 <icmp_input+0x1f4>)
 801774e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017750:	4b67      	ldr	r3, [pc, #412]	; (80178f0 <icmp_input+0x1f0>)
 8017752:	695b      	ldr	r3, [r3, #20]
 8017754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017758:	2be0      	cmp	r3, #224	; 0xe0
 801775a:	f000 80bb 	beq.w	80178d4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801775e:	4b64      	ldr	r3, [pc, #400]	; (80178f0 <icmp_input+0x1f0>)
 8017760:	695b      	ldr	r3, [r3, #20]
 8017762:	4a63      	ldr	r2, [pc, #396]	; (80178f0 <icmp_input+0x1f0>)
 8017764:	6812      	ldr	r2, [r2, #0]
 8017766:	4611      	mov	r1, r2
 8017768:	4618      	mov	r0, r3
 801776a:	f000 fc0b 	bl	8017f84 <ip4_addr_isbroadcast_u32>
 801776e:	4603      	mov	r3, r0
 8017770:	2b00      	cmp	r3, #0
 8017772:	f040 80b1 	bne.w	80178d8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	891b      	ldrh	r3, [r3, #8]
 801777a:	2b07      	cmp	r3, #7
 801777c:	f240 80a5 	bls.w	80178ca <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017780:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017782:	330e      	adds	r3, #14
 8017784:	4619      	mov	r1, r3
 8017786:	6878      	ldr	r0, [r7, #4]
 8017788:	f7f6 fe38 	bl	800e3fc <pbuf_add_header>
 801778c:	4603      	mov	r3, r0
 801778e:	2b00      	cmp	r3, #0
 8017790:	d04b      	beq.n	801782a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	891a      	ldrh	r2, [r3, #8]
 8017796:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017798:	4413      	add	r3, r2
 801779a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	891b      	ldrh	r3, [r3, #8]
 80177a0:	8b7a      	ldrh	r2, [r7, #26]
 80177a2:	429a      	cmp	r2, r3
 80177a4:	f0c0 809a 	bcc.w	80178dc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80177a8:	8b7b      	ldrh	r3, [r7, #26]
 80177aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80177ae:	4619      	mov	r1, r3
 80177b0:	200e      	movs	r0, #14
 80177b2:	f7f6 fbd5 	bl	800df60 <pbuf_alloc>
 80177b6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80177b8:	697b      	ldr	r3, [r7, #20]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	f000 8090 	beq.w	80178e0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80177c0:	697b      	ldr	r3, [r7, #20]
 80177c2:	895b      	ldrh	r3, [r3, #10]
 80177c4:	461a      	mov	r2, r3
 80177c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80177c8:	3308      	adds	r3, #8
 80177ca:	429a      	cmp	r2, r3
 80177cc:	d203      	bcs.n	80177d6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80177ce:	6978      	ldr	r0, [r7, #20]
 80177d0:	f7f6 feaa 	bl	800e528 <pbuf_free>
          goto icmperr;
 80177d4:	e085      	b.n	80178e2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80177d6:	697b      	ldr	r3, [r7, #20]
 80177d8:	685b      	ldr	r3, [r3, #4]
 80177da:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80177dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80177de:	4618      	mov	r0, r3
 80177e0:	f001 fd5a 	bl	8019298 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80177e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80177e6:	4619      	mov	r1, r3
 80177e8:	6978      	ldr	r0, [r7, #20]
 80177ea:	f7f6 fe17 	bl	800e41c <pbuf_remove_header>
 80177ee:	4603      	mov	r3, r0
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d009      	beq.n	8017808 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80177f4:	4b40      	ldr	r3, [pc, #256]	; (80178f8 <icmp_input+0x1f8>)
 80177f6:	22b6      	movs	r2, #182	; 0xb6
 80177f8:	4940      	ldr	r1, [pc, #256]	; (80178fc <icmp_input+0x1fc>)
 80177fa:	4841      	ldr	r0, [pc, #260]	; (8017900 <icmp_input+0x200>)
 80177fc:	f001 fe26 	bl	801944c <iprintf>
          pbuf_free(r);
 8017800:	6978      	ldr	r0, [r7, #20]
 8017802:	f7f6 fe91 	bl	800e528 <pbuf_free>
          goto icmperr;
 8017806:	e06c      	b.n	80178e2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017808:	6879      	ldr	r1, [r7, #4]
 801780a:	6978      	ldr	r0, [r7, #20]
 801780c:	f7f6 ffb4 	bl	800e778 <pbuf_copy>
 8017810:	4603      	mov	r3, r0
 8017812:	2b00      	cmp	r3, #0
 8017814:	d003      	beq.n	801781e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8017816:	6978      	ldr	r0, [r7, #20]
 8017818:	f7f6 fe86 	bl	800e528 <pbuf_free>
          goto icmperr;
 801781c:	e061      	b.n	80178e2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801781e:	6878      	ldr	r0, [r7, #4]
 8017820:	f7f6 fe82 	bl	800e528 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017824:	697b      	ldr	r3, [r7, #20]
 8017826:	607b      	str	r3, [r7, #4]
 8017828:	e00f      	b.n	801784a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801782a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801782c:	330e      	adds	r3, #14
 801782e:	4619      	mov	r1, r3
 8017830:	6878      	ldr	r0, [r7, #4]
 8017832:	f7f6 fdf3 	bl	800e41c <pbuf_remove_header>
 8017836:	4603      	mov	r3, r0
 8017838:	2b00      	cmp	r3, #0
 801783a:	d006      	beq.n	801784a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801783c:	4b2e      	ldr	r3, [pc, #184]	; (80178f8 <icmp_input+0x1f8>)
 801783e:	22c7      	movs	r2, #199	; 0xc7
 8017840:	4930      	ldr	r1, [pc, #192]	; (8017904 <icmp_input+0x204>)
 8017842:	482f      	ldr	r0, [pc, #188]	; (8017900 <icmp_input+0x200>)
 8017844:	f001 fe02 	bl	801944c <iprintf>
          goto icmperr;
 8017848:	e04b      	b.n	80178e2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	685b      	ldr	r3, [r3, #4]
 801784e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017850:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017852:	4619      	mov	r1, r3
 8017854:	6878      	ldr	r0, [r7, #4]
 8017856:	f7f6 fdd1 	bl	800e3fc <pbuf_add_header>
 801785a:	4603      	mov	r3, r0
 801785c:	2b00      	cmp	r3, #0
 801785e:	d12b      	bne.n	80178b8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	685b      	ldr	r3, [r3, #4]
 8017864:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017866:	69fb      	ldr	r3, [r7, #28]
 8017868:	681a      	ldr	r2, [r3, #0]
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801786e:	4b20      	ldr	r3, [pc, #128]	; (80178f0 <icmp_input+0x1f0>)
 8017870:	691a      	ldr	r2, [r3, #16]
 8017872:	68fb      	ldr	r3, [r7, #12]
 8017874:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017876:	693b      	ldr	r3, [r7, #16]
 8017878:	2200      	movs	r2, #0
 801787a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801787c:	693b      	ldr	r3, [r7, #16]
 801787e:	2200      	movs	r2, #0
 8017880:	709a      	strb	r2, [r3, #2]
 8017882:	2200      	movs	r2, #0
 8017884:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	22ff      	movs	r2, #255	; 0xff
 801788a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	2200      	movs	r2, #0
 8017890:	729a      	strb	r2, [r3, #10]
 8017892:	2200      	movs	r2, #0
 8017894:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017896:	683b      	ldr	r3, [r7, #0]
 8017898:	9302      	str	r3, [sp, #8]
 801789a:	2301      	movs	r3, #1
 801789c:	9301      	str	r3, [sp, #4]
 801789e:	2300      	movs	r3, #0
 80178a0:	9300      	str	r3, [sp, #0]
 80178a2:	23ff      	movs	r3, #255	; 0xff
 80178a4:	2200      	movs	r2, #0
 80178a6:	69f9      	ldr	r1, [r7, #28]
 80178a8:	6878      	ldr	r0, [r7, #4]
 80178aa:	f000 fa93 	bl	8017dd4 <ip4_output_if>
 80178ae:	4603      	mov	r3, r0
 80178b0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80178b2:	e001      	b.n	80178b8 <icmp_input+0x1b8>
      break;
 80178b4:	bf00      	nop
 80178b6:	e000      	b.n	80178ba <icmp_input+0x1ba>
      break;
 80178b8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80178ba:	6878      	ldr	r0, [r7, #4]
 80178bc:	f7f6 fe34 	bl	800e528 <pbuf_free>
  return;
 80178c0:	e013      	b.n	80178ea <icmp_input+0x1ea>
    goto lenerr;
 80178c2:	bf00      	nop
 80178c4:	e002      	b.n	80178cc <icmp_input+0x1cc>
    goto lenerr;
 80178c6:	bf00      	nop
 80178c8:	e000      	b.n	80178cc <icmp_input+0x1cc>
        goto lenerr;
 80178ca:	bf00      	nop
lenerr:
  pbuf_free(p);
 80178cc:	6878      	ldr	r0, [r7, #4]
 80178ce:	f7f6 fe2b 	bl	800e528 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80178d2:	e00a      	b.n	80178ea <icmp_input+0x1ea>
        goto icmperr;
 80178d4:	bf00      	nop
 80178d6:	e004      	b.n	80178e2 <icmp_input+0x1e2>
        goto icmperr;
 80178d8:	bf00      	nop
 80178da:	e002      	b.n	80178e2 <icmp_input+0x1e2>
          goto icmperr;
 80178dc:	bf00      	nop
 80178de:	e000      	b.n	80178e2 <icmp_input+0x1e2>
          goto icmperr;
 80178e0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80178e2:	6878      	ldr	r0, [r7, #4]
 80178e4:	f7f6 fe20 	bl	800e528 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80178e8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80178ea:	3728      	adds	r7, #40	; 0x28
 80178ec:	46bd      	mov	sp, r7
 80178ee:	bd80      	pop	{r7, pc}
 80178f0:	2000379c 	.word	0x2000379c
 80178f4:	200037b0 	.word	0x200037b0
 80178f8:	0801d858 	.word	0x0801d858
 80178fc:	0801d890 	.word	0x0801d890
 8017900:	0801d8c8 	.word	0x0801d8c8
 8017904:	0801d8f0 	.word	0x0801d8f0

08017908 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017908:	b580      	push	{r7, lr}
 801790a:	b082      	sub	sp, #8
 801790c:	af00      	add	r7, sp, #0
 801790e:	6078      	str	r0, [r7, #4]
 8017910:	460b      	mov	r3, r1
 8017912:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017914:	78fb      	ldrb	r3, [r7, #3]
 8017916:	461a      	mov	r2, r3
 8017918:	2103      	movs	r1, #3
 801791a:	6878      	ldr	r0, [r7, #4]
 801791c:	f000 f814 	bl	8017948 <icmp_send_response>
}
 8017920:	bf00      	nop
 8017922:	3708      	adds	r7, #8
 8017924:	46bd      	mov	sp, r7
 8017926:	bd80      	pop	{r7, pc}

08017928 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017928:	b580      	push	{r7, lr}
 801792a:	b082      	sub	sp, #8
 801792c:	af00      	add	r7, sp, #0
 801792e:	6078      	str	r0, [r7, #4]
 8017930:	460b      	mov	r3, r1
 8017932:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017934:	78fb      	ldrb	r3, [r7, #3]
 8017936:	461a      	mov	r2, r3
 8017938:	210b      	movs	r1, #11
 801793a:	6878      	ldr	r0, [r7, #4]
 801793c:	f000 f804 	bl	8017948 <icmp_send_response>
}
 8017940:	bf00      	nop
 8017942:	3708      	adds	r7, #8
 8017944:	46bd      	mov	sp, r7
 8017946:	bd80      	pop	{r7, pc}

08017948 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017948:	b580      	push	{r7, lr}
 801794a:	b08c      	sub	sp, #48	; 0x30
 801794c:	af04      	add	r7, sp, #16
 801794e:	6078      	str	r0, [r7, #4]
 8017950:	460b      	mov	r3, r1
 8017952:	70fb      	strb	r3, [r7, #3]
 8017954:	4613      	mov	r3, r2
 8017956:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017958:	f44f 7220 	mov.w	r2, #640	; 0x280
 801795c:	2124      	movs	r1, #36	; 0x24
 801795e:	2022      	movs	r0, #34	; 0x22
 8017960:	f7f6 fafe 	bl	800df60 <pbuf_alloc>
 8017964:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017966:	69fb      	ldr	r3, [r7, #28]
 8017968:	2b00      	cmp	r3, #0
 801796a:	d04c      	beq.n	8017a06 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801796c:	69fb      	ldr	r3, [r7, #28]
 801796e:	895b      	ldrh	r3, [r3, #10]
 8017970:	2b23      	cmp	r3, #35	; 0x23
 8017972:	d806      	bhi.n	8017982 <icmp_send_response+0x3a>
 8017974:	4b26      	ldr	r3, [pc, #152]	; (8017a10 <icmp_send_response+0xc8>)
 8017976:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801797a:	4926      	ldr	r1, [pc, #152]	; (8017a14 <icmp_send_response+0xcc>)
 801797c:	4826      	ldr	r0, [pc, #152]	; (8017a18 <icmp_send_response+0xd0>)
 801797e:	f001 fd65 	bl	801944c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	685b      	ldr	r3, [r3, #4]
 8017986:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017988:	69fb      	ldr	r3, [r7, #28]
 801798a:	685b      	ldr	r3, [r3, #4]
 801798c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801798e:	697b      	ldr	r3, [r7, #20]
 8017990:	78fa      	ldrb	r2, [r7, #3]
 8017992:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017994:	697b      	ldr	r3, [r7, #20]
 8017996:	78ba      	ldrb	r2, [r7, #2]
 8017998:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801799a:	697b      	ldr	r3, [r7, #20]
 801799c:	2200      	movs	r2, #0
 801799e:	711a      	strb	r2, [r3, #4]
 80179a0:	2200      	movs	r2, #0
 80179a2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80179a4:	697b      	ldr	r3, [r7, #20]
 80179a6:	2200      	movs	r2, #0
 80179a8:	719a      	strb	r2, [r3, #6]
 80179aa:	2200      	movs	r2, #0
 80179ac:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80179ae:	69fb      	ldr	r3, [r7, #28]
 80179b0:	685b      	ldr	r3, [r3, #4]
 80179b2:	f103 0008 	add.w	r0, r3, #8
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	685b      	ldr	r3, [r3, #4]
 80179ba:	221c      	movs	r2, #28
 80179bc:	4619      	mov	r1, r3
 80179be:	f001 fc6b 	bl	8019298 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80179c2:	69bb      	ldr	r3, [r7, #24]
 80179c4:	68db      	ldr	r3, [r3, #12]
 80179c6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80179c8:	f107 030c 	add.w	r3, r7, #12
 80179cc:	4618      	mov	r0, r3
 80179ce:	f000 f825 	bl	8017a1c <ip4_route>
 80179d2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80179d4:	693b      	ldr	r3, [r7, #16]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d011      	beq.n	80179fe <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80179da:	697b      	ldr	r3, [r7, #20]
 80179dc:	2200      	movs	r2, #0
 80179de:	709a      	strb	r2, [r3, #2]
 80179e0:	2200      	movs	r2, #0
 80179e2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80179e4:	f107 020c 	add.w	r2, r7, #12
 80179e8:	693b      	ldr	r3, [r7, #16]
 80179ea:	9302      	str	r3, [sp, #8]
 80179ec:	2301      	movs	r3, #1
 80179ee:	9301      	str	r3, [sp, #4]
 80179f0:	2300      	movs	r3, #0
 80179f2:	9300      	str	r3, [sp, #0]
 80179f4:	23ff      	movs	r3, #255	; 0xff
 80179f6:	2100      	movs	r1, #0
 80179f8:	69f8      	ldr	r0, [r7, #28]
 80179fa:	f000 f9eb 	bl	8017dd4 <ip4_output_if>
  }
  pbuf_free(q);
 80179fe:	69f8      	ldr	r0, [r7, #28]
 8017a00:	f7f6 fd92 	bl	800e528 <pbuf_free>
 8017a04:	e000      	b.n	8017a08 <icmp_send_response+0xc0>
    return;
 8017a06:	bf00      	nop
}
 8017a08:	3720      	adds	r7, #32
 8017a0a:	46bd      	mov	sp, r7
 8017a0c:	bd80      	pop	{r7, pc}
 8017a0e:	bf00      	nop
 8017a10:	0801d858 	.word	0x0801d858
 8017a14:	0801d924 	.word	0x0801d924
 8017a18:	0801d8c8 	.word	0x0801d8c8

08017a1c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017a1c:	b480      	push	{r7}
 8017a1e:	b085      	sub	sp, #20
 8017a20:	af00      	add	r7, sp, #0
 8017a22:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017a24:	4b33      	ldr	r3, [pc, #204]	; (8017af4 <ip4_route+0xd8>)
 8017a26:	681b      	ldr	r3, [r3, #0]
 8017a28:	60fb      	str	r3, [r7, #12]
 8017a2a:	e036      	b.n	8017a9a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017a32:	f003 0301 	and.w	r3, r3, #1
 8017a36:	b2db      	uxtb	r3, r3
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d02b      	beq.n	8017a94 <ip4_route+0x78>
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017a42:	089b      	lsrs	r3, r3, #2
 8017a44:	f003 0301 	and.w	r3, r3, #1
 8017a48:	b2db      	uxtb	r3, r3
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d022      	beq.n	8017a94 <ip4_route+0x78>
 8017a4e:	68fb      	ldr	r3, [r7, #12]
 8017a50:	3304      	adds	r3, #4
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d01d      	beq.n	8017a94 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	681a      	ldr	r2, [r3, #0]
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	3304      	adds	r3, #4
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	405a      	eors	r2, r3
 8017a64:	68fb      	ldr	r3, [r7, #12]
 8017a66:	3308      	adds	r3, #8
 8017a68:	681b      	ldr	r3, [r3, #0]
 8017a6a:	4013      	ands	r3, r2
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d101      	bne.n	8017a74 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	e038      	b.n	8017ae6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017a7a:	f003 0302 	and.w	r3, r3, #2
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d108      	bne.n	8017a94 <ip4_route+0x78>
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	681a      	ldr	r2, [r3, #0]
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	330c      	adds	r3, #12
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	429a      	cmp	r2, r3
 8017a8e:	d101      	bne.n	8017a94 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	e028      	b.n	8017ae6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	60fb      	str	r3, [r7, #12]
 8017a9a:	68fb      	ldr	r3, [r7, #12]
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	d1c5      	bne.n	8017a2c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017aa0:	4b15      	ldr	r3, [pc, #84]	; (8017af8 <ip4_route+0xdc>)
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d01a      	beq.n	8017ade <ip4_route+0xc2>
 8017aa8:	4b13      	ldr	r3, [pc, #76]	; (8017af8 <ip4_route+0xdc>)
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017ab0:	f003 0301 	and.w	r3, r3, #1
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d012      	beq.n	8017ade <ip4_route+0xc2>
 8017ab8:	4b0f      	ldr	r3, [pc, #60]	; (8017af8 <ip4_route+0xdc>)
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017ac0:	f003 0304 	and.w	r3, r3, #4
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d00a      	beq.n	8017ade <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017ac8:	4b0b      	ldr	r3, [pc, #44]	; (8017af8 <ip4_route+0xdc>)
 8017aca:	681b      	ldr	r3, [r3, #0]
 8017acc:	3304      	adds	r3, #4
 8017ace:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d004      	beq.n	8017ade <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	b2db      	uxtb	r3, r3
 8017ada:	2b7f      	cmp	r3, #127	; 0x7f
 8017adc:	d101      	bne.n	8017ae2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017ade:	2300      	movs	r3, #0
 8017ae0:	e001      	b.n	8017ae6 <ip4_route+0xca>
  }

  return netif_default;
 8017ae2:	4b05      	ldr	r3, [pc, #20]	; (8017af8 <ip4_route+0xdc>)
 8017ae4:	681b      	ldr	r3, [r3, #0]
}
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	3714      	adds	r7, #20
 8017aea:	46bd      	mov	sp, r7
 8017aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017af0:	4770      	bx	lr
 8017af2:	bf00      	nop
 8017af4:	20006cf0 	.word	0x20006cf0
 8017af8:	20006cf4 	.word	0x20006cf4

08017afc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017afc:	b580      	push	{r7, lr}
 8017afe:	b082      	sub	sp, #8
 8017b00:	af00      	add	r7, sp, #0
 8017b02:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017b0a:	f003 0301 	and.w	r3, r3, #1
 8017b0e:	b2db      	uxtb	r3, r3
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d016      	beq.n	8017b42 <ip4_input_accept+0x46>
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	3304      	adds	r3, #4
 8017b18:	681b      	ldr	r3, [r3, #0]
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d011      	beq.n	8017b42 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017b1e:	4b0b      	ldr	r3, [pc, #44]	; (8017b4c <ip4_input_accept+0x50>)
 8017b20:	695a      	ldr	r2, [r3, #20]
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	3304      	adds	r3, #4
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	429a      	cmp	r2, r3
 8017b2a:	d008      	beq.n	8017b3e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017b2c:	4b07      	ldr	r3, [pc, #28]	; (8017b4c <ip4_input_accept+0x50>)
 8017b2e:	695b      	ldr	r3, [r3, #20]
 8017b30:	6879      	ldr	r1, [r7, #4]
 8017b32:	4618      	mov	r0, r3
 8017b34:	f000 fa26 	bl	8017f84 <ip4_addr_isbroadcast_u32>
 8017b38:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d001      	beq.n	8017b42 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017b3e:	2301      	movs	r3, #1
 8017b40:	e000      	b.n	8017b44 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017b42:	2300      	movs	r3, #0
}
 8017b44:	4618      	mov	r0, r3
 8017b46:	3708      	adds	r7, #8
 8017b48:	46bd      	mov	sp, r7
 8017b4a:	bd80      	pop	{r7, pc}
 8017b4c:	2000379c 	.word	0x2000379c

08017b50 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017b50:	b580      	push	{r7, lr}
 8017b52:	b088      	sub	sp, #32
 8017b54:	af00      	add	r7, sp, #0
 8017b56:	6078      	str	r0, [r7, #4]
 8017b58:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8017b5a:	2301      	movs	r3, #1
 8017b5c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	685b      	ldr	r3, [r3, #4]
 8017b62:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8017b64:	69fb      	ldr	r3, [r7, #28]
 8017b66:	781b      	ldrb	r3, [r3, #0]
 8017b68:	091b      	lsrs	r3, r3, #4
 8017b6a:	b2db      	uxtb	r3, r3
 8017b6c:	2b04      	cmp	r3, #4
 8017b6e:	d004      	beq.n	8017b7a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017b70:	6878      	ldr	r0, [r7, #4]
 8017b72:	f7f6 fcd9 	bl	800e528 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017b76:	2300      	movs	r3, #0
 8017b78:	e123      	b.n	8017dc2 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017b7a:	69fb      	ldr	r3, [r7, #28]
 8017b7c:	781b      	ldrb	r3, [r3, #0]
 8017b7e:	f003 030f 	and.w	r3, r3, #15
 8017b82:	b2db      	uxtb	r3, r3
 8017b84:	009b      	lsls	r3, r3, #2
 8017b86:	b2db      	uxtb	r3, r3
 8017b88:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017b8a:	69fb      	ldr	r3, [r7, #28]
 8017b8c:	885b      	ldrh	r3, [r3, #2]
 8017b8e:	b29b      	uxth	r3, r3
 8017b90:	4618      	mov	r0, r3
 8017b92:	f7f5 fa0d 	bl	800cfb0 <lwip_htons>
 8017b96:	4603      	mov	r3, r0
 8017b98:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	891b      	ldrh	r3, [r3, #8]
 8017b9e:	8a3a      	ldrh	r2, [r7, #16]
 8017ba0:	429a      	cmp	r2, r3
 8017ba2:	d204      	bcs.n	8017bae <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8017ba4:	8a3b      	ldrh	r3, [r7, #16]
 8017ba6:	4619      	mov	r1, r3
 8017ba8:	6878      	ldr	r0, [r7, #4]
 8017baa:	f7f6 fb37 	bl	800e21c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	895b      	ldrh	r3, [r3, #10]
 8017bb2:	8a7a      	ldrh	r2, [r7, #18]
 8017bb4:	429a      	cmp	r2, r3
 8017bb6:	d807      	bhi.n	8017bc8 <ip4_input+0x78>
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	891b      	ldrh	r3, [r3, #8]
 8017bbc:	8a3a      	ldrh	r2, [r7, #16]
 8017bbe:	429a      	cmp	r2, r3
 8017bc0:	d802      	bhi.n	8017bc8 <ip4_input+0x78>
 8017bc2:	8a7b      	ldrh	r3, [r7, #18]
 8017bc4:	2b13      	cmp	r3, #19
 8017bc6:	d804      	bhi.n	8017bd2 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017bc8:	6878      	ldr	r0, [r7, #4]
 8017bca:	f7f6 fcad 	bl	800e528 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017bce:	2300      	movs	r3, #0
 8017bd0:	e0f7      	b.n	8017dc2 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017bd2:	69fb      	ldr	r3, [r7, #28]
 8017bd4:	691b      	ldr	r3, [r3, #16]
 8017bd6:	4a7d      	ldr	r2, [pc, #500]	; (8017dcc <ip4_input+0x27c>)
 8017bd8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017bda:	69fb      	ldr	r3, [r7, #28]
 8017bdc:	68db      	ldr	r3, [r3, #12]
 8017bde:	4a7b      	ldr	r2, [pc, #492]	; (8017dcc <ip4_input+0x27c>)
 8017be0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017be2:	4b7a      	ldr	r3, [pc, #488]	; (8017dcc <ip4_input+0x27c>)
 8017be4:	695b      	ldr	r3, [r3, #20]
 8017be6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017bea:	2be0      	cmp	r3, #224	; 0xe0
 8017bec:	d112      	bne.n	8017c14 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017bee:	683b      	ldr	r3, [r7, #0]
 8017bf0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017bf4:	f003 0301 	and.w	r3, r3, #1
 8017bf8:	b2db      	uxtb	r3, r3
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d007      	beq.n	8017c0e <ip4_input+0xbe>
 8017bfe:	683b      	ldr	r3, [r7, #0]
 8017c00:	3304      	adds	r3, #4
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d002      	beq.n	8017c0e <ip4_input+0xbe>
      netif = inp;
 8017c08:	683b      	ldr	r3, [r7, #0]
 8017c0a:	61bb      	str	r3, [r7, #24]
 8017c0c:	e02a      	b.n	8017c64 <ip4_input+0x114>
    } else {
      netif = NULL;
 8017c0e:	2300      	movs	r3, #0
 8017c10:	61bb      	str	r3, [r7, #24]
 8017c12:	e027      	b.n	8017c64 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017c14:	6838      	ldr	r0, [r7, #0]
 8017c16:	f7ff ff71 	bl	8017afc <ip4_input_accept>
 8017c1a:	4603      	mov	r3, r0
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d002      	beq.n	8017c26 <ip4_input+0xd6>
      netif = inp;
 8017c20:	683b      	ldr	r3, [r7, #0]
 8017c22:	61bb      	str	r3, [r7, #24]
 8017c24:	e01e      	b.n	8017c64 <ip4_input+0x114>
    } else {
      netif = NULL;
 8017c26:	2300      	movs	r3, #0
 8017c28:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017c2a:	4b68      	ldr	r3, [pc, #416]	; (8017dcc <ip4_input+0x27c>)
 8017c2c:	695b      	ldr	r3, [r3, #20]
 8017c2e:	b2db      	uxtb	r3, r3
 8017c30:	2b7f      	cmp	r3, #127	; 0x7f
 8017c32:	d017      	beq.n	8017c64 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017c34:	4b66      	ldr	r3, [pc, #408]	; (8017dd0 <ip4_input+0x280>)
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	61bb      	str	r3, [r7, #24]
 8017c3a:	e00e      	b.n	8017c5a <ip4_input+0x10a>
          if (netif == inp) {
 8017c3c:	69ba      	ldr	r2, [r7, #24]
 8017c3e:	683b      	ldr	r3, [r7, #0]
 8017c40:	429a      	cmp	r2, r3
 8017c42:	d006      	beq.n	8017c52 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017c44:	69b8      	ldr	r0, [r7, #24]
 8017c46:	f7ff ff59 	bl	8017afc <ip4_input_accept>
 8017c4a:	4603      	mov	r3, r0
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d108      	bne.n	8017c62 <ip4_input+0x112>
 8017c50:	e000      	b.n	8017c54 <ip4_input+0x104>
            continue;
 8017c52:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017c54:	69bb      	ldr	r3, [r7, #24]
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	61bb      	str	r3, [r7, #24]
 8017c5a:	69bb      	ldr	r3, [r7, #24]
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d1ed      	bne.n	8017c3c <ip4_input+0xec>
 8017c60:	e000      	b.n	8017c64 <ip4_input+0x114>
            break;
 8017c62:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8017c64:	69bb      	ldr	r3, [r7, #24]
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d111      	bne.n	8017c8e <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8017c6a:	69fb      	ldr	r3, [r7, #28]
 8017c6c:	7a5b      	ldrb	r3, [r3, #9]
 8017c6e:	2b11      	cmp	r3, #17
 8017c70:	d10d      	bne.n	8017c8e <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8017c72:	8a7b      	ldrh	r3, [r7, #18]
 8017c74:	69fa      	ldr	r2, [r7, #28]
 8017c76:	4413      	add	r3, r2
 8017c78:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8017c7a:	68fb      	ldr	r3, [r7, #12]
 8017c7c:	885b      	ldrh	r3, [r3, #2]
 8017c7e:	b29b      	uxth	r3, r3
 8017c80:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8017c84:	d103      	bne.n	8017c8e <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8017c86:	683b      	ldr	r3, [r7, #0]
 8017c88:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8017c8a:	2300      	movs	r3, #0
 8017c8c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8017c8e:	697b      	ldr	r3, [r7, #20]
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d017      	beq.n	8017cc4 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8017c94:	4b4d      	ldr	r3, [pc, #308]	; (8017dcc <ip4_input+0x27c>)
 8017c96:	691b      	ldr	r3, [r3, #16]
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d013      	beq.n	8017cc4 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017c9c:	4b4b      	ldr	r3, [pc, #300]	; (8017dcc <ip4_input+0x27c>)
 8017c9e:	691b      	ldr	r3, [r3, #16]
 8017ca0:	6839      	ldr	r1, [r7, #0]
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	f000 f96e 	bl	8017f84 <ip4_addr_isbroadcast_u32>
 8017ca8:	4603      	mov	r3, r0
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d105      	bne.n	8017cba <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017cae:	4b47      	ldr	r3, [pc, #284]	; (8017dcc <ip4_input+0x27c>)
 8017cb0:	691b      	ldr	r3, [r3, #16]
 8017cb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017cb6:	2be0      	cmp	r3, #224	; 0xe0
 8017cb8:	d104      	bne.n	8017cc4 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017cba:	6878      	ldr	r0, [r7, #4]
 8017cbc:	f7f6 fc34 	bl	800e528 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017cc0:	2300      	movs	r3, #0
 8017cc2:	e07e      	b.n	8017dc2 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017cc4:	69bb      	ldr	r3, [r7, #24]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d104      	bne.n	8017cd4 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017cca:	6878      	ldr	r0, [r7, #4]
 8017ccc:	f7f6 fc2c 	bl	800e528 <pbuf_free>
    return ERR_OK;
 8017cd0:	2300      	movs	r3, #0
 8017cd2:	e076      	b.n	8017dc2 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017cd4:	69fb      	ldr	r3, [r7, #28]
 8017cd6:	88db      	ldrh	r3, [r3, #6]
 8017cd8:	b29b      	uxth	r3, r3
 8017cda:	461a      	mov	r2, r3
 8017cdc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017ce0:	4013      	ands	r3, r2
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d00b      	beq.n	8017cfe <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017ce6:	6878      	ldr	r0, [r7, #4]
 8017ce8:	f000 fc92 	bl	8018610 <ip4_reass>
 8017cec:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d101      	bne.n	8017cf8 <ip4_input+0x1a8>
      return ERR_OK;
 8017cf4:	2300      	movs	r3, #0
 8017cf6:	e064      	b.n	8017dc2 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	685b      	ldr	r3, [r3, #4]
 8017cfc:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017cfe:	4a33      	ldr	r2, [pc, #204]	; (8017dcc <ip4_input+0x27c>)
 8017d00:	69bb      	ldr	r3, [r7, #24]
 8017d02:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017d04:	4a31      	ldr	r2, [pc, #196]	; (8017dcc <ip4_input+0x27c>)
 8017d06:	683b      	ldr	r3, [r7, #0]
 8017d08:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017d0a:	4a30      	ldr	r2, [pc, #192]	; (8017dcc <ip4_input+0x27c>)
 8017d0c:	69fb      	ldr	r3, [r7, #28]
 8017d0e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017d10:	69fb      	ldr	r3, [r7, #28]
 8017d12:	781b      	ldrb	r3, [r3, #0]
 8017d14:	f003 030f 	and.w	r3, r3, #15
 8017d18:	b2db      	uxtb	r3, r3
 8017d1a:	009b      	lsls	r3, r3, #2
 8017d1c:	b2db      	uxtb	r3, r3
 8017d1e:	b29a      	uxth	r2, r3
 8017d20:	4b2a      	ldr	r3, [pc, #168]	; (8017dcc <ip4_input+0x27c>)
 8017d22:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017d24:	8a7b      	ldrh	r3, [r7, #18]
 8017d26:	4619      	mov	r1, r3
 8017d28:	6878      	ldr	r0, [r7, #4]
 8017d2a:	f7f6 fb77 	bl	800e41c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017d2e:	69fb      	ldr	r3, [r7, #28]
 8017d30:	7a5b      	ldrb	r3, [r3, #9]
 8017d32:	2b11      	cmp	r3, #17
 8017d34:	d006      	beq.n	8017d44 <ip4_input+0x1f4>
 8017d36:	2b11      	cmp	r3, #17
 8017d38:	dc13      	bgt.n	8017d62 <ip4_input+0x212>
 8017d3a:	2b01      	cmp	r3, #1
 8017d3c:	d00c      	beq.n	8017d58 <ip4_input+0x208>
 8017d3e:	2b06      	cmp	r3, #6
 8017d40:	d005      	beq.n	8017d4e <ip4_input+0x1fe>
 8017d42:	e00e      	b.n	8017d62 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017d44:	6839      	ldr	r1, [r7, #0]
 8017d46:	6878      	ldr	r0, [r7, #4]
 8017d48:	f7fc fa6e 	bl	8014228 <udp_input>
        break;
 8017d4c:	e026      	b.n	8017d9c <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017d4e:	6839      	ldr	r1, [r7, #0]
 8017d50:	6878      	ldr	r0, [r7, #4]
 8017d52:	f7f8 fab3 	bl	80102bc <tcp_input>
        break;
 8017d56:	e021      	b.n	8017d9c <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017d58:	6839      	ldr	r1, [r7, #0]
 8017d5a:	6878      	ldr	r0, [r7, #4]
 8017d5c:	f7ff fcd0 	bl	8017700 <icmp_input>
        break;
 8017d60:	e01c      	b.n	8017d9c <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017d62:	4b1a      	ldr	r3, [pc, #104]	; (8017dcc <ip4_input+0x27c>)
 8017d64:	695b      	ldr	r3, [r3, #20]
 8017d66:	69b9      	ldr	r1, [r7, #24]
 8017d68:	4618      	mov	r0, r3
 8017d6a:	f000 f90b 	bl	8017f84 <ip4_addr_isbroadcast_u32>
 8017d6e:	4603      	mov	r3, r0
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d10f      	bne.n	8017d94 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017d74:	4b15      	ldr	r3, [pc, #84]	; (8017dcc <ip4_input+0x27c>)
 8017d76:	695b      	ldr	r3, [r3, #20]
 8017d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017d7c:	2be0      	cmp	r3, #224	; 0xe0
 8017d7e:	d009      	beq.n	8017d94 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017d80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017d84:	4619      	mov	r1, r3
 8017d86:	6878      	ldr	r0, [r7, #4]
 8017d88:	f7f6 fbbb 	bl	800e502 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017d8c:	2102      	movs	r1, #2
 8017d8e:	6878      	ldr	r0, [r7, #4]
 8017d90:	f7ff fdba 	bl	8017908 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017d94:	6878      	ldr	r0, [r7, #4]
 8017d96:	f7f6 fbc7 	bl	800e528 <pbuf_free>
        break;
 8017d9a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017d9c:	4b0b      	ldr	r3, [pc, #44]	; (8017dcc <ip4_input+0x27c>)
 8017d9e:	2200      	movs	r2, #0
 8017da0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017da2:	4b0a      	ldr	r3, [pc, #40]	; (8017dcc <ip4_input+0x27c>)
 8017da4:	2200      	movs	r2, #0
 8017da6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017da8:	4b08      	ldr	r3, [pc, #32]	; (8017dcc <ip4_input+0x27c>)
 8017daa:	2200      	movs	r2, #0
 8017dac:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017dae:	4b07      	ldr	r3, [pc, #28]	; (8017dcc <ip4_input+0x27c>)
 8017db0:	2200      	movs	r2, #0
 8017db2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017db4:	4b05      	ldr	r3, [pc, #20]	; (8017dcc <ip4_input+0x27c>)
 8017db6:	2200      	movs	r2, #0
 8017db8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017dba:	4b04      	ldr	r3, [pc, #16]	; (8017dcc <ip4_input+0x27c>)
 8017dbc:	2200      	movs	r2, #0
 8017dbe:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017dc0:	2300      	movs	r3, #0
}
 8017dc2:	4618      	mov	r0, r3
 8017dc4:	3720      	adds	r7, #32
 8017dc6:	46bd      	mov	sp, r7
 8017dc8:	bd80      	pop	{r7, pc}
 8017dca:	bf00      	nop
 8017dcc:	2000379c 	.word	0x2000379c
 8017dd0:	20006cf0 	.word	0x20006cf0

08017dd4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017dd4:	b580      	push	{r7, lr}
 8017dd6:	b08a      	sub	sp, #40	; 0x28
 8017dd8:	af04      	add	r7, sp, #16
 8017dda:	60f8      	str	r0, [r7, #12]
 8017ddc:	60b9      	str	r1, [r7, #8]
 8017dde:	607a      	str	r2, [r7, #4]
 8017de0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017de2:	68bb      	ldr	r3, [r7, #8]
 8017de4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d009      	beq.n	8017e00 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017dec:	68bb      	ldr	r3, [r7, #8]
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d003      	beq.n	8017dfa <ip4_output_if+0x26>
 8017df2:	68bb      	ldr	r3, [r7, #8]
 8017df4:	681b      	ldr	r3, [r3, #0]
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d102      	bne.n	8017e00 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dfc:	3304      	adds	r3, #4
 8017dfe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017e00:	78fa      	ldrb	r2, [r7, #3]
 8017e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e04:	9302      	str	r3, [sp, #8]
 8017e06:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017e0a:	9301      	str	r3, [sp, #4]
 8017e0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017e10:	9300      	str	r3, [sp, #0]
 8017e12:	4613      	mov	r3, r2
 8017e14:	687a      	ldr	r2, [r7, #4]
 8017e16:	6979      	ldr	r1, [r7, #20]
 8017e18:	68f8      	ldr	r0, [r7, #12]
 8017e1a:	f000 f805 	bl	8017e28 <ip4_output_if_src>
 8017e1e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017e20:	4618      	mov	r0, r3
 8017e22:	3718      	adds	r7, #24
 8017e24:	46bd      	mov	sp, r7
 8017e26:	bd80      	pop	{r7, pc}

08017e28 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017e28:	b580      	push	{r7, lr}
 8017e2a:	b088      	sub	sp, #32
 8017e2c:	af00      	add	r7, sp, #0
 8017e2e:	60f8      	str	r0, [r7, #12]
 8017e30:	60b9      	str	r1, [r7, #8]
 8017e32:	607a      	str	r2, [r7, #4]
 8017e34:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	7b9b      	ldrb	r3, [r3, #14]
 8017e3a:	2b01      	cmp	r3, #1
 8017e3c:	d006      	beq.n	8017e4c <ip4_output_if_src+0x24>
 8017e3e:	4b4b      	ldr	r3, [pc, #300]	; (8017f6c <ip4_output_if_src+0x144>)
 8017e40:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017e44:	494a      	ldr	r1, [pc, #296]	; (8017f70 <ip4_output_if_src+0x148>)
 8017e46:	484b      	ldr	r0, [pc, #300]	; (8017f74 <ip4_output_if_src+0x14c>)
 8017e48:	f001 fb00 	bl	801944c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d060      	beq.n	8017f14 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017e52:	2314      	movs	r3, #20
 8017e54:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017e56:	2114      	movs	r1, #20
 8017e58:	68f8      	ldr	r0, [r7, #12]
 8017e5a:	f7f6 facf 	bl	800e3fc <pbuf_add_header>
 8017e5e:	4603      	mov	r3, r0
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d002      	beq.n	8017e6a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017e64:	f06f 0301 	mvn.w	r3, #1
 8017e68:	e07c      	b.n	8017f64 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017e6a:	68fb      	ldr	r3, [r7, #12]
 8017e6c:	685b      	ldr	r3, [r3, #4]
 8017e6e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	895b      	ldrh	r3, [r3, #10]
 8017e74:	2b13      	cmp	r3, #19
 8017e76:	d806      	bhi.n	8017e86 <ip4_output_if_src+0x5e>
 8017e78:	4b3c      	ldr	r3, [pc, #240]	; (8017f6c <ip4_output_if_src+0x144>)
 8017e7a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8017e7e:	493e      	ldr	r1, [pc, #248]	; (8017f78 <ip4_output_if_src+0x150>)
 8017e80:	483c      	ldr	r0, [pc, #240]	; (8017f74 <ip4_output_if_src+0x14c>)
 8017e82:	f001 fae3 	bl	801944c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017e86:	69fb      	ldr	r3, [r7, #28]
 8017e88:	78fa      	ldrb	r2, [r7, #3]
 8017e8a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017e8c:	69fb      	ldr	r3, [r7, #28]
 8017e8e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017e92:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	681a      	ldr	r2, [r3, #0]
 8017e98:	69fb      	ldr	r3, [r7, #28]
 8017e9a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017e9c:	8b7b      	ldrh	r3, [r7, #26]
 8017e9e:	089b      	lsrs	r3, r3, #2
 8017ea0:	b29b      	uxth	r3, r3
 8017ea2:	b2db      	uxtb	r3, r3
 8017ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ea8:	b2da      	uxtb	r2, r3
 8017eaa:	69fb      	ldr	r3, [r7, #28]
 8017eac:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017eae:	69fb      	ldr	r3, [r7, #28]
 8017eb0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017eb4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	891b      	ldrh	r3, [r3, #8]
 8017eba:	4618      	mov	r0, r3
 8017ebc:	f7f5 f878 	bl	800cfb0 <lwip_htons>
 8017ec0:	4603      	mov	r3, r0
 8017ec2:	461a      	mov	r2, r3
 8017ec4:	69fb      	ldr	r3, [r7, #28]
 8017ec6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017ec8:	69fb      	ldr	r3, [r7, #28]
 8017eca:	2200      	movs	r2, #0
 8017ecc:	719a      	strb	r2, [r3, #6]
 8017ece:	2200      	movs	r2, #0
 8017ed0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017ed2:	4b2a      	ldr	r3, [pc, #168]	; (8017f7c <ip4_output_if_src+0x154>)
 8017ed4:	881b      	ldrh	r3, [r3, #0]
 8017ed6:	4618      	mov	r0, r3
 8017ed8:	f7f5 f86a 	bl	800cfb0 <lwip_htons>
 8017edc:	4603      	mov	r3, r0
 8017ede:	461a      	mov	r2, r3
 8017ee0:	69fb      	ldr	r3, [r7, #28]
 8017ee2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017ee4:	4b25      	ldr	r3, [pc, #148]	; (8017f7c <ip4_output_if_src+0x154>)
 8017ee6:	881b      	ldrh	r3, [r3, #0]
 8017ee8:	3301      	adds	r3, #1
 8017eea:	b29a      	uxth	r2, r3
 8017eec:	4b23      	ldr	r3, [pc, #140]	; (8017f7c <ip4_output_if_src+0x154>)
 8017eee:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017ef0:	68bb      	ldr	r3, [r7, #8]
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d104      	bne.n	8017f00 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017ef6:	4b22      	ldr	r3, [pc, #136]	; (8017f80 <ip4_output_if_src+0x158>)
 8017ef8:	681a      	ldr	r2, [r3, #0]
 8017efa:	69fb      	ldr	r3, [r7, #28]
 8017efc:	60da      	str	r2, [r3, #12]
 8017efe:	e003      	b.n	8017f08 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017f00:	68bb      	ldr	r3, [r7, #8]
 8017f02:	681a      	ldr	r2, [r3, #0]
 8017f04:	69fb      	ldr	r3, [r7, #28]
 8017f06:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017f08:	69fb      	ldr	r3, [r7, #28]
 8017f0a:	2200      	movs	r2, #0
 8017f0c:	729a      	strb	r2, [r3, #10]
 8017f0e:	2200      	movs	r2, #0
 8017f10:	72da      	strb	r2, [r3, #11]
 8017f12:	e00f      	b.n	8017f34 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017f14:	68fb      	ldr	r3, [r7, #12]
 8017f16:	895b      	ldrh	r3, [r3, #10]
 8017f18:	2b13      	cmp	r3, #19
 8017f1a:	d802      	bhi.n	8017f22 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017f1c:	f06f 0301 	mvn.w	r3, #1
 8017f20:	e020      	b.n	8017f64 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017f22:	68fb      	ldr	r3, [r7, #12]
 8017f24:	685b      	ldr	r3, [r3, #4]
 8017f26:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017f28:	69fb      	ldr	r3, [r7, #28]
 8017f2a:	691b      	ldr	r3, [r3, #16]
 8017f2c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017f2e:	f107 0314 	add.w	r3, r7, #20
 8017f32:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d00c      	beq.n	8017f56 <ip4_output_if_src+0x12e>
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	891a      	ldrh	r2, [r3, #8]
 8017f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017f44:	429a      	cmp	r2, r3
 8017f46:	d906      	bls.n	8017f56 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017f48:	687a      	ldr	r2, [r7, #4]
 8017f4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017f4c:	68f8      	ldr	r0, [r7, #12]
 8017f4e:	f000 fd4d 	bl	80189ec <ip4_frag>
 8017f52:	4603      	mov	r3, r0
 8017f54:	e006      	b.n	8017f64 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f58:	695b      	ldr	r3, [r3, #20]
 8017f5a:	687a      	ldr	r2, [r7, #4]
 8017f5c:	68f9      	ldr	r1, [r7, #12]
 8017f5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017f60:	4798      	blx	r3
 8017f62:	4603      	mov	r3, r0
}
 8017f64:	4618      	mov	r0, r3
 8017f66:	3720      	adds	r7, #32
 8017f68:	46bd      	mov	sp, r7
 8017f6a:	bd80      	pop	{r7, pc}
 8017f6c:	0801d950 	.word	0x0801d950
 8017f70:	0801d984 	.word	0x0801d984
 8017f74:	0801d990 	.word	0x0801d990
 8017f78:	0801d9b8 	.word	0x0801d9b8
 8017f7c:	2000066e 	.word	0x2000066e
 8017f80:	0801e0dc 	.word	0x0801e0dc

08017f84 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017f84:	b480      	push	{r7}
 8017f86:	b085      	sub	sp, #20
 8017f88:	af00      	add	r7, sp, #0
 8017f8a:	6078      	str	r0, [r7, #4]
 8017f8c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f98:	d002      	beq.n	8017fa0 <ip4_addr_isbroadcast_u32+0x1c>
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d101      	bne.n	8017fa4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017fa0:	2301      	movs	r3, #1
 8017fa2:	e02a      	b.n	8017ffa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017fa4:	683b      	ldr	r3, [r7, #0]
 8017fa6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017faa:	f003 0302 	and.w	r3, r3, #2
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d101      	bne.n	8017fb6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017fb2:	2300      	movs	r3, #0
 8017fb4:	e021      	b.n	8017ffa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017fb6:	683b      	ldr	r3, [r7, #0]
 8017fb8:	3304      	adds	r3, #4
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	687a      	ldr	r2, [r7, #4]
 8017fbe:	429a      	cmp	r2, r3
 8017fc0:	d101      	bne.n	8017fc6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017fc2:	2300      	movs	r3, #0
 8017fc4:	e019      	b.n	8017ffa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017fc6:	68fa      	ldr	r2, [r7, #12]
 8017fc8:	683b      	ldr	r3, [r7, #0]
 8017fca:	3304      	adds	r3, #4
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	405a      	eors	r2, r3
 8017fd0:	683b      	ldr	r3, [r7, #0]
 8017fd2:	3308      	adds	r3, #8
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	4013      	ands	r3, r2
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d10d      	bne.n	8017ff8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017fdc:	683b      	ldr	r3, [r7, #0]
 8017fde:	3308      	adds	r3, #8
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	43da      	mvns	r2, r3
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017fe8:	683b      	ldr	r3, [r7, #0]
 8017fea:	3308      	adds	r3, #8
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017ff0:	429a      	cmp	r2, r3
 8017ff2:	d101      	bne.n	8017ff8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017ff4:	2301      	movs	r3, #1
 8017ff6:	e000      	b.n	8017ffa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017ff8:	2300      	movs	r3, #0
  }
}
 8017ffa:	4618      	mov	r0, r3
 8017ffc:	3714      	adds	r7, #20
 8017ffe:	46bd      	mov	sp, r7
 8018000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018004:	4770      	bx	lr
	...

08018008 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018008:	b580      	push	{r7, lr}
 801800a:	b084      	sub	sp, #16
 801800c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801800e:	2300      	movs	r3, #0
 8018010:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8018012:	4b12      	ldr	r3, [pc, #72]	; (801805c <ip_reass_tmr+0x54>)
 8018014:	681b      	ldr	r3, [r3, #0]
 8018016:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8018018:	e018      	b.n	801804c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801801a:	68fb      	ldr	r3, [r7, #12]
 801801c:	7fdb      	ldrb	r3, [r3, #31]
 801801e:	2b00      	cmp	r3, #0
 8018020:	d00b      	beq.n	801803a <ip_reass_tmr+0x32>
      r->timer--;
 8018022:	68fb      	ldr	r3, [r7, #12]
 8018024:	7fdb      	ldrb	r3, [r3, #31]
 8018026:	3b01      	subs	r3, #1
 8018028:	b2da      	uxtb	r2, r3
 801802a:	68fb      	ldr	r3, [r7, #12]
 801802c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8018032:	68fb      	ldr	r3, [r7, #12]
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	60fb      	str	r3, [r7, #12]
 8018038:	e008      	b.n	801804c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801803a:	68fb      	ldr	r3, [r7, #12]
 801803c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801803e:	68fb      	ldr	r3, [r7, #12]
 8018040:	681b      	ldr	r3, [r3, #0]
 8018042:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018044:	68b9      	ldr	r1, [r7, #8]
 8018046:	6878      	ldr	r0, [r7, #4]
 8018048:	f000 f80a 	bl	8018060 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801804c:	68fb      	ldr	r3, [r7, #12]
 801804e:	2b00      	cmp	r3, #0
 8018050:	d1e3      	bne.n	801801a <ip_reass_tmr+0x12>
    }
  }
}
 8018052:	bf00      	nop
 8018054:	bf00      	nop
 8018056:	3710      	adds	r7, #16
 8018058:	46bd      	mov	sp, r7
 801805a:	bd80      	pop	{r7, pc}
 801805c:	20000670 	.word	0x20000670

08018060 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018060:	b580      	push	{r7, lr}
 8018062:	b088      	sub	sp, #32
 8018064:	af00      	add	r7, sp, #0
 8018066:	6078      	str	r0, [r7, #4]
 8018068:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801806a:	2300      	movs	r3, #0
 801806c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801806e:	683a      	ldr	r2, [r7, #0]
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	429a      	cmp	r2, r3
 8018074:	d105      	bne.n	8018082 <ip_reass_free_complete_datagram+0x22>
 8018076:	4b45      	ldr	r3, [pc, #276]	; (801818c <ip_reass_free_complete_datagram+0x12c>)
 8018078:	22ab      	movs	r2, #171	; 0xab
 801807a:	4945      	ldr	r1, [pc, #276]	; (8018190 <ip_reass_free_complete_datagram+0x130>)
 801807c:	4845      	ldr	r0, [pc, #276]	; (8018194 <ip_reass_free_complete_datagram+0x134>)
 801807e:	f001 f9e5 	bl	801944c <iprintf>
  if (prev != NULL) {
 8018082:	683b      	ldr	r3, [r7, #0]
 8018084:	2b00      	cmp	r3, #0
 8018086:	d00a      	beq.n	801809e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018088:	683b      	ldr	r3, [r7, #0]
 801808a:	681b      	ldr	r3, [r3, #0]
 801808c:	687a      	ldr	r2, [r7, #4]
 801808e:	429a      	cmp	r2, r3
 8018090:	d005      	beq.n	801809e <ip_reass_free_complete_datagram+0x3e>
 8018092:	4b3e      	ldr	r3, [pc, #248]	; (801818c <ip_reass_free_complete_datagram+0x12c>)
 8018094:	22ad      	movs	r2, #173	; 0xad
 8018096:	4940      	ldr	r1, [pc, #256]	; (8018198 <ip_reass_free_complete_datagram+0x138>)
 8018098:	483e      	ldr	r0, [pc, #248]	; (8018194 <ip_reass_free_complete_datagram+0x134>)
 801809a:	f001 f9d7 	bl	801944c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	685b      	ldr	r3, [r3, #4]
 80180a2:	685b      	ldr	r3, [r3, #4]
 80180a4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80180a6:	697b      	ldr	r3, [r7, #20]
 80180a8:	889b      	ldrh	r3, [r3, #4]
 80180aa:	b29b      	uxth	r3, r3
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d12a      	bne.n	8018106 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	685b      	ldr	r3, [r3, #4]
 80180b4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80180b6:	697b      	ldr	r3, [r7, #20]
 80180b8:	681a      	ldr	r2, [r3, #0]
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80180be:	69bb      	ldr	r3, [r7, #24]
 80180c0:	6858      	ldr	r0, [r3, #4]
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	3308      	adds	r3, #8
 80180c6:	2214      	movs	r2, #20
 80180c8:	4619      	mov	r1, r3
 80180ca:	f001 f8e5 	bl	8019298 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80180ce:	2101      	movs	r1, #1
 80180d0:	69b8      	ldr	r0, [r7, #24]
 80180d2:	f7ff fc29 	bl	8017928 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80180d6:	69b8      	ldr	r0, [r7, #24]
 80180d8:	f7f6 faae 	bl	800e638 <pbuf_clen>
 80180dc:	4603      	mov	r3, r0
 80180de:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80180e0:	8bfa      	ldrh	r2, [r7, #30]
 80180e2:	8a7b      	ldrh	r3, [r7, #18]
 80180e4:	4413      	add	r3, r2
 80180e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80180ea:	db05      	blt.n	80180f8 <ip_reass_free_complete_datagram+0x98>
 80180ec:	4b27      	ldr	r3, [pc, #156]	; (801818c <ip_reass_free_complete_datagram+0x12c>)
 80180ee:	22bc      	movs	r2, #188	; 0xbc
 80180f0:	492a      	ldr	r1, [pc, #168]	; (801819c <ip_reass_free_complete_datagram+0x13c>)
 80180f2:	4828      	ldr	r0, [pc, #160]	; (8018194 <ip_reass_free_complete_datagram+0x134>)
 80180f4:	f001 f9aa 	bl	801944c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80180f8:	8bfa      	ldrh	r2, [r7, #30]
 80180fa:	8a7b      	ldrh	r3, [r7, #18]
 80180fc:	4413      	add	r3, r2
 80180fe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018100:	69b8      	ldr	r0, [r7, #24]
 8018102:	f7f6 fa11 	bl	800e528 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	685b      	ldr	r3, [r3, #4]
 801810a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801810c:	e01f      	b.n	801814e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801810e:	69bb      	ldr	r3, [r7, #24]
 8018110:	685b      	ldr	r3, [r3, #4]
 8018112:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018114:	69bb      	ldr	r3, [r7, #24]
 8018116:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8018118:	697b      	ldr	r3, [r7, #20]
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801811e:	68f8      	ldr	r0, [r7, #12]
 8018120:	f7f6 fa8a 	bl	800e638 <pbuf_clen>
 8018124:	4603      	mov	r3, r0
 8018126:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018128:	8bfa      	ldrh	r2, [r7, #30]
 801812a:	8a7b      	ldrh	r3, [r7, #18]
 801812c:	4413      	add	r3, r2
 801812e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018132:	db05      	blt.n	8018140 <ip_reass_free_complete_datagram+0xe0>
 8018134:	4b15      	ldr	r3, [pc, #84]	; (801818c <ip_reass_free_complete_datagram+0x12c>)
 8018136:	22cc      	movs	r2, #204	; 0xcc
 8018138:	4918      	ldr	r1, [pc, #96]	; (801819c <ip_reass_free_complete_datagram+0x13c>)
 801813a:	4816      	ldr	r0, [pc, #88]	; (8018194 <ip_reass_free_complete_datagram+0x134>)
 801813c:	f001 f986 	bl	801944c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018140:	8bfa      	ldrh	r2, [r7, #30]
 8018142:	8a7b      	ldrh	r3, [r7, #18]
 8018144:	4413      	add	r3, r2
 8018146:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018148:	68f8      	ldr	r0, [r7, #12]
 801814a:	f7f6 f9ed 	bl	800e528 <pbuf_free>
  while (p != NULL) {
 801814e:	69bb      	ldr	r3, [r7, #24]
 8018150:	2b00      	cmp	r3, #0
 8018152:	d1dc      	bne.n	801810e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018154:	6839      	ldr	r1, [r7, #0]
 8018156:	6878      	ldr	r0, [r7, #4]
 8018158:	f000 f8c2 	bl	80182e0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801815c:	4b10      	ldr	r3, [pc, #64]	; (80181a0 <ip_reass_free_complete_datagram+0x140>)
 801815e:	881b      	ldrh	r3, [r3, #0]
 8018160:	8bfa      	ldrh	r2, [r7, #30]
 8018162:	429a      	cmp	r2, r3
 8018164:	d905      	bls.n	8018172 <ip_reass_free_complete_datagram+0x112>
 8018166:	4b09      	ldr	r3, [pc, #36]	; (801818c <ip_reass_free_complete_datagram+0x12c>)
 8018168:	22d2      	movs	r2, #210	; 0xd2
 801816a:	490e      	ldr	r1, [pc, #56]	; (80181a4 <ip_reass_free_complete_datagram+0x144>)
 801816c:	4809      	ldr	r0, [pc, #36]	; (8018194 <ip_reass_free_complete_datagram+0x134>)
 801816e:	f001 f96d 	bl	801944c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8018172:	4b0b      	ldr	r3, [pc, #44]	; (80181a0 <ip_reass_free_complete_datagram+0x140>)
 8018174:	881a      	ldrh	r2, [r3, #0]
 8018176:	8bfb      	ldrh	r3, [r7, #30]
 8018178:	1ad3      	subs	r3, r2, r3
 801817a:	b29a      	uxth	r2, r3
 801817c:	4b08      	ldr	r3, [pc, #32]	; (80181a0 <ip_reass_free_complete_datagram+0x140>)
 801817e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018180:	8bfb      	ldrh	r3, [r7, #30]
}
 8018182:	4618      	mov	r0, r3
 8018184:	3720      	adds	r7, #32
 8018186:	46bd      	mov	sp, r7
 8018188:	bd80      	pop	{r7, pc}
 801818a:	bf00      	nop
 801818c:	0801d9e8 	.word	0x0801d9e8
 8018190:	0801da24 	.word	0x0801da24
 8018194:	0801da30 	.word	0x0801da30
 8018198:	0801da58 	.word	0x0801da58
 801819c:	0801da6c 	.word	0x0801da6c
 80181a0:	20000674 	.word	0x20000674
 80181a4:	0801da8c 	.word	0x0801da8c

080181a8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80181a8:	b580      	push	{r7, lr}
 80181aa:	b08a      	sub	sp, #40	; 0x28
 80181ac:	af00      	add	r7, sp, #0
 80181ae:	6078      	str	r0, [r7, #4]
 80181b0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80181b2:	2300      	movs	r3, #0
 80181b4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80181b6:	2300      	movs	r3, #0
 80181b8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80181ba:	2300      	movs	r3, #0
 80181bc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80181be:	2300      	movs	r3, #0
 80181c0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80181c2:	2300      	movs	r3, #0
 80181c4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80181c6:	4b28      	ldr	r3, [pc, #160]	; (8018268 <ip_reass_remove_oldest_datagram+0xc0>)
 80181c8:	681b      	ldr	r3, [r3, #0]
 80181ca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80181cc:	e030      	b.n	8018230 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80181ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181d0:	695a      	ldr	r2, [r3, #20]
 80181d2:	687b      	ldr	r3, [r7, #4]
 80181d4:	68db      	ldr	r3, [r3, #12]
 80181d6:	429a      	cmp	r2, r3
 80181d8:	d10c      	bne.n	80181f4 <ip_reass_remove_oldest_datagram+0x4c>
 80181da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181dc:	699a      	ldr	r2, [r3, #24]
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	691b      	ldr	r3, [r3, #16]
 80181e2:	429a      	cmp	r2, r3
 80181e4:	d106      	bne.n	80181f4 <ip_reass_remove_oldest_datagram+0x4c>
 80181e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181e8:	899a      	ldrh	r2, [r3, #12]
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	889b      	ldrh	r3, [r3, #4]
 80181ee:	b29b      	uxth	r3, r3
 80181f0:	429a      	cmp	r2, r3
 80181f2:	d014      	beq.n	801821e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80181f4:	693b      	ldr	r3, [r7, #16]
 80181f6:	3301      	adds	r3, #1
 80181f8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80181fa:	6a3b      	ldr	r3, [r7, #32]
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d104      	bne.n	801820a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8018200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018202:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018204:	69fb      	ldr	r3, [r7, #28]
 8018206:	61bb      	str	r3, [r7, #24]
 8018208:	e009      	b.n	801821e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801820c:	7fda      	ldrb	r2, [r3, #31]
 801820e:	6a3b      	ldr	r3, [r7, #32]
 8018210:	7fdb      	ldrb	r3, [r3, #31]
 8018212:	429a      	cmp	r2, r3
 8018214:	d803      	bhi.n	801821e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8018216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018218:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801821a:	69fb      	ldr	r3, [r7, #28]
 801821c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801821e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018220:	681b      	ldr	r3, [r3, #0]
 8018222:	2b00      	cmp	r3, #0
 8018224:	d001      	beq.n	801822a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8018226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018228:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018232:	2b00      	cmp	r3, #0
 8018234:	d1cb      	bne.n	80181ce <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8018236:	6a3b      	ldr	r3, [r7, #32]
 8018238:	2b00      	cmp	r3, #0
 801823a:	d008      	beq.n	801824e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801823c:	69b9      	ldr	r1, [r7, #24]
 801823e:	6a38      	ldr	r0, [r7, #32]
 8018240:	f7ff ff0e 	bl	8018060 <ip_reass_free_complete_datagram>
 8018244:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8018246:	697a      	ldr	r2, [r7, #20]
 8018248:	68fb      	ldr	r3, [r7, #12]
 801824a:	4413      	add	r3, r2
 801824c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801824e:	697a      	ldr	r2, [r7, #20]
 8018250:	683b      	ldr	r3, [r7, #0]
 8018252:	429a      	cmp	r2, r3
 8018254:	da02      	bge.n	801825c <ip_reass_remove_oldest_datagram+0xb4>
 8018256:	693b      	ldr	r3, [r7, #16]
 8018258:	2b01      	cmp	r3, #1
 801825a:	dcac      	bgt.n	80181b6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801825c:	697b      	ldr	r3, [r7, #20]
}
 801825e:	4618      	mov	r0, r3
 8018260:	3728      	adds	r7, #40	; 0x28
 8018262:	46bd      	mov	sp, r7
 8018264:	bd80      	pop	{r7, pc}
 8018266:	bf00      	nop
 8018268:	20000670 	.word	0x20000670

0801826c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801826c:	b580      	push	{r7, lr}
 801826e:	b084      	sub	sp, #16
 8018270:	af00      	add	r7, sp, #0
 8018272:	6078      	str	r0, [r7, #4]
 8018274:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018276:	2004      	movs	r0, #4
 8018278:	f7f5 faf0 	bl	800d85c <memp_malloc>
 801827c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801827e:	68fb      	ldr	r3, [r7, #12]
 8018280:	2b00      	cmp	r3, #0
 8018282:	d110      	bne.n	80182a6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018284:	6839      	ldr	r1, [r7, #0]
 8018286:	6878      	ldr	r0, [r7, #4]
 8018288:	f7ff ff8e 	bl	80181a8 <ip_reass_remove_oldest_datagram>
 801828c:	4602      	mov	r2, r0
 801828e:	683b      	ldr	r3, [r7, #0]
 8018290:	4293      	cmp	r3, r2
 8018292:	dc03      	bgt.n	801829c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018294:	2004      	movs	r0, #4
 8018296:	f7f5 fae1 	bl	800d85c <memp_malloc>
 801829a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801829c:	68fb      	ldr	r3, [r7, #12]
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d101      	bne.n	80182a6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80182a2:	2300      	movs	r3, #0
 80182a4:	e016      	b.n	80182d4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80182a6:	2220      	movs	r2, #32
 80182a8:	2100      	movs	r1, #0
 80182aa:	68f8      	ldr	r0, [r7, #12]
 80182ac:	f001 f81c 	bl	80192e8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80182b0:	68fb      	ldr	r3, [r7, #12]
 80182b2:	220f      	movs	r2, #15
 80182b4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80182b6:	4b09      	ldr	r3, [pc, #36]	; (80182dc <ip_reass_enqueue_new_datagram+0x70>)
 80182b8:	681a      	ldr	r2, [r3, #0]
 80182ba:	68fb      	ldr	r3, [r7, #12]
 80182bc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80182be:	4a07      	ldr	r2, [pc, #28]	; (80182dc <ip_reass_enqueue_new_datagram+0x70>)
 80182c0:	68fb      	ldr	r3, [r7, #12]
 80182c2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80182c4:	68fb      	ldr	r3, [r7, #12]
 80182c6:	3308      	adds	r3, #8
 80182c8:	2214      	movs	r2, #20
 80182ca:	6879      	ldr	r1, [r7, #4]
 80182cc:	4618      	mov	r0, r3
 80182ce:	f000 ffe3 	bl	8019298 <memcpy>
  return ipr;
 80182d2:	68fb      	ldr	r3, [r7, #12]
}
 80182d4:	4618      	mov	r0, r3
 80182d6:	3710      	adds	r7, #16
 80182d8:	46bd      	mov	sp, r7
 80182da:	bd80      	pop	{r7, pc}
 80182dc:	20000670 	.word	0x20000670

080182e0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80182e0:	b580      	push	{r7, lr}
 80182e2:	b082      	sub	sp, #8
 80182e4:	af00      	add	r7, sp, #0
 80182e6:	6078      	str	r0, [r7, #4]
 80182e8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80182ea:	4b10      	ldr	r3, [pc, #64]	; (801832c <ip_reass_dequeue_datagram+0x4c>)
 80182ec:	681b      	ldr	r3, [r3, #0]
 80182ee:	687a      	ldr	r2, [r7, #4]
 80182f0:	429a      	cmp	r2, r3
 80182f2:	d104      	bne.n	80182fe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	4a0c      	ldr	r2, [pc, #48]	; (801832c <ip_reass_dequeue_datagram+0x4c>)
 80182fa:	6013      	str	r3, [r2, #0]
 80182fc:	e00d      	b.n	801831a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80182fe:	683b      	ldr	r3, [r7, #0]
 8018300:	2b00      	cmp	r3, #0
 8018302:	d106      	bne.n	8018312 <ip_reass_dequeue_datagram+0x32>
 8018304:	4b0a      	ldr	r3, [pc, #40]	; (8018330 <ip_reass_dequeue_datagram+0x50>)
 8018306:	f240 1245 	movw	r2, #325	; 0x145
 801830a:	490a      	ldr	r1, [pc, #40]	; (8018334 <ip_reass_dequeue_datagram+0x54>)
 801830c:	480a      	ldr	r0, [pc, #40]	; (8018338 <ip_reass_dequeue_datagram+0x58>)
 801830e:	f001 f89d 	bl	801944c <iprintf>
    prev->next = ipr->next;
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	681a      	ldr	r2, [r3, #0]
 8018316:	683b      	ldr	r3, [r7, #0]
 8018318:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801831a:	6879      	ldr	r1, [r7, #4]
 801831c:	2004      	movs	r0, #4
 801831e:	f7f5 fae9 	bl	800d8f4 <memp_free>
}
 8018322:	bf00      	nop
 8018324:	3708      	adds	r7, #8
 8018326:	46bd      	mov	sp, r7
 8018328:	bd80      	pop	{r7, pc}
 801832a:	bf00      	nop
 801832c:	20000670 	.word	0x20000670
 8018330:	0801d9e8 	.word	0x0801d9e8
 8018334:	0801dab0 	.word	0x0801dab0
 8018338:	0801da30 	.word	0x0801da30

0801833c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801833c:	b580      	push	{r7, lr}
 801833e:	b08c      	sub	sp, #48	; 0x30
 8018340:	af00      	add	r7, sp, #0
 8018342:	60f8      	str	r0, [r7, #12]
 8018344:	60b9      	str	r1, [r7, #8]
 8018346:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018348:	2300      	movs	r3, #0
 801834a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801834c:	2301      	movs	r3, #1
 801834e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018350:	68bb      	ldr	r3, [r7, #8]
 8018352:	685b      	ldr	r3, [r3, #4]
 8018354:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018356:	69fb      	ldr	r3, [r7, #28]
 8018358:	885b      	ldrh	r3, [r3, #2]
 801835a:	b29b      	uxth	r3, r3
 801835c:	4618      	mov	r0, r3
 801835e:	f7f4 fe27 	bl	800cfb0 <lwip_htons>
 8018362:	4603      	mov	r3, r0
 8018364:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8018366:	69fb      	ldr	r3, [r7, #28]
 8018368:	781b      	ldrb	r3, [r3, #0]
 801836a:	f003 030f 	and.w	r3, r3, #15
 801836e:	b2db      	uxtb	r3, r3
 8018370:	009b      	lsls	r3, r3, #2
 8018372:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018374:	7e7b      	ldrb	r3, [r7, #25]
 8018376:	b29b      	uxth	r3, r3
 8018378:	8b7a      	ldrh	r2, [r7, #26]
 801837a:	429a      	cmp	r2, r3
 801837c:	d202      	bcs.n	8018384 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801837e:	f04f 33ff 	mov.w	r3, #4294967295
 8018382:	e135      	b.n	80185f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018384:	7e7b      	ldrb	r3, [r7, #25]
 8018386:	b29b      	uxth	r3, r3
 8018388:	8b7a      	ldrh	r2, [r7, #26]
 801838a:	1ad3      	subs	r3, r2, r3
 801838c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801838e:	69fb      	ldr	r3, [r7, #28]
 8018390:	88db      	ldrh	r3, [r3, #6]
 8018392:	b29b      	uxth	r3, r3
 8018394:	4618      	mov	r0, r3
 8018396:	f7f4 fe0b 	bl	800cfb0 <lwip_htons>
 801839a:	4603      	mov	r3, r0
 801839c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80183a0:	b29b      	uxth	r3, r3
 80183a2:	00db      	lsls	r3, r3, #3
 80183a4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80183a6:	68bb      	ldr	r3, [r7, #8]
 80183a8:	685b      	ldr	r3, [r3, #4]
 80183aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80183ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183ae:	2200      	movs	r2, #0
 80183b0:	701a      	strb	r2, [r3, #0]
 80183b2:	2200      	movs	r2, #0
 80183b4:	705a      	strb	r2, [r3, #1]
 80183b6:	2200      	movs	r2, #0
 80183b8:	709a      	strb	r2, [r3, #2]
 80183ba:	2200      	movs	r2, #0
 80183bc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80183be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183c0:	8afa      	ldrh	r2, [r7, #22]
 80183c2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80183c4:	8afa      	ldrh	r2, [r7, #22]
 80183c6:	8b7b      	ldrh	r3, [r7, #26]
 80183c8:	4413      	add	r3, r2
 80183ca:	b29a      	uxth	r2, r3
 80183cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183ce:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80183d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183d2:	88db      	ldrh	r3, [r3, #6]
 80183d4:	b29b      	uxth	r3, r3
 80183d6:	8afa      	ldrh	r2, [r7, #22]
 80183d8:	429a      	cmp	r2, r3
 80183da:	d902      	bls.n	80183e2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80183dc:	f04f 33ff 	mov.w	r3, #4294967295
 80183e0:	e106      	b.n	80185f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	685b      	ldr	r3, [r3, #4]
 80183e6:	627b      	str	r3, [r7, #36]	; 0x24
 80183e8:	e068      	b.n	80184bc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80183ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183ec:	685b      	ldr	r3, [r3, #4]
 80183ee:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80183f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183f2:	889b      	ldrh	r3, [r3, #4]
 80183f4:	b29a      	uxth	r2, r3
 80183f6:	693b      	ldr	r3, [r7, #16]
 80183f8:	889b      	ldrh	r3, [r3, #4]
 80183fa:	b29b      	uxth	r3, r3
 80183fc:	429a      	cmp	r2, r3
 80183fe:	d235      	bcs.n	801846c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018404:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8018406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018408:	2b00      	cmp	r3, #0
 801840a:	d020      	beq.n	801844e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801840c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801840e:	889b      	ldrh	r3, [r3, #4]
 8018410:	b29a      	uxth	r2, r3
 8018412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018414:	88db      	ldrh	r3, [r3, #6]
 8018416:	b29b      	uxth	r3, r3
 8018418:	429a      	cmp	r2, r3
 801841a:	d307      	bcc.n	801842c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801841c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801841e:	88db      	ldrh	r3, [r3, #6]
 8018420:	b29a      	uxth	r2, r3
 8018422:	693b      	ldr	r3, [r7, #16]
 8018424:	889b      	ldrh	r3, [r3, #4]
 8018426:	b29b      	uxth	r3, r3
 8018428:	429a      	cmp	r2, r3
 801842a:	d902      	bls.n	8018432 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801842c:	f04f 33ff 	mov.w	r3, #4294967295
 8018430:	e0de      	b.n	80185f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8018432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018434:	68ba      	ldr	r2, [r7, #8]
 8018436:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801843a:	88db      	ldrh	r3, [r3, #6]
 801843c:	b29a      	uxth	r2, r3
 801843e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018440:	889b      	ldrh	r3, [r3, #4]
 8018442:	b29b      	uxth	r3, r3
 8018444:	429a      	cmp	r2, r3
 8018446:	d03d      	beq.n	80184c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018448:	2300      	movs	r3, #0
 801844a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801844c:	e03a      	b.n	80184c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801844e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018450:	88db      	ldrh	r3, [r3, #6]
 8018452:	b29a      	uxth	r2, r3
 8018454:	693b      	ldr	r3, [r7, #16]
 8018456:	889b      	ldrh	r3, [r3, #4]
 8018458:	b29b      	uxth	r3, r3
 801845a:	429a      	cmp	r2, r3
 801845c:	d902      	bls.n	8018464 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801845e:	f04f 33ff 	mov.w	r3, #4294967295
 8018462:	e0c5      	b.n	80185f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018464:	68fb      	ldr	r3, [r7, #12]
 8018466:	68ba      	ldr	r2, [r7, #8]
 8018468:	605a      	str	r2, [r3, #4]
      break;
 801846a:	e02b      	b.n	80184c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801846c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801846e:	889b      	ldrh	r3, [r3, #4]
 8018470:	b29a      	uxth	r2, r3
 8018472:	693b      	ldr	r3, [r7, #16]
 8018474:	889b      	ldrh	r3, [r3, #4]
 8018476:	b29b      	uxth	r3, r3
 8018478:	429a      	cmp	r2, r3
 801847a:	d102      	bne.n	8018482 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801847c:	f04f 33ff 	mov.w	r3, #4294967295
 8018480:	e0b6      	b.n	80185f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8018482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018484:	889b      	ldrh	r3, [r3, #4]
 8018486:	b29a      	uxth	r2, r3
 8018488:	693b      	ldr	r3, [r7, #16]
 801848a:	88db      	ldrh	r3, [r3, #6]
 801848c:	b29b      	uxth	r3, r3
 801848e:	429a      	cmp	r2, r3
 8018490:	d202      	bcs.n	8018498 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018492:	f04f 33ff 	mov.w	r3, #4294967295
 8018496:	e0ab      	b.n	80185f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801849a:	2b00      	cmp	r3, #0
 801849c:	d009      	beq.n	80184b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801849e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184a0:	88db      	ldrh	r3, [r3, #6]
 80184a2:	b29a      	uxth	r2, r3
 80184a4:	693b      	ldr	r3, [r7, #16]
 80184a6:	889b      	ldrh	r3, [r3, #4]
 80184a8:	b29b      	uxth	r3, r3
 80184aa:	429a      	cmp	r2, r3
 80184ac:	d001      	beq.n	80184b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80184ae:	2300      	movs	r3, #0
 80184b0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80184b2:	693b      	ldr	r3, [r7, #16]
 80184b4:	681b      	ldr	r3, [r3, #0]
 80184b6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80184b8:	693b      	ldr	r3, [r7, #16]
 80184ba:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80184bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d193      	bne.n	80183ea <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80184c2:	e000      	b.n	80184c6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80184c4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80184c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d12d      	bne.n	8018528 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80184cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d01c      	beq.n	801850c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80184d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184d4:	88db      	ldrh	r3, [r3, #6]
 80184d6:	b29a      	uxth	r2, r3
 80184d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184da:	889b      	ldrh	r3, [r3, #4]
 80184dc:	b29b      	uxth	r3, r3
 80184de:	429a      	cmp	r2, r3
 80184e0:	d906      	bls.n	80184f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80184e2:	4b45      	ldr	r3, [pc, #276]	; (80185f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80184e4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80184e8:	4944      	ldr	r1, [pc, #272]	; (80185fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80184ea:	4845      	ldr	r0, [pc, #276]	; (8018600 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80184ec:	f000 ffae 	bl	801944c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80184f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184f2:	68ba      	ldr	r2, [r7, #8]
 80184f4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80184f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184f8:	88db      	ldrh	r3, [r3, #6]
 80184fa:	b29a      	uxth	r2, r3
 80184fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184fe:	889b      	ldrh	r3, [r3, #4]
 8018500:	b29b      	uxth	r3, r3
 8018502:	429a      	cmp	r2, r3
 8018504:	d010      	beq.n	8018528 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8018506:	2300      	movs	r3, #0
 8018508:	623b      	str	r3, [r7, #32]
 801850a:	e00d      	b.n	8018528 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801850c:	68fb      	ldr	r3, [r7, #12]
 801850e:	685b      	ldr	r3, [r3, #4]
 8018510:	2b00      	cmp	r3, #0
 8018512:	d006      	beq.n	8018522 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018514:	4b38      	ldr	r3, [pc, #224]	; (80185f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018516:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801851a:	493a      	ldr	r1, [pc, #232]	; (8018604 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801851c:	4838      	ldr	r0, [pc, #224]	; (8018600 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801851e:	f000 ff95 	bl	801944c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8018522:	68fb      	ldr	r3, [r7, #12]
 8018524:	68ba      	ldr	r2, [r7, #8]
 8018526:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	2b00      	cmp	r3, #0
 801852c:	d105      	bne.n	801853a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801852e:	68fb      	ldr	r3, [r7, #12]
 8018530:	7f9b      	ldrb	r3, [r3, #30]
 8018532:	f003 0301 	and.w	r3, r3, #1
 8018536:	2b00      	cmp	r3, #0
 8018538:	d059      	beq.n	80185ee <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801853a:	6a3b      	ldr	r3, [r7, #32]
 801853c:	2b00      	cmp	r3, #0
 801853e:	d04f      	beq.n	80185e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018540:	68fb      	ldr	r3, [r7, #12]
 8018542:	685b      	ldr	r3, [r3, #4]
 8018544:	2b00      	cmp	r3, #0
 8018546:	d006      	beq.n	8018556 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018548:	68fb      	ldr	r3, [r7, #12]
 801854a:	685b      	ldr	r3, [r3, #4]
 801854c:	685b      	ldr	r3, [r3, #4]
 801854e:	889b      	ldrh	r3, [r3, #4]
 8018550:	b29b      	uxth	r3, r3
 8018552:	2b00      	cmp	r3, #0
 8018554:	d002      	beq.n	801855c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018556:	2300      	movs	r3, #0
 8018558:	623b      	str	r3, [r7, #32]
 801855a:	e041      	b.n	80185e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801855c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801855e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018562:	681b      	ldr	r3, [r3, #0]
 8018564:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018566:	e012      	b.n	801858e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801856a:	685b      	ldr	r3, [r3, #4]
 801856c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801856e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018570:	88db      	ldrh	r3, [r3, #6]
 8018572:	b29a      	uxth	r2, r3
 8018574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018576:	889b      	ldrh	r3, [r3, #4]
 8018578:	b29b      	uxth	r3, r3
 801857a:	429a      	cmp	r2, r3
 801857c:	d002      	beq.n	8018584 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801857e:	2300      	movs	r3, #0
 8018580:	623b      	str	r3, [r7, #32]
            break;
 8018582:	e007      	b.n	8018594 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018586:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801858e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018590:	2b00      	cmp	r3, #0
 8018592:	d1e9      	bne.n	8018568 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018594:	6a3b      	ldr	r3, [r7, #32]
 8018596:	2b00      	cmp	r3, #0
 8018598:	d022      	beq.n	80185e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801859a:	68fb      	ldr	r3, [r7, #12]
 801859c:	685b      	ldr	r3, [r3, #4]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d106      	bne.n	80185b0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80185a2:	4b15      	ldr	r3, [pc, #84]	; (80185f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80185a4:	f240 12df 	movw	r2, #479	; 0x1df
 80185a8:	4917      	ldr	r1, [pc, #92]	; (8018608 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80185aa:	4815      	ldr	r0, [pc, #84]	; (8018600 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80185ac:	f000 ff4e 	bl	801944c <iprintf>
          LWIP_ASSERT("sanity check",
 80185b0:	68fb      	ldr	r3, [r7, #12]
 80185b2:	685b      	ldr	r3, [r3, #4]
 80185b4:	685b      	ldr	r3, [r3, #4]
 80185b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80185b8:	429a      	cmp	r2, r3
 80185ba:	d106      	bne.n	80185ca <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80185bc:	4b0e      	ldr	r3, [pc, #56]	; (80185f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80185be:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80185c2:	4911      	ldr	r1, [pc, #68]	; (8018608 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80185c4:	480e      	ldr	r0, [pc, #56]	; (8018600 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80185c6:	f000 ff41 	bl	801944c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80185ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d006      	beq.n	80185e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80185d2:	4b09      	ldr	r3, [pc, #36]	; (80185f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80185d4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80185d8:	490c      	ldr	r1, [pc, #48]	; (801860c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80185da:	4809      	ldr	r0, [pc, #36]	; (8018600 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80185dc:	f000 ff36 	bl	801944c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80185e0:	6a3b      	ldr	r3, [r7, #32]
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	bf14      	ite	ne
 80185e6:	2301      	movne	r3, #1
 80185e8:	2300      	moveq	r3, #0
 80185ea:	b2db      	uxtb	r3, r3
 80185ec:	e000      	b.n	80185f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80185ee:	2300      	movs	r3, #0
}
 80185f0:	4618      	mov	r0, r3
 80185f2:	3730      	adds	r7, #48	; 0x30
 80185f4:	46bd      	mov	sp, r7
 80185f6:	bd80      	pop	{r7, pc}
 80185f8:	0801d9e8 	.word	0x0801d9e8
 80185fc:	0801dacc 	.word	0x0801dacc
 8018600:	0801da30 	.word	0x0801da30
 8018604:	0801daec 	.word	0x0801daec
 8018608:	0801db24 	.word	0x0801db24
 801860c:	0801db34 	.word	0x0801db34

08018610 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018610:	b580      	push	{r7, lr}
 8018612:	b08e      	sub	sp, #56	; 0x38
 8018614:	af00      	add	r7, sp, #0
 8018616:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	685b      	ldr	r3, [r3, #4]
 801861c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801861e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018620:	781b      	ldrb	r3, [r3, #0]
 8018622:	f003 030f 	and.w	r3, r3, #15
 8018626:	b2db      	uxtb	r3, r3
 8018628:	009b      	lsls	r3, r3, #2
 801862a:	b2db      	uxtb	r3, r3
 801862c:	2b14      	cmp	r3, #20
 801862e:	f040 8167 	bne.w	8018900 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8018632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018634:	88db      	ldrh	r3, [r3, #6]
 8018636:	b29b      	uxth	r3, r3
 8018638:	4618      	mov	r0, r3
 801863a:	f7f4 fcb9 	bl	800cfb0 <lwip_htons>
 801863e:	4603      	mov	r3, r0
 8018640:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018644:	b29b      	uxth	r3, r3
 8018646:	00db      	lsls	r3, r3, #3
 8018648:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801864a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801864c:	885b      	ldrh	r3, [r3, #2]
 801864e:	b29b      	uxth	r3, r3
 8018650:	4618      	mov	r0, r3
 8018652:	f7f4 fcad 	bl	800cfb0 <lwip_htons>
 8018656:	4603      	mov	r3, r0
 8018658:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801865a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801865c:	781b      	ldrb	r3, [r3, #0]
 801865e:	f003 030f 	and.w	r3, r3, #15
 8018662:	b2db      	uxtb	r3, r3
 8018664:	009b      	lsls	r3, r3, #2
 8018666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801866a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801866e:	b29b      	uxth	r3, r3
 8018670:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018672:	429a      	cmp	r2, r3
 8018674:	f0c0 8146 	bcc.w	8018904 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018678:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801867c:	b29b      	uxth	r3, r3
 801867e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018680:	1ad3      	subs	r3, r2, r3
 8018682:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018684:	6878      	ldr	r0, [r7, #4]
 8018686:	f7f5 ffd7 	bl	800e638 <pbuf_clen>
 801868a:	4603      	mov	r3, r0
 801868c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801868e:	4b9f      	ldr	r3, [pc, #636]	; (801890c <ip4_reass+0x2fc>)
 8018690:	881b      	ldrh	r3, [r3, #0]
 8018692:	461a      	mov	r2, r3
 8018694:	8c3b      	ldrh	r3, [r7, #32]
 8018696:	4413      	add	r3, r2
 8018698:	2b0a      	cmp	r3, #10
 801869a:	dd10      	ble.n	80186be <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801869c:	8c3b      	ldrh	r3, [r7, #32]
 801869e:	4619      	mov	r1, r3
 80186a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80186a2:	f7ff fd81 	bl	80181a8 <ip_reass_remove_oldest_datagram>
 80186a6:	4603      	mov	r3, r0
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	f000 812d 	beq.w	8018908 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80186ae:	4b97      	ldr	r3, [pc, #604]	; (801890c <ip4_reass+0x2fc>)
 80186b0:	881b      	ldrh	r3, [r3, #0]
 80186b2:	461a      	mov	r2, r3
 80186b4:	8c3b      	ldrh	r3, [r7, #32]
 80186b6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80186b8:	2b0a      	cmp	r3, #10
 80186ba:	f300 8125 	bgt.w	8018908 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80186be:	4b94      	ldr	r3, [pc, #592]	; (8018910 <ip4_reass+0x300>)
 80186c0:	681b      	ldr	r3, [r3, #0]
 80186c2:	633b      	str	r3, [r7, #48]	; 0x30
 80186c4:	e015      	b.n	80186f2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80186c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186c8:	695a      	ldr	r2, [r3, #20]
 80186ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186cc:	68db      	ldr	r3, [r3, #12]
 80186ce:	429a      	cmp	r2, r3
 80186d0:	d10c      	bne.n	80186ec <ip4_reass+0xdc>
 80186d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186d4:	699a      	ldr	r2, [r3, #24]
 80186d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186d8:	691b      	ldr	r3, [r3, #16]
 80186da:	429a      	cmp	r2, r3
 80186dc:	d106      	bne.n	80186ec <ip4_reass+0xdc>
 80186de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186e0:	899a      	ldrh	r2, [r3, #12]
 80186e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186e4:	889b      	ldrh	r3, [r3, #4]
 80186e6:	b29b      	uxth	r3, r3
 80186e8:	429a      	cmp	r2, r3
 80186ea:	d006      	beq.n	80186fa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80186ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	633b      	str	r3, [r7, #48]	; 0x30
 80186f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d1e6      	bne.n	80186c6 <ip4_reass+0xb6>
 80186f8:	e000      	b.n	80186fc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80186fa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80186fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186fe:	2b00      	cmp	r3, #0
 8018700:	d109      	bne.n	8018716 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018702:	8c3b      	ldrh	r3, [r7, #32]
 8018704:	4619      	mov	r1, r3
 8018706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018708:	f7ff fdb0 	bl	801826c <ip_reass_enqueue_new_datagram>
 801870c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801870e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018710:	2b00      	cmp	r3, #0
 8018712:	d11c      	bne.n	801874e <ip4_reass+0x13e>
      goto nullreturn;
 8018714:	e109      	b.n	801892a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018718:	88db      	ldrh	r3, [r3, #6]
 801871a:	b29b      	uxth	r3, r3
 801871c:	4618      	mov	r0, r3
 801871e:	f7f4 fc47 	bl	800cfb0 <lwip_htons>
 8018722:	4603      	mov	r3, r0
 8018724:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018728:	2b00      	cmp	r3, #0
 801872a:	d110      	bne.n	801874e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801872c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801872e:	89db      	ldrh	r3, [r3, #14]
 8018730:	4618      	mov	r0, r3
 8018732:	f7f4 fc3d 	bl	800cfb0 <lwip_htons>
 8018736:	4603      	mov	r3, r0
 8018738:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801873c:	2b00      	cmp	r3, #0
 801873e:	d006      	beq.n	801874e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018742:	3308      	adds	r3, #8
 8018744:	2214      	movs	r2, #20
 8018746:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018748:	4618      	mov	r0, r3
 801874a:	f000 fda5 	bl	8019298 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801874e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018750:	88db      	ldrh	r3, [r3, #6]
 8018752:	b29b      	uxth	r3, r3
 8018754:	f003 0320 	and.w	r3, r3, #32
 8018758:	2b00      	cmp	r3, #0
 801875a:	bf0c      	ite	eq
 801875c:	2301      	moveq	r3, #1
 801875e:	2300      	movne	r3, #0
 8018760:	b2db      	uxtb	r3, r3
 8018762:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018764:	69fb      	ldr	r3, [r7, #28]
 8018766:	2b00      	cmp	r3, #0
 8018768:	d00e      	beq.n	8018788 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801876a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801876c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801876e:	4413      	add	r3, r2
 8018770:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018772:	8b7a      	ldrh	r2, [r7, #26]
 8018774:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018776:	429a      	cmp	r2, r3
 8018778:	f0c0 80a0 	bcc.w	80188bc <ip4_reass+0x2ac>
 801877c:	8b7b      	ldrh	r3, [r7, #26]
 801877e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8018782:	4293      	cmp	r3, r2
 8018784:	f200 809a 	bhi.w	80188bc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018788:	69fa      	ldr	r2, [r7, #28]
 801878a:	6879      	ldr	r1, [r7, #4]
 801878c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801878e:	f7ff fdd5 	bl	801833c <ip_reass_chain_frag_into_datagram_and_validate>
 8018792:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018794:	697b      	ldr	r3, [r7, #20]
 8018796:	f1b3 3fff 	cmp.w	r3, #4294967295
 801879a:	f000 8091 	beq.w	80188c0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801879e:	4b5b      	ldr	r3, [pc, #364]	; (801890c <ip4_reass+0x2fc>)
 80187a0:	881a      	ldrh	r2, [r3, #0]
 80187a2:	8c3b      	ldrh	r3, [r7, #32]
 80187a4:	4413      	add	r3, r2
 80187a6:	b29a      	uxth	r2, r3
 80187a8:	4b58      	ldr	r3, [pc, #352]	; (801890c <ip4_reass+0x2fc>)
 80187aa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80187ac:	69fb      	ldr	r3, [r7, #28]
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d00d      	beq.n	80187ce <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80187b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80187b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80187b6:	4413      	add	r3, r2
 80187b8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80187ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187bc:	8a7a      	ldrh	r2, [r7, #18]
 80187be:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80187c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187c2:	7f9b      	ldrb	r3, [r3, #30]
 80187c4:	f043 0301 	orr.w	r3, r3, #1
 80187c8:	b2da      	uxtb	r2, r3
 80187ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187cc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80187ce:	697b      	ldr	r3, [r7, #20]
 80187d0:	2b01      	cmp	r3, #1
 80187d2:	d171      	bne.n	80188b8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80187d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187d6:	8b9b      	ldrh	r3, [r3, #28]
 80187d8:	3314      	adds	r3, #20
 80187da:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80187dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187de:	685b      	ldr	r3, [r3, #4]
 80187e0:	685b      	ldr	r3, [r3, #4]
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80187e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187e8:	685b      	ldr	r3, [r3, #4]
 80187ea:	685b      	ldr	r3, [r3, #4]
 80187ec:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80187ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187f0:	3308      	adds	r3, #8
 80187f2:	2214      	movs	r2, #20
 80187f4:	4619      	mov	r1, r3
 80187f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80187f8:	f000 fd4e 	bl	8019298 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80187fc:	8a3b      	ldrh	r3, [r7, #16]
 80187fe:	4618      	mov	r0, r3
 8018800:	f7f4 fbd6 	bl	800cfb0 <lwip_htons>
 8018804:	4603      	mov	r3, r0
 8018806:	461a      	mov	r2, r3
 8018808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801880a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801880c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801880e:	2200      	movs	r2, #0
 8018810:	719a      	strb	r2, [r3, #6]
 8018812:	2200      	movs	r2, #0
 8018814:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018818:	2200      	movs	r2, #0
 801881a:	729a      	strb	r2, [r3, #10]
 801881c:	2200      	movs	r2, #0
 801881e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018822:	685b      	ldr	r3, [r3, #4]
 8018824:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018826:	e00d      	b.n	8018844 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801882a:	685b      	ldr	r3, [r3, #4]
 801882c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801882e:	2114      	movs	r1, #20
 8018830:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018832:	f7f5 fdf3 	bl	800e41c <pbuf_remove_header>
      pbuf_cat(p, r);
 8018836:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018838:	6878      	ldr	r0, [r7, #4]
 801883a:	f7f5 ff37 	bl	800e6ac <pbuf_cat>
      r = iprh->next_pbuf;
 801883e:	68fb      	ldr	r3, [r7, #12]
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018846:	2b00      	cmp	r3, #0
 8018848:	d1ee      	bne.n	8018828 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801884a:	4b31      	ldr	r3, [pc, #196]	; (8018910 <ip4_reass+0x300>)
 801884c:	681b      	ldr	r3, [r3, #0]
 801884e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018850:	429a      	cmp	r2, r3
 8018852:	d102      	bne.n	801885a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018854:	2300      	movs	r3, #0
 8018856:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018858:	e010      	b.n	801887c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801885a:	4b2d      	ldr	r3, [pc, #180]	; (8018910 <ip4_reass+0x300>)
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018860:	e007      	b.n	8018872 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018868:	429a      	cmp	r2, r3
 801886a:	d006      	beq.n	801887a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801886c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018874:	2b00      	cmp	r3, #0
 8018876:	d1f4      	bne.n	8018862 <ip4_reass+0x252>
 8018878:	e000      	b.n	801887c <ip4_reass+0x26c>
          break;
 801887a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801887c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801887e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018880:	f7ff fd2e 	bl	80182e0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018884:	6878      	ldr	r0, [r7, #4]
 8018886:	f7f5 fed7 	bl	800e638 <pbuf_clen>
 801888a:	4603      	mov	r3, r0
 801888c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801888e:	4b1f      	ldr	r3, [pc, #124]	; (801890c <ip4_reass+0x2fc>)
 8018890:	881b      	ldrh	r3, [r3, #0]
 8018892:	8c3a      	ldrh	r2, [r7, #32]
 8018894:	429a      	cmp	r2, r3
 8018896:	d906      	bls.n	80188a6 <ip4_reass+0x296>
 8018898:	4b1e      	ldr	r3, [pc, #120]	; (8018914 <ip4_reass+0x304>)
 801889a:	f240 229b 	movw	r2, #667	; 0x29b
 801889e:	491e      	ldr	r1, [pc, #120]	; (8018918 <ip4_reass+0x308>)
 80188a0:	481e      	ldr	r0, [pc, #120]	; (801891c <ip4_reass+0x30c>)
 80188a2:	f000 fdd3 	bl	801944c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80188a6:	4b19      	ldr	r3, [pc, #100]	; (801890c <ip4_reass+0x2fc>)
 80188a8:	881a      	ldrh	r2, [r3, #0]
 80188aa:	8c3b      	ldrh	r3, [r7, #32]
 80188ac:	1ad3      	subs	r3, r2, r3
 80188ae:	b29a      	uxth	r2, r3
 80188b0:	4b16      	ldr	r3, [pc, #88]	; (801890c <ip4_reass+0x2fc>)
 80188b2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	e03c      	b.n	8018932 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80188b8:	2300      	movs	r3, #0
 80188ba:	e03a      	b.n	8018932 <ip4_reass+0x322>
      goto nullreturn_ipr;
 80188bc:	bf00      	nop
 80188be:	e000      	b.n	80188c2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80188c0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80188c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d106      	bne.n	80188d6 <ip4_reass+0x2c6>
 80188c8:	4b12      	ldr	r3, [pc, #72]	; (8018914 <ip4_reass+0x304>)
 80188ca:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80188ce:	4914      	ldr	r1, [pc, #80]	; (8018920 <ip4_reass+0x310>)
 80188d0:	4812      	ldr	r0, [pc, #72]	; (801891c <ip4_reass+0x30c>)
 80188d2:	f000 fdbb 	bl	801944c <iprintf>
  if (ipr->p == NULL) {
 80188d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188d8:	685b      	ldr	r3, [r3, #4]
 80188da:	2b00      	cmp	r3, #0
 80188dc:	d124      	bne.n	8018928 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80188de:	4b0c      	ldr	r3, [pc, #48]	; (8018910 <ip4_reass+0x300>)
 80188e0:	681b      	ldr	r3, [r3, #0]
 80188e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80188e4:	429a      	cmp	r2, r3
 80188e6:	d006      	beq.n	80188f6 <ip4_reass+0x2e6>
 80188e8:	4b0a      	ldr	r3, [pc, #40]	; (8018914 <ip4_reass+0x304>)
 80188ea:	f240 22ab 	movw	r2, #683	; 0x2ab
 80188ee:	490d      	ldr	r1, [pc, #52]	; (8018924 <ip4_reass+0x314>)
 80188f0:	480a      	ldr	r0, [pc, #40]	; (801891c <ip4_reass+0x30c>)
 80188f2:	f000 fdab 	bl	801944c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80188f6:	2100      	movs	r1, #0
 80188f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80188fa:	f7ff fcf1 	bl	80182e0 <ip_reass_dequeue_datagram>
 80188fe:	e014      	b.n	801892a <ip4_reass+0x31a>
    goto nullreturn;
 8018900:	bf00      	nop
 8018902:	e012      	b.n	801892a <ip4_reass+0x31a>
    goto nullreturn;
 8018904:	bf00      	nop
 8018906:	e010      	b.n	801892a <ip4_reass+0x31a>
      goto nullreturn;
 8018908:	bf00      	nop
 801890a:	e00e      	b.n	801892a <ip4_reass+0x31a>
 801890c:	20000674 	.word	0x20000674
 8018910:	20000670 	.word	0x20000670
 8018914:	0801d9e8 	.word	0x0801d9e8
 8018918:	0801db58 	.word	0x0801db58
 801891c:	0801da30 	.word	0x0801da30
 8018920:	0801db74 	.word	0x0801db74
 8018924:	0801db80 	.word	0x0801db80
  }

nullreturn:
 8018928:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801892a:	6878      	ldr	r0, [r7, #4]
 801892c:	f7f5 fdfc 	bl	800e528 <pbuf_free>
  return NULL;
 8018930:	2300      	movs	r3, #0
}
 8018932:	4618      	mov	r0, r3
 8018934:	3738      	adds	r7, #56	; 0x38
 8018936:	46bd      	mov	sp, r7
 8018938:	bd80      	pop	{r7, pc}
 801893a:	bf00      	nop

0801893c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801893c:	b580      	push	{r7, lr}
 801893e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018940:	2005      	movs	r0, #5
 8018942:	f7f4 ff8b 	bl	800d85c <memp_malloc>
 8018946:	4603      	mov	r3, r0
}
 8018948:	4618      	mov	r0, r3
 801894a:	bd80      	pop	{r7, pc}

0801894c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801894c:	b580      	push	{r7, lr}
 801894e:	b082      	sub	sp, #8
 8018950:	af00      	add	r7, sp, #0
 8018952:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	2b00      	cmp	r3, #0
 8018958:	d106      	bne.n	8018968 <ip_frag_free_pbuf_custom_ref+0x1c>
 801895a:	4b07      	ldr	r3, [pc, #28]	; (8018978 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801895c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018960:	4906      	ldr	r1, [pc, #24]	; (801897c <ip_frag_free_pbuf_custom_ref+0x30>)
 8018962:	4807      	ldr	r0, [pc, #28]	; (8018980 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018964:	f000 fd72 	bl	801944c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018968:	6879      	ldr	r1, [r7, #4]
 801896a:	2005      	movs	r0, #5
 801896c:	f7f4 ffc2 	bl	800d8f4 <memp_free>
}
 8018970:	bf00      	nop
 8018972:	3708      	adds	r7, #8
 8018974:	46bd      	mov	sp, r7
 8018976:	bd80      	pop	{r7, pc}
 8018978:	0801d9e8 	.word	0x0801d9e8
 801897c:	0801dba0 	.word	0x0801dba0
 8018980:	0801da30 	.word	0x0801da30

08018984 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018984:	b580      	push	{r7, lr}
 8018986:	b084      	sub	sp, #16
 8018988:	af00      	add	r7, sp, #0
 801898a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018990:	68fb      	ldr	r3, [r7, #12]
 8018992:	2b00      	cmp	r3, #0
 8018994:	d106      	bne.n	80189a4 <ipfrag_free_pbuf_custom+0x20>
 8018996:	4b11      	ldr	r3, [pc, #68]	; (80189dc <ipfrag_free_pbuf_custom+0x58>)
 8018998:	f240 22ce 	movw	r2, #718	; 0x2ce
 801899c:	4910      	ldr	r1, [pc, #64]	; (80189e0 <ipfrag_free_pbuf_custom+0x5c>)
 801899e:	4811      	ldr	r0, [pc, #68]	; (80189e4 <ipfrag_free_pbuf_custom+0x60>)
 80189a0:	f000 fd54 	bl	801944c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80189a4:	68fa      	ldr	r2, [r7, #12]
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	429a      	cmp	r2, r3
 80189aa:	d006      	beq.n	80189ba <ipfrag_free_pbuf_custom+0x36>
 80189ac:	4b0b      	ldr	r3, [pc, #44]	; (80189dc <ipfrag_free_pbuf_custom+0x58>)
 80189ae:	f240 22cf 	movw	r2, #719	; 0x2cf
 80189b2:	490d      	ldr	r1, [pc, #52]	; (80189e8 <ipfrag_free_pbuf_custom+0x64>)
 80189b4:	480b      	ldr	r0, [pc, #44]	; (80189e4 <ipfrag_free_pbuf_custom+0x60>)
 80189b6:	f000 fd49 	bl	801944c <iprintf>
  if (pcr->original != NULL) {
 80189ba:	68fb      	ldr	r3, [r7, #12]
 80189bc:	695b      	ldr	r3, [r3, #20]
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d004      	beq.n	80189cc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80189c2:	68fb      	ldr	r3, [r7, #12]
 80189c4:	695b      	ldr	r3, [r3, #20]
 80189c6:	4618      	mov	r0, r3
 80189c8:	f7f5 fdae 	bl	800e528 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80189cc:	68f8      	ldr	r0, [r7, #12]
 80189ce:	f7ff ffbd 	bl	801894c <ip_frag_free_pbuf_custom_ref>
}
 80189d2:	bf00      	nop
 80189d4:	3710      	adds	r7, #16
 80189d6:	46bd      	mov	sp, r7
 80189d8:	bd80      	pop	{r7, pc}
 80189da:	bf00      	nop
 80189dc:	0801d9e8 	.word	0x0801d9e8
 80189e0:	0801dbac 	.word	0x0801dbac
 80189e4:	0801da30 	.word	0x0801da30
 80189e8:	0801dbb8 	.word	0x0801dbb8

080189ec <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80189ec:	b580      	push	{r7, lr}
 80189ee:	b094      	sub	sp, #80	; 0x50
 80189f0:	af02      	add	r7, sp, #8
 80189f2:	60f8      	str	r0, [r7, #12]
 80189f4:	60b9      	str	r1, [r7, #8]
 80189f6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80189f8:	2300      	movs	r3, #0
 80189fa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80189fe:	68bb      	ldr	r3, [r7, #8]
 8018a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018a02:	3b14      	subs	r3, #20
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	da00      	bge.n	8018a0a <ip4_frag+0x1e>
 8018a08:	3307      	adds	r3, #7
 8018a0a:	10db      	asrs	r3, r3, #3
 8018a0c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018a0e:	2314      	movs	r3, #20
 8018a10:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018a12:	68fb      	ldr	r3, [r7, #12]
 8018a14:	685b      	ldr	r3, [r3, #4]
 8018a16:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a1a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a1e:	781b      	ldrb	r3, [r3, #0]
 8018a20:	f003 030f 	and.w	r3, r3, #15
 8018a24:	b2db      	uxtb	r3, r3
 8018a26:	009b      	lsls	r3, r3, #2
 8018a28:	b2db      	uxtb	r3, r3
 8018a2a:	2b14      	cmp	r3, #20
 8018a2c:	d002      	beq.n	8018a34 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018a2e:	f06f 0305 	mvn.w	r3, #5
 8018a32:	e110      	b.n	8018c56 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018a34:	68fb      	ldr	r3, [r7, #12]
 8018a36:	895b      	ldrh	r3, [r3, #10]
 8018a38:	2b13      	cmp	r3, #19
 8018a3a:	d809      	bhi.n	8018a50 <ip4_frag+0x64>
 8018a3c:	4b88      	ldr	r3, [pc, #544]	; (8018c60 <ip4_frag+0x274>)
 8018a3e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8018a42:	4988      	ldr	r1, [pc, #544]	; (8018c64 <ip4_frag+0x278>)
 8018a44:	4888      	ldr	r0, [pc, #544]	; (8018c68 <ip4_frag+0x27c>)
 8018a46:	f000 fd01 	bl	801944c <iprintf>
 8018a4a:	f06f 0305 	mvn.w	r3, #5
 8018a4e:	e102      	b.n	8018c56 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a52:	88db      	ldrh	r3, [r3, #6]
 8018a54:	b29b      	uxth	r3, r3
 8018a56:	4618      	mov	r0, r3
 8018a58:	f7f4 faaa 	bl	800cfb0 <lwip_htons>
 8018a5c:	4603      	mov	r3, r0
 8018a5e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018a60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018a62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018a66:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018a6a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018a70:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018a72:	68fb      	ldr	r3, [r7, #12]
 8018a74:	891b      	ldrh	r3, [r3, #8]
 8018a76:	3b14      	subs	r3, #20
 8018a78:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018a7c:	e0e1      	b.n	8018c42 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018a7e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018a80:	00db      	lsls	r3, r3, #3
 8018a82:	b29b      	uxth	r3, r3
 8018a84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018a88:	4293      	cmp	r3, r2
 8018a8a:	bf28      	it	cs
 8018a8c:	4613      	movcs	r3, r2
 8018a8e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018a90:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018a94:	2114      	movs	r1, #20
 8018a96:	200e      	movs	r0, #14
 8018a98:	f7f5 fa62 	bl	800df60 <pbuf_alloc>
 8018a9c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	f000 80d5 	beq.w	8018c50 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018aa8:	895b      	ldrh	r3, [r3, #10]
 8018aaa:	2b13      	cmp	r3, #19
 8018aac:	d806      	bhi.n	8018abc <ip4_frag+0xd0>
 8018aae:	4b6c      	ldr	r3, [pc, #432]	; (8018c60 <ip4_frag+0x274>)
 8018ab0:	f44f 7249 	mov.w	r2, #804	; 0x324
 8018ab4:	496d      	ldr	r1, [pc, #436]	; (8018c6c <ip4_frag+0x280>)
 8018ab6:	486c      	ldr	r0, [pc, #432]	; (8018c68 <ip4_frag+0x27c>)
 8018ab8:	f000 fcc8 	bl	801944c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018abe:	685b      	ldr	r3, [r3, #4]
 8018ac0:	2214      	movs	r2, #20
 8018ac2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018ac4:	4618      	mov	r0, r3
 8018ac6:	f000 fbe7 	bl	8019298 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018acc:	685b      	ldr	r3, [r3, #4]
 8018ace:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018ad0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018ad2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8018ad6:	e064      	b.n	8018ba2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018ad8:	68fb      	ldr	r3, [r7, #12]
 8018ada:	895a      	ldrh	r2, [r3, #10]
 8018adc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018ade:	1ad3      	subs	r3, r2, r3
 8018ae0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018ae2:	68fb      	ldr	r3, [r7, #12]
 8018ae4:	895b      	ldrh	r3, [r3, #10]
 8018ae6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018ae8:	429a      	cmp	r2, r3
 8018aea:	d906      	bls.n	8018afa <ip4_frag+0x10e>
 8018aec:	4b5c      	ldr	r3, [pc, #368]	; (8018c60 <ip4_frag+0x274>)
 8018aee:	f240 322d 	movw	r2, #813	; 0x32d
 8018af2:	495f      	ldr	r1, [pc, #380]	; (8018c70 <ip4_frag+0x284>)
 8018af4:	485c      	ldr	r0, [pc, #368]	; (8018c68 <ip4_frag+0x27c>)
 8018af6:	f000 fca9 	bl	801944c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018afa:	8bfa      	ldrh	r2, [r7, #30]
 8018afc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018b00:	4293      	cmp	r3, r2
 8018b02:	bf28      	it	cs
 8018b04:	4613      	movcs	r3, r2
 8018b06:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018b0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	d105      	bne.n	8018b1e <ip4_frag+0x132>
        poff = 0;
 8018b12:	2300      	movs	r3, #0
 8018b14:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018b16:	68fb      	ldr	r3, [r7, #12]
 8018b18:	681b      	ldr	r3, [r3, #0]
 8018b1a:	60fb      	str	r3, [r7, #12]
        continue;
 8018b1c:	e041      	b.n	8018ba2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018b1e:	f7ff ff0d 	bl	801893c <ip_frag_alloc_pbuf_custom_ref>
 8018b22:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018b24:	69bb      	ldr	r3, [r7, #24]
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	d103      	bne.n	8018b32 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018b2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018b2c:	f7f5 fcfc 	bl	800e528 <pbuf_free>
        goto memerr;
 8018b30:	e08f      	b.n	8018c52 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018b32:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018b34:	68fb      	ldr	r3, [r7, #12]
 8018b36:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018b38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018b3a:	4413      	add	r3, r2
 8018b3c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018b40:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018b44:	9201      	str	r2, [sp, #4]
 8018b46:	9300      	str	r3, [sp, #0]
 8018b48:	4603      	mov	r3, r0
 8018b4a:	2241      	movs	r2, #65	; 0x41
 8018b4c:	2000      	movs	r0, #0
 8018b4e:	f7f5 fb31 	bl	800e1b4 <pbuf_alloced_custom>
 8018b52:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018b54:	697b      	ldr	r3, [r7, #20]
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d106      	bne.n	8018b68 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018b5a:	69b8      	ldr	r0, [r7, #24]
 8018b5c:	f7ff fef6 	bl	801894c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018b60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018b62:	f7f5 fce1 	bl	800e528 <pbuf_free>
        goto memerr;
 8018b66:	e074      	b.n	8018c52 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018b68:	68f8      	ldr	r0, [r7, #12]
 8018b6a:	f7f5 fd7d 	bl	800e668 <pbuf_ref>
      pcr->original = p;
 8018b6e:	69bb      	ldr	r3, [r7, #24]
 8018b70:	68fa      	ldr	r2, [r7, #12]
 8018b72:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018b74:	69bb      	ldr	r3, [r7, #24]
 8018b76:	4a3f      	ldr	r2, [pc, #252]	; (8018c74 <ip4_frag+0x288>)
 8018b78:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018b7a:	6979      	ldr	r1, [r7, #20]
 8018b7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018b7e:	f7f5 fd95 	bl	800e6ac <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018b82:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8018b86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018b8a:	1ad3      	subs	r3, r2, r3
 8018b8c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018b90:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d004      	beq.n	8018ba2 <ip4_frag+0x1b6>
        poff = 0;
 8018b98:	2300      	movs	r3, #0
 8018b9a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018b9c:	68fb      	ldr	r3, [r7, #12]
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018ba2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	d196      	bne.n	8018ad8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018baa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018bac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018bb0:	4413      	add	r3, r2
 8018bb2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018bb4:	68bb      	ldr	r3, [r7, #8]
 8018bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018bb8:	f1a3 0213 	sub.w	r2, r3, #19
 8018bbc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018bc0:	429a      	cmp	r2, r3
 8018bc2:	bfcc      	ite	gt
 8018bc4:	2301      	movgt	r3, #1
 8018bc6:	2300      	movle	r3, #0
 8018bc8:	b2db      	uxtb	r3, r3
 8018bca:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018bcc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018bd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018bd4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018bd6:	6a3b      	ldr	r3, [r7, #32]
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d002      	beq.n	8018be2 <ip4_frag+0x1f6>
 8018bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d003      	beq.n	8018bea <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018be2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018be4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018be8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018bea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018bec:	4618      	mov	r0, r3
 8018bee:	f7f4 f9df 	bl	800cfb0 <lwip_htons>
 8018bf2:	4603      	mov	r3, r0
 8018bf4:	461a      	mov	r2, r3
 8018bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bf8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018bfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018bfc:	3314      	adds	r3, #20
 8018bfe:	b29b      	uxth	r3, r3
 8018c00:	4618      	mov	r0, r3
 8018c02:	f7f4 f9d5 	bl	800cfb0 <lwip_htons>
 8018c06:	4603      	mov	r3, r0
 8018c08:	461a      	mov	r2, r3
 8018c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c0c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c10:	2200      	movs	r2, #0
 8018c12:	729a      	strb	r2, [r3, #10]
 8018c14:	2200      	movs	r2, #0
 8018c16:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018c18:	68bb      	ldr	r3, [r7, #8]
 8018c1a:	695b      	ldr	r3, [r3, #20]
 8018c1c:	687a      	ldr	r2, [r7, #4]
 8018c1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018c20:	68b8      	ldr	r0, [r7, #8]
 8018c22:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018c24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018c26:	f7f5 fc7f 	bl	800e528 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018c2a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018c2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018c30:	1ad3      	subs	r3, r2, r3
 8018c32:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8018c36:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018c3a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018c3c:	4413      	add	r3, r2
 8018c3e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8018c42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	f47f af19 	bne.w	8018a7e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018c4c:	2300      	movs	r3, #0
 8018c4e:	e002      	b.n	8018c56 <ip4_frag+0x26a>
      goto memerr;
 8018c50:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018c52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018c56:	4618      	mov	r0, r3
 8018c58:	3748      	adds	r7, #72	; 0x48
 8018c5a:	46bd      	mov	sp, r7
 8018c5c:	bd80      	pop	{r7, pc}
 8018c5e:	bf00      	nop
 8018c60:	0801d9e8 	.word	0x0801d9e8
 8018c64:	0801dbc4 	.word	0x0801dbc4
 8018c68:	0801da30 	.word	0x0801da30
 8018c6c:	0801dbe0 	.word	0x0801dbe0
 8018c70:	0801dc00 	.word	0x0801dc00
 8018c74:	08018985 	.word	0x08018985

08018c78 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018c78:	b580      	push	{r7, lr}
 8018c7a:	b086      	sub	sp, #24
 8018c7c:	af00      	add	r7, sp, #0
 8018c7e:	6078      	str	r0, [r7, #4]
 8018c80:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018c82:	230e      	movs	r3, #14
 8018c84:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	895b      	ldrh	r3, [r3, #10]
 8018c8a:	2b0e      	cmp	r3, #14
 8018c8c:	d96e      	bls.n	8018d6c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	7bdb      	ldrb	r3, [r3, #15]
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d106      	bne.n	8018ca4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018c96:	683b      	ldr	r3, [r7, #0]
 8018c98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018c9c:	3301      	adds	r3, #1
 8018c9e:	b2da      	uxtb	r2, r3
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	685b      	ldr	r3, [r3, #4]
 8018ca8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018caa:	693b      	ldr	r3, [r7, #16]
 8018cac:	7b1a      	ldrb	r2, [r3, #12]
 8018cae:	7b5b      	ldrb	r3, [r3, #13]
 8018cb0:	021b      	lsls	r3, r3, #8
 8018cb2:	4313      	orrs	r3, r2
 8018cb4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018cb6:	693b      	ldr	r3, [r7, #16]
 8018cb8:	781b      	ldrb	r3, [r3, #0]
 8018cba:	f003 0301 	and.w	r3, r3, #1
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d023      	beq.n	8018d0a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018cc2:	693b      	ldr	r3, [r7, #16]
 8018cc4:	781b      	ldrb	r3, [r3, #0]
 8018cc6:	2b01      	cmp	r3, #1
 8018cc8:	d10f      	bne.n	8018cea <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018cca:	693b      	ldr	r3, [r7, #16]
 8018ccc:	785b      	ldrb	r3, [r3, #1]
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d11b      	bne.n	8018d0a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018cd2:	693b      	ldr	r3, [r7, #16]
 8018cd4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018cd6:	2b5e      	cmp	r3, #94	; 0x5e
 8018cd8:	d117      	bne.n	8018d0a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	7b5b      	ldrb	r3, [r3, #13]
 8018cde:	f043 0310 	orr.w	r3, r3, #16
 8018ce2:	b2da      	uxtb	r2, r3
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	735a      	strb	r2, [r3, #13]
 8018ce8:	e00f      	b.n	8018d0a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018cea:	693b      	ldr	r3, [r7, #16]
 8018cec:	2206      	movs	r2, #6
 8018cee:	4928      	ldr	r1, [pc, #160]	; (8018d90 <ethernet_input+0x118>)
 8018cf0:	4618      	mov	r0, r3
 8018cf2:	f000 fac3 	bl	801927c <memcmp>
 8018cf6:	4603      	mov	r3, r0
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	d106      	bne.n	8018d0a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	7b5b      	ldrb	r3, [r3, #13]
 8018d00:	f043 0308 	orr.w	r3, r3, #8
 8018d04:	b2da      	uxtb	r2, r3
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018d0a:	89fb      	ldrh	r3, [r7, #14]
 8018d0c:	2b08      	cmp	r3, #8
 8018d0e:	d003      	beq.n	8018d18 <ethernet_input+0xa0>
 8018d10:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018d14:	d014      	beq.n	8018d40 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018d16:	e032      	b.n	8018d7e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018d18:	683b      	ldr	r3, [r7, #0]
 8018d1a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018d1e:	f003 0308 	and.w	r3, r3, #8
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d024      	beq.n	8018d70 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018d26:	8afb      	ldrh	r3, [r7, #22]
 8018d28:	4619      	mov	r1, r3
 8018d2a:	6878      	ldr	r0, [r7, #4]
 8018d2c:	f7f5 fb76 	bl	800e41c <pbuf_remove_header>
 8018d30:	4603      	mov	r3, r0
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	d11e      	bne.n	8018d74 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018d36:	6839      	ldr	r1, [r7, #0]
 8018d38:	6878      	ldr	r0, [r7, #4]
 8018d3a:	f7fe ff09 	bl	8017b50 <ip4_input>
      break;
 8018d3e:	e013      	b.n	8018d68 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018d40:	683b      	ldr	r3, [r7, #0]
 8018d42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018d46:	f003 0308 	and.w	r3, r3, #8
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	d014      	beq.n	8018d78 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018d4e:	8afb      	ldrh	r3, [r7, #22]
 8018d50:	4619      	mov	r1, r3
 8018d52:	6878      	ldr	r0, [r7, #4]
 8018d54:	f7f5 fb62 	bl	800e41c <pbuf_remove_header>
 8018d58:	4603      	mov	r3, r0
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d10e      	bne.n	8018d7c <ethernet_input+0x104>
        etharp_input(p, netif);
 8018d5e:	6839      	ldr	r1, [r7, #0]
 8018d60:	6878      	ldr	r0, [r7, #4]
 8018d62:	f7fe f8a5 	bl	8016eb0 <etharp_input>
      break;
 8018d66:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018d68:	2300      	movs	r3, #0
 8018d6a:	e00c      	b.n	8018d86 <ethernet_input+0x10e>
    goto free_and_return;
 8018d6c:	bf00      	nop
 8018d6e:	e006      	b.n	8018d7e <ethernet_input+0x106>
        goto free_and_return;
 8018d70:	bf00      	nop
 8018d72:	e004      	b.n	8018d7e <ethernet_input+0x106>
        goto free_and_return;
 8018d74:	bf00      	nop
 8018d76:	e002      	b.n	8018d7e <ethernet_input+0x106>
        goto free_and_return;
 8018d78:	bf00      	nop
 8018d7a:	e000      	b.n	8018d7e <ethernet_input+0x106>
        goto free_and_return;
 8018d7c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018d7e:	6878      	ldr	r0, [r7, #4]
 8018d80:	f7f5 fbd2 	bl	800e528 <pbuf_free>
  return ERR_OK;
 8018d84:	2300      	movs	r3, #0
}
 8018d86:	4618      	mov	r0, r3
 8018d88:	3718      	adds	r7, #24
 8018d8a:	46bd      	mov	sp, r7
 8018d8c:	bd80      	pop	{r7, pc}
 8018d8e:	bf00      	nop
 8018d90:	0801e0e4 	.word	0x0801e0e4

08018d94 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018d94:	b580      	push	{r7, lr}
 8018d96:	b086      	sub	sp, #24
 8018d98:	af00      	add	r7, sp, #0
 8018d9a:	60f8      	str	r0, [r7, #12]
 8018d9c:	60b9      	str	r1, [r7, #8]
 8018d9e:	607a      	str	r2, [r7, #4]
 8018da0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018da2:	8c3b      	ldrh	r3, [r7, #32]
 8018da4:	4618      	mov	r0, r3
 8018da6:	f7f4 f903 	bl	800cfb0 <lwip_htons>
 8018daa:	4603      	mov	r3, r0
 8018dac:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018dae:	210e      	movs	r1, #14
 8018db0:	68b8      	ldr	r0, [r7, #8]
 8018db2:	f7f5 fb23 	bl	800e3fc <pbuf_add_header>
 8018db6:	4603      	mov	r3, r0
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	d125      	bne.n	8018e08 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018dbc:	68bb      	ldr	r3, [r7, #8]
 8018dbe:	685b      	ldr	r3, [r3, #4]
 8018dc0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018dc2:	693b      	ldr	r3, [r7, #16]
 8018dc4:	8afa      	ldrh	r2, [r7, #22]
 8018dc6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018dc8:	693b      	ldr	r3, [r7, #16]
 8018dca:	2206      	movs	r2, #6
 8018dcc:	6839      	ldr	r1, [r7, #0]
 8018dce:	4618      	mov	r0, r3
 8018dd0:	f000 fa62 	bl	8019298 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018dd4:	693b      	ldr	r3, [r7, #16]
 8018dd6:	3306      	adds	r3, #6
 8018dd8:	2206      	movs	r2, #6
 8018dda:	6879      	ldr	r1, [r7, #4]
 8018ddc:	4618      	mov	r0, r3
 8018dde:	f000 fa5b 	bl	8019298 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018de2:	68fb      	ldr	r3, [r7, #12]
 8018de4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018de8:	2b06      	cmp	r3, #6
 8018dea:	d006      	beq.n	8018dfa <ethernet_output+0x66>
 8018dec:	4b0a      	ldr	r3, [pc, #40]	; (8018e18 <ethernet_output+0x84>)
 8018dee:	f44f 7299 	mov.w	r2, #306	; 0x132
 8018df2:	490a      	ldr	r1, [pc, #40]	; (8018e1c <ethernet_output+0x88>)
 8018df4:	480a      	ldr	r0, [pc, #40]	; (8018e20 <ethernet_output+0x8c>)
 8018df6:	f000 fb29 	bl	801944c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018dfa:	68fb      	ldr	r3, [r7, #12]
 8018dfc:	699b      	ldr	r3, [r3, #24]
 8018dfe:	68b9      	ldr	r1, [r7, #8]
 8018e00:	68f8      	ldr	r0, [r7, #12]
 8018e02:	4798      	blx	r3
 8018e04:	4603      	mov	r3, r0
 8018e06:	e002      	b.n	8018e0e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018e08:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018e0a:	f06f 0301 	mvn.w	r3, #1
}
 8018e0e:	4618      	mov	r0, r3
 8018e10:	3718      	adds	r7, #24
 8018e12:	46bd      	mov	sp, r7
 8018e14:	bd80      	pop	{r7, pc}
 8018e16:	bf00      	nop
 8018e18:	0801dc10 	.word	0x0801dc10
 8018e1c:	0801dc48 	.word	0x0801dc48
 8018e20:	0801dc7c 	.word	0x0801dc7c

08018e24 <_ZdlPv>:
 8018e24:	f000 ba22 	b.w	801926c <free>

08018e28 <_ZdlPvj>:
 8018e28:	f7ff bffc 	b.w	8018e24 <_ZdlPv>

08018e2c <__cxa_guard_acquire>:
 8018e2c:	6803      	ldr	r3, [r0, #0]
 8018e2e:	07db      	lsls	r3, r3, #31
 8018e30:	d406      	bmi.n	8018e40 <__cxa_guard_acquire+0x14>
 8018e32:	7843      	ldrb	r3, [r0, #1]
 8018e34:	b103      	cbz	r3, 8018e38 <__cxa_guard_acquire+0xc>
 8018e36:	deff      	udf	#255	; 0xff
 8018e38:	2301      	movs	r3, #1
 8018e3a:	7043      	strb	r3, [r0, #1]
 8018e3c:	4618      	mov	r0, r3
 8018e3e:	4770      	bx	lr
 8018e40:	2000      	movs	r0, #0
 8018e42:	4770      	bx	lr

08018e44 <__cxa_guard_release>:
 8018e44:	2301      	movs	r3, #1
 8018e46:	6003      	str	r3, [r0, #0]
 8018e48:	4770      	bx	lr

08018e4a <_Znwj>:
 8018e4a:	2801      	cmp	r0, #1
 8018e4c:	bf38      	it	cc
 8018e4e:	2001      	movcc	r0, #1
 8018e50:	b510      	push	{r4, lr}
 8018e52:	4604      	mov	r4, r0
 8018e54:	4620      	mov	r0, r4
 8018e56:	f000 fa01 	bl	801925c <malloc>
 8018e5a:	b930      	cbnz	r0, 8018e6a <_Znwj+0x20>
 8018e5c:	f000 f9ca 	bl	80191f4 <_ZSt15get_new_handlerv>
 8018e60:	b908      	cbnz	r0, 8018e66 <_Znwj+0x1c>
 8018e62:	f000 f9cf 	bl	8019204 <abort>
 8018e66:	4780      	blx	r0
 8018e68:	e7f4      	b.n	8018e54 <_Znwj+0xa>
 8018e6a:	bd10      	pop	{r4, pc}

08018e6c <__cxa_pure_virtual>:
 8018e6c:	b508      	push	{r3, lr}
 8018e6e:	f000 f9bb 	bl	80191e8 <_ZSt9terminatev>

08018e72 <_ZNSaIcEC1Ev>:
 8018e72:	4770      	bx	lr

08018e74 <_ZNSaIcED1Ev>:
 8018e74:	4770      	bx	lr

08018e76 <_ZSt17__throw_bad_allocv>:
 8018e76:	b508      	push	{r3, lr}
 8018e78:	f000 f9c4 	bl	8019204 <abort>

08018e7c <_ZSt19__throw_logic_errorPKc>:
 8018e7c:	b508      	push	{r3, lr}
 8018e7e:	f000 f9c1 	bl	8019204 <abort>

08018e82 <_ZSt20__throw_length_errorPKc>:
 8018e82:	b508      	push	{r3, lr}
 8018e84:	f000 f9be 	bl	8019204 <abort>

08018e88 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8018e88:	b10a      	cbz	r2, 8018e8e <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8018e8a:	f000 ba05 	b.w	8019298 <memcpy>
 8018e8e:	4770      	bx	lr

08018e90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8018e90:	b508      	push	{r3, lr}
 8018e92:	680b      	ldr	r3, [r1, #0]
 8018e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018e98:	d302      	bcc.n	8018ea0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8018e9a:	480d      	ldr	r0, [pc, #52]	; (8018ed0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8018e9c:	f7ff fff1 	bl	8018e82 <_ZSt20__throw_length_errorPKc>
 8018ea0:	4293      	cmp	r3, r2
 8018ea2:	d90b      	bls.n	8018ebc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8018ea4:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8018ea8:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8018eac:	d206      	bcs.n	8018ebc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8018eae:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8018eb2:	bf2a      	itet	cs
 8018eb4:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8018eb8:	6008      	strcc	r0, [r1, #0]
 8018eba:	600b      	strcs	r3, [r1, #0]
 8018ebc:	6808      	ldr	r0, [r1, #0]
 8018ebe:	3001      	adds	r0, #1
 8018ec0:	d501      	bpl.n	8018ec6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8018ec2:	f7ff ffd8 	bl	8018e76 <_ZSt17__throw_bad_allocv>
 8018ec6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018eca:	f7ff bfbe 	b.w	8018e4a <_Znwj>
 8018ece:	bf00      	nop
 8018ed0:	0801e0f2 	.word	0x0801e0f2

08018ed4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8018ed4:	f850 3b08 	ldr.w	r3, [r0], #8
 8018ed8:	4283      	cmp	r3, r0
 8018eda:	d002      	beq.n	8018ee2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8018edc:	4618      	mov	r0, r3
 8018ede:	f7ff bfa1 	b.w	8018e24 <_ZdlPv>
 8018ee2:	4770      	bx	lr

08018ee4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8018ee4:	6840      	ldr	r0, [r0, #4]
 8018ee6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8018eea:	3901      	subs	r1, #1
 8018eec:	1a09      	subs	r1, r1, r0
 8018eee:	4291      	cmp	r1, r2
 8018ef0:	b508      	push	{r3, lr}
 8018ef2:	d202      	bcs.n	8018efa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8018ef4:	4618      	mov	r0, r3
 8018ef6:	f7ff ffc4 	bl	8018e82 <_ZSt20__throw_length_errorPKc>
 8018efa:	bd08      	pop	{r3, pc}

08018efc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8018efc:	2a01      	cmp	r2, #1
 8018efe:	b510      	push	{r4, lr}
 8018f00:	d102      	bne.n	8018f08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8018f02:	780a      	ldrb	r2, [r1, #0]
 8018f04:	7002      	strb	r2, [r0, #0]
 8018f06:	bd10      	pop	{r4, pc}
 8018f08:	f7ff ffbe 	bl	8018e88 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8018f0c:	e7fb      	b.n	8018f06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08018f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8018f0e:	2a01      	cmp	r2, #1
 8018f10:	b430      	push	{r4, r5}
 8018f12:	d103      	bne.n	8018f1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8018f14:	780b      	ldrb	r3, [r1, #0]
 8018f16:	7003      	strb	r3, [r0, #0]
 8018f18:	bc30      	pop	{r4, r5}
 8018f1a:	4770      	bx	lr
 8018f1c:	2a00      	cmp	r2, #0
 8018f1e:	d0fb      	beq.n	8018f18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8018f20:	bc30      	pop	{r4, r5}
 8018f22:	f000 b9c7 	b.w	80192b4 <memmove>

08018f26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8018f26:	460b      	mov	r3, r1
 8018f28:	2b01      	cmp	r3, #1
 8018f2a:	b410      	push	{r4}
 8018f2c:	4611      	mov	r1, r2
 8018f2e:	4604      	mov	r4, r0
 8018f30:	d103      	bne.n	8018f3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8018f32:	7022      	strb	r2, [r4, #0]
 8018f34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018f38:	4770      	bx	lr
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	d0fa      	beq.n	8018f34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8018f3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018f42:	461a      	mov	r2, r3
 8018f44:	f000 b9d0 	b.w	80192e8 <memset>

08018f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8018f48:	b508      	push	{r3, lr}
 8018f4a:	1a52      	subs	r2, r2, r1
 8018f4c:	f7ff ffd6 	bl	8018efc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8018f50:	bd08      	pop	{r3, pc}

08018f52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8018f52:	b508      	push	{r3, lr}
 8018f54:	1a52      	subs	r2, r2, r1
 8018f56:	f7ff ffd1 	bl	8018efc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8018f5a:	bd08      	pop	{r3, pc}

08018f5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8018f5c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8018f60:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8018f62:	461f      	mov	r7, r3
 8018f64:	6843      	ldr	r3, [r0, #4]
 8018f66:	eb01 0802 	add.w	r8, r1, r2
 8018f6a:	1ab2      	subs	r2, r6, r2
 8018f6c:	441a      	add	r2, r3
 8018f6e:	eba3 0908 	sub.w	r9, r3, r8
 8018f72:	4603      	mov	r3, r0
 8018f74:	9201      	str	r2, [sp, #4]
 8018f76:	f853 2b08 	ldr.w	r2, [r3], #8
 8018f7a:	429a      	cmp	r2, r3
 8018f7c:	bf18      	it	ne
 8018f7e:	6882      	ldrne	r2, [r0, #8]
 8018f80:	460d      	mov	r5, r1
 8018f82:	bf08      	it	eq
 8018f84:	220f      	moveq	r2, #15
 8018f86:	a901      	add	r1, sp, #4
 8018f88:	4604      	mov	r4, r0
 8018f8a:	f7ff ff81 	bl	8018e90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8018f8e:	4682      	mov	sl, r0
 8018f90:	b11d      	cbz	r5, 8018f9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8018f92:	6821      	ldr	r1, [r4, #0]
 8018f94:	462a      	mov	r2, r5
 8018f96:	f7ff ffb1 	bl	8018efc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8018f9a:	b137      	cbz	r7, 8018faa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8018f9c:	b12e      	cbz	r6, 8018faa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8018f9e:	4632      	mov	r2, r6
 8018fa0:	4639      	mov	r1, r7
 8018fa2:	eb0a 0005 	add.w	r0, sl, r5
 8018fa6:	f7ff ffa9 	bl	8018efc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8018faa:	f1b9 0f00 	cmp.w	r9, #0
 8018fae:	d007      	beq.n	8018fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8018fb0:	6821      	ldr	r1, [r4, #0]
 8018fb2:	4435      	add	r5, r6
 8018fb4:	464a      	mov	r2, r9
 8018fb6:	4441      	add	r1, r8
 8018fb8:	eb0a 0005 	add.w	r0, sl, r5
 8018fbc:	f7ff ff9e 	bl	8018efc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8018fc0:	4620      	mov	r0, r4
 8018fc2:	f7ff ff87 	bl	8018ed4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8018fc6:	9b01      	ldr	r3, [sp, #4]
 8018fc8:	f8c4 a000 	str.w	sl, [r4]
 8018fcc:	60a3      	str	r3, [r4, #8]
 8018fce:	b002      	add	sp, #8
 8018fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08018fd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8018fd4:	f100 0208 	add.w	r2, r0, #8
 8018fd8:	6002      	str	r2, [r0, #0]
 8018fda:	2200      	movs	r2, #0
 8018fdc:	6042      	str	r2, [r0, #4]
 8018fde:	7202      	strb	r2, [r0, #8]
 8018fe0:	4770      	bx	lr

08018fe2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8018fe2:	b510      	push	{r4, lr}
 8018fe4:	4604      	mov	r4, r0
 8018fe6:	f7ff ff75 	bl	8018ed4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8018fea:	4620      	mov	r0, r4
 8018fec:	bd10      	pop	{r4, pc}

08018fee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8018fee:	6800      	ldr	r0, [r0, #0]
 8018ff0:	4408      	add	r0, r1
 8018ff2:	4770      	bx	lr

08018ff4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 8018ff4:	4603      	mov	r3, r0
 8018ff6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018ff8:	f853 2b08 	ldr.w	r2, [r3], #8
 8018ffc:	6846      	ldr	r6, [r0, #4]
 8018ffe:	429a      	cmp	r2, r3
 8019000:	bf18      	it	ne
 8019002:	6883      	ldrne	r3, [r0, #8]
 8019004:	f106 0501 	add.w	r5, r6, #1
 8019008:	bf08      	it	eq
 801900a:	230f      	moveq	r3, #15
 801900c:	429d      	cmp	r5, r3
 801900e:	4604      	mov	r4, r0
 8019010:	460f      	mov	r7, r1
 8019012:	d906      	bls.n	8019022 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2e>
 8019014:	2301      	movs	r3, #1
 8019016:	9300      	str	r3, [sp, #0]
 8019018:	2300      	movs	r3, #0
 801901a:	461a      	mov	r2, r3
 801901c:	4631      	mov	r1, r6
 801901e:	f7ff ff9d 	bl	8018f5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8019022:	6823      	ldr	r3, [r4, #0]
 8019024:	559f      	strb	r7, [r3, r6]
 8019026:	6823      	ldr	r3, [r4, #0]
 8019028:	6065      	str	r5, [r4, #4]
 801902a:	2200      	movs	r2, #0
 801902c:	555a      	strb	r2, [r3, r5]
 801902e:	b003      	add	sp, #12
 8019030:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08019034 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 8019034:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019038:	4616      	mov	r6, r2
 801903a:	461d      	mov	r5, r3
 801903c:	4604      	mov	r4, r0
 801903e:	4b1c      	ldr	r3, [pc, #112]	; (80190b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x7c>)
 8019040:	462a      	mov	r2, r5
 8019042:	460f      	mov	r7, r1
 8019044:	4631      	mov	r1, r6
 8019046:	f7ff ff4d 	bl	8018ee4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 801904a:	4623      	mov	r3, r4
 801904c:	6862      	ldr	r2, [r4, #4]
 801904e:	f853 0b08 	ldr.w	r0, [r3], #8
 8019052:	4298      	cmp	r0, r3
 8019054:	bf18      	it	ne
 8019056:	68a3      	ldrne	r3, [r4, #8]
 8019058:	eba5 0806 	sub.w	r8, r5, r6
 801905c:	4490      	add	r8, r2
 801905e:	bf08      	it	eq
 8019060:	230f      	moveq	r3, #15
 8019062:	4543      	cmp	r3, r8
 8019064:	d31b      	bcc.n	801909e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x6a>
 8019066:	19f3      	adds	r3, r6, r7
 8019068:	1ad2      	subs	r2, r2, r3
 801906a:	d006      	beq.n	801907a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 801906c:	42ae      	cmp	r6, r5
 801906e:	d004      	beq.n	801907a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 8019070:	4438      	add	r0, r7
 8019072:	1981      	adds	r1, r0, r6
 8019074:	4428      	add	r0, r5
 8019076:	f7ff ff4a 	bl	8018f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801907a:	b135      	cbz	r5, 801908a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x56>
 801907c:	6820      	ldr	r0, [r4, #0]
 801907e:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8019082:	4629      	mov	r1, r5
 8019084:	4438      	add	r0, r7
 8019086:	f7ff ff4e 	bl	8018f26 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 801908a:	6823      	ldr	r3, [r4, #0]
 801908c:	f8c4 8004 	str.w	r8, [r4, #4]
 8019090:	2200      	movs	r2, #0
 8019092:	4620      	mov	r0, r4
 8019094:	f803 2008 	strb.w	r2, [r3, r8]
 8019098:	b002      	add	sp, #8
 801909a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801909e:	9500      	str	r5, [sp, #0]
 80190a0:	2300      	movs	r3, #0
 80190a2:	4632      	mov	r2, r6
 80190a4:	4639      	mov	r1, r7
 80190a6:	4620      	mov	r0, r4
 80190a8:	f7ff ff58 	bl	8018f5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80190ac:	e7e5      	b.n	801907a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 80190ae:	bf00      	nop
 80190b0:	0801e10a 	.word	0x0801e10a

080190b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 80190b4:	b507      	push	{r0, r1, r2, lr}
 80190b6:	9200      	str	r2, [sp, #0]
 80190b8:	460b      	mov	r3, r1
 80190ba:	2200      	movs	r2, #0
 80190bc:	6841      	ldr	r1, [r0, #4]
 80190be:	f7ff ffb9 	bl	8019034 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 80190c2:	b003      	add	sp, #12
 80190c4:	f85d fb04 	ldr.w	pc, [sp], #4

080190c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEjc>:
 80190c8:	b510      	push	{r4, lr}
 80190ca:	6844      	ldr	r4, [r0, #4]
 80190cc:	428c      	cmp	r4, r1
 80190ce:	4603      	mov	r3, r0
 80190d0:	d203      	bcs.n	80190da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEjc+0x12>
 80190d2:	1b09      	subs	r1, r1, r4
 80190d4:	f7ff ffee 	bl	80190b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
 80190d8:	bd10      	pop	{r4, pc}
 80190da:	bf81      	itttt	hi
 80190dc:	6803      	ldrhi	r3, [r0, #0]
 80190de:	6041      	strhi	r1, [r0, #4]
 80190e0:	2200      	movhi	r2, #0
 80190e2:	545a      	strbhi	r2, [r3, r1]
 80190e4:	e7f8      	b.n	80190d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEjc+0x10>

080190e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEj>:
 80190e6:	b508      	push	{r3, lr}
 80190e8:	2200      	movs	r2, #0
 80190ea:	f7ff ffed 	bl	80190c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6resizeEjc>
 80190ee:	bd08      	pop	{r3, pc}

080190f0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80190f0:	6800      	ldr	r0, [r0, #0]
 80190f2:	4770      	bx	lr

080190f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 80190f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80190f6:	4604      	mov	r4, r0
 80190f8:	4616      	mov	r6, r2
 80190fa:	460d      	mov	r5, r1
 80190fc:	b919      	cbnz	r1, 8019106 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 80190fe:	b112      	cbz	r2, 8019106 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8019100:	480d      	ldr	r0, [pc, #52]	; (8019138 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 8019102:	f7ff febb 	bl	8018e7c <_ZSt19__throw_logic_errorPKc>
 8019106:	1b73      	subs	r3, r6, r5
 8019108:	2b0f      	cmp	r3, #15
 801910a:	9301      	str	r3, [sp, #4]
 801910c:	d907      	bls.n	801911e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 801910e:	2200      	movs	r2, #0
 8019110:	a901      	add	r1, sp, #4
 8019112:	4620      	mov	r0, r4
 8019114:	f7ff febc 	bl	8018e90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8019118:	9b01      	ldr	r3, [sp, #4]
 801911a:	6020      	str	r0, [r4, #0]
 801911c:	60a3      	str	r3, [r4, #8]
 801911e:	4632      	mov	r2, r6
 8019120:	4629      	mov	r1, r5
 8019122:	6820      	ldr	r0, [r4, #0]
 8019124:	f7ff ff10 	bl	8018f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8019128:	9b01      	ldr	r3, [sp, #4]
 801912a:	6822      	ldr	r2, [r4, #0]
 801912c:	6063      	str	r3, [r4, #4]
 801912e:	2100      	movs	r1, #0
 8019130:	54d1      	strb	r1, [r2, r3]
 8019132:	b002      	add	sp, #8
 8019134:	bd70      	pop	{r4, r5, r6, pc}
 8019136:	bf00      	nop
 8019138:	0801e127 	.word	0x0801e127

0801913c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 801913c:	b538      	push	{r3, r4, r5, lr}
 801913e:	f100 0308 	add.w	r3, r0, #8
 8019142:	6003      	str	r3, [r0, #0]
 8019144:	e9d1 5200 	ldrd	r5, r2, [r1]
 8019148:	4604      	mov	r4, r0
 801914a:	f04f 0300 	mov.w	r3, #0
 801914e:	442a      	add	r2, r5
 8019150:	4629      	mov	r1, r5
 8019152:	f7ff ffcf 	bl	80190f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8019156:	4620      	mov	r0, r4
 8019158:	bd38      	pop	{r3, r4, r5, pc}
	...

0801915c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 801915c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801915e:	4604      	mov	r4, r0
 8019160:	4616      	mov	r6, r2
 8019162:	460d      	mov	r5, r1
 8019164:	b919      	cbnz	r1, 801916e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8019166:	b112      	cbz	r2, 801916e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8019168:	480d      	ldr	r0, [pc, #52]	; (80191a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 801916a:	f7ff fe87 	bl	8018e7c <_ZSt19__throw_logic_errorPKc>
 801916e:	1b73      	subs	r3, r6, r5
 8019170:	2b0f      	cmp	r3, #15
 8019172:	9301      	str	r3, [sp, #4]
 8019174:	d907      	bls.n	8019186 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8019176:	2200      	movs	r2, #0
 8019178:	a901      	add	r1, sp, #4
 801917a:	4620      	mov	r0, r4
 801917c:	f7ff fe88 	bl	8018e90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8019180:	9b01      	ldr	r3, [sp, #4]
 8019182:	6020      	str	r0, [r4, #0]
 8019184:	60a3      	str	r3, [r4, #8]
 8019186:	4632      	mov	r2, r6
 8019188:	4629      	mov	r1, r5
 801918a:	6820      	ldr	r0, [r4, #0]
 801918c:	f7ff fee1 	bl	8018f52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8019190:	9b01      	ldr	r3, [sp, #4]
 8019192:	6822      	ldr	r2, [r4, #0]
 8019194:	6063      	str	r3, [r4, #4]
 8019196:	2100      	movs	r1, #0
 8019198:	54d1      	strb	r1, [r2, r3]
 801919a:	b002      	add	sp, #8
 801919c:	bd70      	pop	{r4, r5, r6, pc}
 801919e:	bf00      	nop
 80191a0:	0801e127 	.word	0x0801e127

080191a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80191a4:	b538      	push	{r3, r4, r5, lr}
 80191a6:	f100 0308 	add.w	r3, r0, #8
 80191aa:	4604      	mov	r4, r0
 80191ac:	6003      	str	r3, [r0, #0]
 80191ae:	460d      	mov	r5, r1
 80191b0:	b159      	cbz	r1, 80191ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 80191b2:	4608      	mov	r0, r1
 80191b4:	f7e7 f866 	bl	8000284 <strlen>
 80191b8:	182a      	adds	r2, r5, r0
 80191ba:	4620      	mov	r0, r4
 80191bc:	f04f 0300 	mov.w	r3, #0
 80191c0:	4629      	mov	r1, r5
 80191c2:	f7ff ffcb 	bl	801915c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80191c6:	4620      	mov	r0, r4
 80191c8:	bd38      	pop	{r3, r4, r5, pc}
 80191ca:	f04f 32ff 	mov.w	r2, #4294967295
 80191ce:	e7f4      	b.n	80191ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080191d0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80191d0:	b508      	push	{r3, lr}
 80191d2:	4780      	blx	r0
 80191d4:	f000 f816 	bl	8019204 <abort>

080191d8 <_ZSt13get_terminatev>:
 80191d8:	4b02      	ldr	r3, [pc, #8]	; (80191e4 <_ZSt13get_terminatev+0xc>)
 80191da:	6818      	ldr	r0, [r3, #0]
 80191dc:	f3bf 8f5b 	dmb	ish
 80191e0:	4770      	bx	lr
 80191e2:	bf00      	nop
 80191e4:	20000070 	.word	0x20000070

080191e8 <_ZSt9terminatev>:
 80191e8:	b508      	push	{r3, lr}
 80191ea:	f7ff fff5 	bl	80191d8 <_ZSt13get_terminatev>
 80191ee:	f7ff ffef 	bl	80191d0 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080191f4 <_ZSt15get_new_handlerv>:
 80191f4:	4b02      	ldr	r3, [pc, #8]	; (8019200 <_ZSt15get_new_handlerv+0xc>)
 80191f6:	6818      	ldr	r0, [r3, #0]
 80191f8:	f3bf 8f5b 	dmb	ish
 80191fc:	4770      	bx	lr
 80191fe:	bf00      	nop
 8019200:	20000678 	.word	0x20000678

08019204 <abort>:
 8019204:	b508      	push	{r3, lr}
 8019206:	2006      	movs	r0, #6
 8019208:	f000 fa26 	bl	8019658 <raise>
 801920c:	2001      	movs	r0, #1
 801920e:	f7eb fe9d 	bl	8004f4c <_exit>
	...

08019214 <__libc_init_array>:
 8019214:	b570      	push	{r4, r5, r6, lr}
 8019216:	4d0d      	ldr	r5, [pc, #52]	; (801924c <__libc_init_array+0x38>)
 8019218:	4c0d      	ldr	r4, [pc, #52]	; (8019250 <__libc_init_array+0x3c>)
 801921a:	1b64      	subs	r4, r4, r5
 801921c:	10a4      	asrs	r4, r4, #2
 801921e:	2600      	movs	r6, #0
 8019220:	42a6      	cmp	r6, r4
 8019222:	d109      	bne.n	8019238 <__libc_init_array+0x24>
 8019224:	4d0b      	ldr	r5, [pc, #44]	; (8019254 <__libc_init_array+0x40>)
 8019226:	4c0c      	ldr	r4, [pc, #48]	; (8019258 <__libc_init_array+0x44>)
 8019228:	f001 fa90 	bl	801a74c <_init>
 801922c:	1b64      	subs	r4, r4, r5
 801922e:	10a4      	asrs	r4, r4, #2
 8019230:	2600      	movs	r6, #0
 8019232:	42a6      	cmp	r6, r4
 8019234:	d105      	bne.n	8019242 <__libc_init_array+0x2e>
 8019236:	bd70      	pop	{r4, r5, r6, pc}
 8019238:	f855 3b04 	ldr.w	r3, [r5], #4
 801923c:	4798      	blx	r3
 801923e:	3601      	adds	r6, #1
 8019240:	e7ee      	b.n	8019220 <__libc_init_array+0xc>
 8019242:	f855 3b04 	ldr.w	r3, [r5], #4
 8019246:	4798      	blx	r3
 8019248:	3601      	adds	r6, #1
 801924a:	e7f2      	b.n	8019232 <__libc_init_array+0x1e>
 801924c:	0801e2a8 	.word	0x0801e2a8
 8019250:	0801e2a8 	.word	0x0801e2a8
 8019254:	0801e2a8 	.word	0x0801e2a8
 8019258:	0801e2b0 	.word	0x0801e2b0

0801925c <malloc>:
 801925c:	4b02      	ldr	r3, [pc, #8]	; (8019268 <malloc+0xc>)
 801925e:	4601      	mov	r1, r0
 8019260:	6818      	ldr	r0, [r3, #0]
 8019262:	f000 b899 	b.w	8019398 <_malloc_r>
 8019266:	bf00      	nop
 8019268:	20000074 	.word	0x20000074

0801926c <free>:
 801926c:	4b02      	ldr	r3, [pc, #8]	; (8019278 <free+0xc>)
 801926e:	4601      	mov	r1, r0
 8019270:	6818      	ldr	r0, [r3, #0]
 8019272:	f000 b841 	b.w	80192f8 <_free_r>
 8019276:	bf00      	nop
 8019278:	20000074 	.word	0x20000074

0801927c <memcmp>:
 801927c:	b530      	push	{r4, r5, lr}
 801927e:	3901      	subs	r1, #1
 8019280:	2400      	movs	r4, #0
 8019282:	42a2      	cmp	r2, r4
 8019284:	d101      	bne.n	801928a <memcmp+0xe>
 8019286:	2000      	movs	r0, #0
 8019288:	e005      	b.n	8019296 <memcmp+0x1a>
 801928a:	5d03      	ldrb	r3, [r0, r4]
 801928c:	3401      	adds	r4, #1
 801928e:	5d0d      	ldrb	r5, [r1, r4]
 8019290:	42ab      	cmp	r3, r5
 8019292:	d0f6      	beq.n	8019282 <memcmp+0x6>
 8019294:	1b58      	subs	r0, r3, r5
 8019296:	bd30      	pop	{r4, r5, pc}

08019298 <memcpy>:
 8019298:	440a      	add	r2, r1
 801929a:	4291      	cmp	r1, r2
 801929c:	f100 33ff 	add.w	r3, r0, #4294967295
 80192a0:	d100      	bne.n	80192a4 <memcpy+0xc>
 80192a2:	4770      	bx	lr
 80192a4:	b510      	push	{r4, lr}
 80192a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80192aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80192ae:	4291      	cmp	r1, r2
 80192b0:	d1f9      	bne.n	80192a6 <memcpy+0xe>
 80192b2:	bd10      	pop	{r4, pc}

080192b4 <memmove>:
 80192b4:	4288      	cmp	r0, r1
 80192b6:	b510      	push	{r4, lr}
 80192b8:	eb01 0402 	add.w	r4, r1, r2
 80192bc:	d902      	bls.n	80192c4 <memmove+0x10>
 80192be:	4284      	cmp	r4, r0
 80192c0:	4623      	mov	r3, r4
 80192c2:	d807      	bhi.n	80192d4 <memmove+0x20>
 80192c4:	1e43      	subs	r3, r0, #1
 80192c6:	42a1      	cmp	r1, r4
 80192c8:	d008      	beq.n	80192dc <memmove+0x28>
 80192ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80192ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80192d2:	e7f8      	b.n	80192c6 <memmove+0x12>
 80192d4:	4402      	add	r2, r0
 80192d6:	4601      	mov	r1, r0
 80192d8:	428a      	cmp	r2, r1
 80192da:	d100      	bne.n	80192de <memmove+0x2a>
 80192dc:	bd10      	pop	{r4, pc}
 80192de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80192e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80192e6:	e7f7      	b.n	80192d8 <memmove+0x24>

080192e8 <memset>:
 80192e8:	4402      	add	r2, r0
 80192ea:	4603      	mov	r3, r0
 80192ec:	4293      	cmp	r3, r2
 80192ee:	d100      	bne.n	80192f2 <memset+0xa>
 80192f0:	4770      	bx	lr
 80192f2:	f803 1b01 	strb.w	r1, [r3], #1
 80192f6:	e7f9      	b.n	80192ec <memset+0x4>

080192f8 <_free_r>:
 80192f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80192fa:	2900      	cmp	r1, #0
 80192fc:	d048      	beq.n	8019390 <_free_r+0x98>
 80192fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019302:	9001      	str	r0, [sp, #4]
 8019304:	2b00      	cmp	r3, #0
 8019306:	f1a1 0404 	sub.w	r4, r1, #4
 801930a:	bfb8      	it	lt
 801930c:	18e4      	addlt	r4, r4, r3
 801930e:	f000 fced 	bl	8019cec <__malloc_lock>
 8019312:	4a20      	ldr	r2, [pc, #128]	; (8019394 <_free_r+0x9c>)
 8019314:	9801      	ldr	r0, [sp, #4]
 8019316:	6813      	ldr	r3, [r2, #0]
 8019318:	4615      	mov	r5, r2
 801931a:	b933      	cbnz	r3, 801932a <_free_r+0x32>
 801931c:	6063      	str	r3, [r4, #4]
 801931e:	6014      	str	r4, [r2, #0]
 8019320:	b003      	add	sp, #12
 8019322:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019326:	f000 bce7 	b.w	8019cf8 <__malloc_unlock>
 801932a:	42a3      	cmp	r3, r4
 801932c:	d90b      	bls.n	8019346 <_free_r+0x4e>
 801932e:	6821      	ldr	r1, [r4, #0]
 8019330:	1862      	adds	r2, r4, r1
 8019332:	4293      	cmp	r3, r2
 8019334:	bf04      	itt	eq
 8019336:	681a      	ldreq	r2, [r3, #0]
 8019338:	685b      	ldreq	r3, [r3, #4]
 801933a:	6063      	str	r3, [r4, #4]
 801933c:	bf04      	itt	eq
 801933e:	1852      	addeq	r2, r2, r1
 8019340:	6022      	streq	r2, [r4, #0]
 8019342:	602c      	str	r4, [r5, #0]
 8019344:	e7ec      	b.n	8019320 <_free_r+0x28>
 8019346:	461a      	mov	r2, r3
 8019348:	685b      	ldr	r3, [r3, #4]
 801934a:	b10b      	cbz	r3, 8019350 <_free_r+0x58>
 801934c:	42a3      	cmp	r3, r4
 801934e:	d9fa      	bls.n	8019346 <_free_r+0x4e>
 8019350:	6811      	ldr	r1, [r2, #0]
 8019352:	1855      	adds	r5, r2, r1
 8019354:	42a5      	cmp	r5, r4
 8019356:	d10b      	bne.n	8019370 <_free_r+0x78>
 8019358:	6824      	ldr	r4, [r4, #0]
 801935a:	4421      	add	r1, r4
 801935c:	1854      	adds	r4, r2, r1
 801935e:	42a3      	cmp	r3, r4
 8019360:	6011      	str	r1, [r2, #0]
 8019362:	d1dd      	bne.n	8019320 <_free_r+0x28>
 8019364:	681c      	ldr	r4, [r3, #0]
 8019366:	685b      	ldr	r3, [r3, #4]
 8019368:	6053      	str	r3, [r2, #4]
 801936a:	4421      	add	r1, r4
 801936c:	6011      	str	r1, [r2, #0]
 801936e:	e7d7      	b.n	8019320 <_free_r+0x28>
 8019370:	d902      	bls.n	8019378 <_free_r+0x80>
 8019372:	230c      	movs	r3, #12
 8019374:	6003      	str	r3, [r0, #0]
 8019376:	e7d3      	b.n	8019320 <_free_r+0x28>
 8019378:	6825      	ldr	r5, [r4, #0]
 801937a:	1961      	adds	r1, r4, r5
 801937c:	428b      	cmp	r3, r1
 801937e:	bf04      	itt	eq
 8019380:	6819      	ldreq	r1, [r3, #0]
 8019382:	685b      	ldreq	r3, [r3, #4]
 8019384:	6063      	str	r3, [r4, #4]
 8019386:	bf04      	itt	eq
 8019388:	1949      	addeq	r1, r1, r5
 801938a:	6021      	streq	r1, [r4, #0]
 801938c:	6054      	str	r4, [r2, #4]
 801938e:	e7c7      	b.n	8019320 <_free_r+0x28>
 8019390:	b003      	add	sp, #12
 8019392:	bd30      	pop	{r4, r5, pc}
 8019394:	2000067c 	.word	0x2000067c

08019398 <_malloc_r>:
 8019398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801939a:	1ccd      	adds	r5, r1, #3
 801939c:	f025 0503 	bic.w	r5, r5, #3
 80193a0:	3508      	adds	r5, #8
 80193a2:	2d0c      	cmp	r5, #12
 80193a4:	bf38      	it	cc
 80193a6:	250c      	movcc	r5, #12
 80193a8:	2d00      	cmp	r5, #0
 80193aa:	4606      	mov	r6, r0
 80193ac:	db01      	blt.n	80193b2 <_malloc_r+0x1a>
 80193ae:	42a9      	cmp	r1, r5
 80193b0:	d903      	bls.n	80193ba <_malloc_r+0x22>
 80193b2:	230c      	movs	r3, #12
 80193b4:	6033      	str	r3, [r6, #0]
 80193b6:	2000      	movs	r0, #0
 80193b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193ba:	f000 fc97 	bl	8019cec <__malloc_lock>
 80193be:	4921      	ldr	r1, [pc, #132]	; (8019444 <_malloc_r+0xac>)
 80193c0:	680a      	ldr	r2, [r1, #0]
 80193c2:	4614      	mov	r4, r2
 80193c4:	b99c      	cbnz	r4, 80193ee <_malloc_r+0x56>
 80193c6:	4f20      	ldr	r7, [pc, #128]	; (8019448 <_malloc_r+0xb0>)
 80193c8:	683b      	ldr	r3, [r7, #0]
 80193ca:	b923      	cbnz	r3, 80193d6 <_malloc_r+0x3e>
 80193cc:	4621      	mov	r1, r4
 80193ce:	4630      	mov	r0, r6
 80193d0:	f000 f90a 	bl	80195e8 <_sbrk_r>
 80193d4:	6038      	str	r0, [r7, #0]
 80193d6:	4629      	mov	r1, r5
 80193d8:	4630      	mov	r0, r6
 80193da:	f000 f905 	bl	80195e8 <_sbrk_r>
 80193de:	1c43      	adds	r3, r0, #1
 80193e0:	d123      	bne.n	801942a <_malloc_r+0x92>
 80193e2:	230c      	movs	r3, #12
 80193e4:	6033      	str	r3, [r6, #0]
 80193e6:	4630      	mov	r0, r6
 80193e8:	f000 fc86 	bl	8019cf8 <__malloc_unlock>
 80193ec:	e7e3      	b.n	80193b6 <_malloc_r+0x1e>
 80193ee:	6823      	ldr	r3, [r4, #0]
 80193f0:	1b5b      	subs	r3, r3, r5
 80193f2:	d417      	bmi.n	8019424 <_malloc_r+0x8c>
 80193f4:	2b0b      	cmp	r3, #11
 80193f6:	d903      	bls.n	8019400 <_malloc_r+0x68>
 80193f8:	6023      	str	r3, [r4, #0]
 80193fa:	441c      	add	r4, r3
 80193fc:	6025      	str	r5, [r4, #0]
 80193fe:	e004      	b.n	801940a <_malloc_r+0x72>
 8019400:	6863      	ldr	r3, [r4, #4]
 8019402:	42a2      	cmp	r2, r4
 8019404:	bf0c      	ite	eq
 8019406:	600b      	streq	r3, [r1, #0]
 8019408:	6053      	strne	r3, [r2, #4]
 801940a:	4630      	mov	r0, r6
 801940c:	f000 fc74 	bl	8019cf8 <__malloc_unlock>
 8019410:	f104 000b 	add.w	r0, r4, #11
 8019414:	1d23      	adds	r3, r4, #4
 8019416:	f020 0007 	bic.w	r0, r0, #7
 801941a:	1ac2      	subs	r2, r0, r3
 801941c:	d0cc      	beq.n	80193b8 <_malloc_r+0x20>
 801941e:	1a1b      	subs	r3, r3, r0
 8019420:	50a3      	str	r3, [r4, r2]
 8019422:	e7c9      	b.n	80193b8 <_malloc_r+0x20>
 8019424:	4622      	mov	r2, r4
 8019426:	6864      	ldr	r4, [r4, #4]
 8019428:	e7cc      	b.n	80193c4 <_malloc_r+0x2c>
 801942a:	1cc4      	adds	r4, r0, #3
 801942c:	f024 0403 	bic.w	r4, r4, #3
 8019430:	42a0      	cmp	r0, r4
 8019432:	d0e3      	beq.n	80193fc <_malloc_r+0x64>
 8019434:	1a21      	subs	r1, r4, r0
 8019436:	4630      	mov	r0, r6
 8019438:	f000 f8d6 	bl	80195e8 <_sbrk_r>
 801943c:	3001      	adds	r0, #1
 801943e:	d1dd      	bne.n	80193fc <_malloc_r+0x64>
 8019440:	e7cf      	b.n	80193e2 <_malloc_r+0x4a>
 8019442:	bf00      	nop
 8019444:	2000067c 	.word	0x2000067c
 8019448:	20000680 	.word	0x20000680

0801944c <iprintf>:
 801944c:	b40f      	push	{r0, r1, r2, r3}
 801944e:	4b0a      	ldr	r3, [pc, #40]	; (8019478 <iprintf+0x2c>)
 8019450:	b513      	push	{r0, r1, r4, lr}
 8019452:	681c      	ldr	r4, [r3, #0]
 8019454:	b124      	cbz	r4, 8019460 <iprintf+0x14>
 8019456:	69a3      	ldr	r3, [r4, #24]
 8019458:	b913      	cbnz	r3, 8019460 <iprintf+0x14>
 801945a:	4620      	mov	r0, r4
 801945c:	f000 fb30 	bl	8019ac0 <__sinit>
 8019460:	ab05      	add	r3, sp, #20
 8019462:	9a04      	ldr	r2, [sp, #16]
 8019464:	68a1      	ldr	r1, [r4, #8]
 8019466:	9301      	str	r3, [sp, #4]
 8019468:	4620      	mov	r0, r4
 801946a:	f000 fdd1 	bl	801a010 <_vfiprintf_r>
 801946e:	b002      	add	sp, #8
 8019470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019474:	b004      	add	sp, #16
 8019476:	4770      	bx	lr
 8019478:	20000074 	.word	0x20000074

0801947c <_puts_r>:
 801947c:	b570      	push	{r4, r5, r6, lr}
 801947e:	460e      	mov	r6, r1
 8019480:	4605      	mov	r5, r0
 8019482:	b118      	cbz	r0, 801948c <_puts_r+0x10>
 8019484:	6983      	ldr	r3, [r0, #24]
 8019486:	b90b      	cbnz	r3, 801948c <_puts_r+0x10>
 8019488:	f000 fb1a 	bl	8019ac0 <__sinit>
 801948c:	69ab      	ldr	r3, [r5, #24]
 801948e:	68ac      	ldr	r4, [r5, #8]
 8019490:	b913      	cbnz	r3, 8019498 <_puts_r+0x1c>
 8019492:	4628      	mov	r0, r5
 8019494:	f000 fb14 	bl	8019ac0 <__sinit>
 8019498:	4b2c      	ldr	r3, [pc, #176]	; (801954c <_puts_r+0xd0>)
 801949a:	429c      	cmp	r4, r3
 801949c:	d120      	bne.n	80194e0 <_puts_r+0x64>
 801949e:	686c      	ldr	r4, [r5, #4]
 80194a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80194a2:	07db      	lsls	r3, r3, #31
 80194a4:	d405      	bmi.n	80194b2 <_puts_r+0x36>
 80194a6:	89a3      	ldrh	r3, [r4, #12]
 80194a8:	0598      	lsls	r0, r3, #22
 80194aa:	d402      	bmi.n	80194b2 <_puts_r+0x36>
 80194ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80194ae:	f000 fbb7 	bl	8019c20 <__retarget_lock_acquire_recursive>
 80194b2:	89a3      	ldrh	r3, [r4, #12]
 80194b4:	0719      	lsls	r1, r3, #28
 80194b6:	d51d      	bpl.n	80194f4 <_puts_r+0x78>
 80194b8:	6923      	ldr	r3, [r4, #16]
 80194ba:	b1db      	cbz	r3, 80194f4 <_puts_r+0x78>
 80194bc:	3e01      	subs	r6, #1
 80194be:	68a3      	ldr	r3, [r4, #8]
 80194c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80194c4:	3b01      	subs	r3, #1
 80194c6:	60a3      	str	r3, [r4, #8]
 80194c8:	bb39      	cbnz	r1, 801951a <_puts_r+0x9e>
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	da38      	bge.n	8019540 <_puts_r+0xc4>
 80194ce:	4622      	mov	r2, r4
 80194d0:	210a      	movs	r1, #10
 80194d2:	4628      	mov	r0, r5
 80194d4:	f000 f8fc 	bl	80196d0 <__swbuf_r>
 80194d8:	3001      	adds	r0, #1
 80194da:	d011      	beq.n	8019500 <_puts_r+0x84>
 80194dc:	250a      	movs	r5, #10
 80194de:	e011      	b.n	8019504 <_puts_r+0x88>
 80194e0:	4b1b      	ldr	r3, [pc, #108]	; (8019550 <_puts_r+0xd4>)
 80194e2:	429c      	cmp	r4, r3
 80194e4:	d101      	bne.n	80194ea <_puts_r+0x6e>
 80194e6:	68ac      	ldr	r4, [r5, #8]
 80194e8:	e7da      	b.n	80194a0 <_puts_r+0x24>
 80194ea:	4b1a      	ldr	r3, [pc, #104]	; (8019554 <_puts_r+0xd8>)
 80194ec:	429c      	cmp	r4, r3
 80194ee:	bf08      	it	eq
 80194f0:	68ec      	ldreq	r4, [r5, #12]
 80194f2:	e7d5      	b.n	80194a0 <_puts_r+0x24>
 80194f4:	4621      	mov	r1, r4
 80194f6:	4628      	mov	r0, r5
 80194f8:	f000 f93c 	bl	8019774 <__swsetup_r>
 80194fc:	2800      	cmp	r0, #0
 80194fe:	d0dd      	beq.n	80194bc <_puts_r+0x40>
 8019500:	f04f 35ff 	mov.w	r5, #4294967295
 8019504:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019506:	07da      	lsls	r2, r3, #31
 8019508:	d405      	bmi.n	8019516 <_puts_r+0x9a>
 801950a:	89a3      	ldrh	r3, [r4, #12]
 801950c:	059b      	lsls	r3, r3, #22
 801950e:	d402      	bmi.n	8019516 <_puts_r+0x9a>
 8019510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019512:	f000 fb86 	bl	8019c22 <__retarget_lock_release_recursive>
 8019516:	4628      	mov	r0, r5
 8019518:	bd70      	pop	{r4, r5, r6, pc}
 801951a:	2b00      	cmp	r3, #0
 801951c:	da04      	bge.n	8019528 <_puts_r+0xac>
 801951e:	69a2      	ldr	r2, [r4, #24]
 8019520:	429a      	cmp	r2, r3
 8019522:	dc06      	bgt.n	8019532 <_puts_r+0xb6>
 8019524:	290a      	cmp	r1, #10
 8019526:	d004      	beq.n	8019532 <_puts_r+0xb6>
 8019528:	6823      	ldr	r3, [r4, #0]
 801952a:	1c5a      	adds	r2, r3, #1
 801952c:	6022      	str	r2, [r4, #0]
 801952e:	7019      	strb	r1, [r3, #0]
 8019530:	e7c5      	b.n	80194be <_puts_r+0x42>
 8019532:	4622      	mov	r2, r4
 8019534:	4628      	mov	r0, r5
 8019536:	f000 f8cb 	bl	80196d0 <__swbuf_r>
 801953a:	3001      	adds	r0, #1
 801953c:	d1bf      	bne.n	80194be <_puts_r+0x42>
 801953e:	e7df      	b.n	8019500 <_puts_r+0x84>
 8019540:	6823      	ldr	r3, [r4, #0]
 8019542:	250a      	movs	r5, #10
 8019544:	1c5a      	adds	r2, r3, #1
 8019546:	6022      	str	r2, [r4, #0]
 8019548:	701d      	strb	r5, [r3, #0]
 801954a:	e7db      	b.n	8019504 <_puts_r+0x88>
 801954c:	0801e22c 	.word	0x0801e22c
 8019550:	0801e24c 	.word	0x0801e24c
 8019554:	0801e20c 	.word	0x0801e20c

08019558 <puts>:
 8019558:	4b02      	ldr	r3, [pc, #8]	; (8019564 <puts+0xc>)
 801955a:	4601      	mov	r1, r0
 801955c:	6818      	ldr	r0, [r3, #0]
 801955e:	f7ff bf8d 	b.w	801947c <_puts_r>
 8019562:	bf00      	nop
 8019564:	20000074 	.word	0x20000074

08019568 <rand>:
 8019568:	4b17      	ldr	r3, [pc, #92]	; (80195c8 <rand+0x60>)
 801956a:	b510      	push	{r4, lr}
 801956c:	681c      	ldr	r4, [r3, #0]
 801956e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019570:	b9b3      	cbnz	r3, 80195a0 <rand+0x38>
 8019572:	2018      	movs	r0, #24
 8019574:	f7ff fe72 	bl	801925c <malloc>
 8019578:	63a0      	str	r0, [r4, #56]	; 0x38
 801957a:	b928      	cbnz	r0, 8019588 <rand+0x20>
 801957c:	4602      	mov	r2, r0
 801957e:	4b13      	ldr	r3, [pc, #76]	; (80195cc <rand+0x64>)
 8019580:	4813      	ldr	r0, [pc, #76]	; (80195d0 <rand+0x68>)
 8019582:	214e      	movs	r1, #78	; 0x4e
 8019584:	f000 f964 	bl	8019850 <__assert_func>
 8019588:	4a12      	ldr	r2, [pc, #72]	; (80195d4 <rand+0x6c>)
 801958a:	4b13      	ldr	r3, [pc, #76]	; (80195d8 <rand+0x70>)
 801958c:	e9c0 2300 	strd	r2, r3, [r0]
 8019590:	4b12      	ldr	r3, [pc, #72]	; (80195dc <rand+0x74>)
 8019592:	6083      	str	r3, [r0, #8]
 8019594:	230b      	movs	r3, #11
 8019596:	8183      	strh	r3, [r0, #12]
 8019598:	2201      	movs	r2, #1
 801959a:	2300      	movs	r3, #0
 801959c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80195a0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80195a2:	480f      	ldr	r0, [pc, #60]	; (80195e0 <rand+0x78>)
 80195a4:	690a      	ldr	r2, [r1, #16]
 80195a6:	694b      	ldr	r3, [r1, #20]
 80195a8:	4c0e      	ldr	r4, [pc, #56]	; (80195e4 <rand+0x7c>)
 80195aa:	4350      	muls	r0, r2
 80195ac:	fb04 0003 	mla	r0, r4, r3, r0
 80195b0:	fba2 3404 	umull	r3, r4, r2, r4
 80195b4:	1c5a      	adds	r2, r3, #1
 80195b6:	4404      	add	r4, r0
 80195b8:	f144 0000 	adc.w	r0, r4, #0
 80195bc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80195c0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80195c4:	bd10      	pop	{r4, pc}
 80195c6:	bf00      	nop
 80195c8:	20000074 	.word	0x20000074
 80195cc:	0801e158 	.word	0x0801e158
 80195d0:	0801e16f 	.word	0x0801e16f
 80195d4:	abcd330e 	.word	0xabcd330e
 80195d8:	e66d1234 	.word	0xe66d1234
 80195dc:	0005deec 	.word	0x0005deec
 80195e0:	5851f42d 	.word	0x5851f42d
 80195e4:	4c957f2d 	.word	0x4c957f2d

080195e8 <_sbrk_r>:
 80195e8:	b538      	push	{r3, r4, r5, lr}
 80195ea:	4d06      	ldr	r5, [pc, #24]	; (8019604 <_sbrk_r+0x1c>)
 80195ec:	2300      	movs	r3, #0
 80195ee:	4604      	mov	r4, r0
 80195f0:	4608      	mov	r0, r1
 80195f2:	602b      	str	r3, [r5, #0]
 80195f4:	f7eb fd22 	bl	800503c <_sbrk>
 80195f8:	1c43      	adds	r3, r0, #1
 80195fa:	d102      	bne.n	8019602 <_sbrk_r+0x1a>
 80195fc:	682b      	ldr	r3, [r5, #0]
 80195fe:	b103      	cbz	r3, 8019602 <_sbrk_r+0x1a>
 8019600:	6023      	str	r3, [r4, #0]
 8019602:	bd38      	pop	{r3, r4, r5, pc}
 8019604:	20006d44 	.word	0x20006d44

08019608 <_raise_r>:
 8019608:	291f      	cmp	r1, #31
 801960a:	b538      	push	{r3, r4, r5, lr}
 801960c:	4604      	mov	r4, r0
 801960e:	460d      	mov	r5, r1
 8019610:	d904      	bls.n	801961c <_raise_r+0x14>
 8019612:	2316      	movs	r3, #22
 8019614:	6003      	str	r3, [r0, #0]
 8019616:	f04f 30ff 	mov.w	r0, #4294967295
 801961a:	bd38      	pop	{r3, r4, r5, pc}
 801961c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801961e:	b112      	cbz	r2, 8019626 <_raise_r+0x1e>
 8019620:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019624:	b94b      	cbnz	r3, 801963a <_raise_r+0x32>
 8019626:	4620      	mov	r0, r4
 8019628:	f000 f830 	bl	801968c <_getpid_r>
 801962c:	462a      	mov	r2, r5
 801962e:	4601      	mov	r1, r0
 8019630:	4620      	mov	r0, r4
 8019632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019636:	f000 b817 	b.w	8019668 <_kill_r>
 801963a:	2b01      	cmp	r3, #1
 801963c:	d00a      	beq.n	8019654 <_raise_r+0x4c>
 801963e:	1c59      	adds	r1, r3, #1
 8019640:	d103      	bne.n	801964a <_raise_r+0x42>
 8019642:	2316      	movs	r3, #22
 8019644:	6003      	str	r3, [r0, #0]
 8019646:	2001      	movs	r0, #1
 8019648:	e7e7      	b.n	801961a <_raise_r+0x12>
 801964a:	2400      	movs	r4, #0
 801964c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019650:	4628      	mov	r0, r5
 8019652:	4798      	blx	r3
 8019654:	2000      	movs	r0, #0
 8019656:	e7e0      	b.n	801961a <_raise_r+0x12>

08019658 <raise>:
 8019658:	4b02      	ldr	r3, [pc, #8]	; (8019664 <raise+0xc>)
 801965a:	4601      	mov	r1, r0
 801965c:	6818      	ldr	r0, [r3, #0]
 801965e:	f7ff bfd3 	b.w	8019608 <_raise_r>
 8019662:	bf00      	nop
 8019664:	20000074 	.word	0x20000074

08019668 <_kill_r>:
 8019668:	b538      	push	{r3, r4, r5, lr}
 801966a:	4d07      	ldr	r5, [pc, #28]	; (8019688 <_kill_r+0x20>)
 801966c:	2300      	movs	r3, #0
 801966e:	4604      	mov	r4, r0
 8019670:	4608      	mov	r0, r1
 8019672:	4611      	mov	r1, r2
 8019674:	602b      	str	r3, [r5, #0]
 8019676:	f7eb fc57 	bl	8004f28 <_kill>
 801967a:	1c43      	adds	r3, r0, #1
 801967c:	d102      	bne.n	8019684 <_kill_r+0x1c>
 801967e:	682b      	ldr	r3, [r5, #0]
 8019680:	b103      	cbz	r3, 8019684 <_kill_r+0x1c>
 8019682:	6023      	str	r3, [r4, #0]
 8019684:	bd38      	pop	{r3, r4, r5, pc}
 8019686:	bf00      	nop
 8019688:	20006d44 	.word	0x20006d44

0801968c <_getpid_r>:
 801968c:	f7eb bc44 	b.w	8004f18 <_getpid>

08019690 <siprintf>:
 8019690:	b40e      	push	{r1, r2, r3}
 8019692:	b500      	push	{lr}
 8019694:	b09c      	sub	sp, #112	; 0x70
 8019696:	ab1d      	add	r3, sp, #116	; 0x74
 8019698:	9002      	str	r0, [sp, #8]
 801969a:	9006      	str	r0, [sp, #24]
 801969c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80196a0:	4809      	ldr	r0, [pc, #36]	; (80196c8 <siprintf+0x38>)
 80196a2:	9107      	str	r1, [sp, #28]
 80196a4:	9104      	str	r1, [sp, #16]
 80196a6:	4909      	ldr	r1, [pc, #36]	; (80196cc <siprintf+0x3c>)
 80196a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80196ac:	9105      	str	r1, [sp, #20]
 80196ae:	6800      	ldr	r0, [r0, #0]
 80196b0:	9301      	str	r3, [sp, #4]
 80196b2:	a902      	add	r1, sp, #8
 80196b4:	f000 fb82 	bl	8019dbc <_svfiprintf_r>
 80196b8:	9b02      	ldr	r3, [sp, #8]
 80196ba:	2200      	movs	r2, #0
 80196bc:	701a      	strb	r2, [r3, #0]
 80196be:	b01c      	add	sp, #112	; 0x70
 80196c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80196c4:	b003      	add	sp, #12
 80196c6:	4770      	bx	lr
 80196c8:	20000074 	.word	0x20000074
 80196cc:	ffff0208 	.word	0xffff0208

080196d0 <__swbuf_r>:
 80196d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196d2:	460e      	mov	r6, r1
 80196d4:	4614      	mov	r4, r2
 80196d6:	4605      	mov	r5, r0
 80196d8:	b118      	cbz	r0, 80196e2 <__swbuf_r+0x12>
 80196da:	6983      	ldr	r3, [r0, #24]
 80196dc:	b90b      	cbnz	r3, 80196e2 <__swbuf_r+0x12>
 80196de:	f000 f9ef 	bl	8019ac0 <__sinit>
 80196e2:	4b21      	ldr	r3, [pc, #132]	; (8019768 <__swbuf_r+0x98>)
 80196e4:	429c      	cmp	r4, r3
 80196e6:	d12b      	bne.n	8019740 <__swbuf_r+0x70>
 80196e8:	686c      	ldr	r4, [r5, #4]
 80196ea:	69a3      	ldr	r3, [r4, #24]
 80196ec:	60a3      	str	r3, [r4, #8]
 80196ee:	89a3      	ldrh	r3, [r4, #12]
 80196f0:	071a      	lsls	r2, r3, #28
 80196f2:	d52f      	bpl.n	8019754 <__swbuf_r+0x84>
 80196f4:	6923      	ldr	r3, [r4, #16]
 80196f6:	b36b      	cbz	r3, 8019754 <__swbuf_r+0x84>
 80196f8:	6923      	ldr	r3, [r4, #16]
 80196fa:	6820      	ldr	r0, [r4, #0]
 80196fc:	1ac0      	subs	r0, r0, r3
 80196fe:	6963      	ldr	r3, [r4, #20]
 8019700:	b2f6      	uxtb	r6, r6
 8019702:	4283      	cmp	r3, r0
 8019704:	4637      	mov	r7, r6
 8019706:	dc04      	bgt.n	8019712 <__swbuf_r+0x42>
 8019708:	4621      	mov	r1, r4
 801970a:	4628      	mov	r0, r5
 801970c:	f000 f944 	bl	8019998 <_fflush_r>
 8019710:	bb30      	cbnz	r0, 8019760 <__swbuf_r+0x90>
 8019712:	68a3      	ldr	r3, [r4, #8]
 8019714:	3b01      	subs	r3, #1
 8019716:	60a3      	str	r3, [r4, #8]
 8019718:	6823      	ldr	r3, [r4, #0]
 801971a:	1c5a      	adds	r2, r3, #1
 801971c:	6022      	str	r2, [r4, #0]
 801971e:	701e      	strb	r6, [r3, #0]
 8019720:	6963      	ldr	r3, [r4, #20]
 8019722:	3001      	adds	r0, #1
 8019724:	4283      	cmp	r3, r0
 8019726:	d004      	beq.n	8019732 <__swbuf_r+0x62>
 8019728:	89a3      	ldrh	r3, [r4, #12]
 801972a:	07db      	lsls	r3, r3, #31
 801972c:	d506      	bpl.n	801973c <__swbuf_r+0x6c>
 801972e:	2e0a      	cmp	r6, #10
 8019730:	d104      	bne.n	801973c <__swbuf_r+0x6c>
 8019732:	4621      	mov	r1, r4
 8019734:	4628      	mov	r0, r5
 8019736:	f000 f92f 	bl	8019998 <_fflush_r>
 801973a:	b988      	cbnz	r0, 8019760 <__swbuf_r+0x90>
 801973c:	4638      	mov	r0, r7
 801973e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019740:	4b0a      	ldr	r3, [pc, #40]	; (801976c <__swbuf_r+0x9c>)
 8019742:	429c      	cmp	r4, r3
 8019744:	d101      	bne.n	801974a <__swbuf_r+0x7a>
 8019746:	68ac      	ldr	r4, [r5, #8]
 8019748:	e7cf      	b.n	80196ea <__swbuf_r+0x1a>
 801974a:	4b09      	ldr	r3, [pc, #36]	; (8019770 <__swbuf_r+0xa0>)
 801974c:	429c      	cmp	r4, r3
 801974e:	bf08      	it	eq
 8019750:	68ec      	ldreq	r4, [r5, #12]
 8019752:	e7ca      	b.n	80196ea <__swbuf_r+0x1a>
 8019754:	4621      	mov	r1, r4
 8019756:	4628      	mov	r0, r5
 8019758:	f000 f80c 	bl	8019774 <__swsetup_r>
 801975c:	2800      	cmp	r0, #0
 801975e:	d0cb      	beq.n	80196f8 <__swbuf_r+0x28>
 8019760:	f04f 37ff 	mov.w	r7, #4294967295
 8019764:	e7ea      	b.n	801973c <__swbuf_r+0x6c>
 8019766:	bf00      	nop
 8019768:	0801e22c 	.word	0x0801e22c
 801976c:	0801e24c 	.word	0x0801e24c
 8019770:	0801e20c 	.word	0x0801e20c

08019774 <__swsetup_r>:
 8019774:	4b32      	ldr	r3, [pc, #200]	; (8019840 <__swsetup_r+0xcc>)
 8019776:	b570      	push	{r4, r5, r6, lr}
 8019778:	681d      	ldr	r5, [r3, #0]
 801977a:	4606      	mov	r6, r0
 801977c:	460c      	mov	r4, r1
 801977e:	b125      	cbz	r5, 801978a <__swsetup_r+0x16>
 8019780:	69ab      	ldr	r3, [r5, #24]
 8019782:	b913      	cbnz	r3, 801978a <__swsetup_r+0x16>
 8019784:	4628      	mov	r0, r5
 8019786:	f000 f99b 	bl	8019ac0 <__sinit>
 801978a:	4b2e      	ldr	r3, [pc, #184]	; (8019844 <__swsetup_r+0xd0>)
 801978c:	429c      	cmp	r4, r3
 801978e:	d10f      	bne.n	80197b0 <__swsetup_r+0x3c>
 8019790:	686c      	ldr	r4, [r5, #4]
 8019792:	89a3      	ldrh	r3, [r4, #12]
 8019794:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019798:	0719      	lsls	r1, r3, #28
 801979a:	d42c      	bmi.n	80197f6 <__swsetup_r+0x82>
 801979c:	06dd      	lsls	r5, r3, #27
 801979e:	d411      	bmi.n	80197c4 <__swsetup_r+0x50>
 80197a0:	2309      	movs	r3, #9
 80197a2:	6033      	str	r3, [r6, #0]
 80197a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80197a8:	81a3      	strh	r3, [r4, #12]
 80197aa:	f04f 30ff 	mov.w	r0, #4294967295
 80197ae:	e03e      	b.n	801982e <__swsetup_r+0xba>
 80197b0:	4b25      	ldr	r3, [pc, #148]	; (8019848 <__swsetup_r+0xd4>)
 80197b2:	429c      	cmp	r4, r3
 80197b4:	d101      	bne.n	80197ba <__swsetup_r+0x46>
 80197b6:	68ac      	ldr	r4, [r5, #8]
 80197b8:	e7eb      	b.n	8019792 <__swsetup_r+0x1e>
 80197ba:	4b24      	ldr	r3, [pc, #144]	; (801984c <__swsetup_r+0xd8>)
 80197bc:	429c      	cmp	r4, r3
 80197be:	bf08      	it	eq
 80197c0:	68ec      	ldreq	r4, [r5, #12]
 80197c2:	e7e6      	b.n	8019792 <__swsetup_r+0x1e>
 80197c4:	0758      	lsls	r0, r3, #29
 80197c6:	d512      	bpl.n	80197ee <__swsetup_r+0x7a>
 80197c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80197ca:	b141      	cbz	r1, 80197de <__swsetup_r+0x6a>
 80197cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80197d0:	4299      	cmp	r1, r3
 80197d2:	d002      	beq.n	80197da <__swsetup_r+0x66>
 80197d4:	4630      	mov	r0, r6
 80197d6:	f7ff fd8f 	bl	80192f8 <_free_r>
 80197da:	2300      	movs	r3, #0
 80197dc:	6363      	str	r3, [r4, #52]	; 0x34
 80197de:	89a3      	ldrh	r3, [r4, #12]
 80197e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80197e4:	81a3      	strh	r3, [r4, #12]
 80197e6:	2300      	movs	r3, #0
 80197e8:	6063      	str	r3, [r4, #4]
 80197ea:	6923      	ldr	r3, [r4, #16]
 80197ec:	6023      	str	r3, [r4, #0]
 80197ee:	89a3      	ldrh	r3, [r4, #12]
 80197f0:	f043 0308 	orr.w	r3, r3, #8
 80197f4:	81a3      	strh	r3, [r4, #12]
 80197f6:	6923      	ldr	r3, [r4, #16]
 80197f8:	b94b      	cbnz	r3, 801980e <__swsetup_r+0x9a>
 80197fa:	89a3      	ldrh	r3, [r4, #12]
 80197fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019804:	d003      	beq.n	801980e <__swsetup_r+0x9a>
 8019806:	4621      	mov	r1, r4
 8019808:	4630      	mov	r0, r6
 801980a:	f000 fa2f 	bl	8019c6c <__smakebuf_r>
 801980e:	89a0      	ldrh	r0, [r4, #12]
 8019810:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019814:	f010 0301 	ands.w	r3, r0, #1
 8019818:	d00a      	beq.n	8019830 <__swsetup_r+0xbc>
 801981a:	2300      	movs	r3, #0
 801981c:	60a3      	str	r3, [r4, #8]
 801981e:	6963      	ldr	r3, [r4, #20]
 8019820:	425b      	negs	r3, r3
 8019822:	61a3      	str	r3, [r4, #24]
 8019824:	6923      	ldr	r3, [r4, #16]
 8019826:	b943      	cbnz	r3, 801983a <__swsetup_r+0xc6>
 8019828:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801982c:	d1ba      	bne.n	80197a4 <__swsetup_r+0x30>
 801982e:	bd70      	pop	{r4, r5, r6, pc}
 8019830:	0781      	lsls	r1, r0, #30
 8019832:	bf58      	it	pl
 8019834:	6963      	ldrpl	r3, [r4, #20]
 8019836:	60a3      	str	r3, [r4, #8]
 8019838:	e7f4      	b.n	8019824 <__swsetup_r+0xb0>
 801983a:	2000      	movs	r0, #0
 801983c:	e7f7      	b.n	801982e <__swsetup_r+0xba>
 801983e:	bf00      	nop
 8019840:	20000074 	.word	0x20000074
 8019844:	0801e22c 	.word	0x0801e22c
 8019848:	0801e24c 	.word	0x0801e24c
 801984c:	0801e20c 	.word	0x0801e20c

08019850 <__assert_func>:
 8019850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019852:	4614      	mov	r4, r2
 8019854:	461a      	mov	r2, r3
 8019856:	4b09      	ldr	r3, [pc, #36]	; (801987c <__assert_func+0x2c>)
 8019858:	681b      	ldr	r3, [r3, #0]
 801985a:	4605      	mov	r5, r0
 801985c:	68d8      	ldr	r0, [r3, #12]
 801985e:	b14c      	cbz	r4, 8019874 <__assert_func+0x24>
 8019860:	4b07      	ldr	r3, [pc, #28]	; (8019880 <__assert_func+0x30>)
 8019862:	9100      	str	r1, [sp, #0]
 8019864:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019868:	4906      	ldr	r1, [pc, #24]	; (8019884 <__assert_func+0x34>)
 801986a:	462b      	mov	r3, r5
 801986c:	f000 f9a6 	bl	8019bbc <fiprintf>
 8019870:	f7ff fcc8 	bl	8019204 <abort>
 8019874:	4b04      	ldr	r3, [pc, #16]	; (8019888 <__assert_func+0x38>)
 8019876:	461c      	mov	r4, r3
 8019878:	e7f3      	b.n	8019862 <__assert_func+0x12>
 801987a:	bf00      	nop
 801987c:	20000074 	.word	0x20000074
 8019880:	0801e1ce 	.word	0x0801e1ce
 8019884:	0801e1db 	.word	0x0801e1db
 8019888:	0801e209 	.word	0x0801e209

0801988c <__sflush_r>:
 801988c:	898a      	ldrh	r2, [r1, #12]
 801988e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019892:	4605      	mov	r5, r0
 8019894:	0710      	lsls	r0, r2, #28
 8019896:	460c      	mov	r4, r1
 8019898:	d458      	bmi.n	801994c <__sflush_r+0xc0>
 801989a:	684b      	ldr	r3, [r1, #4]
 801989c:	2b00      	cmp	r3, #0
 801989e:	dc05      	bgt.n	80198ac <__sflush_r+0x20>
 80198a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	dc02      	bgt.n	80198ac <__sflush_r+0x20>
 80198a6:	2000      	movs	r0, #0
 80198a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80198ae:	2e00      	cmp	r6, #0
 80198b0:	d0f9      	beq.n	80198a6 <__sflush_r+0x1a>
 80198b2:	2300      	movs	r3, #0
 80198b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80198b8:	682f      	ldr	r7, [r5, #0]
 80198ba:	602b      	str	r3, [r5, #0]
 80198bc:	d032      	beq.n	8019924 <__sflush_r+0x98>
 80198be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80198c0:	89a3      	ldrh	r3, [r4, #12]
 80198c2:	075a      	lsls	r2, r3, #29
 80198c4:	d505      	bpl.n	80198d2 <__sflush_r+0x46>
 80198c6:	6863      	ldr	r3, [r4, #4]
 80198c8:	1ac0      	subs	r0, r0, r3
 80198ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80198cc:	b10b      	cbz	r3, 80198d2 <__sflush_r+0x46>
 80198ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80198d0:	1ac0      	subs	r0, r0, r3
 80198d2:	2300      	movs	r3, #0
 80198d4:	4602      	mov	r2, r0
 80198d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80198d8:	6a21      	ldr	r1, [r4, #32]
 80198da:	4628      	mov	r0, r5
 80198dc:	47b0      	blx	r6
 80198de:	1c43      	adds	r3, r0, #1
 80198e0:	89a3      	ldrh	r3, [r4, #12]
 80198e2:	d106      	bne.n	80198f2 <__sflush_r+0x66>
 80198e4:	6829      	ldr	r1, [r5, #0]
 80198e6:	291d      	cmp	r1, #29
 80198e8:	d82c      	bhi.n	8019944 <__sflush_r+0xb8>
 80198ea:	4a2a      	ldr	r2, [pc, #168]	; (8019994 <__sflush_r+0x108>)
 80198ec:	40ca      	lsrs	r2, r1
 80198ee:	07d6      	lsls	r6, r2, #31
 80198f0:	d528      	bpl.n	8019944 <__sflush_r+0xb8>
 80198f2:	2200      	movs	r2, #0
 80198f4:	6062      	str	r2, [r4, #4]
 80198f6:	04d9      	lsls	r1, r3, #19
 80198f8:	6922      	ldr	r2, [r4, #16]
 80198fa:	6022      	str	r2, [r4, #0]
 80198fc:	d504      	bpl.n	8019908 <__sflush_r+0x7c>
 80198fe:	1c42      	adds	r2, r0, #1
 8019900:	d101      	bne.n	8019906 <__sflush_r+0x7a>
 8019902:	682b      	ldr	r3, [r5, #0]
 8019904:	b903      	cbnz	r3, 8019908 <__sflush_r+0x7c>
 8019906:	6560      	str	r0, [r4, #84]	; 0x54
 8019908:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801990a:	602f      	str	r7, [r5, #0]
 801990c:	2900      	cmp	r1, #0
 801990e:	d0ca      	beq.n	80198a6 <__sflush_r+0x1a>
 8019910:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019914:	4299      	cmp	r1, r3
 8019916:	d002      	beq.n	801991e <__sflush_r+0x92>
 8019918:	4628      	mov	r0, r5
 801991a:	f7ff fced 	bl	80192f8 <_free_r>
 801991e:	2000      	movs	r0, #0
 8019920:	6360      	str	r0, [r4, #52]	; 0x34
 8019922:	e7c1      	b.n	80198a8 <__sflush_r+0x1c>
 8019924:	6a21      	ldr	r1, [r4, #32]
 8019926:	2301      	movs	r3, #1
 8019928:	4628      	mov	r0, r5
 801992a:	47b0      	blx	r6
 801992c:	1c41      	adds	r1, r0, #1
 801992e:	d1c7      	bne.n	80198c0 <__sflush_r+0x34>
 8019930:	682b      	ldr	r3, [r5, #0]
 8019932:	2b00      	cmp	r3, #0
 8019934:	d0c4      	beq.n	80198c0 <__sflush_r+0x34>
 8019936:	2b1d      	cmp	r3, #29
 8019938:	d001      	beq.n	801993e <__sflush_r+0xb2>
 801993a:	2b16      	cmp	r3, #22
 801993c:	d101      	bne.n	8019942 <__sflush_r+0xb6>
 801993e:	602f      	str	r7, [r5, #0]
 8019940:	e7b1      	b.n	80198a6 <__sflush_r+0x1a>
 8019942:	89a3      	ldrh	r3, [r4, #12]
 8019944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019948:	81a3      	strh	r3, [r4, #12]
 801994a:	e7ad      	b.n	80198a8 <__sflush_r+0x1c>
 801994c:	690f      	ldr	r7, [r1, #16]
 801994e:	2f00      	cmp	r7, #0
 8019950:	d0a9      	beq.n	80198a6 <__sflush_r+0x1a>
 8019952:	0793      	lsls	r3, r2, #30
 8019954:	680e      	ldr	r6, [r1, #0]
 8019956:	bf08      	it	eq
 8019958:	694b      	ldreq	r3, [r1, #20]
 801995a:	600f      	str	r7, [r1, #0]
 801995c:	bf18      	it	ne
 801995e:	2300      	movne	r3, #0
 8019960:	eba6 0807 	sub.w	r8, r6, r7
 8019964:	608b      	str	r3, [r1, #8]
 8019966:	f1b8 0f00 	cmp.w	r8, #0
 801996a:	dd9c      	ble.n	80198a6 <__sflush_r+0x1a>
 801996c:	6a21      	ldr	r1, [r4, #32]
 801996e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019970:	4643      	mov	r3, r8
 8019972:	463a      	mov	r2, r7
 8019974:	4628      	mov	r0, r5
 8019976:	47b0      	blx	r6
 8019978:	2800      	cmp	r0, #0
 801997a:	dc06      	bgt.n	801998a <__sflush_r+0xfe>
 801997c:	89a3      	ldrh	r3, [r4, #12]
 801997e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019982:	81a3      	strh	r3, [r4, #12]
 8019984:	f04f 30ff 	mov.w	r0, #4294967295
 8019988:	e78e      	b.n	80198a8 <__sflush_r+0x1c>
 801998a:	4407      	add	r7, r0
 801998c:	eba8 0800 	sub.w	r8, r8, r0
 8019990:	e7e9      	b.n	8019966 <__sflush_r+0xda>
 8019992:	bf00      	nop
 8019994:	20400001 	.word	0x20400001

08019998 <_fflush_r>:
 8019998:	b538      	push	{r3, r4, r5, lr}
 801999a:	690b      	ldr	r3, [r1, #16]
 801999c:	4605      	mov	r5, r0
 801999e:	460c      	mov	r4, r1
 80199a0:	b913      	cbnz	r3, 80199a8 <_fflush_r+0x10>
 80199a2:	2500      	movs	r5, #0
 80199a4:	4628      	mov	r0, r5
 80199a6:	bd38      	pop	{r3, r4, r5, pc}
 80199a8:	b118      	cbz	r0, 80199b2 <_fflush_r+0x1a>
 80199aa:	6983      	ldr	r3, [r0, #24]
 80199ac:	b90b      	cbnz	r3, 80199b2 <_fflush_r+0x1a>
 80199ae:	f000 f887 	bl	8019ac0 <__sinit>
 80199b2:	4b14      	ldr	r3, [pc, #80]	; (8019a04 <_fflush_r+0x6c>)
 80199b4:	429c      	cmp	r4, r3
 80199b6:	d11b      	bne.n	80199f0 <_fflush_r+0x58>
 80199b8:	686c      	ldr	r4, [r5, #4]
 80199ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d0ef      	beq.n	80199a2 <_fflush_r+0xa>
 80199c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80199c4:	07d0      	lsls	r0, r2, #31
 80199c6:	d404      	bmi.n	80199d2 <_fflush_r+0x3a>
 80199c8:	0599      	lsls	r1, r3, #22
 80199ca:	d402      	bmi.n	80199d2 <_fflush_r+0x3a>
 80199cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80199ce:	f000 f927 	bl	8019c20 <__retarget_lock_acquire_recursive>
 80199d2:	4628      	mov	r0, r5
 80199d4:	4621      	mov	r1, r4
 80199d6:	f7ff ff59 	bl	801988c <__sflush_r>
 80199da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80199dc:	07da      	lsls	r2, r3, #31
 80199de:	4605      	mov	r5, r0
 80199e0:	d4e0      	bmi.n	80199a4 <_fflush_r+0xc>
 80199e2:	89a3      	ldrh	r3, [r4, #12]
 80199e4:	059b      	lsls	r3, r3, #22
 80199e6:	d4dd      	bmi.n	80199a4 <_fflush_r+0xc>
 80199e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80199ea:	f000 f91a 	bl	8019c22 <__retarget_lock_release_recursive>
 80199ee:	e7d9      	b.n	80199a4 <_fflush_r+0xc>
 80199f0:	4b05      	ldr	r3, [pc, #20]	; (8019a08 <_fflush_r+0x70>)
 80199f2:	429c      	cmp	r4, r3
 80199f4:	d101      	bne.n	80199fa <_fflush_r+0x62>
 80199f6:	68ac      	ldr	r4, [r5, #8]
 80199f8:	e7df      	b.n	80199ba <_fflush_r+0x22>
 80199fa:	4b04      	ldr	r3, [pc, #16]	; (8019a0c <_fflush_r+0x74>)
 80199fc:	429c      	cmp	r4, r3
 80199fe:	bf08      	it	eq
 8019a00:	68ec      	ldreq	r4, [r5, #12]
 8019a02:	e7da      	b.n	80199ba <_fflush_r+0x22>
 8019a04:	0801e22c 	.word	0x0801e22c
 8019a08:	0801e24c 	.word	0x0801e24c
 8019a0c:	0801e20c 	.word	0x0801e20c

08019a10 <std>:
 8019a10:	2300      	movs	r3, #0
 8019a12:	b510      	push	{r4, lr}
 8019a14:	4604      	mov	r4, r0
 8019a16:	e9c0 3300 	strd	r3, r3, [r0]
 8019a1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019a1e:	6083      	str	r3, [r0, #8]
 8019a20:	8181      	strh	r1, [r0, #12]
 8019a22:	6643      	str	r3, [r0, #100]	; 0x64
 8019a24:	81c2      	strh	r2, [r0, #14]
 8019a26:	6183      	str	r3, [r0, #24]
 8019a28:	4619      	mov	r1, r3
 8019a2a:	2208      	movs	r2, #8
 8019a2c:	305c      	adds	r0, #92	; 0x5c
 8019a2e:	f7ff fc5b 	bl	80192e8 <memset>
 8019a32:	4b05      	ldr	r3, [pc, #20]	; (8019a48 <std+0x38>)
 8019a34:	6263      	str	r3, [r4, #36]	; 0x24
 8019a36:	4b05      	ldr	r3, [pc, #20]	; (8019a4c <std+0x3c>)
 8019a38:	62a3      	str	r3, [r4, #40]	; 0x28
 8019a3a:	4b05      	ldr	r3, [pc, #20]	; (8019a50 <std+0x40>)
 8019a3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019a3e:	4b05      	ldr	r3, [pc, #20]	; (8019a54 <std+0x44>)
 8019a40:	6224      	str	r4, [r4, #32]
 8019a42:	6323      	str	r3, [r4, #48]	; 0x30
 8019a44:	bd10      	pop	{r4, pc}
 8019a46:	bf00      	nop
 8019a48:	0801a599 	.word	0x0801a599
 8019a4c:	0801a5bb 	.word	0x0801a5bb
 8019a50:	0801a5f3 	.word	0x0801a5f3
 8019a54:	0801a617 	.word	0x0801a617

08019a58 <_cleanup_r>:
 8019a58:	4901      	ldr	r1, [pc, #4]	; (8019a60 <_cleanup_r+0x8>)
 8019a5a:	f000 b8c1 	b.w	8019be0 <_fwalk_reent>
 8019a5e:	bf00      	nop
 8019a60:	08019999 	.word	0x08019999

08019a64 <__sfmoreglue>:
 8019a64:	b570      	push	{r4, r5, r6, lr}
 8019a66:	1e4a      	subs	r2, r1, #1
 8019a68:	2568      	movs	r5, #104	; 0x68
 8019a6a:	4355      	muls	r5, r2
 8019a6c:	460e      	mov	r6, r1
 8019a6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019a72:	f7ff fc91 	bl	8019398 <_malloc_r>
 8019a76:	4604      	mov	r4, r0
 8019a78:	b140      	cbz	r0, 8019a8c <__sfmoreglue+0x28>
 8019a7a:	2100      	movs	r1, #0
 8019a7c:	e9c0 1600 	strd	r1, r6, [r0]
 8019a80:	300c      	adds	r0, #12
 8019a82:	60a0      	str	r0, [r4, #8]
 8019a84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019a88:	f7ff fc2e 	bl	80192e8 <memset>
 8019a8c:	4620      	mov	r0, r4
 8019a8e:	bd70      	pop	{r4, r5, r6, pc}

08019a90 <__sfp_lock_acquire>:
 8019a90:	4801      	ldr	r0, [pc, #4]	; (8019a98 <__sfp_lock_acquire+0x8>)
 8019a92:	f000 b8c5 	b.w	8019c20 <__retarget_lock_acquire_recursive>
 8019a96:	bf00      	nop
 8019a98:	20006d50 	.word	0x20006d50

08019a9c <__sfp_lock_release>:
 8019a9c:	4801      	ldr	r0, [pc, #4]	; (8019aa4 <__sfp_lock_release+0x8>)
 8019a9e:	f000 b8c0 	b.w	8019c22 <__retarget_lock_release_recursive>
 8019aa2:	bf00      	nop
 8019aa4:	20006d50 	.word	0x20006d50

08019aa8 <__sinit_lock_acquire>:
 8019aa8:	4801      	ldr	r0, [pc, #4]	; (8019ab0 <__sinit_lock_acquire+0x8>)
 8019aaa:	f000 b8b9 	b.w	8019c20 <__retarget_lock_acquire_recursive>
 8019aae:	bf00      	nop
 8019ab0:	20006d4b 	.word	0x20006d4b

08019ab4 <__sinit_lock_release>:
 8019ab4:	4801      	ldr	r0, [pc, #4]	; (8019abc <__sinit_lock_release+0x8>)
 8019ab6:	f000 b8b4 	b.w	8019c22 <__retarget_lock_release_recursive>
 8019aba:	bf00      	nop
 8019abc:	20006d4b 	.word	0x20006d4b

08019ac0 <__sinit>:
 8019ac0:	b510      	push	{r4, lr}
 8019ac2:	4604      	mov	r4, r0
 8019ac4:	f7ff fff0 	bl	8019aa8 <__sinit_lock_acquire>
 8019ac8:	69a3      	ldr	r3, [r4, #24]
 8019aca:	b11b      	cbz	r3, 8019ad4 <__sinit+0x14>
 8019acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ad0:	f7ff bff0 	b.w	8019ab4 <__sinit_lock_release>
 8019ad4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019ad8:	6523      	str	r3, [r4, #80]	; 0x50
 8019ada:	4b13      	ldr	r3, [pc, #76]	; (8019b28 <__sinit+0x68>)
 8019adc:	4a13      	ldr	r2, [pc, #76]	; (8019b2c <__sinit+0x6c>)
 8019ade:	681b      	ldr	r3, [r3, #0]
 8019ae0:	62a2      	str	r2, [r4, #40]	; 0x28
 8019ae2:	42a3      	cmp	r3, r4
 8019ae4:	bf04      	itt	eq
 8019ae6:	2301      	moveq	r3, #1
 8019ae8:	61a3      	streq	r3, [r4, #24]
 8019aea:	4620      	mov	r0, r4
 8019aec:	f000 f820 	bl	8019b30 <__sfp>
 8019af0:	6060      	str	r0, [r4, #4]
 8019af2:	4620      	mov	r0, r4
 8019af4:	f000 f81c 	bl	8019b30 <__sfp>
 8019af8:	60a0      	str	r0, [r4, #8]
 8019afa:	4620      	mov	r0, r4
 8019afc:	f000 f818 	bl	8019b30 <__sfp>
 8019b00:	2200      	movs	r2, #0
 8019b02:	60e0      	str	r0, [r4, #12]
 8019b04:	2104      	movs	r1, #4
 8019b06:	6860      	ldr	r0, [r4, #4]
 8019b08:	f7ff ff82 	bl	8019a10 <std>
 8019b0c:	68a0      	ldr	r0, [r4, #8]
 8019b0e:	2201      	movs	r2, #1
 8019b10:	2109      	movs	r1, #9
 8019b12:	f7ff ff7d 	bl	8019a10 <std>
 8019b16:	68e0      	ldr	r0, [r4, #12]
 8019b18:	2202      	movs	r2, #2
 8019b1a:	2112      	movs	r1, #18
 8019b1c:	f7ff ff78 	bl	8019a10 <std>
 8019b20:	2301      	movs	r3, #1
 8019b22:	61a3      	str	r3, [r4, #24]
 8019b24:	e7d2      	b.n	8019acc <__sinit+0xc>
 8019b26:	bf00      	nop
 8019b28:	0801e154 	.word	0x0801e154
 8019b2c:	08019a59 	.word	0x08019a59

08019b30 <__sfp>:
 8019b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b32:	4607      	mov	r7, r0
 8019b34:	f7ff ffac 	bl	8019a90 <__sfp_lock_acquire>
 8019b38:	4b1e      	ldr	r3, [pc, #120]	; (8019bb4 <__sfp+0x84>)
 8019b3a:	681e      	ldr	r6, [r3, #0]
 8019b3c:	69b3      	ldr	r3, [r6, #24]
 8019b3e:	b913      	cbnz	r3, 8019b46 <__sfp+0x16>
 8019b40:	4630      	mov	r0, r6
 8019b42:	f7ff ffbd 	bl	8019ac0 <__sinit>
 8019b46:	3648      	adds	r6, #72	; 0x48
 8019b48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019b4c:	3b01      	subs	r3, #1
 8019b4e:	d503      	bpl.n	8019b58 <__sfp+0x28>
 8019b50:	6833      	ldr	r3, [r6, #0]
 8019b52:	b30b      	cbz	r3, 8019b98 <__sfp+0x68>
 8019b54:	6836      	ldr	r6, [r6, #0]
 8019b56:	e7f7      	b.n	8019b48 <__sfp+0x18>
 8019b58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019b5c:	b9d5      	cbnz	r5, 8019b94 <__sfp+0x64>
 8019b5e:	4b16      	ldr	r3, [pc, #88]	; (8019bb8 <__sfp+0x88>)
 8019b60:	60e3      	str	r3, [r4, #12]
 8019b62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019b66:	6665      	str	r5, [r4, #100]	; 0x64
 8019b68:	f000 f859 	bl	8019c1e <__retarget_lock_init_recursive>
 8019b6c:	f7ff ff96 	bl	8019a9c <__sfp_lock_release>
 8019b70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019b74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019b78:	6025      	str	r5, [r4, #0]
 8019b7a:	61a5      	str	r5, [r4, #24]
 8019b7c:	2208      	movs	r2, #8
 8019b7e:	4629      	mov	r1, r5
 8019b80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019b84:	f7ff fbb0 	bl	80192e8 <memset>
 8019b88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019b8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019b90:	4620      	mov	r0, r4
 8019b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b94:	3468      	adds	r4, #104	; 0x68
 8019b96:	e7d9      	b.n	8019b4c <__sfp+0x1c>
 8019b98:	2104      	movs	r1, #4
 8019b9a:	4638      	mov	r0, r7
 8019b9c:	f7ff ff62 	bl	8019a64 <__sfmoreglue>
 8019ba0:	4604      	mov	r4, r0
 8019ba2:	6030      	str	r0, [r6, #0]
 8019ba4:	2800      	cmp	r0, #0
 8019ba6:	d1d5      	bne.n	8019b54 <__sfp+0x24>
 8019ba8:	f7ff ff78 	bl	8019a9c <__sfp_lock_release>
 8019bac:	230c      	movs	r3, #12
 8019bae:	603b      	str	r3, [r7, #0]
 8019bb0:	e7ee      	b.n	8019b90 <__sfp+0x60>
 8019bb2:	bf00      	nop
 8019bb4:	0801e154 	.word	0x0801e154
 8019bb8:	ffff0001 	.word	0xffff0001

08019bbc <fiprintf>:
 8019bbc:	b40e      	push	{r1, r2, r3}
 8019bbe:	b503      	push	{r0, r1, lr}
 8019bc0:	4601      	mov	r1, r0
 8019bc2:	ab03      	add	r3, sp, #12
 8019bc4:	4805      	ldr	r0, [pc, #20]	; (8019bdc <fiprintf+0x20>)
 8019bc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8019bca:	6800      	ldr	r0, [r0, #0]
 8019bcc:	9301      	str	r3, [sp, #4]
 8019bce:	f000 fa1f 	bl	801a010 <_vfiprintf_r>
 8019bd2:	b002      	add	sp, #8
 8019bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8019bd8:	b003      	add	sp, #12
 8019bda:	4770      	bx	lr
 8019bdc:	20000074 	.word	0x20000074

08019be0 <_fwalk_reent>:
 8019be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019be4:	4606      	mov	r6, r0
 8019be6:	4688      	mov	r8, r1
 8019be8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019bec:	2700      	movs	r7, #0
 8019bee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019bf2:	f1b9 0901 	subs.w	r9, r9, #1
 8019bf6:	d505      	bpl.n	8019c04 <_fwalk_reent+0x24>
 8019bf8:	6824      	ldr	r4, [r4, #0]
 8019bfa:	2c00      	cmp	r4, #0
 8019bfc:	d1f7      	bne.n	8019bee <_fwalk_reent+0xe>
 8019bfe:	4638      	mov	r0, r7
 8019c00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c04:	89ab      	ldrh	r3, [r5, #12]
 8019c06:	2b01      	cmp	r3, #1
 8019c08:	d907      	bls.n	8019c1a <_fwalk_reent+0x3a>
 8019c0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019c0e:	3301      	adds	r3, #1
 8019c10:	d003      	beq.n	8019c1a <_fwalk_reent+0x3a>
 8019c12:	4629      	mov	r1, r5
 8019c14:	4630      	mov	r0, r6
 8019c16:	47c0      	blx	r8
 8019c18:	4307      	orrs	r7, r0
 8019c1a:	3568      	adds	r5, #104	; 0x68
 8019c1c:	e7e9      	b.n	8019bf2 <_fwalk_reent+0x12>

08019c1e <__retarget_lock_init_recursive>:
 8019c1e:	4770      	bx	lr

08019c20 <__retarget_lock_acquire_recursive>:
 8019c20:	4770      	bx	lr

08019c22 <__retarget_lock_release_recursive>:
 8019c22:	4770      	bx	lr

08019c24 <__swhatbuf_r>:
 8019c24:	b570      	push	{r4, r5, r6, lr}
 8019c26:	460e      	mov	r6, r1
 8019c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c2c:	2900      	cmp	r1, #0
 8019c2e:	b096      	sub	sp, #88	; 0x58
 8019c30:	4614      	mov	r4, r2
 8019c32:	461d      	mov	r5, r3
 8019c34:	da07      	bge.n	8019c46 <__swhatbuf_r+0x22>
 8019c36:	2300      	movs	r3, #0
 8019c38:	602b      	str	r3, [r5, #0]
 8019c3a:	89b3      	ldrh	r3, [r6, #12]
 8019c3c:	061a      	lsls	r2, r3, #24
 8019c3e:	d410      	bmi.n	8019c62 <__swhatbuf_r+0x3e>
 8019c40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019c44:	e00e      	b.n	8019c64 <__swhatbuf_r+0x40>
 8019c46:	466a      	mov	r2, sp
 8019c48:	f000 fd0c 	bl	801a664 <_fstat_r>
 8019c4c:	2800      	cmp	r0, #0
 8019c4e:	dbf2      	blt.n	8019c36 <__swhatbuf_r+0x12>
 8019c50:	9a01      	ldr	r2, [sp, #4]
 8019c52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019c56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019c5a:	425a      	negs	r2, r3
 8019c5c:	415a      	adcs	r2, r3
 8019c5e:	602a      	str	r2, [r5, #0]
 8019c60:	e7ee      	b.n	8019c40 <__swhatbuf_r+0x1c>
 8019c62:	2340      	movs	r3, #64	; 0x40
 8019c64:	2000      	movs	r0, #0
 8019c66:	6023      	str	r3, [r4, #0]
 8019c68:	b016      	add	sp, #88	; 0x58
 8019c6a:	bd70      	pop	{r4, r5, r6, pc}

08019c6c <__smakebuf_r>:
 8019c6c:	898b      	ldrh	r3, [r1, #12]
 8019c6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019c70:	079d      	lsls	r5, r3, #30
 8019c72:	4606      	mov	r6, r0
 8019c74:	460c      	mov	r4, r1
 8019c76:	d507      	bpl.n	8019c88 <__smakebuf_r+0x1c>
 8019c78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019c7c:	6023      	str	r3, [r4, #0]
 8019c7e:	6123      	str	r3, [r4, #16]
 8019c80:	2301      	movs	r3, #1
 8019c82:	6163      	str	r3, [r4, #20]
 8019c84:	b002      	add	sp, #8
 8019c86:	bd70      	pop	{r4, r5, r6, pc}
 8019c88:	ab01      	add	r3, sp, #4
 8019c8a:	466a      	mov	r2, sp
 8019c8c:	f7ff ffca 	bl	8019c24 <__swhatbuf_r>
 8019c90:	9900      	ldr	r1, [sp, #0]
 8019c92:	4605      	mov	r5, r0
 8019c94:	4630      	mov	r0, r6
 8019c96:	f7ff fb7f 	bl	8019398 <_malloc_r>
 8019c9a:	b948      	cbnz	r0, 8019cb0 <__smakebuf_r+0x44>
 8019c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019ca0:	059a      	lsls	r2, r3, #22
 8019ca2:	d4ef      	bmi.n	8019c84 <__smakebuf_r+0x18>
 8019ca4:	f023 0303 	bic.w	r3, r3, #3
 8019ca8:	f043 0302 	orr.w	r3, r3, #2
 8019cac:	81a3      	strh	r3, [r4, #12]
 8019cae:	e7e3      	b.n	8019c78 <__smakebuf_r+0xc>
 8019cb0:	4b0d      	ldr	r3, [pc, #52]	; (8019ce8 <__smakebuf_r+0x7c>)
 8019cb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8019cb4:	89a3      	ldrh	r3, [r4, #12]
 8019cb6:	6020      	str	r0, [r4, #0]
 8019cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019cbc:	81a3      	strh	r3, [r4, #12]
 8019cbe:	9b00      	ldr	r3, [sp, #0]
 8019cc0:	6163      	str	r3, [r4, #20]
 8019cc2:	9b01      	ldr	r3, [sp, #4]
 8019cc4:	6120      	str	r0, [r4, #16]
 8019cc6:	b15b      	cbz	r3, 8019ce0 <__smakebuf_r+0x74>
 8019cc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019ccc:	4630      	mov	r0, r6
 8019cce:	f000 fcdb 	bl	801a688 <_isatty_r>
 8019cd2:	b128      	cbz	r0, 8019ce0 <__smakebuf_r+0x74>
 8019cd4:	89a3      	ldrh	r3, [r4, #12]
 8019cd6:	f023 0303 	bic.w	r3, r3, #3
 8019cda:	f043 0301 	orr.w	r3, r3, #1
 8019cde:	81a3      	strh	r3, [r4, #12]
 8019ce0:	89a0      	ldrh	r0, [r4, #12]
 8019ce2:	4305      	orrs	r5, r0
 8019ce4:	81a5      	strh	r5, [r4, #12]
 8019ce6:	e7cd      	b.n	8019c84 <__smakebuf_r+0x18>
 8019ce8:	08019a59 	.word	0x08019a59

08019cec <__malloc_lock>:
 8019cec:	4801      	ldr	r0, [pc, #4]	; (8019cf4 <__malloc_lock+0x8>)
 8019cee:	f7ff bf97 	b.w	8019c20 <__retarget_lock_acquire_recursive>
 8019cf2:	bf00      	nop
 8019cf4:	20006d4c 	.word	0x20006d4c

08019cf8 <__malloc_unlock>:
 8019cf8:	4801      	ldr	r0, [pc, #4]	; (8019d00 <__malloc_unlock+0x8>)
 8019cfa:	f7ff bf92 	b.w	8019c22 <__retarget_lock_release_recursive>
 8019cfe:	bf00      	nop
 8019d00:	20006d4c 	.word	0x20006d4c

08019d04 <__ssputs_r>:
 8019d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d08:	688e      	ldr	r6, [r1, #8]
 8019d0a:	429e      	cmp	r6, r3
 8019d0c:	4682      	mov	sl, r0
 8019d0e:	460c      	mov	r4, r1
 8019d10:	4690      	mov	r8, r2
 8019d12:	461f      	mov	r7, r3
 8019d14:	d838      	bhi.n	8019d88 <__ssputs_r+0x84>
 8019d16:	898a      	ldrh	r2, [r1, #12]
 8019d18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019d1c:	d032      	beq.n	8019d84 <__ssputs_r+0x80>
 8019d1e:	6825      	ldr	r5, [r4, #0]
 8019d20:	6909      	ldr	r1, [r1, #16]
 8019d22:	eba5 0901 	sub.w	r9, r5, r1
 8019d26:	6965      	ldr	r5, [r4, #20]
 8019d28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019d2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019d30:	3301      	adds	r3, #1
 8019d32:	444b      	add	r3, r9
 8019d34:	106d      	asrs	r5, r5, #1
 8019d36:	429d      	cmp	r5, r3
 8019d38:	bf38      	it	cc
 8019d3a:	461d      	movcc	r5, r3
 8019d3c:	0553      	lsls	r3, r2, #21
 8019d3e:	d531      	bpl.n	8019da4 <__ssputs_r+0xa0>
 8019d40:	4629      	mov	r1, r5
 8019d42:	f7ff fb29 	bl	8019398 <_malloc_r>
 8019d46:	4606      	mov	r6, r0
 8019d48:	b950      	cbnz	r0, 8019d60 <__ssputs_r+0x5c>
 8019d4a:	230c      	movs	r3, #12
 8019d4c:	f8ca 3000 	str.w	r3, [sl]
 8019d50:	89a3      	ldrh	r3, [r4, #12]
 8019d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019d56:	81a3      	strh	r3, [r4, #12]
 8019d58:	f04f 30ff 	mov.w	r0, #4294967295
 8019d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d60:	6921      	ldr	r1, [r4, #16]
 8019d62:	464a      	mov	r2, r9
 8019d64:	f7ff fa98 	bl	8019298 <memcpy>
 8019d68:	89a3      	ldrh	r3, [r4, #12]
 8019d6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019d72:	81a3      	strh	r3, [r4, #12]
 8019d74:	6126      	str	r6, [r4, #16]
 8019d76:	6165      	str	r5, [r4, #20]
 8019d78:	444e      	add	r6, r9
 8019d7a:	eba5 0509 	sub.w	r5, r5, r9
 8019d7e:	6026      	str	r6, [r4, #0]
 8019d80:	60a5      	str	r5, [r4, #8]
 8019d82:	463e      	mov	r6, r7
 8019d84:	42be      	cmp	r6, r7
 8019d86:	d900      	bls.n	8019d8a <__ssputs_r+0x86>
 8019d88:	463e      	mov	r6, r7
 8019d8a:	4632      	mov	r2, r6
 8019d8c:	6820      	ldr	r0, [r4, #0]
 8019d8e:	4641      	mov	r1, r8
 8019d90:	f7ff fa90 	bl	80192b4 <memmove>
 8019d94:	68a3      	ldr	r3, [r4, #8]
 8019d96:	6822      	ldr	r2, [r4, #0]
 8019d98:	1b9b      	subs	r3, r3, r6
 8019d9a:	4432      	add	r2, r6
 8019d9c:	60a3      	str	r3, [r4, #8]
 8019d9e:	6022      	str	r2, [r4, #0]
 8019da0:	2000      	movs	r0, #0
 8019da2:	e7db      	b.n	8019d5c <__ssputs_r+0x58>
 8019da4:	462a      	mov	r2, r5
 8019da6:	f000 fc91 	bl	801a6cc <_realloc_r>
 8019daa:	4606      	mov	r6, r0
 8019dac:	2800      	cmp	r0, #0
 8019dae:	d1e1      	bne.n	8019d74 <__ssputs_r+0x70>
 8019db0:	6921      	ldr	r1, [r4, #16]
 8019db2:	4650      	mov	r0, sl
 8019db4:	f7ff faa0 	bl	80192f8 <_free_r>
 8019db8:	e7c7      	b.n	8019d4a <__ssputs_r+0x46>
	...

08019dbc <_svfiprintf_r>:
 8019dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dc0:	4698      	mov	r8, r3
 8019dc2:	898b      	ldrh	r3, [r1, #12]
 8019dc4:	061b      	lsls	r3, r3, #24
 8019dc6:	b09d      	sub	sp, #116	; 0x74
 8019dc8:	4607      	mov	r7, r0
 8019dca:	460d      	mov	r5, r1
 8019dcc:	4614      	mov	r4, r2
 8019dce:	d50e      	bpl.n	8019dee <_svfiprintf_r+0x32>
 8019dd0:	690b      	ldr	r3, [r1, #16]
 8019dd2:	b963      	cbnz	r3, 8019dee <_svfiprintf_r+0x32>
 8019dd4:	2140      	movs	r1, #64	; 0x40
 8019dd6:	f7ff fadf 	bl	8019398 <_malloc_r>
 8019dda:	6028      	str	r0, [r5, #0]
 8019ddc:	6128      	str	r0, [r5, #16]
 8019dde:	b920      	cbnz	r0, 8019dea <_svfiprintf_r+0x2e>
 8019de0:	230c      	movs	r3, #12
 8019de2:	603b      	str	r3, [r7, #0]
 8019de4:	f04f 30ff 	mov.w	r0, #4294967295
 8019de8:	e0d1      	b.n	8019f8e <_svfiprintf_r+0x1d2>
 8019dea:	2340      	movs	r3, #64	; 0x40
 8019dec:	616b      	str	r3, [r5, #20]
 8019dee:	2300      	movs	r3, #0
 8019df0:	9309      	str	r3, [sp, #36]	; 0x24
 8019df2:	2320      	movs	r3, #32
 8019df4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019df8:	f8cd 800c 	str.w	r8, [sp, #12]
 8019dfc:	2330      	movs	r3, #48	; 0x30
 8019dfe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019fa8 <_svfiprintf_r+0x1ec>
 8019e02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019e06:	f04f 0901 	mov.w	r9, #1
 8019e0a:	4623      	mov	r3, r4
 8019e0c:	469a      	mov	sl, r3
 8019e0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019e12:	b10a      	cbz	r2, 8019e18 <_svfiprintf_r+0x5c>
 8019e14:	2a25      	cmp	r2, #37	; 0x25
 8019e16:	d1f9      	bne.n	8019e0c <_svfiprintf_r+0x50>
 8019e18:	ebba 0b04 	subs.w	fp, sl, r4
 8019e1c:	d00b      	beq.n	8019e36 <_svfiprintf_r+0x7a>
 8019e1e:	465b      	mov	r3, fp
 8019e20:	4622      	mov	r2, r4
 8019e22:	4629      	mov	r1, r5
 8019e24:	4638      	mov	r0, r7
 8019e26:	f7ff ff6d 	bl	8019d04 <__ssputs_r>
 8019e2a:	3001      	adds	r0, #1
 8019e2c:	f000 80aa 	beq.w	8019f84 <_svfiprintf_r+0x1c8>
 8019e30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019e32:	445a      	add	r2, fp
 8019e34:	9209      	str	r2, [sp, #36]	; 0x24
 8019e36:	f89a 3000 	ldrb.w	r3, [sl]
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	f000 80a2 	beq.w	8019f84 <_svfiprintf_r+0x1c8>
 8019e40:	2300      	movs	r3, #0
 8019e42:	f04f 32ff 	mov.w	r2, #4294967295
 8019e46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019e4a:	f10a 0a01 	add.w	sl, sl, #1
 8019e4e:	9304      	str	r3, [sp, #16]
 8019e50:	9307      	str	r3, [sp, #28]
 8019e52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019e56:	931a      	str	r3, [sp, #104]	; 0x68
 8019e58:	4654      	mov	r4, sl
 8019e5a:	2205      	movs	r2, #5
 8019e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e60:	4851      	ldr	r0, [pc, #324]	; (8019fa8 <_svfiprintf_r+0x1ec>)
 8019e62:	f7e6 f9b5 	bl	80001d0 <memchr>
 8019e66:	9a04      	ldr	r2, [sp, #16]
 8019e68:	b9d8      	cbnz	r0, 8019ea2 <_svfiprintf_r+0xe6>
 8019e6a:	06d0      	lsls	r0, r2, #27
 8019e6c:	bf44      	itt	mi
 8019e6e:	2320      	movmi	r3, #32
 8019e70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019e74:	0711      	lsls	r1, r2, #28
 8019e76:	bf44      	itt	mi
 8019e78:	232b      	movmi	r3, #43	; 0x2b
 8019e7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019e7e:	f89a 3000 	ldrb.w	r3, [sl]
 8019e82:	2b2a      	cmp	r3, #42	; 0x2a
 8019e84:	d015      	beq.n	8019eb2 <_svfiprintf_r+0xf6>
 8019e86:	9a07      	ldr	r2, [sp, #28]
 8019e88:	4654      	mov	r4, sl
 8019e8a:	2000      	movs	r0, #0
 8019e8c:	f04f 0c0a 	mov.w	ip, #10
 8019e90:	4621      	mov	r1, r4
 8019e92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019e96:	3b30      	subs	r3, #48	; 0x30
 8019e98:	2b09      	cmp	r3, #9
 8019e9a:	d94e      	bls.n	8019f3a <_svfiprintf_r+0x17e>
 8019e9c:	b1b0      	cbz	r0, 8019ecc <_svfiprintf_r+0x110>
 8019e9e:	9207      	str	r2, [sp, #28]
 8019ea0:	e014      	b.n	8019ecc <_svfiprintf_r+0x110>
 8019ea2:	eba0 0308 	sub.w	r3, r0, r8
 8019ea6:	fa09 f303 	lsl.w	r3, r9, r3
 8019eaa:	4313      	orrs	r3, r2
 8019eac:	9304      	str	r3, [sp, #16]
 8019eae:	46a2      	mov	sl, r4
 8019eb0:	e7d2      	b.n	8019e58 <_svfiprintf_r+0x9c>
 8019eb2:	9b03      	ldr	r3, [sp, #12]
 8019eb4:	1d19      	adds	r1, r3, #4
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	9103      	str	r1, [sp, #12]
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	bfbb      	ittet	lt
 8019ebe:	425b      	neglt	r3, r3
 8019ec0:	f042 0202 	orrlt.w	r2, r2, #2
 8019ec4:	9307      	strge	r3, [sp, #28]
 8019ec6:	9307      	strlt	r3, [sp, #28]
 8019ec8:	bfb8      	it	lt
 8019eca:	9204      	strlt	r2, [sp, #16]
 8019ecc:	7823      	ldrb	r3, [r4, #0]
 8019ece:	2b2e      	cmp	r3, #46	; 0x2e
 8019ed0:	d10c      	bne.n	8019eec <_svfiprintf_r+0x130>
 8019ed2:	7863      	ldrb	r3, [r4, #1]
 8019ed4:	2b2a      	cmp	r3, #42	; 0x2a
 8019ed6:	d135      	bne.n	8019f44 <_svfiprintf_r+0x188>
 8019ed8:	9b03      	ldr	r3, [sp, #12]
 8019eda:	1d1a      	adds	r2, r3, #4
 8019edc:	681b      	ldr	r3, [r3, #0]
 8019ede:	9203      	str	r2, [sp, #12]
 8019ee0:	2b00      	cmp	r3, #0
 8019ee2:	bfb8      	it	lt
 8019ee4:	f04f 33ff 	movlt.w	r3, #4294967295
 8019ee8:	3402      	adds	r4, #2
 8019eea:	9305      	str	r3, [sp, #20]
 8019eec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019fb8 <_svfiprintf_r+0x1fc>
 8019ef0:	7821      	ldrb	r1, [r4, #0]
 8019ef2:	2203      	movs	r2, #3
 8019ef4:	4650      	mov	r0, sl
 8019ef6:	f7e6 f96b 	bl	80001d0 <memchr>
 8019efa:	b140      	cbz	r0, 8019f0e <_svfiprintf_r+0x152>
 8019efc:	2340      	movs	r3, #64	; 0x40
 8019efe:	eba0 000a 	sub.w	r0, r0, sl
 8019f02:	fa03 f000 	lsl.w	r0, r3, r0
 8019f06:	9b04      	ldr	r3, [sp, #16]
 8019f08:	4303      	orrs	r3, r0
 8019f0a:	3401      	adds	r4, #1
 8019f0c:	9304      	str	r3, [sp, #16]
 8019f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f12:	4826      	ldr	r0, [pc, #152]	; (8019fac <_svfiprintf_r+0x1f0>)
 8019f14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019f18:	2206      	movs	r2, #6
 8019f1a:	f7e6 f959 	bl	80001d0 <memchr>
 8019f1e:	2800      	cmp	r0, #0
 8019f20:	d038      	beq.n	8019f94 <_svfiprintf_r+0x1d8>
 8019f22:	4b23      	ldr	r3, [pc, #140]	; (8019fb0 <_svfiprintf_r+0x1f4>)
 8019f24:	bb1b      	cbnz	r3, 8019f6e <_svfiprintf_r+0x1b2>
 8019f26:	9b03      	ldr	r3, [sp, #12]
 8019f28:	3307      	adds	r3, #7
 8019f2a:	f023 0307 	bic.w	r3, r3, #7
 8019f2e:	3308      	adds	r3, #8
 8019f30:	9303      	str	r3, [sp, #12]
 8019f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f34:	4433      	add	r3, r6
 8019f36:	9309      	str	r3, [sp, #36]	; 0x24
 8019f38:	e767      	b.n	8019e0a <_svfiprintf_r+0x4e>
 8019f3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8019f3e:	460c      	mov	r4, r1
 8019f40:	2001      	movs	r0, #1
 8019f42:	e7a5      	b.n	8019e90 <_svfiprintf_r+0xd4>
 8019f44:	2300      	movs	r3, #0
 8019f46:	3401      	adds	r4, #1
 8019f48:	9305      	str	r3, [sp, #20]
 8019f4a:	4619      	mov	r1, r3
 8019f4c:	f04f 0c0a 	mov.w	ip, #10
 8019f50:	4620      	mov	r0, r4
 8019f52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019f56:	3a30      	subs	r2, #48	; 0x30
 8019f58:	2a09      	cmp	r2, #9
 8019f5a:	d903      	bls.n	8019f64 <_svfiprintf_r+0x1a8>
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	d0c5      	beq.n	8019eec <_svfiprintf_r+0x130>
 8019f60:	9105      	str	r1, [sp, #20]
 8019f62:	e7c3      	b.n	8019eec <_svfiprintf_r+0x130>
 8019f64:	fb0c 2101 	mla	r1, ip, r1, r2
 8019f68:	4604      	mov	r4, r0
 8019f6a:	2301      	movs	r3, #1
 8019f6c:	e7f0      	b.n	8019f50 <_svfiprintf_r+0x194>
 8019f6e:	ab03      	add	r3, sp, #12
 8019f70:	9300      	str	r3, [sp, #0]
 8019f72:	462a      	mov	r2, r5
 8019f74:	4b0f      	ldr	r3, [pc, #60]	; (8019fb4 <_svfiprintf_r+0x1f8>)
 8019f76:	a904      	add	r1, sp, #16
 8019f78:	4638      	mov	r0, r7
 8019f7a:	f3af 8000 	nop.w
 8019f7e:	1c42      	adds	r2, r0, #1
 8019f80:	4606      	mov	r6, r0
 8019f82:	d1d6      	bne.n	8019f32 <_svfiprintf_r+0x176>
 8019f84:	89ab      	ldrh	r3, [r5, #12]
 8019f86:	065b      	lsls	r3, r3, #25
 8019f88:	f53f af2c 	bmi.w	8019de4 <_svfiprintf_r+0x28>
 8019f8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019f8e:	b01d      	add	sp, #116	; 0x74
 8019f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f94:	ab03      	add	r3, sp, #12
 8019f96:	9300      	str	r3, [sp, #0]
 8019f98:	462a      	mov	r2, r5
 8019f9a:	4b06      	ldr	r3, [pc, #24]	; (8019fb4 <_svfiprintf_r+0x1f8>)
 8019f9c:	a904      	add	r1, sp, #16
 8019f9e:	4638      	mov	r0, r7
 8019fa0:	f000 f9d4 	bl	801a34c <_printf_i>
 8019fa4:	e7eb      	b.n	8019f7e <_svfiprintf_r+0x1c2>
 8019fa6:	bf00      	nop
 8019fa8:	0801e26c 	.word	0x0801e26c
 8019fac:	0801e276 	.word	0x0801e276
 8019fb0:	00000000 	.word	0x00000000
 8019fb4:	08019d05 	.word	0x08019d05
 8019fb8:	0801e272 	.word	0x0801e272

08019fbc <__sfputc_r>:
 8019fbc:	6893      	ldr	r3, [r2, #8]
 8019fbe:	3b01      	subs	r3, #1
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	b410      	push	{r4}
 8019fc4:	6093      	str	r3, [r2, #8]
 8019fc6:	da08      	bge.n	8019fda <__sfputc_r+0x1e>
 8019fc8:	6994      	ldr	r4, [r2, #24]
 8019fca:	42a3      	cmp	r3, r4
 8019fcc:	db01      	blt.n	8019fd2 <__sfputc_r+0x16>
 8019fce:	290a      	cmp	r1, #10
 8019fd0:	d103      	bne.n	8019fda <__sfputc_r+0x1e>
 8019fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019fd6:	f7ff bb7b 	b.w	80196d0 <__swbuf_r>
 8019fda:	6813      	ldr	r3, [r2, #0]
 8019fdc:	1c58      	adds	r0, r3, #1
 8019fde:	6010      	str	r0, [r2, #0]
 8019fe0:	7019      	strb	r1, [r3, #0]
 8019fe2:	4608      	mov	r0, r1
 8019fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019fe8:	4770      	bx	lr

08019fea <__sfputs_r>:
 8019fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fec:	4606      	mov	r6, r0
 8019fee:	460f      	mov	r7, r1
 8019ff0:	4614      	mov	r4, r2
 8019ff2:	18d5      	adds	r5, r2, r3
 8019ff4:	42ac      	cmp	r4, r5
 8019ff6:	d101      	bne.n	8019ffc <__sfputs_r+0x12>
 8019ff8:	2000      	movs	r0, #0
 8019ffa:	e007      	b.n	801a00c <__sfputs_r+0x22>
 8019ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a000:	463a      	mov	r2, r7
 801a002:	4630      	mov	r0, r6
 801a004:	f7ff ffda 	bl	8019fbc <__sfputc_r>
 801a008:	1c43      	adds	r3, r0, #1
 801a00a:	d1f3      	bne.n	8019ff4 <__sfputs_r+0xa>
 801a00c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a010 <_vfiprintf_r>:
 801a010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a014:	460d      	mov	r5, r1
 801a016:	b09d      	sub	sp, #116	; 0x74
 801a018:	4614      	mov	r4, r2
 801a01a:	4698      	mov	r8, r3
 801a01c:	4606      	mov	r6, r0
 801a01e:	b118      	cbz	r0, 801a028 <_vfiprintf_r+0x18>
 801a020:	6983      	ldr	r3, [r0, #24]
 801a022:	b90b      	cbnz	r3, 801a028 <_vfiprintf_r+0x18>
 801a024:	f7ff fd4c 	bl	8019ac0 <__sinit>
 801a028:	4b89      	ldr	r3, [pc, #548]	; (801a250 <_vfiprintf_r+0x240>)
 801a02a:	429d      	cmp	r5, r3
 801a02c:	d11b      	bne.n	801a066 <_vfiprintf_r+0x56>
 801a02e:	6875      	ldr	r5, [r6, #4]
 801a030:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a032:	07d9      	lsls	r1, r3, #31
 801a034:	d405      	bmi.n	801a042 <_vfiprintf_r+0x32>
 801a036:	89ab      	ldrh	r3, [r5, #12]
 801a038:	059a      	lsls	r2, r3, #22
 801a03a:	d402      	bmi.n	801a042 <_vfiprintf_r+0x32>
 801a03c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a03e:	f7ff fdef 	bl	8019c20 <__retarget_lock_acquire_recursive>
 801a042:	89ab      	ldrh	r3, [r5, #12]
 801a044:	071b      	lsls	r3, r3, #28
 801a046:	d501      	bpl.n	801a04c <_vfiprintf_r+0x3c>
 801a048:	692b      	ldr	r3, [r5, #16]
 801a04a:	b9eb      	cbnz	r3, 801a088 <_vfiprintf_r+0x78>
 801a04c:	4629      	mov	r1, r5
 801a04e:	4630      	mov	r0, r6
 801a050:	f7ff fb90 	bl	8019774 <__swsetup_r>
 801a054:	b1c0      	cbz	r0, 801a088 <_vfiprintf_r+0x78>
 801a056:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a058:	07dc      	lsls	r4, r3, #31
 801a05a:	d50e      	bpl.n	801a07a <_vfiprintf_r+0x6a>
 801a05c:	f04f 30ff 	mov.w	r0, #4294967295
 801a060:	b01d      	add	sp, #116	; 0x74
 801a062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a066:	4b7b      	ldr	r3, [pc, #492]	; (801a254 <_vfiprintf_r+0x244>)
 801a068:	429d      	cmp	r5, r3
 801a06a:	d101      	bne.n	801a070 <_vfiprintf_r+0x60>
 801a06c:	68b5      	ldr	r5, [r6, #8]
 801a06e:	e7df      	b.n	801a030 <_vfiprintf_r+0x20>
 801a070:	4b79      	ldr	r3, [pc, #484]	; (801a258 <_vfiprintf_r+0x248>)
 801a072:	429d      	cmp	r5, r3
 801a074:	bf08      	it	eq
 801a076:	68f5      	ldreq	r5, [r6, #12]
 801a078:	e7da      	b.n	801a030 <_vfiprintf_r+0x20>
 801a07a:	89ab      	ldrh	r3, [r5, #12]
 801a07c:	0598      	lsls	r0, r3, #22
 801a07e:	d4ed      	bmi.n	801a05c <_vfiprintf_r+0x4c>
 801a080:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a082:	f7ff fdce 	bl	8019c22 <__retarget_lock_release_recursive>
 801a086:	e7e9      	b.n	801a05c <_vfiprintf_r+0x4c>
 801a088:	2300      	movs	r3, #0
 801a08a:	9309      	str	r3, [sp, #36]	; 0x24
 801a08c:	2320      	movs	r3, #32
 801a08e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a092:	f8cd 800c 	str.w	r8, [sp, #12]
 801a096:	2330      	movs	r3, #48	; 0x30
 801a098:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a25c <_vfiprintf_r+0x24c>
 801a09c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a0a0:	f04f 0901 	mov.w	r9, #1
 801a0a4:	4623      	mov	r3, r4
 801a0a6:	469a      	mov	sl, r3
 801a0a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a0ac:	b10a      	cbz	r2, 801a0b2 <_vfiprintf_r+0xa2>
 801a0ae:	2a25      	cmp	r2, #37	; 0x25
 801a0b0:	d1f9      	bne.n	801a0a6 <_vfiprintf_r+0x96>
 801a0b2:	ebba 0b04 	subs.w	fp, sl, r4
 801a0b6:	d00b      	beq.n	801a0d0 <_vfiprintf_r+0xc0>
 801a0b8:	465b      	mov	r3, fp
 801a0ba:	4622      	mov	r2, r4
 801a0bc:	4629      	mov	r1, r5
 801a0be:	4630      	mov	r0, r6
 801a0c0:	f7ff ff93 	bl	8019fea <__sfputs_r>
 801a0c4:	3001      	adds	r0, #1
 801a0c6:	f000 80aa 	beq.w	801a21e <_vfiprintf_r+0x20e>
 801a0ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a0cc:	445a      	add	r2, fp
 801a0ce:	9209      	str	r2, [sp, #36]	; 0x24
 801a0d0:	f89a 3000 	ldrb.w	r3, [sl]
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	f000 80a2 	beq.w	801a21e <_vfiprintf_r+0x20e>
 801a0da:	2300      	movs	r3, #0
 801a0dc:	f04f 32ff 	mov.w	r2, #4294967295
 801a0e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a0e4:	f10a 0a01 	add.w	sl, sl, #1
 801a0e8:	9304      	str	r3, [sp, #16]
 801a0ea:	9307      	str	r3, [sp, #28]
 801a0ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a0f0:	931a      	str	r3, [sp, #104]	; 0x68
 801a0f2:	4654      	mov	r4, sl
 801a0f4:	2205      	movs	r2, #5
 801a0f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a0fa:	4858      	ldr	r0, [pc, #352]	; (801a25c <_vfiprintf_r+0x24c>)
 801a0fc:	f7e6 f868 	bl	80001d0 <memchr>
 801a100:	9a04      	ldr	r2, [sp, #16]
 801a102:	b9d8      	cbnz	r0, 801a13c <_vfiprintf_r+0x12c>
 801a104:	06d1      	lsls	r1, r2, #27
 801a106:	bf44      	itt	mi
 801a108:	2320      	movmi	r3, #32
 801a10a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a10e:	0713      	lsls	r3, r2, #28
 801a110:	bf44      	itt	mi
 801a112:	232b      	movmi	r3, #43	; 0x2b
 801a114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a118:	f89a 3000 	ldrb.w	r3, [sl]
 801a11c:	2b2a      	cmp	r3, #42	; 0x2a
 801a11e:	d015      	beq.n	801a14c <_vfiprintf_r+0x13c>
 801a120:	9a07      	ldr	r2, [sp, #28]
 801a122:	4654      	mov	r4, sl
 801a124:	2000      	movs	r0, #0
 801a126:	f04f 0c0a 	mov.w	ip, #10
 801a12a:	4621      	mov	r1, r4
 801a12c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a130:	3b30      	subs	r3, #48	; 0x30
 801a132:	2b09      	cmp	r3, #9
 801a134:	d94e      	bls.n	801a1d4 <_vfiprintf_r+0x1c4>
 801a136:	b1b0      	cbz	r0, 801a166 <_vfiprintf_r+0x156>
 801a138:	9207      	str	r2, [sp, #28]
 801a13a:	e014      	b.n	801a166 <_vfiprintf_r+0x156>
 801a13c:	eba0 0308 	sub.w	r3, r0, r8
 801a140:	fa09 f303 	lsl.w	r3, r9, r3
 801a144:	4313      	orrs	r3, r2
 801a146:	9304      	str	r3, [sp, #16]
 801a148:	46a2      	mov	sl, r4
 801a14a:	e7d2      	b.n	801a0f2 <_vfiprintf_r+0xe2>
 801a14c:	9b03      	ldr	r3, [sp, #12]
 801a14e:	1d19      	adds	r1, r3, #4
 801a150:	681b      	ldr	r3, [r3, #0]
 801a152:	9103      	str	r1, [sp, #12]
 801a154:	2b00      	cmp	r3, #0
 801a156:	bfbb      	ittet	lt
 801a158:	425b      	neglt	r3, r3
 801a15a:	f042 0202 	orrlt.w	r2, r2, #2
 801a15e:	9307      	strge	r3, [sp, #28]
 801a160:	9307      	strlt	r3, [sp, #28]
 801a162:	bfb8      	it	lt
 801a164:	9204      	strlt	r2, [sp, #16]
 801a166:	7823      	ldrb	r3, [r4, #0]
 801a168:	2b2e      	cmp	r3, #46	; 0x2e
 801a16a:	d10c      	bne.n	801a186 <_vfiprintf_r+0x176>
 801a16c:	7863      	ldrb	r3, [r4, #1]
 801a16e:	2b2a      	cmp	r3, #42	; 0x2a
 801a170:	d135      	bne.n	801a1de <_vfiprintf_r+0x1ce>
 801a172:	9b03      	ldr	r3, [sp, #12]
 801a174:	1d1a      	adds	r2, r3, #4
 801a176:	681b      	ldr	r3, [r3, #0]
 801a178:	9203      	str	r2, [sp, #12]
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	bfb8      	it	lt
 801a17e:	f04f 33ff 	movlt.w	r3, #4294967295
 801a182:	3402      	adds	r4, #2
 801a184:	9305      	str	r3, [sp, #20]
 801a186:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a26c <_vfiprintf_r+0x25c>
 801a18a:	7821      	ldrb	r1, [r4, #0]
 801a18c:	2203      	movs	r2, #3
 801a18e:	4650      	mov	r0, sl
 801a190:	f7e6 f81e 	bl	80001d0 <memchr>
 801a194:	b140      	cbz	r0, 801a1a8 <_vfiprintf_r+0x198>
 801a196:	2340      	movs	r3, #64	; 0x40
 801a198:	eba0 000a 	sub.w	r0, r0, sl
 801a19c:	fa03 f000 	lsl.w	r0, r3, r0
 801a1a0:	9b04      	ldr	r3, [sp, #16]
 801a1a2:	4303      	orrs	r3, r0
 801a1a4:	3401      	adds	r4, #1
 801a1a6:	9304      	str	r3, [sp, #16]
 801a1a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a1ac:	482c      	ldr	r0, [pc, #176]	; (801a260 <_vfiprintf_r+0x250>)
 801a1ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a1b2:	2206      	movs	r2, #6
 801a1b4:	f7e6 f80c 	bl	80001d0 <memchr>
 801a1b8:	2800      	cmp	r0, #0
 801a1ba:	d03f      	beq.n	801a23c <_vfiprintf_r+0x22c>
 801a1bc:	4b29      	ldr	r3, [pc, #164]	; (801a264 <_vfiprintf_r+0x254>)
 801a1be:	bb1b      	cbnz	r3, 801a208 <_vfiprintf_r+0x1f8>
 801a1c0:	9b03      	ldr	r3, [sp, #12]
 801a1c2:	3307      	adds	r3, #7
 801a1c4:	f023 0307 	bic.w	r3, r3, #7
 801a1c8:	3308      	adds	r3, #8
 801a1ca:	9303      	str	r3, [sp, #12]
 801a1cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1ce:	443b      	add	r3, r7
 801a1d0:	9309      	str	r3, [sp, #36]	; 0x24
 801a1d2:	e767      	b.n	801a0a4 <_vfiprintf_r+0x94>
 801a1d4:	fb0c 3202 	mla	r2, ip, r2, r3
 801a1d8:	460c      	mov	r4, r1
 801a1da:	2001      	movs	r0, #1
 801a1dc:	e7a5      	b.n	801a12a <_vfiprintf_r+0x11a>
 801a1de:	2300      	movs	r3, #0
 801a1e0:	3401      	adds	r4, #1
 801a1e2:	9305      	str	r3, [sp, #20]
 801a1e4:	4619      	mov	r1, r3
 801a1e6:	f04f 0c0a 	mov.w	ip, #10
 801a1ea:	4620      	mov	r0, r4
 801a1ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a1f0:	3a30      	subs	r2, #48	; 0x30
 801a1f2:	2a09      	cmp	r2, #9
 801a1f4:	d903      	bls.n	801a1fe <_vfiprintf_r+0x1ee>
 801a1f6:	2b00      	cmp	r3, #0
 801a1f8:	d0c5      	beq.n	801a186 <_vfiprintf_r+0x176>
 801a1fa:	9105      	str	r1, [sp, #20]
 801a1fc:	e7c3      	b.n	801a186 <_vfiprintf_r+0x176>
 801a1fe:	fb0c 2101 	mla	r1, ip, r1, r2
 801a202:	4604      	mov	r4, r0
 801a204:	2301      	movs	r3, #1
 801a206:	e7f0      	b.n	801a1ea <_vfiprintf_r+0x1da>
 801a208:	ab03      	add	r3, sp, #12
 801a20a:	9300      	str	r3, [sp, #0]
 801a20c:	462a      	mov	r2, r5
 801a20e:	4b16      	ldr	r3, [pc, #88]	; (801a268 <_vfiprintf_r+0x258>)
 801a210:	a904      	add	r1, sp, #16
 801a212:	4630      	mov	r0, r6
 801a214:	f3af 8000 	nop.w
 801a218:	4607      	mov	r7, r0
 801a21a:	1c78      	adds	r0, r7, #1
 801a21c:	d1d6      	bne.n	801a1cc <_vfiprintf_r+0x1bc>
 801a21e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a220:	07d9      	lsls	r1, r3, #31
 801a222:	d405      	bmi.n	801a230 <_vfiprintf_r+0x220>
 801a224:	89ab      	ldrh	r3, [r5, #12]
 801a226:	059a      	lsls	r2, r3, #22
 801a228:	d402      	bmi.n	801a230 <_vfiprintf_r+0x220>
 801a22a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a22c:	f7ff fcf9 	bl	8019c22 <__retarget_lock_release_recursive>
 801a230:	89ab      	ldrh	r3, [r5, #12]
 801a232:	065b      	lsls	r3, r3, #25
 801a234:	f53f af12 	bmi.w	801a05c <_vfiprintf_r+0x4c>
 801a238:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a23a:	e711      	b.n	801a060 <_vfiprintf_r+0x50>
 801a23c:	ab03      	add	r3, sp, #12
 801a23e:	9300      	str	r3, [sp, #0]
 801a240:	462a      	mov	r2, r5
 801a242:	4b09      	ldr	r3, [pc, #36]	; (801a268 <_vfiprintf_r+0x258>)
 801a244:	a904      	add	r1, sp, #16
 801a246:	4630      	mov	r0, r6
 801a248:	f000 f880 	bl	801a34c <_printf_i>
 801a24c:	e7e4      	b.n	801a218 <_vfiprintf_r+0x208>
 801a24e:	bf00      	nop
 801a250:	0801e22c 	.word	0x0801e22c
 801a254:	0801e24c 	.word	0x0801e24c
 801a258:	0801e20c 	.word	0x0801e20c
 801a25c:	0801e26c 	.word	0x0801e26c
 801a260:	0801e276 	.word	0x0801e276
 801a264:	00000000 	.word	0x00000000
 801a268:	08019feb 	.word	0x08019feb
 801a26c:	0801e272 	.word	0x0801e272

0801a270 <_printf_common>:
 801a270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a274:	4616      	mov	r6, r2
 801a276:	4699      	mov	r9, r3
 801a278:	688a      	ldr	r2, [r1, #8]
 801a27a:	690b      	ldr	r3, [r1, #16]
 801a27c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a280:	4293      	cmp	r3, r2
 801a282:	bfb8      	it	lt
 801a284:	4613      	movlt	r3, r2
 801a286:	6033      	str	r3, [r6, #0]
 801a288:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a28c:	4607      	mov	r7, r0
 801a28e:	460c      	mov	r4, r1
 801a290:	b10a      	cbz	r2, 801a296 <_printf_common+0x26>
 801a292:	3301      	adds	r3, #1
 801a294:	6033      	str	r3, [r6, #0]
 801a296:	6823      	ldr	r3, [r4, #0]
 801a298:	0699      	lsls	r1, r3, #26
 801a29a:	bf42      	ittt	mi
 801a29c:	6833      	ldrmi	r3, [r6, #0]
 801a29e:	3302      	addmi	r3, #2
 801a2a0:	6033      	strmi	r3, [r6, #0]
 801a2a2:	6825      	ldr	r5, [r4, #0]
 801a2a4:	f015 0506 	ands.w	r5, r5, #6
 801a2a8:	d106      	bne.n	801a2b8 <_printf_common+0x48>
 801a2aa:	f104 0a19 	add.w	sl, r4, #25
 801a2ae:	68e3      	ldr	r3, [r4, #12]
 801a2b0:	6832      	ldr	r2, [r6, #0]
 801a2b2:	1a9b      	subs	r3, r3, r2
 801a2b4:	42ab      	cmp	r3, r5
 801a2b6:	dc26      	bgt.n	801a306 <_printf_common+0x96>
 801a2b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a2bc:	1e13      	subs	r3, r2, #0
 801a2be:	6822      	ldr	r2, [r4, #0]
 801a2c0:	bf18      	it	ne
 801a2c2:	2301      	movne	r3, #1
 801a2c4:	0692      	lsls	r2, r2, #26
 801a2c6:	d42b      	bmi.n	801a320 <_printf_common+0xb0>
 801a2c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a2cc:	4649      	mov	r1, r9
 801a2ce:	4638      	mov	r0, r7
 801a2d0:	47c0      	blx	r8
 801a2d2:	3001      	adds	r0, #1
 801a2d4:	d01e      	beq.n	801a314 <_printf_common+0xa4>
 801a2d6:	6823      	ldr	r3, [r4, #0]
 801a2d8:	68e5      	ldr	r5, [r4, #12]
 801a2da:	6832      	ldr	r2, [r6, #0]
 801a2dc:	f003 0306 	and.w	r3, r3, #6
 801a2e0:	2b04      	cmp	r3, #4
 801a2e2:	bf08      	it	eq
 801a2e4:	1aad      	subeq	r5, r5, r2
 801a2e6:	68a3      	ldr	r3, [r4, #8]
 801a2e8:	6922      	ldr	r2, [r4, #16]
 801a2ea:	bf0c      	ite	eq
 801a2ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a2f0:	2500      	movne	r5, #0
 801a2f2:	4293      	cmp	r3, r2
 801a2f4:	bfc4      	itt	gt
 801a2f6:	1a9b      	subgt	r3, r3, r2
 801a2f8:	18ed      	addgt	r5, r5, r3
 801a2fa:	2600      	movs	r6, #0
 801a2fc:	341a      	adds	r4, #26
 801a2fe:	42b5      	cmp	r5, r6
 801a300:	d11a      	bne.n	801a338 <_printf_common+0xc8>
 801a302:	2000      	movs	r0, #0
 801a304:	e008      	b.n	801a318 <_printf_common+0xa8>
 801a306:	2301      	movs	r3, #1
 801a308:	4652      	mov	r2, sl
 801a30a:	4649      	mov	r1, r9
 801a30c:	4638      	mov	r0, r7
 801a30e:	47c0      	blx	r8
 801a310:	3001      	adds	r0, #1
 801a312:	d103      	bne.n	801a31c <_printf_common+0xac>
 801a314:	f04f 30ff 	mov.w	r0, #4294967295
 801a318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a31c:	3501      	adds	r5, #1
 801a31e:	e7c6      	b.n	801a2ae <_printf_common+0x3e>
 801a320:	18e1      	adds	r1, r4, r3
 801a322:	1c5a      	adds	r2, r3, #1
 801a324:	2030      	movs	r0, #48	; 0x30
 801a326:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a32a:	4422      	add	r2, r4
 801a32c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a330:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a334:	3302      	adds	r3, #2
 801a336:	e7c7      	b.n	801a2c8 <_printf_common+0x58>
 801a338:	2301      	movs	r3, #1
 801a33a:	4622      	mov	r2, r4
 801a33c:	4649      	mov	r1, r9
 801a33e:	4638      	mov	r0, r7
 801a340:	47c0      	blx	r8
 801a342:	3001      	adds	r0, #1
 801a344:	d0e6      	beq.n	801a314 <_printf_common+0xa4>
 801a346:	3601      	adds	r6, #1
 801a348:	e7d9      	b.n	801a2fe <_printf_common+0x8e>
	...

0801a34c <_printf_i>:
 801a34c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a350:	460c      	mov	r4, r1
 801a352:	4691      	mov	r9, r2
 801a354:	7e27      	ldrb	r7, [r4, #24]
 801a356:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a358:	2f78      	cmp	r7, #120	; 0x78
 801a35a:	4680      	mov	r8, r0
 801a35c:	469a      	mov	sl, r3
 801a35e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a362:	d807      	bhi.n	801a374 <_printf_i+0x28>
 801a364:	2f62      	cmp	r7, #98	; 0x62
 801a366:	d80a      	bhi.n	801a37e <_printf_i+0x32>
 801a368:	2f00      	cmp	r7, #0
 801a36a:	f000 80d8 	beq.w	801a51e <_printf_i+0x1d2>
 801a36e:	2f58      	cmp	r7, #88	; 0x58
 801a370:	f000 80a3 	beq.w	801a4ba <_printf_i+0x16e>
 801a374:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a378:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a37c:	e03a      	b.n	801a3f4 <_printf_i+0xa8>
 801a37e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a382:	2b15      	cmp	r3, #21
 801a384:	d8f6      	bhi.n	801a374 <_printf_i+0x28>
 801a386:	a001      	add	r0, pc, #4	; (adr r0, 801a38c <_printf_i+0x40>)
 801a388:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801a38c:	0801a3e5 	.word	0x0801a3e5
 801a390:	0801a3f9 	.word	0x0801a3f9
 801a394:	0801a375 	.word	0x0801a375
 801a398:	0801a375 	.word	0x0801a375
 801a39c:	0801a375 	.word	0x0801a375
 801a3a0:	0801a375 	.word	0x0801a375
 801a3a4:	0801a3f9 	.word	0x0801a3f9
 801a3a8:	0801a375 	.word	0x0801a375
 801a3ac:	0801a375 	.word	0x0801a375
 801a3b0:	0801a375 	.word	0x0801a375
 801a3b4:	0801a375 	.word	0x0801a375
 801a3b8:	0801a505 	.word	0x0801a505
 801a3bc:	0801a429 	.word	0x0801a429
 801a3c0:	0801a4e7 	.word	0x0801a4e7
 801a3c4:	0801a375 	.word	0x0801a375
 801a3c8:	0801a375 	.word	0x0801a375
 801a3cc:	0801a527 	.word	0x0801a527
 801a3d0:	0801a375 	.word	0x0801a375
 801a3d4:	0801a429 	.word	0x0801a429
 801a3d8:	0801a375 	.word	0x0801a375
 801a3dc:	0801a375 	.word	0x0801a375
 801a3e0:	0801a4ef 	.word	0x0801a4ef
 801a3e4:	680b      	ldr	r3, [r1, #0]
 801a3e6:	1d1a      	adds	r2, r3, #4
 801a3e8:	681b      	ldr	r3, [r3, #0]
 801a3ea:	600a      	str	r2, [r1, #0]
 801a3ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a3f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a3f4:	2301      	movs	r3, #1
 801a3f6:	e0a3      	b.n	801a540 <_printf_i+0x1f4>
 801a3f8:	6825      	ldr	r5, [r4, #0]
 801a3fa:	6808      	ldr	r0, [r1, #0]
 801a3fc:	062e      	lsls	r6, r5, #24
 801a3fe:	f100 0304 	add.w	r3, r0, #4
 801a402:	d50a      	bpl.n	801a41a <_printf_i+0xce>
 801a404:	6805      	ldr	r5, [r0, #0]
 801a406:	600b      	str	r3, [r1, #0]
 801a408:	2d00      	cmp	r5, #0
 801a40a:	da03      	bge.n	801a414 <_printf_i+0xc8>
 801a40c:	232d      	movs	r3, #45	; 0x2d
 801a40e:	426d      	negs	r5, r5
 801a410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a414:	485e      	ldr	r0, [pc, #376]	; (801a590 <_printf_i+0x244>)
 801a416:	230a      	movs	r3, #10
 801a418:	e019      	b.n	801a44e <_printf_i+0x102>
 801a41a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801a41e:	6805      	ldr	r5, [r0, #0]
 801a420:	600b      	str	r3, [r1, #0]
 801a422:	bf18      	it	ne
 801a424:	b22d      	sxthne	r5, r5
 801a426:	e7ef      	b.n	801a408 <_printf_i+0xbc>
 801a428:	680b      	ldr	r3, [r1, #0]
 801a42a:	6825      	ldr	r5, [r4, #0]
 801a42c:	1d18      	adds	r0, r3, #4
 801a42e:	6008      	str	r0, [r1, #0]
 801a430:	0628      	lsls	r0, r5, #24
 801a432:	d501      	bpl.n	801a438 <_printf_i+0xec>
 801a434:	681d      	ldr	r5, [r3, #0]
 801a436:	e002      	b.n	801a43e <_printf_i+0xf2>
 801a438:	0669      	lsls	r1, r5, #25
 801a43a:	d5fb      	bpl.n	801a434 <_printf_i+0xe8>
 801a43c:	881d      	ldrh	r5, [r3, #0]
 801a43e:	4854      	ldr	r0, [pc, #336]	; (801a590 <_printf_i+0x244>)
 801a440:	2f6f      	cmp	r7, #111	; 0x6f
 801a442:	bf0c      	ite	eq
 801a444:	2308      	moveq	r3, #8
 801a446:	230a      	movne	r3, #10
 801a448:	2100      	movs	r1, #0
 801a44a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a44e:	6866      	ldr	r6, [r4, #4]
 801a450:	60a6      	str	r6, [r4, #8]
 801a452:	2e00      	cmp	r6, #0
 801a454:	bfa2      	ittt	ge
 801a456:	6821      	ldrge	r1, [r4, #0]
 801a458:	f021 0104 	bicge.w	r1, r1, #4
 801a45c:	6021      	strge	r1, [r4, #0]
 801a45e:	b90d      	cbnz	r5, 801a464 <_printf_i+0x118>
 801a460:	2e00      	cmp	r6, #0
 801a462:	d04d      	beq.n	801a500 <_printf_i+0x1b4>
 801a464:	4616      	mov	r6, r2
 801a466:	fbb5 f1f3 	udiv	r1, r5, r3
 801a46a:	fb03 5711 	mls	r7, r3, r1, r5
 801a46e:	5dc7      	ldrb	r7, [r0, r7]
 801a470:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a474:	462f      	mov	r7, r5
 801a476:	42bb      	cmp	r3, r7
 801a478:	460d      	mov	r5, r1
 801a47a:	d9f4      	bls.n	801a466 <_printf_i+0x11a>
 801a47c:	2b08      	cmp	r3, #8
 801a47e:	d10b      	bne.n	801a498 <_printf_i+0x14c>
 801a480:	6823      	ldr	r3, [r4, #0]
 801a482:	07df      	lsls	r7, r3, #31
 801a484:	d508      	bpl.n	801a498 <_printf_i+0x14c>
 801a486:	6923      	ldr	r3, [r4, #16]
 801a488:	6861      	ldr	r1, [r4, #4]
 801a48a:	4299      	cmp	r1, r3
 801a48c:	bfde      	ittt	le
 801a48e:	2330      	movle	r3, #48	; 0x30
 801a490:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a494:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a498:	1b92      	subs	r2, r2, r6
 801a49a:	6122      	str	r2, [r4, #16]
 801a49c:	f8cd a000 	str.w	sl, [sp]
 801a4a0:	464b      	mov	r3, r9
 801a4a2:	aa03      	add	r2, sp, #12
 801a4a4:	4621      	mov	r1, r4
 801a4a6:	4640      	mov	r0, r8
 801a4a8:	f7ff fee2 	bl	801a270 <_printf_common>
 801a4ac:	3001      	adds	r0, #1
 801a4ae:	d14c      	bne.n	801a54a <_printf_i+0x1fe>
 801a4b0:	f04f 30ff 	mov.w	r0, #4294967295
 801a4b4:	b004      	add	sp, #16
 801a4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a4ba:	4835      	ldr	r0, [pc, #212]	; (801a590 <_printf_i+0x244>)
 801a4bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a4c0:	6823      	ldr	r3, [r4, #0]
 801a4c2:	680e      	ldr	r6, [r1, #0]
 801a4c4:	061f      	lsls	r7, r3, #24
 801a4c6:	f856 5b04 	ldr.w	r5, [r6], #4
 801a4ca:	600e      	str	r6, [r1, #0]
 801a4cc:	d514      	bpl.n	801a4f8 <_printf_i+0x1ac>
 801a4ce:	07d9      	lsls	r1, r3, #31
 801a4d0:	bf44      	itt	mi
 801a4d2:	f043 0320 	orrmi.w	r3, r3, #32
 801a4d6:	6023      	strmi	r3, [r4, #0]
 801a4d8:	b91d      	cbnz	r5, 801a4e2 <_printf_i+0x196>
 801a4da:	6823      	ldr	r3, [r4, #0]
 801a4dc:	f023 0320 	bic.w	r3, r3, #32
 801a4e0:	6023      	str	r3, [r4, #0]
 801a4e2:	2310      	movs	r3, #16
 801a4e4:	e7b0      	b.n	801a448 <_printf_i+0xfc>
 801a4e6:	6823      	ldr	r3, [r4, #0]
 801a4e8:	f043 0320 	orr.w	r3, r3, #32
 801a4ec:	6023      	str	r3, [r4, #0]
 801a4ee:	2378      	movs	r3, #120	; 0x78
 801a4f0:	4828      	ldr	r0, [pc, #160]	; (801a594 <_printf_i+0x248>)
 801a4f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a4f6:	e7e3      	b.n	801a4c0 <_printf_i+0x174>
 801a4f8:	065e      	lsls	r6, r3, #25
 801a4fa:	bf48      	it	mi
 801a4fc:	b2ad      	uxthmi	r5, r5
 801a4fe:	e7e6      	b.n	801a4ce <_printf_i+0x182>
 801a500:	4616      	mov	r6, r2
 801a502:	e7bb      	b.n	801a47c <_printf_i+0x130>
 801a504:	680b      	ldr	r3, [r1, #0]
 801a506:	6826      	ldr	r6, [r4, #0]
 801a508:	6960      	ldr	r0, [r4, #20]
 801a50a:	1d1d      	adds	r5, r3, #4
 801a50c:	600d      	str	r5, [r1, #0]
 801a50e:	0635      	lsls	r5, r6, #24
 801a510:	681b      	ldr	r3, [r3, #0]
 801a512:	d501      	bpl.n	801a518 <_printf_i+0x1cc>
 801a514:	6018      	str	r0, [r3, #0]
 801a516:	e002      	b.n	801a51e <_printf_i+0x1d2>
 801a518:	0671      	lsls	r1, r6, #25
 801a51a:	d5fb      	bpl.n	801a514 <_printf_i+0x1c8>
 801a51c:	8018      	strh	r0, [r3, #0]
 801a51e:	2300      	movs	r3, #0
 801a520:	6123      	str	r3, [r4, #16]
 801a522:	4616      	mov	r6, r2
 801a524:	e7ba      	b.n	801a49c <_printf_i+0x150>
 801a526:	680b      	ldr	r3, [r1, #0]
 801a528:	1d1a      	adds	r2, r3, #4
 801a52a:	600a      	str	r2, [r1, #0]
 801a52c:	681e      	ldr	r6, [r3, #0]
 801a52e:	6862      	ldr	r2, [r4, #4]
 801a530:	2100      	movs	r1, #0
 801a532:	4630      	mov	r0, r6
 801a534:	f7e5 fe4c 	bl	80001d0 <memchr>
 801a538:	b108      	cbz	r0, 801a53e <_printf_i+0x1f2>
 801a53a:	1b80      	subs	r0, r0, r6
 801a53c:	6060      	str	r0, [r4, #4]
 801a53e:	6863      	ldr	r3, [r4, #4]
 801a540:	6123      	str	r3, [r4, #16]
 801a542:	2300      	movs	r3, #0
 801a544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a548:	e7a8      	b.n	801a49c <_printf_i+0x150>
 801a54a:	6923      	ldr	r3, [r4, #16]
 801a54c:	4632      	mov	r2, r6
 801a54e:	4649      	mov	r1, r9
 801a550:	4640      	mov	r0, r8
 801a552:	47d0      	blx	sl
 801a554:	3001      	adds	r0, #1
 801a556:	d0ab      	beq.n	801a4b0 <_printf_i+0x164>
 801a558:	6823      	ldr	r3, [r4, #0]
 801a55a:	079b      	lsls	r3, r3, #30
 801a55c:	d413      	bmi.n	801a586 <_printf_i+0x23a>
 801a55e:	68e0      	ldr	r0, [r4, #12]
 801a560:	9b03      	ldr	r3, [sp, #12]
 801a562:	4298      	cmp	r0, r3
 801a564:	bfb8      	it	lt
 801a566:	4618      	movlt	r0, r3
 801a568:	e7a4      	b.n	801a4b4 <_printf_i+0x168>
 801a56a:	2301      	movs	r3, #1
 801a56c:	4632      	mov	r2, r6
 801a56e:	4649      	mov	r1, r9
 801a570:	4640      	mov	r0, r8
 801a572:	47d0      	blx	sl
 801a574:	3001      	adds	r0, #1
 801a576:	d09b      	beq.n	801a4b0 <_printf_i+0x164>
 801a578:	3501      	adds	r5, #1
 801a57a:	68e3      	ldr	r3, [r4, #12]
 801a57c:	9903      	ldr	r1, [sp, #12]
 801a57e:	1a5b      	subs	r3, r3, r1
 801a580:	42ab      	cmp	r3, r5
 801a582:	dcf2      	bgt.n	801a56a <_printf_i+0x21e>
 801a584:	e7eb      	b.n	801a55e <_printf_i+0x212>
 801a586:	2500      	movs	r5, #0
 801a588:	f104 0619 	add.w	r6, r4, #25
 801a58c:	e7f5      	b.n	801a57a <_printf_i+0x22e>
 801a58e:	bf00      	nop
 801a590:	0801e27d 	.word	0x0801e27d
 801a594:	0801e28e 	.word	0x0801e28e

0801a598 <__sread>:
 801a598:	b510      	push	{r4, lr}
 801a59a:	460c      	mov	r4, r1
 801a59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5a0:	f000 f8ba 	bl	801a718 <_read_r>
 801a5a4:	2800      	cmp	r0, #0
 801a5a6:	bfab      	itete	ge
 801a5a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a5aa:	89a3      	ldrhlt	r3, [r4, #12]
 801a5ac:	181b      	addge	r3, r3, r0
 801a5ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a5b2:	bfac      	ite	ge
 801a5b4:	6563      	strge	r3, [r4, #84]	; 0x54
 801a5b6:	81a3      	strhlt	r3, [r4, #12]
 801a5b8:	bd10      	pop	{r4, pc}

0801a5ba <__swrite>:
 801a5ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5be:	461f      	mov	r7, r3
 801a5c0:	898b      	ldrh	r3, [r1, #12]
 801a5c2:	05db      	lsls	r3, r3, #23
 801a5c4:	4605      	mov	r5, r0
 801a5c6:	460c      	mov	r4, r1
 801a5c8:	4616      	mov	r6, r2
 801a5ca:	d505      	bpl.n	801a5d8 <__swrite+0x1e>
 801a5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5d0:	2302      	movs	r3, #2
 801a5d2:	2200      	movs	r2, #0
 801a5d4:	f000 f868 	bl	801a6a8 <_lseek_r>
 801a5d8:	89a3      	ldrh	r3, [r4, #12]
 801a5da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a5de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a5e2:	81a3      	strh	r3, [r4, #12]
 801a5e4:	4632      	mov	r2, r6
 801a5e6:	463b      	mov	r3, r7
 801a5e8:	4628      	mov	r0, r5
 801a5ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a5ee:	f000 b817 	b.w	801a620 <_write_r>

0801a5f2 <__sseek>:
 801a5f2:	b510      	push	{r4, lr}
 801a5f4:	460c      	mov	r4, r1
 801a5f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5fa:	f000 f855 	bl	801a6a8 <_lseek_r>
 801a5fe:	1c43      	adds	r3, r0, #1
 801a600:	89a3      	ldrh	r3, [r4, #12]
 801a602:	bf15      	itete	ne
 801a604:	6560      	strne	r0, [r4, #84]	; 0x54
 801a606:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a60a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a60e:	81a3      	strheq	r3, [r4, #12]
 801a610:	bf18      	it	ne
 801a612:	81a3      	strhne	r3, [r4, #12]
 801a614:	bd10      	pop	{r4, pc}

0801a616 <__sclose>:
 801a616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a61a:	f000 b813 	b.w	801a644 <_close_r>
	...

0801a620 <_write_r>:
 801a620:	b538      	push	{r3, r4, r5, lr}
 801a622:	4d07      	ldr	r5, [pc, #28]	; (801a640 <_write_r+0x20>)
 801a624:	4604      	mov	r4, r0
 801a626:	4608      	mov	r0, r1
 801a628:	4611      	mov	r1, r2
 801a62a:	2200      	movs	r2, #0
 801a62c:	602a      	str	r2, [r5, #0]
 801a62e:	461a      	mov	r2, r3
 801a630:	f7ea fcb3 	bl	8004f9a <_write>
 801a634:	1c43      	adds	r3, r0, #1
 801a636:	d102      	bne.n	801a63e <_write_r+0x1e>
 801a638:	682b      	ldr	r3, [r5, #0]
 801a63a:	b103      	cbz	r3, 801a63e <_write_r+0x1e>
 801a63c:	6023      	str	r3, [r4, #0]
 801a63e:	bd38      	pop	{r3, r4, r5, pc}
 801a640:	20006d44 	.word	0x20006d44

0801a644 <_close_r>:
 801a644:	b538      	push	{r3, r4, r5, lr}
 801a646:	4d06      	ldr	r5, [pc, #24]	; (801a660 <_close_r+0x1c>)
 801a648:	2300      	movs	r3, #0
 801a64a:	4604      	mov	r4, r0
 801a64c:	4608      	mov	r0, r1
 801a64e:	602b      	str	r3, [r5, #0]
 801a650:	f7ea fcbf 	bl	8004fd2 <_close>
 801a654:	1c43      	adds	r3, r0, #1
 801a656:	d102      	bne.n	801a65e <_close_r+0x1a>
 801a658:	682b      	ldr	r3, [r5, #0]
 801a65a:	b103      	cbz	r3, 801a65e <_close_r+0x1a>
 801a65c:	6023      	str	r3, [r4, #0]
 801a65e:	bd38      	pop	{r3, r4, r5, pc}
 801a660:	20006d44 	.word	0x20006d44

0801a664 <_fstat_r>:
 801a664:	b538      	push	{r3, r4, r5, lr}
 801a666:	4d07      	ldr	r5, [pc, #28]	; (801a684 <_fstat_r+0x20>)
 801a668:	2300      	movs	r3, #0
 801a66a:	4604      	mov	r4, r0
 801a66c:	4608      	mov	r0, r1
 801a66e:	4611      	mov	r1, r2
 801a670:	602b      	str	r3, [r5, #0]
 801a672:	f7ea fcba 	bl	8004fea <_fstat>
 801a676:	1c43      	adds	r3, r0, #1
 801a678:	d102      	bne.n	801a680 <_fstat_r+0x1c>
 801a67a:	682b      	ldr	r3, [r5, #0]
 801a67c:	b103      	cbz	r3, 801a680 <_fstat_r+0x1c>
 801a67e:	6023      	str	r3, [r4, #0]
 801a680:	bd38      	pop	{r3, r4, r5, pc}
 801a682:	bf00      	nop
 801a684:	20006d44 	.word	0x20006d44

0801a688 <_isatty_r>:
 801a688:	b538      	push	{r3, r4, r5, lr}
 801a68a:	4d06      	ldr	r5, [pc, #24]	; (801a6a4 <_isatty_r+0x1c>)
 801a68c:	2300      	movs	r3, #0
 801a68e:	4604      	mov	r4, r0
 801a690:	4608      	mov	r0, r1
 801a692:	602b      	str	r3, [r5, #0]
 801a694:	f7ea fcb9 	bl	800500a <_isatty>
 801a698:	1c43      	adds	r3, r0, #1
 801a69a:	d102      	bne.n	801a6a2 <_isatty_r+0x1a>
 801a69c:	682b      	ldr	r3, [r5, #0]
 801a69e:	b103      	cbz	r3, 801a6a2 <_isatty_r+0x1a>
 801a6a0:	6023      	str	r3, [r4, #0]
 801a6a2:	bd38      	pop	{r3, r4, r5, pc}
 801a6a4:	20006d44 	.word	0x20006d44

0801a6a8 <_lseek_r>:
 801a6a8:	b538      	push	{r3, r4, r5, lr}
 801a6aa:	4d07      	ldr	r5, [pc, #28]	; (801a6c8 <_lseek_r+0x20>)
 801a6ac:	4604      	mov	r4, r0
 801a6ae:	4608      	mov	r0, r1
 801a6b0:	4611      	mov	r1, r2
 801a6b2:	2200      	movs	r2, #0
 801a6b4:	602a      	str	r2, [r5, #0]
 801a6b6:	461a      	mov	r2, r3
 801a6b8:	f7ea fcb2 	bl	8005020 <_lseek>
 801a6bc:	1c43      	adds	r3, r0, #1
 801a6be:	d102      	bne.n	801a6c6 <_lseek_r+0x1e>
 801a6c0:	682b      	ldr	r3, [r5, #0]
 801a6c2:	b103      	cbz	r3, 801a6c6 <_lseek_r+0x1e>
 801a6c4:	6023      	str	r3, [r4, #0]
 801a6c6:	bd38      	pop	{r3, r4, r5, pc}
 801a6c8:	20006d44 	.word	0x20006d44

0801a6cc <_realloc_r>:
 801a6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6ce:	4607      	mov	r7, r0
 801a6d0:	4614      	mov	r4, r2
 801a6d2:	460e      	mov	r6, r1
 801a6d4:	b921      	cbnz	r1, 801a6e0 <_realloc_r+0x14>
 801a6d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a6da:	4611      	mov	r1, r2
 801a6dc:	f7fe be5c 	b.w	8019398 <_malloc_r>
 801a6e0:	b922      	cbnz	r2, 801a6ec <_realloc_r+0x20>
 801a6e2:	f7fe fe09 	bl	80192f8 <_free_r>
 801a6e6:	4625      	mov	r5, r4
 801a6e8:	4628      	mov	r0, r5
 801a6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a6ec:	f000 f826 	bl	801a73c <_malloc_usable_size_r>
 801a6f0:	42a0      	cmp	r0, r4
 801a6f2:	d20f      	bcs.n	801a714 <_realloc_r+0x48>
 801a6f4:	4621      	mov	r1, r4
 801a6f6:	4638      	mov	r0, r7
 801a6f8:	f7fe fe4e 	bl	8019398 <_malloc_r>
 801a6fc:	4605      	mov	r5, r0
 801a6fe:	2800      	cmp	r0, #0
 801a700:	d0f2      	beq.n	801a6e8 <_realloc_r+0x1c>
 801a702:	4631      	mov	r1, r6
 801a704:	4622      	mov	r2, r4
 801a706:	f7fe fdc7 	bl	8019298 <memcpy>
 801a70a:	4631      	mov	r1, r6
 801a70c:	4638      	mov	r0, r7
 801a70e:	f7fe fdf3 	bl	80192f8 <_free_r>
 801a712:	e7e9      	b.n	801a6e8 <_realloc_r+0x1c>
 801a714:	4635      	mov	r5, r6
 801a716:	e7e7      	b.n	801a6e8 <_realloc_r+0x1c>

0801a718 <_read_r>:
 801a718:	b538      	push	{r3, r4, r5, lr}
 801a71a:	4d07      	ldr	r5, [pc, #28]	; (801a738 <_read_r+0x20>)
 801a71c:	4604      	mov	r4, r0
 801a71e:	4608      	mov	r0, r1
 801a720:	4611      	mov	r1, r2
 801a722:	2200      	movs	r2, #0
 801a724:	602a      	str	r2, [r5, #0]
 801a726:	461a      	mov	r2, r3
 801a728:	f7ea fc1a 	bl	8004f60 <_read>
 801a72c:	1c43      	adds	r3, r0, #1
 801a72e:	d102      	bne.n	801a736 <_read_r+0x1e>
 801a730:	682b      	ldr	r3, [r5, #0]
 801a732:	b103      	cbz	r3, 801a736 <_read_r+0x1e>
 801a734:	6023      	str	r3, [r4, #0]
 801a736:	bd38      	pop	{r3, r4, r5, pc}
 801a738:	20006d44 	.word	0x20006d44

0801a73c <_malloc_usable_size_r>:
 801a73c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a740:	1f18      	subs	r0, r3, #4
 801a742:	2b00      	cmp	r3, #0
 801a744:	bfbc      	itt	lt
 801a746:	580b      	ldrlt	r3, [r1, r0]
 801a748:	18c0      	addlt	r0, r0, r3
 801a74a:	4770      	bx	lr

0801a74c <_init>:
 801a74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a74e:	bf00      	nop
 801a750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a752:	bc08      	pop	{r3}
 801a754:	469e      	mov	lr, r3
 801a756:	4770      	bx	lr

0801a758 <_fini>:
 801a758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a75a:	bf00      	nop
 801a75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a75e:	bc08      	pop	{r3}
 801a760:	469e      	mov	lr, r3
 801a762:	4770      	bx	lr
